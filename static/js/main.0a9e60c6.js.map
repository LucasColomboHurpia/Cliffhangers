{"version":3,"file":"static/js/main.0a9e60c6.js","mappings":"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","sources":["../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/load script","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/jsonp chunk loading","reportWebVitals.ts","../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@remix-run/router/router.ts","../node_modules/react-router/lib/context.ts","../node_modules/react-router/lib/hooks.tsx","../node_modules/react-router/lib/components.tsx","../node_modules/react-router-dom/dom.ts","../node_modules/react-router-dom/index.tsx","assets/GameBackground1366.svg","assets/GameBackground1920.svg","assets/GameBackground2560.svg","assets/YellowRulerRotate.svg","assets/YodelyGuy.svg","components/GameScreen/constants.ts","context/GameContext.tsx","components/GameScreen/GameScreen.tsx","context/ProductContext.tsx","assets/ProductItem.svg","components/ProductScreen/ProductItem/ProductItem.tsx","assets/CrossIcon.svg","components/SettingsModal/ConfirmationPopup/ConfirmationPopup.tsx","components/SettingsModal/SettingsModal.tsx","assets/Settings.svg","components/ProductScreen/ProdutScreen.tsx","App.tsx","index.tsx"],"sourcesContent":["/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;\nfunction Lg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function Ng(a){var b=a._init;return b(a._payload)}\nfunction Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=Qg(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),\nc.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Sg(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}\nfunction ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null)}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a}}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a)}\nfunction hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function mh(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q}}\nfunction sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}\nfunction yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(uh);G(uh,b)}function zh(){E(uh);E(vh);E(wh)}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c))}function Bh(a){vh.current===a&&(E(uh),E(vh))}var L=Uf(0);\nfunction Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Dh=[];\nfunction Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e)}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}\nfunction Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else{if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a}return O}\nfunction Vh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function Yh(){}\nfunction Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e)}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a)}function ai(a,b,c){return c(function(){ei(b)&&fi(a)})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1)}\nfunction hi(a){var b=Th();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return[b.memoizedState,a]}\nfunction bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d)}\nfunction li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d)}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}\nfunction pi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b()}finally{C=c,Gh.transition=d}}function wi(){return Uh().memoizedState}\nfunction xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d)}}\nfunction ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d))}}\nfunction zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,\n4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return[d.memoizedState,a]},useRef:function(a){var b=\nTh();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,\nf,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Kh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Lh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},\nuseDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===\nN?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Ei={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=\nyi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d))}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Hi(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null)}\nfunction Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}function Ji(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}\nfunction Ki(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Mi=\"function\"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b)};return c}\nfunction Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);\"function\"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a))}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d)}\nfunction Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}\nfunction $i(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}\nfunction dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}\nfunction hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?(\"function\"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?(\"function\"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return jj(a,b,c,d,f,e)}\nfunction jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo)}\nfunction lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction qj(a,b){b=pj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:\"visible\",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1))}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c)}\nfunction wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(L,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}wj(b,!0,c,null,f);break;case \"together\":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;\nzj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Aj=function(){};\nBj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Dj(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),\nAj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304)}else{if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),\nnull;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Mj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Nj=!1;\nfunction Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Nj;Nj=!1;return n}\nfunction Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f)}e=e.next}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling}\nfunction Zj(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;\nYj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c)}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling}\nfunction dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a)}catch(t){W(a,a.return,t)}try{Pj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,\na),ek(a)}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function hk(a,b,c){V=a;ik(a,b,c)}\nfunction ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f,b,c),f=f.sibling;V=e;Jj=h;U=l}kk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a,b,c)}}\nfunction kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}sh(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Rj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Rj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Rj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}\nfunction yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg())}\nfunction Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Fk(c,Gk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else{b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h)}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}\nfunction Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a)}\nfunction Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d))}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}\nfunction Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg())}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg()}}function Hj(){fj=ej.current;E(ej)}\nfunction Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj()}c=c.return}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=\n0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}fh=null}return a}\nfunction Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Ih=!1}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return}while(null!==f)}Sk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}\nfunction tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z)}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e)}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y)}function Lk(){for(;null!==Y&&!cc();)Uk(Y)}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null}\nfunction Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else{c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d)}finally{ok.transition=e,C=d}return null}\nfunction Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;\nvar g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c,a,e);dc();K=h;C=g;ok.transition=f}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode,d);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}\nfunction Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else{a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,ok.transition=b}}return!1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b))}\nfunction W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return}}\nfunction Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b)}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c))}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c)}\nfunction bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c)}var Vk;\nVk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c)}b=b.child}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\ngj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Xi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}\nfunction $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction Zk(a){if(\"function\"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Rg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)aj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}\nfunction gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b)}function jl(){return null}var kl=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ll(a){this._internalRoot=a}\nml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null)};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null)});b[uf]=null}};function ml(a){this._internalRoot=a}\nml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function nl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function pl(){}\nfunction ql(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a)}}var g=el(b,d,a,0,null,!1,!1,\"\",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a)}}var k=bl(a,0,!1,null,null,!1,!1,\"\",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d)});return k}\nfunction rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a)}}fl(b,g,a,e)}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()))}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c)}}),il(a,1)}};\nFc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c)}il(a,134217728)}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d)}il(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Qk;Hb=Rk;\nvar sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:\"18.3.1\",rendererPackageName:\"react-dom\"};\nvar ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||\njl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.3.1-next-f1338f8080-20240426\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};exports.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d=\"\",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Rk(a)};exports.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new ml(b)};exports.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Qk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};exports.version=\"18.3.1-next-f1338f8080-20240426\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error(\"act(...) is not supported in production builds of React.\");}\nexports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;exports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;exports.act=X;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=X;exports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};\nexports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};exports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};\nexports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};exports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.3.1\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"2832e561\" + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"cliffhangers:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/Cliffhangers/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcliffhangers\"] = self[\"webpackChunkcliffhangers\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n","import * as React from \"react\";\nimport type {\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  AgnosticRouteMatch,\n  History,\n  LazyRouteFunction,\n  Location,\n  Action as NavigationType,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject\n  // Omit `future` since those can be pulled from the `router`\n  // `NavigationContext` needs future since it doesn't have a `router` in all cases\n  extends Omit<NavigationContextObject, \"future\"> {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n  unstable_viewTransition?: boolean;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n  future: {\n    v7_relativeSplatPath: boolean;\n  };\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n  isDataRoute: boolean;\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n  isDataRoute: false,\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n  UIMatch,\n} from \"@remix-run/router\";\nimport {\n  IDLE_BLOCKER,\n  Action as NavigationType,\n  UNSAFE_convertRouteMatchToUiMatch as convertRouteMatchToUiMatch,\n  UNSAFE_decodePath as decodePath,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteMatch,\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, decodePath(pathname)),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let { isDataRoute } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let { basename, future, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext,\n    ]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { future } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"],\n  future?: RemixRouter[\"future\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined ||\n        matches[matches.length - 1].route.lazy !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error !== undefined ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null,\n  future: RemixRouter[\"future\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (!dataRouterState) {\n      return null;\n    }\n\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else if (\n      future?.v7_partialHydration &&\n      parentMatches.length === 0 &&\n      !dataRouterState.initialized &&\n      dataRouterState.matches.length > 0\n    ) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id] !== undefined\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n\n      if (match.route.id) {\n        let { loaderData, errors } = dataRouterState;\n        let needsToRunLoader =\n          match.route.loader &&\n          loaderData[match.route.id] === undefined &&\n          (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error: any;\n    let shouldRenderHydrateFallback = false;\n    let errorElement: React.ReactNode | null = null;\n    let hydrateFallbackElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\n            \"route-fallback\",\n            false,\n            \"No `HydrateFallback` element provided to render during initial hydration\"\n          );\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null,\n          }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches, isDataRoute: true }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(\n    () => ({\n      revalidate: dataRouterContext.router.revalidate,\n      state: state.revalidation,\n    }),\n    [dataRouterContext.router.revalidate, state.revalidation]\n  );\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches(): UIMatch[] {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router, basename } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n\n      // If they provided us a function and we've got an active basename, strip\n      // it from the locations we expose to the user to match the behavior of\n      // useLocation\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname:\n            stripBasename(currentLocation.pathname, basename) ||\n            currentLocation.pathname,\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname:\n            stripBasename(nextLocation.pathname, basename) ||\n            nextLocation.pathname,\n        },\n        historyAction,\n      });\n    },\n    [basename, shouldBlock]\n  );\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey)\n    ? state.blockers.get(blockerKey)!\n    : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import type {\n  InitialEntry,\n  LazyRouteFunction,\n  Location,\n  MemoryHistory,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RouterState,\n  RouterSubscriber,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport * as React from \"react\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./context\";\nimport {\n  _renderMatches,\n  useAsyncValue,\n  useInRouterContext,\n  useLocation,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  useRoutesImpl,\n} from \"./hooks\";\n\nexport interface FutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_startTransition: boolean;\n}\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n  // Only accept future flags relevant to rendering behavior\n  // routing flags should be accessed via router.future\n  future?: Partial<Pick<FutureConfig, \"v7_startTransition\">>;\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let { v7_startTransition } = future || {};\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (newState: RouterState) => {\n      if (v7_startTransition && startTransitionImpl) {\n        startTransitionImpl(() => setStateImpl(newState));\n      } else {\n        setStateImpl(newState);\n      }\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={basename}\n            location={state.location}\n            navigationType={state.historyAction}\n            navigator={navigator}\n            future={{\n              v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n            }}\n          >\n            {state.initialized || router.future.v7_partialHydration ? (\n              <DataRoutes\n                routes={router.routes}\n                future={router.future}\n                state={state}\n              />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  future?: Partial<FutureConfig>;\n}\n\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n  future,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  let { future, static: isStatic } = React.useContext(NavigationContext);\n\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches, future.v7_relativeSplatPath),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n\n  React.useEffect(\n    () => navigate(JSON.parse(jsonPath), { replace, state, relative }),\n    [navigate, jsonPath, relative, replace, state]\n  );\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n  future?: Partial<Pick<FutureConfig, \"v7_relativeSplatPath\">>;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n  future,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: {\n        v7_relativeSplatPath: false,\n        ...future,\n      },\n    }),\n    [basename, future, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        \"_error\" in promise\n          ? AwaitRenderStatus.error\n          : \"_data\" in promise\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\n/**\n * Submit options shared by both navigations and fetchers\n */\ninterface SharedSubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this submission's state updates\n   */\n  unstable_flushSync?: boolean;\n}\n\n/**\n * Submit options available to fetchers\n */\nexport interface FetcherSubmitOptions extends SharedSubmitOptions {}\n\n/**\n * Submit options available to navigations\n */\nexport interface SubmitOptions extends FetcherSubmitOptions {\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProps,\n  RouterProviderProps,\n  To,\n  unstable_PatchRoutesOnNavigationFunction,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  unstable_DataStrategyFunction,\n  unstable_DataStrategyFunctionArgs,\n  unstable_DataStrategyMatch,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n  FetcherSubmitOptions,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  unstable_DataStrategyFunction,\n  unstable_DataStrategyFunctionArgs,\n  unstable_DataStrategyMatch,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams, ErrorResponseImpl as UNSAFE_ErrorResponseImpl };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker,\n  BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n  unstable_HandlerResult,\n  unstable_PatchRoutesOnNavigationFunction,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  replace,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  var __reactRouterVersion: string;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"0\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  unstable_dataStrategy?: unstable_DataStrategyFunction;\n  unstable_patchRoutesOnNavigation?: unstable_PatchRoutesOnNavigationFunction;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    unstable_dataStrategy: opts?.unstable_dataStrategy,\n    unstable_patchRoutesOnNavigation: opts?.unstable_patchRoutesOnNavigation,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    unstable_dataStrategy: opts?.unstable_dataStrategy,\n    unstable_patchRoutesOnNavigation: opts?.unstable_patchRoutesOnNavigation,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        router.window.document == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  let routerFuture = React.useMemo<RouterProps[\"future\"]>(\n    () => ({\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n    }),\n    [router.future.v7_relativeSplatPath]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={routerFuture}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <MemoizedDataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = React.memo(DataRoutes);\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport type NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator, basename } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    if (nextLocationPathname && basename) {\n      nextLocationPathname =\n        stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n/**\n * Form props shared by navigations and fetchers\n */\ninterface SharedFormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * Form props available to fetchers\n */\nexport interface FetcherFormProps extends SharedFormProps {}\n\n/**\n * Form props available to navigations\n */\nexport interface FormProps extends SharedFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: FetcherSubmitOptions\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgGameBackground1366(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1341px\",\n    height: \"595px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.569\n    },\n    fill: \"#101010\",\n    d: \"M 657.5,17.5 C 661.56,17.4847 665.56,17.9847 669.5,19C 673.299,21.3002 676.632,24.1335 679.5,27.5C 684.565,24.2003 689.899,23.7003 695.5,26C 698.168,30.8181 701.668,34.9848 706,38.5C 706.494,40.1341 706.66,41.8008 706.5,43.5C 710.426,44.6698 713.926,46.6698 717,49.5C 717.49,50.7932 717.657,52.1266 717.5,53.5C 720.969,52.8872 722.969,54.2206 723.5,57.5C 686.817,57.0961 650.15,56.0961 613.5,54.5C 622.283,51.395 630.616,47.2283 638.5,42C 638.833,41.6667 639.167,41.3333 639.5,41C 635.198,36.2032 635.864,32.2032 641.5,29C 642.793,28.51 644.127,28.3433 645.5,28.5C 645.549,25.9009 646.549,23.7342 648.5,22C 651.437,20.1991 654.437,18.6991 657.5,17.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.998\n    },\n    fill: \"#fafafa\",\n    d: \"M 655.5,19.5 C 664.496,17.7688 671.496,20.6021 676.5,28C 679.423,30.0317 682.089,29.6984 684.5,27C 692.347,24.8667 697.18,27.7 699,35.5C 704.059,36.5397 705.559,39.3731 703.5,44C 705.218,44.346 706.885,44.846 708.5,45.5C 708.998,46.6034 709.331,47.6034 709.5,48.5C 714.824,47.5044 716.824,49.8377 715.5,55.5C 717.527,55.3379 719.527,55.5045 721.5,56C 687.151,55.8241 652.818,54.8241 618.5,53C 621.711,51.8468 625.044,51.1802 628.5,51C 632.6,48.6162 636.6,45.9495 640.5,43C 642.112,42.2797 643.612,42.4464 645,43.5C 648.676,34.7426 654.843,32.2426 663.5,36C 658.233,32.7271 652.9,32.7271 647.5,36C 645.356,41.1683 642.523,41.6683 639,37.5C 638.95,32.0537 641.784,29.387 647.5,29.5C 648.328,24.6741 650.995,21.3408 655.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.753\n    },\n    fill: \"#090909\",\n    d: \"M 923.5,29.5 C 938.105,26.4555 949.439,30.9555 957.5,43C 959.167,43.6667 960.833,43.6667 962.5,43C 969.561,38.6914 976.894,38.3581 984.5,42C 988.94,44.957 991.606,49.1237 992.5,54.5C 998.573,56.6244 1001.74,60.9577 1002,67.5C 1006.64,70.1233 1011.31,72.79 1016,75.5C 1017.71,77.9088 1018.54,80.5755 1018.5,83.5C 1021.75,83.4152 1024.58,84.4152 1027,86.5C 1027.41,89.2995 1026.07,90.6328 1023,90.5C 968.486,88.8607 913.986,86.8607 859.5,84.5C 861.457,82.5152 863.79,81.0152 866.5,80C 871.1,78.6833 875.766,77.6833 880.5,77C 887.263,73.7794 893.596,69.7794 899.5,65C 892.941,59.2524 892.941,53.5857 899.5,48C 902.05,46.5584 904.716,45.3917 907.5,44.5C 910.934,37.3972 916.267,32.3972 923.5,29.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 925.5,31.5 C 932.909,30.6209 939.909,31.7875 946.5,35C 950.755,39.9279 955.588,44.0946 961,47.5C 969.615,39.5722 978.281,39.5722 987,47.5C 988.289,50.3508 988.789,53.3508 988.5,56.5C 995.044,56.872 998.211,60.2053 998,66.5C 997.167,67.3333 996.333,68.1667 995.5,69C 998.576,69.3457 1001.58,70.0124 1004.5,71C 1005.86,72.9376 1005.53,74.6043 1003.5,76C 1012.24,73.2409 1015.91,76.4075 1014.5,85.5C 1017.72,85.1081 1020.72,85.6081 1023.5,87C 971.488,86.458 919.488,85.1247 867.5,83C 872.386,80.0623 877.719,78.8957 883.5,79.5C 883.33,78.1779 883.663,77.0113 884.5,76C 887.648,74.3953 890.981,73.3953 894.5,73C 898.356,65.6549 903.189,64.8216 909,70.5C 909.031,62.4743 912.864,57.3076 920.5,55C 924.213,54.5948 927.879,54.5948 931.5,55C 927.106,52.6261 922.44,51.9595 917.5,53C 912.969,56.5345 908.803,60.3678 905,64.5C 897.987,61.9866 896.154,57.4866 899.5,51C 903.072,48.3634 907.072,46.6967 911.5,46C 912.207,43.4803 913.04,40.9803 914,38.5C 917.514,35.4999 921.347,33.1666 925.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.75\n    },\n    fill: \"#0a0a0a\",\n    d: \"M 407.5,41.5 C 414.574,41.161 421.574,41.661 428.5,43C 434.247,45.2474 438.58,49.0807 441.5,54.5C 442.333,54.8333 443.167,55.1667 444,55.5C 454.116,49.7227 463.783,50.3894 473,57.5C 474.266,60.4662 475.433,63.4662 476.5,66.5C 482.573,68.6244 485.739,72.9577 486,79.5C 487.399,80.2266 488.899,80.7266 490.5,81C 493.502,84.219 497.002,86.719 501,88.5C 501.977,90.74 502.477,93.0733 502.5,95.5C 505.747,95.4152 508.581,96.4152 511,98.5C 511.406,101.299 510.072,102.633 507,102.5C 452.486,100.861 397.986,98.8607 343.5,96.5C 345.457,94.5152 347.79,93.0152 350.5,92C 355.139,90.8723 359.805,89.8723 364.5,89C 371.263,85.7794 377.596,81.7794 383.5,77C 376.941,71.2524 376.941,65.5857 383.5,60C 386.05,58.5584 388.716,57.3917 391.5,56.5C 394.934,49.3972 400.267,44.3972 407.5,41.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 409.5,43.5 C 415.593,43.1392 421.593,43.6392 427.5,45C 433.053,50.2241 438.886,55.0574 445,59.5C 453.615,51.5722 462.281,51.5722 471,59.5C 472.289,62.3508 472.789,65.3508 472.5,68.5C 479.029,68.8571 482.195,72.1905 482,78.5C 481.167,79.3333 480.333,80.1667 479.5,81C 482.576,81.3457 485.576,82.0124 488.5,83C 489.86,84.9376 489.527,86.6043 487.5,88C 496.242,85.2409 499.909,88.4075 498.5,97.5C 501.722,97.1081 504.722,97.6081 507.5,99C 455.49,98.3807 403.49,97.0473 351.5,95C 356.386,92.0623 361.719,90.8957 367.5,91.5C 367.33,90.1779 367.663,89.0113 368.5,88C 371.648,86.3953 374.981,85.3953 378.5,85C 382.356,77.6549 387.189,76.8216 393,82.5C 394.81,69.3304 402.31,64.1637 415.5,67C 411.106,64.6261 406.44,63.9595 401.5,65C 396.969,68.5345 392.803,72.3678 389,76.5C 381.361,73.5947 379.861,68.9281 384.5,62.5C 387.782,60.1266 391.448,58.6266 395.5,58C 396.207,55.4803 397.04,52.9803 398,50.5C 401.514,47.4999 405.347,45.1666 409.5,43.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.817\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 861.5,152.5 C 854.728,147.572 848.061,142.406 841.5,137C 833.731,136.365 827.231,133.198 822,127.5C 820.767,124.583 819.267,121.916 817.5,119.5C 813.451,121.549 810.451,124.549 808.5,128.5C 813.1,112.631 818.934,111.964 826,126.5C 831.588,131.376 838.088,134.21 845.5,135C 847.017,136.685 848.684,138.185 850.5,139.5C 850.833,138.833 851.167,138.167 851.5,137.5C 850.236,134.21 849.07,130.876 848,127.5C 842.473,125.238 838.14,121.571 835,116.5C 832.18,107.557 829.514,98.5569 827,89.5C 823.857,82.0415 819.357,75.5415 813.5,70C 812.5,69.3333 811.5,69.3333 810.5,70C 806.586,75.1595 802.92,80.4928 799.5,86C 793.817,88.2012 788.817,91.3679 784.5,95.5C 787.837,89.9971 792.337,85.6638 798,82.5C 800.605,75.0652 805.439,69.7319 812.5,66.5C 816.001,67.4931 818.834,69.4931 821,72.5C 823.333,76.5 825.667,80.5 828,84.5C 831.49,94.7973 834.823,105.131 838,115.5C 841.52,120.191 846.02,123.525 851.5,125.5C 854.101,131.57 855.601,137.903 856,144.5C 858.594,146.704 860.428,149.37 861.5,152.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.994\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 808.5,128.5 C 808.167,129.167 807.833,129.833 807.5,130.5C 807.67,131.822 807.337,132.989 806.5,134C 803.857,135.436 801.19,135.602 798.5,134.5C 796.176,126.972 794.176,119.472 792.5,112C 785.637,111.399 779.804,113.565 775,118.5C 773.991,120.025 773.491,121.692 773.5,123.5C 773.167,124.167 772.833,124.833 772.5,125.5C 771.345,127.825 769.345,128.992 766.5,129C 761.442,134.277 755.608,138.443 749,141.5C 739.548,140.27 730.048,139.436 720.5,139C 722.678,136.772 725.345,135.605 728.5,135.5C 727.592,130.915 729.425,128.582 734,128.5C 738.554,129.43 743.054,130.597 747.5,132C 754.857,133.321 758.691,130.155 759,122.5C 763.126,118.22 766.626,113.554 769.5,108.5C 774.179,103.822 779.179,99.489 784.5,95.5C 788.817,91.3679 793.817,88.2012 799.5,86C 802.92,80.4928 806.586,75.1595 810.5,70C 811.5,69.3333 812.5,69.3333 813.5,70C 819.357,75.5415 823.857,82.0415 827,89.5C 829.514,98.5569 832.18,107.557 835,116.5C 838.14,121.571 842.473,125.238 848,127.5C 849.07,130.876 850.236,134.21 851.5,137.5C 851.167,138.167 850.833,138.833 850.5,139.5C 848.684,138.185 847.017,136.685 845.5,135C 838.088,134.21 831.588,131.376 826,126.5C 818.934,111.964 813.1,112.631 808.5,128.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.122\n    },\n    fill: \"#fefefe\",\n    d: \"M 631.5,79.5 C 632.239,79.369 632.906,79.5357 633.5,80C 630.856,84.8385 630.189,84.6718 631.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 662.5,87.5 C 664.903,87.393 666.736,88.393 668,90.5C 669.944,94.1099 672.277,97.4432 675,100.5C 674.265,113.419 677.765,124.919 685.5,135C 689.401,137.777 693.401,140.277 697.5,142.5C 696.833,142.833 696.167,143.167 695.5,143.5C 690.167,142.333 684.833,141.167 679.5,140C 678.081,136.414 675.748,133.581 672.5,131.5C 670.428,133.35 669.095,135.683 668.5,138.5C 670.111,141.387 671.444,144.387 672.5,147.5C 672.24,149.187 671.573,150.687 670.5,152C 664.624,154.521 659.124,157.688 654,161.5C 652.287,160.122 650.953,158.455 650,156.5C 649.748,153.333 649.582,150.333 649.5,147.5C 643.658,150.921 637.658,154.088 631.5,157C 628.334,159 625.668,161.5 623.5,164.5C 621.475,166.196 619.475,167.863 617.5,169.5C 614.404,170.547 611.404,171.88 608.5,173.5C 608.167,172.833 607.833,172.167 607.5,171.5C 610.803,165.56 612.97,159.226 614,152.5C 619.883,148.885 625.217,144.552 630,139.5C 632.093,134.372 633.426,129.038 634,123.5C 639.899,120.269 645.232,116.269 650,111.5C 651.881,107.693 653.047,103.693 653.5,99.5C 653.66,97.847 654.326,96.5137 655.5,95.5C 657.804,92.8587 660.138,90.192 662.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.855\n    },\n    fill: \"#151515\",\n    d: \"M 662.5,87.5 C 660.138,90.192 657.804,92.8587 655.5,95.5C 656.431,91.5713 658.764,88.9047 662.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.957\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 662.5,87.5 C 663.946,86.3871 665.613,86.2204 667.5,87C 671,91.1667 674.5,95.3333 678,99.5C 678.333,105.5 678.667,111.5 679,117.5C 679.36,124.056 682.194,129.223 687.5,133C 691.749,135.194 696.082,137.194 700.5,139C 701.56,141.737 702.394,144.57 703,147.5C 703.615,149.116 704.615,150.449 706,151.5C 711.439,148.061 715.439,143.395 718,137.5C 722.674,133.657 727.174,129.657 731.5,125.5C 737.018,126.379 742.351,127.879 747.5,130C 754.374,131.464 757.541,128.631 757,121.5C 761.398,117.271 765.564,112.938 769.5,108.5C 766.626,113.554 763.126,118.22 759,122.5C 758.691,130.155 754.857,133.321 747.5,132C 743.054,130.597 738.554,129.43 734,128.5C 729.425,128.582 727.592,130.915 728.5,135.5C 725.345,135.605 722.678,136.772 720.5,139C 730.048,139.436 739.548,140.27 749,141.5C 755.608,138.443 761.442,134.277 766.5,129C 769.345,128.992 771.345,127.825 772.5,125.5C 773.776,126.386 773.776,127.386 772.5,128.5C 765.533,132.988 758.533,137.488 751.5,142C 747.833,144 744.167,144 740.5,142C 726.043,138.237 715.543,142.737 709,155.5C 714.333,160.167 719.667,164.833 725,169.5C 727.802,166.854 730.968,164.854 734.5,163.5C 731.69,166.136 728.69,168.636 725.5,171C 727.719,177.112 729.886,183.279 732,189.5C 735.634,191.089 739.134,192.756 742.5,194.5C 743.167,194.5 743.5,194.167 743.5,193.5C 743.833,193.5 744.167,193.5 744.5,193.5C 745.791,193.737 746.791,193.404 747.5,192.5C 840.518,168.495 933.518,144.329 1026.5,120C 1044.74,113.363 1062.91,106.53 1081,99.5C 1083.08,100.017 1085.08,100.684 1087,101.5C 1088.09,105.048 1088.59,108.715 1088.5,112.5C 1086.8,142.82 1085.47,173.154 1084.5,203.5C 1093.11,204.375 1099.27,201.042 1103,193.5C 1111.2,184.969 1119.7,176.802 1128.5,169C 1133.1,166.149 1138.1,164.982 1143.5,165.5C 1167.78,166.523 1191.12,171.689 1213.5,181C 1217.63,183.136 1221.13,185.969 1224,189.5C 1224.67,192.167 1224.67,194.833 1224,197.5C 1222.45,200.312 1221.62,203.312 1221.5,206.5C 1245.2,205.435 1268.87,205.935 1292.5,208C 1306.61,212.131 1315.95,220.797 1320.5,234C 1322.74,259.327 1322.74,284.661 1320.5,310C 1322.24,321.45 1322.74,332.95 1322,344.5C 1321.36,346.303 1320.2,347.636 1318.5,348.5C 1322.66,365.075 1323.16,381.742 1320,398.5C 1319.5,405.492 1319.33,412.492 1319.5,419.5C 1308.14,419.365 1296.81,419.865 1285.5,421C 1228.37,428.136 1171.21,434.969 1114,441.5C 1112.56,441.441 1111.23,441.108 1110,440.5C 1106.4,433.21 1102.9,425.876 1099.5,418.5C 1094.09,417.903 1088.76,417.069 1083.5,416C 1081.62,413.874 1080.62,411.374 1080.5,408.5C 1082.35,403.296 1084.35,398.129 1086.5,393C 1085.07,387.319 1083.24,381.819 1081,376.5C 1076.35,380.642 1070.85,382.808 1064.5,383C 1049.13,383.387 1033.79,383.053 1018.5,382C 1011.95,383.94 1005.95,386.94 1000.5,391C 984.255,393.227 968.921,398.227 954.5,406C 952.08,406.29 949.746,406.79 947.5,407.5C 946.833,407.5 946.5,407.167 946.5,406.5C 960.791,398.198 976.125,392.365 992.5,389C 976.763,383.763 960.763,382.596 944.5,385.5C 939.673,384.707 934.673,384.707 929.5,385.5C 921.832,385.095 914.165,384.595 906.5,384C 899.8,381.064 892.967,378.564 886,376.5C 853.805,384.94 821.305,392.106 788.5,398C 789.833,399.333 791.167,400.667 792.5,402C 780.919,404.239 769.252,405.906 757.5,407C 744.419,410.744 731.086,412.41 717.5,412C 713.098,408.992 712.431,405.325 715.5,401C 710.833,400.667 706.167,400.333 701.5,400C 706.833,399.667 712.167,399.333 717.5,399C 721.183,395.66 725.516,393.66 730.5,393C 742.589,391.518 754.423,389.018 766,385.5C 773.085,386.292 779.252,389.125 784.5,394C 787.833,394.667 791.167,394.667 794.5,394C 822.521,387.796 850.521,381.462 878.5,375C 866.043,374.235 853.71,372.568 841.5,370C 822.978,369.602 804.478,370.102 786,371.5C 778.649,371.437 771.316,371.103 764,370.5C 757.307,373.264 750.474,375.598 743.5,377.5C 742.508,377.672 741.842,377.338 741.5,376.5C 748.621,372.775 755.954,369.275 763.5,366C 774.77,356.733 785.436,346.733 795.5,336C 807.159,328.671 819.492,322.671 832.5,318C 844.521,318.024 856.521,318.357 868.5,319C 883.158,308.669 898.158,298.836 913.5,289.5C 904.474,286.865 903.141,282.032 909.5,275C 913.123,272.521 917.123,271.188 921.5,271C 927.194,270.616 932.86,270.616 938.5,271C 930.103,266.586 921.103,264.586 911.5,265C 909.898,262.889 907.898,261.389 905.5,260.5C 898.975,261.879 892.641,263.712 886.5,266C 889.341,267.586 892.007,269.42 894.5,271.5C 893.147,274.245 893.314,276.912 895,279.5C 897.5,291.667 892.667,296.5 880.5,294C 871.674,290.724 862.674,288.058 853.5,286C 847.758,284.834 842.425,285.668 837.5,288.5C 837.329,281.148 838.162,273.814 840,266.5C 840.75,265.874 841.584,265.374 842.5,265C 851.101,262.844 859.767,261.011 868.5,259.5C 873.944,259.819 879.111,261.153 884,263.5C 890.849,260.496 898.016,259.163 905.5,259.5C 905.145,249.371 909.812,242.871 919.5,240C 925.833,239.667 932.167,239.333 938.5,239C 945.674,234.117 947.341,227.783 943.5,220C 943.909,217.679 944.743,215.513 946,213.5C 951.391,208.556 957.558,205.389 964.5,204C 957.134,206.584 950.968,210.751 946,216.5C 946.125,221.196 946.458,225.863 947,230.5C 945.262,234.241 942.762,237.408 939.5,240C 943.715,240.855 947.715,242.022 951.5,243.5C 944.343,242.787 937.177,242.121 930,241.5C 924.494,241.003 919.494,242.336 915,245.5C 912.129,250.546 910.462,255.879 910,261.5C 916.783,262.737 923.616,263.904 930.5,265C 936.728,267.948 943.062,270.615 949.5,273C 952.817,273.498 956.15,273.665 959.5,273.5C 958.396,266.168 958.229,258.834 959,251.5C 956.134,249.48 954.301,246.814 953.5,243.5C 953.294,240.505 953.96,237.838 955.5,235.5C 955.388,249.86 962.388,255.027 976.5,251C 984.774,247.853 993.107,245.02 1001.5,242.5C 1001.03,238.126 1002.03,234.126 1004.5,230.5C 1004.17,230.167 1003.83,229.833 1003.5,229.5C 991.71,226.292 979.71,224.292 967.5,223.5C 978.008,222.62 988.674,222.453 999.5,223C 995.105,218.709 992.438,213.542 991.5,207.5C 993.076,210.352 994.576,213.352 996,216.5C 998.5,219 1001,221.5 1003.5,224C 1017.09,225.331 1030.43,224.164 1043.5,220.5C 1044.8,219.173 1046.13,217.84 1047.5,216.5C 1046.46,214.232 1046.29,211.899 1047,209.5C 1047.38,212.01 1048.21,214.343 1049.5,216.5C 1051.58,215.041 1053.75,213.708 1056,212.5C 1056.56,206.659 1057.73,206.326 1059.5,211.5C 1064.6,209.023 1069.93,207.356 1075.5,206.5C 1077.18,206.715 1078.18,206.048 1078.5,204.5C 1079.82,201.402 1080.49,197.902 1080.5,194C 1082.21,163.84 1083.37,133.673 1084,103.5C 1082.27,102.424 1080.44,102.257 1078.5,103C 1056.66,111.669 1034.66,119.835 1012.5,127.5C 1011.04,126.314 1009.71,126.314 1008.5,127.5C 1004.52,127.742 1000.85,128.742 997.5,130.5C 879.429,160.851 761.429,191.518 643.5,222.5C 661.307,216.734 679.307,211.234 697.5,206C 687.487,198.625 683.321,188.792 685,176.5C 686.546,181.768 687.879,187.101 689,192.5C 692.045,196.756 695.212,200.923 698.5,205C 700.913,205.484 703.246,205.15 705.5,204C 702.472,201.74 700.638,198.906 700,195.5C 703.312,197.645 706.146,200.312 708.5,203.5C 714.79,201.625 721.123,199.958 727.5,198.5C 728.167,198.5 728.5,198.167 728.5,197.5C 729.167,197.5 729.833,197.5 730.5,197.5C 731.492,197.672 732.158,197.338 732.5,196.5C 733.167,196.5 733.833,196.5 734.5,196.5C 735.167,196.5 735.5,196.167 735.5,195.5C 735.938,195.565 736.272,195.399 736.5,195C 732.501,194.332 729.668,192.165 728,188.5C 727.308,182.226 725.808,176.226 723.5,170.5C 713.441,162.029 703.441,153.862 693.5,146C 688.118,144.88 682.784,143.547 677.5,142C 676.333,140.833 675.167,139.667 674,138.5C 674.476,143.117 674.476,147.783 674,152.5C 666.587,155.457 660.087,159.79 654.5,165.5C 649.824,162.809 647.158,158.809 646.5,153.5C 645.127,153.343 643.793,153.51 642.5,154C 635.791,157.017 629.457,160.517 623.5,164.5C 625.668,161.5 628.334,159 631.5,157C 637.658,154.088 643.658,150.921 649.5,147.5C 649.582,150.333 649.748,153.333 650,156.5C 650.953,158.455 652.287,160.122 654,161.5C 659.124,157.688 664.624,154.521 670.5,152C 671.573,150.687 672.24,149.187 672.5,147.5C 671.444,144.387 670.111,141.387 668.5,138.5C 669.095,135.683 670.428,133.35 672.5,131.5C 675.748,133.581 678.081,136.414 679.5,140C 684.833,141.167 690.167,142.333 695.5,143.5C 696.167,143.167 696.833,142.833 697.5,142.5C 693.401,140.277 689.401,137.777 685.5,135C 677.765,124.919 674.265,113.419 675,100.5C 672.277,97.4432 669.944,94.1099 668,90.5C 666.736,88.393 664.903,87.393 662.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 1078.5,204.5 C 1076.52,202.697 1074.35,201.03 1072,199.5C 1071.27,195.358 1068.77,192.858 1064.5,192C 1062.37,190.333 1061.04,188.166 1060.5,185.5C 1055.92,184.079 1054.42,181.079 1056,176.5C 1057.27,173.534 1058.43,170.534 1059.5,167.5C 1059.03,165.226 1058.03,163.226 1056.5,161.5C 1054.39,166.046 1052.56,170.713 1051,175.5C 1047.14,178.349 1044.48,182.015 1043,186.5C 1038.33,189.495 1036,193.829 1036,199.5C 1032.41,202.046 1028.58,204.213 1024.5,206C 1022.98,207.522 1021.48,209.022 1020,210.5C 1015.23,207.993 1011.57,204.326 1009,199.5C 1008.93,192.366 1005.93,186.699 1000,182.5C 999.382,176.927 997.882,171.594 995.5,166.5C 995.876,164.617 996.876,163.117 998.5,162C 1003.11,160.222 1006.11,157.056 1007.5,152.5C 1001.85,154.626 996.518,157.46 991.5,161C 988.822,166.676 985.155,171.676 980.5,176C 969.637,183.695 958.637,191.195 947.5,198.5C 946.749,197.624 946.249,196.624 946,195.5C 945.667,189.833 945.333,184.167 945,178.5C 944.293,176.919 943.46,175.419 942.5,174C 948.656,168.084 949.989,161.25 946.5,153.5C 968.669,145.005 990.669,136.338 1012.5,127.5C 1034.66,119.835 1056.66,111.669 1078.5,103C 1080.44,102.257 1082.27,102.424 1084,103.5C 1083.37,133.673 1082.21,163.84 1080.5,194C 1080.49,197.902 1079.82,201.402 1078.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.796\n    },\n    fill: \"#090909\",\n    d: \"M 306.5,104.5 C 316.561,103.784 325.895,105.951 334.5,111C 339.054,115.554 343.554,120.054 348,124.5C 360.943,114.76 373.277,115.427 385,126.5C 386.637,129.717 387.97,133.05 389,136.5C 395.292,138.457 399.126,142.624 400.5,149C 400.05,150.55 399.883,152.05 400,153.5C 406.281,155.975 412.114,159.142 417.5,163C 421.903,165.623 423.569,169.457 422.5,174.5C 425.607,174.351 428.607,174.851 431.5,176C 433.229,177.789 433.896,179.956 433.5,182.5C 361.839,180.415 290.173,178.248 218.5,176C 220.305,173.597 222.638,171.93 225.5,171C 231.766,169.08 238.1,167.413 244.5,166C 249.412,162.579 254.746,159.912 260.5,158C 263.887,154.947 267.553,152.28 271.5,150C 262.167,142.667 262.167,135.333 271.5,128C 275.021,126.326 278.687,125.16 282.5,124.5C 282.867,119.269 285.2,115.102 289.5,112C 294.782,108.353 300.448,105.853 306.5,104.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.257\n    },\n    fill: \"#fefefe\",\n    d: \"M 845.5,106.5 C 847.404,108.044 848.238,110.044 848,112.5C 845.961,111.022 845.128,109.022 845.5,106.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 304.5,107.5 C 321.02,104.543 333.354,110.21 341.5,124.5C 344.393,125.74 347.227,127.074 350,128.5C 357.869,119.659 367.036,118.159 377.5,124C 382.665,127.819 385.665,132.986 386.5,139.5C 394.345,141.154 397.512,145.821 396,153.5C 395.075,154.047 394.242,154.713 393.5,155.5C 397.154,156.379 400.821,157.213 404.5,158C 405.428,158.388 406.095,159.055 406.5,160C 405.224,162.281 403.557,164.281 401.5,166C 405.596,164.315 409.929,163.649 414.5,164C 418.612,167.366 419.945,171.533 418.5,176.5C 422.31,177.071 425.976,177.904 429.5,179C 362.484,178.043 295.484,176.21 228.5,173.5C 235.073,170.141 242.073,168.808 249.5,169.5C 249.393,167.097 250.393,165.264 252.5,164C 255.711,162.847 259.044,162.18 262.5,162C 265.589,156.264 270.422,152.764 277,151.5C 278.261,151.759 279.261,152.426 280,153.5C 280.901,156.071 282.234,158.404 284,160.5C 284.718,161.451 285.551,161.617 286.5,161C 280.918,150.437 283.918,142.77 295.5,138C 304.015,136.052 311.515,137.886 318,143.5C 316.983,139.815 314.483,137.315 310.5,136C 299.366,132.379 289.866,134.879 282,143.5C 280.441,145.217 279.608,147.217 279.5,149.5C 270.481,148.026 266.981,143.026 269,134.5C 273.856,129.764 279.689,126.931 286.5,126C 285.649,122.526 286.483,119.36 289,116.5C 293.558,112.309 298.724,109.309 304.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.994\n    },\n    fill: \"#171619\",\n    d: \"M 807.5,130.5 C 808.267,131.172 808.934,132.005 809.5,133C 804.893,137.871 800.059,138.371 795,134.5C 793.176,127.759 792.009,120.925 791.5,114C 783.288,113.059 777.288,116.226 773.5,123.5C 773.491,121.692 773.991,120.025 775,118.5C 779.804,113.565 785.637,111.399 792.5,112C 794.176,119.472 796.176,126.972 798.5,134.5C 801.19,135.602 803.857,135.436 806.5,134C 807.337,132.989 807.67,131.822 807.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.723\n    },\n    fill: \"#070609\",\n    d: \"M 653.5,99.5 C 653.047,103.693 651.881,107.693 650,111.5C 645.232,116.269 639.899,120.269 634,123.5C 633.426,129.038 632.093,134.372 630,139.5C 625.217,144.552 619.883,148.885 614,152.5C 612.97,159.226 610.803,165.56 607.5,171.5C 607.833,172.167 608.167,172.833 608.5,173.5C 611.404,171.88 614.404,170.547 617.5,169.5C 615.422,172.051 612.756,173.884 609.5,175C 599.506,177.462 589.84,180.795 580.5,185C 577.533,187.1 575.7,189.934 575,193.5C 567.149,200.686 557.982,205.186 547.5,207C 546.856,209.74 545.689,212.24 544,214.5C 537.148,219.929 530.481,225.596 524,231.5C 523.967,238.266 522.3,244.599 519,250.5C 514.271,255.397 509.438,260.064 504.5,264.5C 503.475,264.103 503.308,263.437 504,262.5C 505.167,261.333 506.333,260.167 507.5,259C 504.168,259.161 500.835,259.661 497.5,260.5C 496.833,260.833 496.167,261.167 495.5,261.5C 407.767,284.35 320.1,307.35 232.5,330.5C 232.557,329.391 232.89,328.391 233.5,327.5C 325.857,303.494 418.191,279.327 510.5,255C 514.426,252.06 517.26,248.227 519,243.5C 519.856,238.444 520.856,233.444 522,228.5C 528.96,223.208 535.627,217.542 542,211.5C 543.411,209.35 544.245,207.016 544.5,204.5C 549.397,204.276 554.064,203.109 558.5,201C 562.698,197.97 567.032,195.137 571.5,192.5C 573.228,186.606 576.895,182.439 582.5,180C 590.009,177.465 597.675,175.632 605.5,174.5C 605.338,172.473 605.505,170.473 606,168.5C 609.742,163.29 611.409,157.623 611,151.5C 616.883,147.885 622.217,143.552 627,138.5C 629.603,133.088 631.437,127.421 632.5,121.5C 637.585,118.876 642.418,115.876 647,112.5C 649.09,108.019 651.257,103.686 653.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.997\n    },\n    fill: \"#a48dc6\",\n    d: \"M 807.5,130.5 C 807.833,129.833 808.167,129.167 808.5,128.5C 810.451,124.549 813.451,121.549 817.5,119.5C 819.267,121.916 820.767,124.583 822,127.5C 827.231,133.198 833.731,136.365 841.5,137C 848.061,142.406 854.728,147.572 861.5,152.5C 863.06,154.129 862.727,155.296 860.5,156C 851.847,158.94 843.18,161.773 834.5,164.5C 833.508,164.328 832.842,164.662 832.5,165.5C 804.114,174.673 775.78,183.673 747.5,192.5C 746.209,192.263 745.209,192.596 744.5,193.5C 744.167,193.5 743.833,193.5 743.5,193.5C 742.833,193.5 742.5,193.833 742.5,194.5C 739.134,192.756 735.634,191.089 732,189.5C 729.886,183.279 727.719,177.112 725.5,171C 728.69,168.636 731.69,166.136 734.5,163.5C 730.968,164.854 727.802,166.854 725,169.5C 719.667,164.833 714.333,160.167 709,155.5C 715.543,142.737 726.043,138.237 740.5,142C 744.167,144 747.833,144 751.5,142C 758.533,137.488 765.533,132.988 772.5,128.5C 773.776,127.386 773.776,126.386 772.5,125.5C 772.833,124.833 773.167,124.167 773.5,123.5C 777.288,116.226 783.288,113.059 791.5,114C 792.009,120.925 793.176,127.759 795,134.5C 800.059,138.371 804.893,137.871 809.5,133C 808.934,132.005 808.267,131.172 807.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b3269\",\n    d: \"M 1008.5,127.5 C 1005.32,129.009 1001.99,130.342 998.5,131.5C 998.5,130.833 998.167,130.5 997.5,130.5C 1000.85,128.742 1004.52,127.742 1008.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a51aa\",\n    d: \"M 997.5,130.5 C 998.167,130.5 998.5,130.833 998.5,131.5C 980.857,138.16 963.19,144.826 945.5,151.5C 944.432,153.187 944.599,154.854 946,156.5C 946.667,159.5 946.667,162.5 946,165.5C 944.545,168.613 942.712,171.446 940.5,174C 941.317,175.49 942.15,176.99 943,178.5C 943.333,184.167 943.667,189.833 944,195.5C 944.473,197.779 945.473,199.779 947,201.5C 959.429,193.369 971.596,184.869 983.5,176C 987.542,171.397 991.209,166.564 994.5,161.5C 994.833,161.667 995.167,161.833 995.5,162C 993.134,166.658 993.634,171.158 997,175.5C 997.333,178.167 997.667,180.833 998,183.5C 1000.33,185.833 1002.67,188.167 1005,190.5C 1006.15,193.711 1006.82,197.044 1007,200.5C 1010.13,204.633 1013.63,208.466 1017.5,212C 1021.17,212.536 1023.84,211.036 1025.5,207.5C 1029.91,205.547 1034.08,203.213 1038,200.5C 1037.32,194.851 1039.49,190.851 1044.5,188.5C 1045.56,183.925 1048.06,180.258 1052,177.5C 1053.48,173.385 1055.15,169.385 1057,165.5C 1057.24,169.443 1056.24,173.11 1054,176.5C 1052.64,181.789 1054.48,185.455 1059.5,187.5C 1060.03,189.614 1061.03,191.448 1062.5,193C 1066.23,193.921 1068.73,196.087 1070,199.5C 1071.87,201.709 1074.04,203.542 1076.5,205C 1075.94,205.383 1075.61,205.883 1075.5,206.5C 1069.93,207.356 1064.6,209.023 1059.5,211.5C 1057.73,206.326 1056.56,206.659 1056,212.5C 1053.75,213.708 1051.58,215.041 1049.5,216.5C 1048.21,214.343 1047.38,212.01 1047,209.5C 1046.29,211.899 1046.46,214.232 1047.5,216.5C 1046.13,217.84 1044.8,219.173 1043.5,220.5C 1030.43,224.164 1017.09,225.331 1003.5,224C 1001,221.5 998.5,219 996,216.5C 994.576,213.352 993.076,210.352 991.5,207.5C 992.438,213.542 995.105,218.709 999.5,223C 988.674,222.453 978.008,222.62 967.5,223.5C 961.131,225.203 957.131,229.203 955.5,235.5C 953.96,237.838 953.294,240.505 953.5,243.5C 952.833,243.5 952.167,243.5 951.5,243.5C 947.715,242.022 943.715,240.855 939.5,240C 942.762,237.408 945.262,234.241 947,230.5C 946.458,225.863 946.125,221.196 946,216.5C 950.968,210.751 957.134,206.584 964.5,204C 957.558,205.389 951.391,208.556 946,213.5C 944.743,215.513 943.909,217.679 943.5,220C 947.341,227.783 945.674,234.117 938.5,239C 932.167,239.333 925.833,239.667 919.5,240C 909.812,242.871 905.145,249.371 905.5,259.5C 898.016,259.163 890.849,260.496 884,263.5C 879.111,261.153 873.944,259.819 868.5,259.5C 859.767,261.011 851.101,262.844 842.5,265C 841.584,265.374 840.75,265.874 840,266.5C 838.162,273.814 837.329,281.148 837.5,288.5C 837.158,289.338 836.492,289.672 835.5,289.5C 833.973,289.427 832.973,290.094 832.5,291.5C 830.973,291.427 829.973,292.094 829.5,293.5C 827.973,293.427 826.973,294.094 826.5,295.5C 824.596,295.738 823.262,296.738 822.5,298.5C 820.973,298.427 819.973,299.094 819.5,300.5C 817.973,300.427 816.973,301.094 816.5,302.5C 814.596,302.738 813.262,303.738 812.5,305.5C 810.973,305.427 809.973,306.094 809.5,307.5C 807.973,307.427 806.973,308.094 806.5,309.5C 797.371,314.213 788.038,318.546 778.5,322.5C 774.896,319.398 771.396,316.065 768,312.5C 755.667,294.5 743.333,276.5 731,258.5C 725.428,256.722 719.928,254.555 714.5,252C 711.593,248.849 708.926,245.516 706.5,242C 703.581,241.448 700.914,242.115 698.5,244C 695,247.5 691.5,251 688,254.5C 685.344,258.144 683.511,262.144 682.5,266.5C 674.911,266.117 667.911,267.951 661.5,272C 654.925,277.073 649.258,282.906 644.5,289.5C 636.864,286.363 630.531,281.53 625.5,275C 622.298,273.517 618.964,273.183 615.5,274C 609.425,277.573 605.425,282.74 603.5,289.5C 590.149,293.586 578.649,300.586 569,310.5C 567.606,312.388 566.44,314.388 565.5,316.5C 564.914,318.84 563.914,321.007 562.5,323C 544.483,325.171 527.15,329.504 510.5,336C 514.718,333.718 518.384,330.718 521.5,327C 521.167,326.833 520.833,326.667 520.5,326.5C 511.197,335.982 499.864,340.816 486.5,341C 463.763,343.048 441.43,341.048 419.5,335C 405.419,327.563 390.419,324.063 374.5,324.5C 373.167,324.5 371.833,324.5 370.5,324.5C 365.379,324.776 361.712,327.276 359.5,332C 355.944,334.889 351.944,336.889 347.5,338C 327.506,343.374 307.173,345.541 286.5,344.5C 284.116,344.557 281.782,344.223 279.5,343.5C 272.599,345.642 265.599,347.309 258.5,348.5C 257.448,348.649 256.448,348.483 255.5,348C 253.461,345.626 251.128,343.626 248.5,342C 242.467,341.305 236.467,340.471 230.5,339.5C 230.405,336.303 231.072,333.303 232.5,330.5C 320.1,307.35 407.767,284.35 495.5,261.5C 495.267,263.062 494.6,264.395 493.5,265.5C 492.064,266.429 490.731,267.595 489.5,269C 491.821,272.612 495.154,274.445 499.5,274.5C 499.785,270.809 500.785,267.309 502.5,264C 501.824,262.317 500.824,262.15 499.5,263.5C 498.833,262.5 498.167,261.5 497.5,260.5C 500.835,259.661 504.168,259.161 507.5,259C 506.333,260.167 505.167,261.333 504,262.5C 503.308,263.437 503.475,264.103 504.5,264.5C 504.435,264.938 504.601,265.272 505,265.5C 509.936,263.115 515.102,261.449 520.5,260.5C 520.047,261.458 519.381,262.292 518.5,263C 522.138,263.515 524.471,262.015 525.5,258.5C 536.705,254.432 548.038,250.765 559.5,247.5C 558.56,249.612 557.394,251.612 556,253.5C 555.333,254.833 555.333,256.167 556,257.5C 559.2,254.349 561.366,250.682 562.5,246.5C 589.375,238.032 616.375,230.032 643.5,222.5C 761.429,191.518 879.429,160.851 997.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.124\n    },\n    fill: \"#fefefe\",\n    d: \"M 618.5,136.5 C 619.239,136.369 619.906,136.536 620.5,137C 617.856,141.838 617.189,141.672 618.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1016.5,138.5 C 1018.17,138.5 1019.83,138.5 1021.5,138.5C 1020.41,144.931 1016.74,149.264 1010.5,151.5C 1009.83,151.167 1009.17,150.833 1008.5,150.5C 1011.61,146.736 1014.28,142.736 1016.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#a48dc6\",\n    d: \"M 735.5,195.5 C 734.833,195.5 734.5,195.833 734.5,196.5C 733.833,196.5 733.167,196.5 732.5,196.5C 731.508,196.328 730.842,196.662 730.5,197.5C 729.833,197.5 729.167,197.5 728.5,197.5C 727.833,197.5 727.5,197.833 727.5,198.5C 721.123,199.958 714.79,201.625 708.5,203.5C 706.146,200.312 703.312,197.645 700,195.5C 700.638,198.906 702.472,201.74 705.5,204C 703.246,205.15 700.913,205.484 698.5,205C 695.212,200.923 692.045,196.756 689,192.5C 687.879,187.101 686.546,181.768 685,176.5C 683.321,188.792 687.487,198.625 697.5,206C 679.307,211.234 661.307,216.734 643.5,222.5C 616.375,230.032 589.375,238.032 562.5,246.5C 562.833,245.167 563.167,243.833 563.5,242.5C 561.926,243.984 560.593,245.651 559.5,247.5C 548.038,250.765 536.705,254.432 525.5,258.5C 525.44,257.957 525.107,257.624 524.5,257.5C 523.148,258.524 521.815,259.524 520.5,260.5C 515.102,261.449 509.936,263.115 505,265.5C 504.601,265.272 504.435,264.938 504.5,264.5C 509.438,260.064 514.271,255.397 519,250.5C 522.3,244.599 523.967,238.266 524,231.5C 530.481,225.596 537.148,219.929 544,214.5C 545.689,212.24 546.856,209.74 547.5,207C 557.982,205.186 567.149,200.686 575,193.5C 575.7,189.934 577.533,187.1 580.5,185C 589.84,180.795 599.506,177.462 609.5,175C 612.756,173.884 615.422,172.051 617.5,169.5C 619.475,167.863 621.475,166.196 623.5,164.5C 629.457,160.517 635.791,157.017 642.5,154C 643.793,153.51 645.127,153.343 646.5,153.5C 647.158,158.809 649.824,162.809 654.5,165.5C 660.087,159.79 666.587,155.457 674,152.5C 674.476,147.783 674.476,143.117 674,138.5C 675.167,139.667 676.333,140.833 677.5,142C 682.784,143.547 688.118,144.88 693.5,146C 703.441,153.862 713.441,162.029 723.5,170.5C 725.808,176.226 727.308,182.226 728,188.5C 729.668,192.165 732.501,194.332 736.5,195C 736.272,195.399 735.938,195.565 735.5,195.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.971\n    },\n    fill: \"#080609\",\n    d: \"M 762.5,140.5 C 763.465,141.721 763.298,143.054 762,144.5C 759.961,146.874 757.628,148.874 755,150.5C 754.333,149.5 754.333,148.5 755,147.5C 757.396,144.933 759.896,142.6 762.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.96\n    },\n    fill: \"#1d1a22\",\n    d: \"M 827.5,138.5 C 834.963,142.918 839.963,148.918 842.5,156.5C 837.454,150.461 832.454,144.461 827.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.98\n    },\n    fill: \"#121015\",\n    d: \"M 821.5,146.5 C 825.259,150.61 828.259,155.276 830.5,160.5C 830.167,160.833 829.833,161.167 829.5,161.5C 825.107,157.435 822.44,152.435 821.5,146.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.981\n    },\n    fill: \"#0e0c11\",\n    d: \"M 734.5,163.5 C 739.973,160.097 745.639,157.264 751.5,155C 746.899,159.967 741.233,162.8 734.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.978\n    },\n    fill: \"#100d13\",\n    d: \"M 678.5,155.5 C 683.937,160.642 686.103,166.975 685,174.5C 683.323,167.968 681.156,161.634 678.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161318\",\n    d: \"M 1012.5,127.5 C 990.669,136.338 968.669,145.005 946.5,153.5C 949.989,161.25 948.656,168.084 942.5,174C 943.46,175.419 944.293,176.919 945,178.5C 945.333,184.167 945.667,189.833 946,195.5C 946.249,196.624 946.749,197.624 947.5,198.5C 958.637,191.195 969.637,183.695 980.5,176C 985.155,171.676 988.822,166.676 991.5,161C 996.518,157.46 1001.85,154.626 1007.5,152.5C 1006.11,157.056 1003.11,160.222 998.5,162C 996.876,163.117 995.876,164.617 995.5,166.5C 997.882,171.594 999.382,176.927 1000,182.5C 1005.93,186.699 1008.93,192.366 1009,199.5C 1011.57,204.326 1015.23,207.993 1020,210.5C 1021.48,209.022 1022.98,207.522 1024.5,206C 1028.58,204.213 1032.41,202.046 1036,199.5C 1036,193.829 1038.33,189.495 1043,186.5C 1044.48,182.015 1047.14,178.349 1051,175.5C 1052.56,170.713 1054.39,166.046 1056.5,161.5C 1058.03,163.226 1059.03,165.226 1059.5,167.5C 1058.43,170.534 1057.27,173.534 1056,176.5C 1054.42,181.079 1055.92,184.079 1060.5,185.5C 1061.04,188.166 1062.37,190.333 1064.5,192C 1068.77,192.858 1071.27,195.358 1072,199.5C 1074.35,201.03 1076.52,202.697 1078.5,204.5C 1078.18,206.048 1077.18,206.715 1075.5,206.5C 1075.61,205.883 1075.94,205.383 1076.5,205C 1074.04,203.542 1071.87,201.709 1070,199.5C 1068.73,196.087 1066.23,193.921 1062.5,193C 1061.03,191.448 1060.03,189.614 1059.5,187.5C 1054.48,185.455 1052.64,181.789 1054,176.5C 1056.24,173.11 1057.24,169.443 1057,165.5C 1055.15,169.385 1053.48,173.385 1052,177.5C 1048.06,180.258 1045.56,183.925 1044.5,188.5C 1039.49,190.851 1037.32,194.851 1038,200.5C 1034.08,203.213 1029.91,205.547 1025.5,207.5C 1023.84,211.036 1021.17,212.536 1017.5,212C 1013.63,208.466 1010.13,204.633 1007,200.5C 1006.82,197.044 1006.15,193.711 1005,190.5C 1002.67,188.167 1000.33,185.833 998,183.5C 997.667,180.833 997.333,178.167 997,175.5C 993.634,171.158 993.134,166.658 995.5,162C 995.167,161.833 994.833,161.667 994.5,161.5C 991.209,166.564 987.542,171.397 983.5,176C 971.596,184.869 959.429,193.369 947,201.5C 945.473,199.779 944.473,197.779 944,195.5C 943.667,189.833 943.333,184.167 943,178.5C 942.15,176.99 941.317,175.49 940.5,174C 942.712,171.446 944.545,168.613 946,165.5C 946.667,162.5 946.667,159.5 946,156.5C 944.599,154.854 944.432,153.187 945.5,151.5C 963.19,144.826 980.857,138.16 998.5,131.5C 1001.99,130.342 1005.32,129.009 1008.5,127.5C 1009.71,126.314 1011.04,126.314 1012.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.248\n    },\n    fill: \"#fbfafc\",\n    d: \"M 834.5,164.5 C 835.292,165.967 835.292,167.3 834.5,168.5C 833.081,167.995 832.415,166.995 832.5,165.5C 832.842,164.662 833.508,164.328 834.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#909090\",\n    d: \"M 1138.5,168.5 C 1163.82,167.73 1187.82,172.896 1210.5,184C 1213.67,185.833 1216.17,188.333 1218,191.5C 1218.63,196.974 1217.97,202.307 1216,207.5C 1210.83,210.667 1205.67,213.833 1200.5,217C 1187.91,215.608 1175.24,215.275 1162.5,216C 1155.84,216.748 1149.51,218.581 1143.5,221.5C 1133.61,217.887 1123.94,213.72 1114.5,209C 1108.91,207.773 1103.57,205.939 1098.5,203.5C 1103.11,200.392 1107.28,196.725 1111,192.5C 1117.3,181.025 1126.46,173.025 1138.5,168.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.96\n    },\n    fill: \"#151318\",\n    d: \"M 623.5,175.5 C 624.525,175.897 624.692,176.563 624,177.5C 620.667,182.167 617.333,186.833 614,191.5C 615.618,185.352 618.784,180.019 623.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1208.5,187.5 C 1209.65,187.791 1210.32,188.624 1210.5,190C 1209.87,193.296 1208.37,196.13 1206,198.5C 1204.21,210.302 1203.54,210.302 1204,198.5C 1205.51,194.812 1207.01,191.145 1208.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1200.5,189.5 C 1201.68,189.281 1202.68,189.614 1203.5,190.5C 1200.05,194.816 1198.55,199.816 1199,205.5C 1198.69,206.308 1198.19,206.975 1197.5,207.5C 1195.93,201.015 1196.93,195.015 1200.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1b1b\",\n    d: \"M 1140.5,190.5 C 1142.3,189.838 1144.3,189.505 1146.5,189.5C 1152.17,189.97 1157.84,190.47 1163.5,191C 1155.59,192.918 1147.92,192.752 1140.5,190.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1b1b\",\n    d: \"M 1163.5,195.5 C 1167.41,194.202 1171.41,194.368 1175.5,196C 1173.29,197.873 1171.46,200.04 1170,202.5C 1168.99,205.845 1167.49,208.845 1165.5,211.5C 1165.87,206.228 1167.87,201.394 1171.5,197C 1168.75,196.728 1166.08,196.228 1163.5,195.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191919\",\n    d: \"M 1196.5,184.5 C 1197.55,184.351 1198.55,184.517 1199.5,185C 1195.8,187.852 1191.8,190.185 1187.5,192C 1187.96,192.414 1188.29,192.914 1188.5,193.5C 1185.51,197.652 1184.01,202.319 1184,207.5C 1183.59,207.957 1183.09,208.291 1182.5,208.5C 1181.4,203.44 1182.4,198.773 1185.5,194.5C 1184.28,193.904 1182.95,193.737 1181.5,194C 1186.56,190.809 1191.56,187.642 1196.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#160f1c\",\n    d: \"M 1049.5,194.5 C 1050.97,196.64 1052.63,198.806 1054.5,201C 1051.11,200.459 1049.44,198.293 1049.5,194.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.961\n    },\n    fill: \"#1b181f\",\n    d: \"M 600.5,198.5 C 600.808,201.74 599.475,204.574 596.5,207C 593.299,209.267 589.966,210.934 586.5,212C 592.286,208.617 596.953,204.117 600.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.961\n    },\n    fill: \"#100d12\",\n    d: \"M 608.5,197.5 C 605.09,206.972 598.756,214.639 589.5,220.5C 589.167,220.167 588.833,219.833 588.5,219.5C 596.211,213.122 602.878,205.788 608.5,197.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.983\n    },\n    fill: \"#100e13\",\n    d: \"M 668.5,187.5 C 669.75,187.577 670.583,188.244 671,189.5C 671.333,193.5 671.667,197.5 672,201.5C 674.202,204.663 676.702,207.497 679.5,210C 675.635,209.502 672.802,207.335 671,203.5C 668.92,198.37 668.087,193.037 668.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150d1a\",\n    d: \"M 991.5,207.5 C 989.621,205.085 989.287,202.418 990.5,199.5C 991.48,202.086 991.813,204.753 991.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1178.5,196.5 C 1178.67,202.2 1176.5,207.2 1172,211.5C 1171.33,210.5 1171.33,209.5 1172,208.5C 1174.43,204.633 1176.6,200.633 1178.5,196.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150e1a\",\n    d: \"M 911.5,182.5 C 912.376,182.369 913.043,182.702 913.5,183.5C 908.382,185.373 903.382,187.54 898.5,190C 890.5,196.667 882.5,203.333 874.5,210C 872.631,211.602 870.631,212.602 868.5,213C 877.167,205.667 885.833,198.333 894.5,191C 899.98,187.593 905.647,184.76 911.5,182.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1088.5,207.5 C 1104.07,208.298 1118.74,212.465 1132.5,220C 1133.02,220.561 1133.36,221.228 1133.5,222C 1132.18,223.99 1130.85,225.99 1129.5,228C 1114.51,225.75 1103.68,231.25 1097,244.5C 1096.5,246.473 1096.34,248.473 1096.5,250.5C 1082.01,243.725 1067.01,238.225 1051.5,234C 1051.18,226.295 1054.18,219.962 1060.5,215C 1069.79,211.915 1079.13,209.415 1088.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1231.5,208.5 C 1247.82,209.222 1264.15,209.722 1280.5,210C 1288.41,209.98 1295.74,211.98 1302.5,216C 1306.15,219.453 1308.65,223.62 1310,228.5C 1311.12,238.149 1311.46,247.815 1311,257.5C 1308.86,258.03 1307.03,257.197 1305.5,255C 1301.36,252.144 1297.03,251.81 1292.5,254C 1279.47,263.176 1265.13,266.509 1249.5,264C 1240.51,261.004 1231.51,258.004 1222.5,255C 1217.53,254.114 1212.53,253.448 1207.5,253C 1205.17,250.239 1203.51,247.073 1202.5,243.5C 1199.61,241.205 1198.78,238.205 1200,234.5C 1199.58,224.675 1203.74,217.842 1212.5,214C 1218.91,211.985 1225.24,210.152 1231.5,208.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8b8b8b\",\n    d: \"M 1043.5,220.5 C 1046.04,219.651 1048.54,218.651 1051,217.5C 1051.5,217.833 1052,218.167 1052.5,218.5C 1050.96,221.746 1049.29,224.912 1047.5,228C 1039.05,228.757 1037.71,226.257 1043.5,220.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1166.5,218.5 C 1172.18,218.334 1177.84,218.501 1183.5,219C 1187.75,219.726 1191.75,221.059 1195.5,223C 1194.68,235.758 1194.18,248.591 1194,261.5C 1193.19,264.446 1191.86,267.112 1190,269.5C 1178.19,274.893 1167.85,282.226 1159,291.5C 1157.07,288.116 1154.57,285.282 1151.5,283C 1140.5,282.961 1129.5,282.961 1118.5,283C 1112.64,281.489 1108.47,277.989 1106,272.5C 1103.25,263.303 1101.58,253.97 1101,244.5C 1103.5,238 1108,233.5 1114.5,231C 1122.23,230.618 1129.9,230.952 1137.5,232C 1143.06,229.106 1148.06,225.439 1152.5,221C 1157.36,220.477 1162.03,219.644 1166.5,218.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.976\n    },\n    fill: \"#120f14\",\n    d: \"M 581.5,214.5 C 582.239,214.369 582.906,214.536 583.5,215C 576.167,222 568.833,229 561.5,236C 560.833,236.667 560.167,236.667 559.5,236C 562.5,232.333 565.5,228.667 568.5,225C 573.311,222.015 577.644,218.515 581.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150e1b\",\n    d: \"M 854.5,219.5 C 855.525,219.897 855.692,220.563 855,221.5C 852.372,223.126 850.039,225.126 848,227.5C 849.145,224.17 851.312,221.503 854.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.967\n    },\n    fill: \"#131015\",\n    d: \"M 563.5,242.5 C 563.84,240.321 564.84,238.488 566.5,237C 573,232.5 579.5,228 586,223.5C 585.805,225.745 584.638,227.578 582.5,229C 576.01,233.331 569.676,237.831 563.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 967.5,223.5 C 979.71,224.292 991.71,226.292 1003.5,229.5C 1003.83,229.833 1004.17,230.167 1004.5,230.5C 1002.03,234.126 1001.03,238.126 1001.5,242.5C 993.107,245.02 984.774,247.853 976.5,251C 962.388,255.027 955.388,249.86 955.5,235.5C 957.131,229.203 961.131,225.203 967.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 1183.5,221.5 C 1185.24,224.008 1186.07,227.008 1186,230.5C 1186.91,232.664 1188.08,234.664 1189.5,236.5C 1189.17,236.833 1188.83,237.167 1188.5,237.5C 1186.85,236.352 1185.35,235.019 1184,233.5C 1184.72,236.265 1186.39,238.599 1189,240.5C 1189.69,241.332 1189.52,241.998 1188.5,242.5C 1185.18,240.356 1182.84,237.522 1181.5,234C 1182.23,229.833 1182.9,225.667 1183.5,221.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c8c8c\",\n    d: \"M 1017.5,227.5 C 1023.51,227.334 1029.51,227.501 1035.5,228C 1036.36,228.689 1037.02,229.522 1037.5,230.5C 1025.66,230.197 1015,233.531 1005.5,240.5C 1003.7,236.475 1004.7,233.308 1008.5,231C 1011.46,229.396 1014.46,228.229 1017.5,227.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#898989\",\n    d: \"M 1038.5,229.5 C 1041.22,228.667 1043.88,229.167 1046.5,231C 1043.5,231.891 1040.84,231.391 1038.5,229.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1091.5,230.5 C 1092.71,232.264 1092.38,233.93 1090.5,235.5C 1092.42,236.877 1093.59,238.543 1094,240.5C 1093.5,241 1093,241.5 1092.5,242C 1089.17,242.667 1085.83,242.667 1082.5,242C 1085.15,237.864 1088.15,234.031 1091.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1021.5,234.5 C 1028.84,234.334 1036.17,234.5 1043.5,235C 1060.38,239.94 1076.71,246.274 1092.5,254C 1094.63,255.051 1096.29,256.551 1097.5,258.5C 1098.53,264.292 1100.03,269.958 1102,275.5C 1103.83,278.667 1106.33,281.167 1109.5,283C 1100.86,282.116 1092.19,281.449 1083.5,281C 1076,285.587 1068.33,289.92 1060.5,294C 1052.92,295.978 1045.26,297.478 1037.5,298.5C 1036.91,295.386 1035.24,292.886 1032.5,291C 1028.61,289.36 1024.61,288.027 1020.5,287C 1007.17,286.667 993.833,286.333 980.5,286C 973.752,285.73 967.419,284.064 961.5,281C 967.922,274.95 974.922,269.617 982.5,265C 994.155,252.872 1007.15,242.705 1021.5,234.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222222\",\n    d: \"M 998.5,230.5 C 999.239,230.369 999.906,230.536 1000.5,231C 994.897,237.678 987.897,241.012 979.5,241C 974.024,240.172 968.691,238.839 963.5,237C 971.501,237.667 979.501,238.334 987.5,239C 991.597,236.63 995.264,233.797 998.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.986\n    },\n    fill: \"#100d12\",\n    d: \"M 558.5,212.5 C 559.239,212.369 559.906,212.536 560.5,213C 556.212,218.41 552.045,223.91 548,229.5C 540.818,232.847 536.818,238.513 536,246.5C 535.07,249.362 533.403,251.695 531,253.5C 532.649,247.836 534.649,242.169 537,236.5C 544.408,228.657 551.575,220.657 558.5,212.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.983\n    },\n    fill: \"#7b7871\",\n    d: \"M 233.5,327.5 C 232.89,328.391 232.557,329.391 232.5,330.5C 231.072,333.303 230.405,336.303 230.5,339.5C 236.467,340.471 242.467,341.305 248.5,342C 251.128,343.626 253.461,345.626 255.5,348C 256.448,348.483 257.448,348.649 258.5,348.5C 256.095,349.768 253.428,350.435 250.5,350.5C 249.395,349.4 248.062,348.733 246.5,348.5C 244.745,347.928 243.078,347.094 241.5,346C 237.975,345.821 234.641,345.321 231.5,344.5C 234.187,344.664 236.854,344.497 239.5,344C 229.588,342.895 219.755,341.395 210,339.5C 202.682,339.448 195.682,340.781 189,343.5C 188.849,349.942 189.682,356.275 191.5,362.5C 187.754,364.437 183.754,365.437 179.5,365.5C 165.251,364.251 151.251,361.751 137.5,358C 115.502,357.278 93.8353,354.278 72.5,349C 58.9467,346.092 47.4467,349.592 38,359.5C 36.5961,361.639 35.7628,363.972 35.5,366.5C 35.6399,368.03 36.3065,369.03 37.5,369.5C 64.0053,369.169 90.3386,369.502 116.5,370.5C 83.8333,370.5 51.1667,370.5 18.5,370.5C 18.815,374.371 18.4816,378.038 17.5,381.5C 15.1881,371.646 14.1881,361.646 14.5,351.5C 15.992,328.867 16.8253,306.2 17,283.5C 17.5049,274.129 18.3383,264.796 19.5,255.5C 28.22,254.927 36.8867,254.261 45.5,253.5C 44.2273,260.452 43.7273,267.452 44,274.5C 45.1068,275.712 45.6068,275.379 45.5,273.5C 48.0627,272.8 50.5627,271.8 53,270.5C 53.7648,270.57 54.2648,270.903 54.5,271.5C 62.6442,279.235 72.3109,282.402 83.5,281C 92.2208,277.57 101.221,275.237 110.5,274C 116.128,266.77 116.962,258.937 113,250.5C 108.102,246.803 102.602,244.303 96.5,243C 83.8377,242.5 71.1711,242.333 58.5,242.5C 59.6085,241.71 60.9419,241.21 62.5,241C 78.5714,240.069 94.5714,240.736 110.5,243C 114.273,244.97 118.106,246.803 122,248.5C 131.703,246.814 141.203,247.647 150.5,251C 153.484,253.826 156.817,256.159 160.5,258C 182.13,256.618 190.13,266.285 184.5,287C 184.542,288.967 185.042,290.801 186,292.5C 193.974,294.74 200.808,298.906 206.5,305C 219.609,307.612 228.609,315.112 233.5,327.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 951.5,243.5 C 952.167,243.5 952.833,243.5 953.5,243.5C 954.301,246.814 956.134,249.48 959,251.5C 958.229,258.834 958.396,266.168 959.5,273.5C 956.15,273.665 952.817,273.498 949.5,273C 943.062,270.615 936.728,267.948 930.5,265C 923.616,263.904 916.783,262.737 910,261.5C 910.462,255.879 912.129,250.546 915,245.5C 919.494,242.336 924.494,241.003 930,241.5C 937.177,242.121 944.343,242.787 951.5,243.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150e1a\",\n    d: \"M 832.5,232.5 C 833.873,232.343 835.207,232.51 836.5,233C 826.816,236.257 818.316,241.423 811,248.5C 811.546,245.907 813.046,243.74 815.5,242C 820.938,238.284 826.605,235.118 832.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7950a9\",\n    d: \"M 776.5,323.5 C 769.533,326.708 762.2,328.041 754.5,327.5C 748.575,325.782 742.575,324.448 736.5,323.5C 723.584,319.466 715.25,324.133 711.5,337.5C 681.987,338.886 653.321,334.886 625.5,325.5C 627.311,323.615 628.478,321.281 629,318.5C 629.629,314.129 629.463,309.796 628.5,305.5C 633.192,305.076 637.525,303.576 641.5,301C 644.998,295.185 648.498,289.352 652,283.5C 659.931,273.118 670.431,267.951 683.5,268C 687.391,257.437 694.224,249.27 704,243.5C 707.382,247.077 710.882,250.577 714.5,254C 719.68,256.29 724.847,258.457 730,260.5C 741.667,277.5 753.333,294.5 765,311.5C 768.364,316.029 772.197,320.029 776.5,323.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 996.5,244.5 C 998.028,244.517 998.528,245.184 998,246.5C 988.379,256.461 977.879,265.295 966.5,273C 965.365,273.749 964.365,273.583 963.5,272.5C 960.557,267.229 959.89,261.729 961.5,256C 962.833,255.333 964.167,254.667 965.5,254C 976.9,253.899 987.233,250.732 996.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#18141c\",\n    d: \"M 563.5,242.5 C 563.167,243.833 562.833,245.167 562.5,246.5C 561.366,250.682 559.2,254.349 556,257.5C 555.333,256.167 555.333,254.833 556,253.5C 557.394,251.612 558.56,249.612 559.5,247.5C 560.593,245.651 561.926,243.984 563.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222222\",\n    d: \"M 928.5,249.5 C 936.334,249.106 944.001,249.939 951.5,252C 943.819,252.309 936.152,252.309 928.5,252C 925.966,253.934 923.299,255.268 920.5,256C 923.053,253.575 925.72,251.408 928.5,249.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1190.5,247.5 C 1191.28,254.355 1189.45,260.689 1185,266.5C 1183.89,268.037 1182.39,268.703 1180.5,268.5C 1183.54,261.416 1186.87,254.416 1190.5,247.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 127.5,252.5 C 130.167,252.5 132.833,252.5 135.5,252.5C 139.476,253.295 143.476,253.962 147.5,254.5C 149.895,260.02 153.895,262.353 159.5,261.5C 168.996,259.577 174.996,263.243 177.5,272.5C 176.017,277.766 174.85,283.099 174,288.5C 171.463,294.029 167.129,296.696 161,296.5C 155.515,295.584 150.015,295.418 144.5,296C 143.177,296.816 142.511,297.983 142.5,299.5C 141.5,300.833 140.5,300.833 139.5,299.5C 138.797,297.284 137.464,295.451 135.5,294C 132.108,291.306 128.441,289.14 124.5,287.5C 122.73,285.887 121.564,283.887 121,281.5C 120.5,272.173 120.334,262.839 120.5,253.5C 122.806,253.007 125.139,252.674 127.5,252.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2f2e\",\n    d: \"M 135.5,252.5 C 136.274,251.853 137.274,251.52 138.5,251.5C 141.179,251.936 143.845,252.436 146.5,253C 147.056,253.383 147.389,253.883 147.5,254.5C 143.476,253.962 139.476,253.295 135.5,252.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1d1c\",\n    d: \"M 127.5,252.5 C 125.139,252.674 122.806,253.007 120.5,253.5C 120.334,262.839 120.5,272.173 121,281.5C 121.564,283.887 122.73,285.887 124.5,287.5C 121.265,286.405 119.432,284.072 119,280.5C 118.965,271.45 118.799,262.45 118.5,253.5C 123.512,250.764 128.846,249.931 134.5,251C 131.964,251.186 129.631,251.686 127.5,252.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 126.5,253.5 C 128.245,256.885 128.745,260.552 128,264.5C 123.184,268.514 122.684,268.181 126.5,263.5C 125.5,263.5 124.5,263.5 123.5,263.5C 125.704,260.553 126.704,257.22 126.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#242424\",\n    d: \"M 1179.5,244.5 C 1180.38,244.369 1181.04,244.702 1181.5,245.5C 1178.05,251.807 1173.05,255.974 1166.5,258C 1172.3,254.883 1176.63,250.383 1179.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b7871\",\n    d: \"M 1200.5,251.5 C 1201.98,253.807 1203.98,255.64 1206.5,257C 1212.17,257.333 1217.83,257.667 1223.5,258C 1233.17,261 1242.83,264 1252.5,267C 1269.07,268.859 1284.4,265.359 1298.5,256.5C 1304.83,258.663 1311.16,260.83 1317.5,263C 1318.81,268.59 1319.48,274.423 1319.5,280.5C 1319.33,286.167 1319.17,291.833 1319,297.5C 1318.67,298.167 1318.33,298.833 1318,299.5C 1316.7,295.726 1314.53,292.559 1311.5,290C 1304.77,286.869 1297.77,284.536 1290.5,283C 1276.23,279.946 1261.9,277.28 1247.5,275C 1242.74,273.978 1238.08,272.644 1233.5,271C 1225.4,270.173 1217.4,270.673 1209.5,272.5C 1203.86,271.508 1198.2,270.675 1192.5,270C 1197.77,264.961 1200.44,258.795 1200.5,251.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161219\",\n    d: \"M 525.5,258.5 C 524.471,262.015 522.138,263.515 518.5,263C 519.381,262.292 520.047,261.458 520.5,260.5C 521.815,259.524 523.148,258.524 524.5,257.5C 525.107,257.624 525.44,257.957 525.5,258.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1173.5,258.5 C 1175.01,260.192 1176.68,261.025 1178.5,261C 1177.24,265.126 1175.4,268.96 1173,272.5C 1172.46,270.729 1171.63,270.396 1170.5,271.5C 1169.23,275.054 1167.23,278.054 1164.5,280.5C 1163.36,278.579 1163.19,276.579 1164,274.5C 1166.94,268.946 1170.1,263.613 1173.5,258.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9d86be\",\n    d: \"M 497.5,260.5 C 498.167,261.5 498.833,262.5 499.5,263.5C 497.786,264.738 495.786,265.405 493.5,265.5C 494.6,264.395 495.267,263.062 495.5,261.5C 496.167,261.167 496.833,260.833 497.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 861.5,261.5 C 870.714,261.517 879.381,263.683 887.5,268C 888.727,272.283 890.227,276.45 892,280.5C 892.817,283.964 892.483,287.298 891,290.5C 889.874,291.944 888.374,292.61 886.5,292.5C 875.816,289.773 865.149,286.939 854.5,284C 849.481,283.502 844.481,283.668 839.5,284.5C 839.336,281.813 839.503,279.146 840,276.5C 840.414,276.043 840.914,275.709 841.5,275.5C 842.167,272.833 842.833,270.167 843.5,267.5C 849.603,265.593 855.603,263.593 861.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c057\",\n    d: \"M 741.5,376.5 C 736.768,377.916 732.102,377.749 727.5,376C 723.2,370.699 718.534,365.699 713.5,361C 708.401,358.117 703.067,355.783 697.5,354C 703.242,352.197 708.909,350.197 714.5,348C 712.47,346.104 710.803,343.937 709.5,341.5C 717.367,340.96 725.2,341.626 733,343.5C 739.685,341.495 746.518,340.328 753.5,340C 756.167,338.667 758.833,337.333 761.5,336C 762.833,334.667 762.833,333.333 761.5,332C 770.5,328.333 779.5,324.667 788.5,321C 795.073,317.891 801.073,314.058 806.5,309.5C 808.027,309.573 809.027,308.906 809.5,307.5C 811.027,307.573 812.027,306.906 812.5,305.5C 814.404,305.262 815.738,304.262 816.5,302.5C 818.027,302.573 819.027,301.906 819.5,300.5C 821.027,300.573 822.027,299.906 822.5,298.5C 824.404,298.262 825.738,297.262 826.5,295.5C 828.027,295.573 829.027,294.906 829.5,293.5C 831.027,293.573 832.027,292.906 832.5,291.5C 834.027,291.573 835.027,290.906 835.5,289.5C 836.492,289.672 837.158,289.338 837.5,288.5C 842.425,285.668 847.758,284.834 853.5,286C 862.674,288.058 871.674,290.724 880.5,294C 892.667,296.5 897.5,291.667 895,279.5C 893.314,276.912 893.147,274.245 894.5,271.5C 892.007,269.42 889.341,267.586 886.5,266C 892.641,263.712 898.975,261.879 905.5,260.5C 907.898,261.389 909.898,262.889 911.5,265C 921.103,264.586 930.103,266.586 938.5,271C 932.86,270.616 927.194,270.616 921.5,271C 917.123,271.188 913.123,272.521 909.5,275C 903.141,282.032 904.474,286.865 913.5,289.5C 898.158,298.836 883.158,308.669 868.5,319C 856.521,318.357 844.521,318.024 832.5,318C 819.492,322.671 807.159,328.671 795.5,336C 785.436,346.733 774.77,356.733 763.5,366C 755.954,369.275 748.621,372.775 741.5,376.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171616\",\n    d: \"M 58.5,242.5 C 71.1711,242.333 83.8377,242.5 96.5,243C 102.602,244.303 108.102,246.803 113,250.5C 116.962,258.937 116.128,266.77 110.5,274C 101.221,275.237 92.2208,277.57 83.5,281C 72.3109,282.402 62.6442,279.235 54.5,271.5C 59.4469,273.973 64.4469,276.473 69.5,279C 71.7999,279.658 74.1332,280.158 76.5,280.5C 84.757,279.247 92.757,277.08 100.5,274C 103.5,273.667 106.5,273.333 109.5,273C 118.106,256.515 113.106,246.848 94.5,244C 82.5,243.333 70.5,243.333 58.5,244C 52.4379,245.062 48.6046,248.562 47,254.5C 45.9882,260.796 45.4882,267.129 45.5,273.5C 45.6068,275.379 45.1068,275.712 44,274.5C 43.7273,267.452 44.2273,260.452 45.5,253.5C 47.0696,246.599 51.4029,242.932 58.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 54.5,271.5 C 54.2648,270.903 53.7648,270.57 53,270.5C 50.5627,271.8 48.0627,272.8 45.5,273.5C 45.4882,267.129 45.9882,260.796 47,254.5C 48.6046,248.562 52.4379,245.062 58.5,244C 70.5,243.333 82.5,243.333 94.5,244C 113.106,246.848 118.106,256.515 109.5,273C 106.5,273.333 103.5,273.667 100.5,274C 92.757,277.08 84.757,279.247 76.5,280.5C 74.1332,280.158 71.7999,279.658 69.5,279C 64.4469,276.473 59.4469,273.973 54.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#212121\",\n    d: \"M 1002.5,255.5 C 1003.6,254.402 1004.93,254.235 1006.5,255C 1013.83,257.221 1020.83,260.221 1027.5,264C 1029.5,264.333 1031.5,264.667 1033.5,265C 1029.31,267.295 1025.64,266.628 1022.5,263C 1015.92,260.209 1009.26,257.709 1002.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#07050a\",\n    d: \"M 493.5,265.5 C 495.786,265.405 497.786,264.738 499.5,263.5C 500.824,262.15 501.824,262.317 502.5,264C 500.785,267.309 499.785,270.809 499.5,274.5C 495.154,274.445 491.821,272.612 489.5,269C 490.731,267.595 492.064,266.429 493.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1162.5,262.5 C 1163.74,265.74 1163.58,269.074 1162,272.5C 1160.17,275 1158.33,277.5 1156.5,280C 1155.21,280.49 1153.87,280.657 1152.5,280.5C 1152.53,275.783 1154.19,271.783 1157.5,268.5C 1158.25,269.376 1158.75,270.376 1159,271.5C 1160.27,268.516 1161.44,265.516 1162.5,262.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#110b15\",\n    d: \"M 778.5,322.5 C 777.833,322.833 777.167,323.167 776.5,323.5C 772.197,320.029 768.364,316.029 765,311.5C 753.333,294.5 741.667,277.5 730,260.5C 724.847,258.457 719.68,256.29 714.5,254C 710.882,250.577 707.382,247.077 704,243.5C 694.224,249.27 687.391,257.437 683.5,268C 670.431,267.951 659.931,273.118 652,283.5C 648.498,289.352 644.998,295.185 641.5,301C 637.525,303.576 633.192,305.076 628.5,305.5C 629.463,309.796 629.629,314.129 629,318.5C 628.478,321.281 627.311,323.615 625.5,325.5C 625.5,324.833 625.167,324.5 624.5,324.5C 627.115,317.838 627.115,311.171 624.5,304.5C 629.742,303.773 634.742,302.273 639.5,300C 641.958,298.213 643.624,295.879 644.5,293C 641.032,290.428 637.365,288.095 633.5,286C 629.534,281.19 624.867,277.356 619.5,274.5C 611.56,277.37 607.226,283.037 606.5,291.5C 589.308,295.064 575.975,304.064 566.5,318.5C 566.672,317.508 566.338,316.842 565.5,316.5C 566.44,314.388 567.606,312.388 569,310.5C 578.649,300.586 590.149,293.586 603.5,289.5C 605.425,282.74 609.425,277.573 615.5,274C 618.964,273.183 622.298,273.517 625.5,275C 630.531,281.53 636.864,286.363 644.5,289.5C 649.258,282.906 654.925,277.073 661.5,272C 667.911,267.951 674.911,266.117 682.5,266.5C 683.511,262.144 685.344,258.144 688,254.5C 691.5,251 695,247.5 698.5,244C 700.914,242.115 703.581,241.448 706.5,242C 708.926,245.516 711.593,248.849 714.5,252C 719.928,254.555 725.428,256.722 731,258.5C 743.333,276.5 755.667,294.5 768,312.5C 771.396,316.065 774.896,319.398 778.5,322.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1086.5,264.5 C 1088.03,269.613 1087.03,274.279 1083.5,278.5C 1082.8,273.558 1083.8,268.892 1086.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1060.5,266.5 C 1061.64,269.304 1061.8,272.304 1061,275.5C 1060.37,279.585 1059.2,280.085 1057.5,277C 1058.12,273.356 1059.12,269.856 1060.5,266.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191918\",\n    d: \"M 159.5,261.5 C 169.785,258.313 176.452,261.979 179.5,272.5C 178.107,278.524 176.607,284.524 175,290.5C 173.437,293.728 170.937,295.895 167.5,297C 161.651,297.602 155.818,297.435 150,296.5C 146.876,296.11 144.376,297.11 142.5,299.5C 142.511,297.983 143.177,296.816 144.5,296C 150.015,295.418 155.515,295.584 161,296.5C 167.129,296.696 171.463,294.029 174,288.5C 174.85,283.099 176.017,277.766 177.5,272.5C 174.996,263.243 168.996,259.577 159.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1094.5,265.5 C 1094.93,269.671 1093.43,273.337 1090,276.5C 1090.36,272.434 1091.86,268.768 1094.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1057.5,265.5 C 1058.12,265.917 1058.46,266.584 1058.5,267.5C 1057.35,271.434 1056.52,275.434 1056,279.5C 1052.45,285.011 1051.11,284.344 1052,277.5C 1053.59,273.328 1055.42,269.328 1057.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1b1b\",\n    d: \"M 128.5,268.5 C 130.361,271.022 132.361,273.522 134.5,276C 133.004,276.507 131.837,276.007 131,274.5C 129.441,272.783 128.608,270.783 128.5,268.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 122.5,271.5 C 125.614,275.677 127.447,280.344 128,285.5C 123.915,281.751 122.082,277.084 122.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c8c8c\",\n    d: \"M 918.5,272.5 C 929.695,271.897 940.361,273.897 950.5,278.5C 951.386,279.325 951.719,280.325 951.5,281.5C 943.381,281.281 935.381,281.781 927.5,283C 929.684,280.984 931.684,278.817 933.5,276.5C 933,276.167 932.5,275.833 932,275.5C 927.888,281.631 922.055,284.131 914.5,283C 916.962,284.216 919.629,284.882 922.5,285C 918.259,286.457 913.926,286.791 909.5,286C 907.376,283.592 907.543,281.092 910,278.5C 912.736,276.248 915.569,274.248 918.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1f\",\n    d: \"M 1157.5,261.5 C 1158.24,261.369 1158.91,261.536 1159.5,262C 1157.02,264.744 1154.02,266.744 1150.5,268C 1144.63,269.787 1138.63,270.787 1132.5,271C 1130.27,273.938 1127.6,275.438 1124.5,275.5C 1126.65,273.851 1128.65,272.018 1130.5,270C 1125.04,269.092 1119.71,267.759 1114.5,266C 1124.19,266.56 1133.85,267.227 1143.5,268C 1148.88,267.14 1153.55,264.974 1157.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 1216.5,272.5 C 1241.21,274.927 1265.54,279.427 1289.5,286C 1295.52,287.561 1301.19,289.894 1306.5,293C 1310.42,296.677 1312.92,301.177 1314,306.5C 1315.14,319.146 1315.97,331.812 1316.5,344.5C 1308.15,345.104 1299.82,345.937 1291.5,347C 1281.47,351.269 1271.3,355.102 1261,358.5C 1256.05,357.443 1251.05,356.777 1246,356.5C 1229.52,358.449 1213.02,360.115 1196.5,361.5C 1188.91,359.849 1181.25,358.849 1173.5,358.5C 1163.85,359.583 1154.18,360.083 1144.5,360C 1131.68,356.867 1128.18,349.367 1134,337.5C 1136.56,331.939 1140.73,328.106 1146.5,326C 1152.36,319.145 1158.52,312.645 1165,306.5C 1170.88,296.566 1177.38,287.066 1184.5,278C 1186.27,276.561 1188.27,275.561 1190.5,275C 1198.17,274.667 1205.83,274.333 1213.5,274C 1214.74,273.768 1215.74,273.268 1216.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 880.5,267.5 C 881.774,268.189 881.774,269.023 880.5,270C 877.833,271.667 875.167,273.333 872.5,275C 866.421,275.275 860.421,274.609 854.5,273C 860.83,273.066 867.163,273.066 873.5,273C 876.02,271.303 878.353,269.47 880.5,267.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 1031.5,269.5 C 1032.1,269.735 1032.43,270.235 1032.5,271C 1031.62,275.769 1030.12,280.269 1028,284.5C 1026.51,282.728 1026.18,280.728 1027,278.5C 1027.99,275.194 1029.49,272.194 1031.5,269.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5ab150\",\n    d: \"M 948.5,275.5 C 950.304,274.838 952.304,274.505 954.5,274.5C 957.037,274.397 959.371,274.897 961.5,276C 959.333,277.5 957.167,279 955,280.5C 953.223,278.21 951.056,276.543 948.5,275.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7850a8\",\n    d: \"M 624.5,324.5 C 623.551,325.152 622.385,325.486 621,325.5C 615.927,324.158 610.76,323.325 605.5,323C 606.762,320.505 606.429,320.172 604.5,322C 600.179,322.499 595.846,322.666 591.5,322.5C 591.07,319.138 592.07,316.305 594.5,314C 593.551,313.383 592.718,313.549 592,314.5C 590.589,316.65 589.755,318.984 589.5,321.5C 587.5,321.5 585.5,321.5 583.5,321.5C 584.172,318.657 585.505,316.157 587.5,314C 587.167,313.833 586.833,313.667 586.5,313.5C 584.113,315.607 582.78,318.273 582.5,321.5C 580.5,321.5 578.5,321.5 576.5,321.5C 576.878,319.079 577.545,316.746 578.5,314.5C 576.428,316.35 575.095,318.683 574.5,321.5C 571.645,322.803 568.645,322.803 565.5,321.5C 566.127,320.583 566.461,319.583 566.5,318.5C 575.975,304.064 589.308,295.064 606.5,291.5C 607.226,283.037 611.56,277.37 619.5,274.5C 624.867,277.356 629.534,281.19 633.5,286C 637.365,288.095 641.032,290.428 644.5,293C 643.624,295.879 641.958,298.213 639.5,300C 634.742,302.273 629.742,303.773 624.5,304.5C 627.115,311.171 627.115,317.838 624.5,324.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#241931\",\n    d: \"M 689.5,268.5 C 690.634,270.966 690.801,273.633 690,276.5C 678.088,288.377 677.754,288.044 689,275.5C 689.497,273.19 689.663,270.857 689.5,268.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1041.5,270.5 C 1043.25,273.355 1044.08,276.689 1044,280.5C 1045.75,277.328 1047.75,274.328 1050,271.5C 1049.61,276.634 1047.78,281.3 1044.5,285.5C 1041.4,283.655 1038.24,282.989 1035,283.5C 1034,284.5 1033,285.5 1032,286.5C 1032.05,281.026 1033.71,276.026 1037,271.5C 1036.75,274.133 1036.75,276.8 1037,279.5C 1038.51,276.473 1040.01,273.473 1041.5,270.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#160f1c\",\n    d: \"M 848.5,233.5 C 850.199,233.34 851.866,233.506 853.5,234C 847.414,235.627 841.914,238.46 837,242.5C 836.17,247.642 834.837,252.642 833,257.5C 829,261.5 825,265.5 821,269.5C 814.439,280.062 807.106,290.062 799,299.5C 798.282,300.451 797.449,300.617 796.5,300C 804,289.833 811.5,279.667 819,269.5C 823.333,265.167 827.667,260.833 832,256.5C 833.19,252.619 833.857,248.619 834,244.5C 837.857,239.468 842.69,235.801 848.5,233.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 131.5,278.5 C 134.726,281.93 137.226,285.93 139,290.5C 139.749,291.635 139.583,292.635 138.5,293.5C 136.515,291.543 135.015,289.21 134,286.5C 132.442,287.345 131.442,286.679 131,284.5C 129.188,282.079 129.354,280.079 131.5,278.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 947.5,282.5 C 957.66,283.36 967.66,285.194 977.5,288C 991.232,288.142 1004.9,289.142 1018.5,291C 1025.98,291.725 1031.31,295.392 1034.5,302C 1034.14,303.225 1033.64,304.391 1033,305.5C 1029.48,307.926 1026.15,310.593 1023,313.5C 1022.03,315.392 1021.36,317.392 1021,319.5C 1015.6,316.358 1009.77,314.525 1003.5,314C 984.51,314.624 965.51,314.957 946.5,315C 940.056,312.273 933.39,310.44 926.5,309.5C 922.481,309.507 918.815,310.673 915.5,313C 911.711,317.279 907.711,321.279 903.5,325C 892.825,327.603 882.492,326.603 872.5,322C 888.833,311 905.167,300 921.5,289C 930.204,286.491 938.87,284.324 947.5,282.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1086.5,283.5 C 1106.98,288.547 1127.65,289.714 1148.5,287C 1152.05,291.222 1153.22,296.055 1152,301.5C 1146.61,311.897 1138.77,320.064 1128.5,326C 1115.4,333.301 1102.23,340.468 1089,347.5C 1082.54,342.122 1075.04,339.288 1066.5,339C 1064.58,338.64 1062.91,337.806 1061.5,336.5C 1052.88,336.829 1044.22,336.996 1035.5,337C 1034.5,337.5 1033.5,338 1032.5,338.5C 1030.21,332.45 1028.21,326.283 1026.5,320C 1026.63,318.373 1027.13,316.873 1028,315.5C 1033.35,311.743 1038.18,307.41 1042.5,302.5C 1058.99,300.017 1073.65,293.684 1086.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 141.5,280.5 C 144.009,282.255 146.676,283.755 149.5,285C 155.837,285.066 162.17,285.066 168.5,285C 165.211,285.882 161.877,286.548 158.5,287C 163.674,292.247 163.341,292.581 157.5,288C 152.554,287.597 147.887,286.264 143.5,284C 142.177,283.184 141.511,282.017 141.5,280.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#302f2e\",\n    d: \"M 105.5,286.5 C 105.5,286.833 105.5,287.167 105.5,287.5C 89.2635,287.092 73.2635,289.092 57.5,293.5C 57.5,292.833 57.1667,292.5 56.5,292.5C 69.8051,288.668 83.4718,286.001 97.5,284.5C 100.438,284.568 103.105,285.234 105.5,286.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 105.5,287.5 C 111.94,286.79 117.94,287.957 123.5,291C 127.734,297.578 131.567,304.411 135,311.5C 138.949,316.428 143.116,321.094 147.5,325.5C 147.973,326.906 148.973,327.573 150.5,327.5C 152.172,330.022 153.672,332.688 155,335.5C 156.764,344.976 152.764,349.643 143,349.5C 137.02,348.646 131.02,347.979 125,347.5C 120.878,347.458 116.878,348.124 113,349.5C 102.29,347.251 91.4569,345.584 80.5,344.5C 77.8163,344.702 75.1497,345.035 72.5,345.5C 65.9511,343.227 59.6177,340.394 53.5,337C 48.1939,335.933 42.8605,335.099 37.5,334.5C 37.7373,324.771 38.5706,315.104 40,305.5C 43.311,297.985 49.1443,293.985 57.5,293.5C 73.2635,289.092 89.2635,287.092 105.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131312\",\n    d: \"M 138.5,281.5 C 139.479,283.739 141.146,285.406 143.5,286.5C 144.946,288.618 145.613,290.951 145.5,293.5C 144.178,293.67 143.011,293.337 142,292.5C 139.668,289.178 138.502,285.511 138.5,281.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2142\",\n    d: \"M 665.5,290.5 C 666.508,288.661 668.008,287.328 670,286.5C 669.441,288.583 667.941,289.916 665.5,290.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#36254a\",\n    d: \"M 690.5,283.5 C 691.668,285.885 691.001,287.885 688.5,289.5C 688.167,289.333 687.833,289.167 687.5,289C 689.16,287.512 690.16,285.679 690.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1e\",\n    d: \"M 124.5,287.5 C 128.441,289.14 132.108,291.306 135.5,294C 137.464,295.451 138.797,297.284 139.5,299.5C 134.476,295.47 129.476,291.47 124.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271a35\",\n    d: \"M 722.5,280.5 C 724.32,287.151 728.653,291.318 735.5,293C 727.483,292.819 723.15,288.652 722.5,280.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2a1d\",\n    d: \"M 835.5,289.5 C 835.027,290.906 834.027,291.573 832.5,291.5C 832.973,290.094 833.973,289.427 835.5,289.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21172e\",\n    d: \"M 665.5,290.5 C 664.833,291.833 663.833,292.833 662.5,293.5C 662.5,291.5 663.5,290.5 665.5,290.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b291a\",\n    d: \"M 832.5,291.5 C 832.027,292.906 831.027,293.573 829.5,293.5C 829.973,292.094 830.973,291.427 832.5,291.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#182517\",\n    d: \"M 829.5,293.5 C 829.027,294.906 828.027,295.573 826.5,295.5C 826.973,294.094 827.973,293.427 829.5,293.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21172e\",\n    d: \"M 662.5,293.5 C 662.573,295.027 661.906,296.027 660.5,296.5C 660.427,294.973 661.094,293.973 662.5,293.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a2818\",\n    d: \"M 826.5,295.5 C 825.738,297.262 824.404,298.262 822.5,298.5C 823.262,296.738 824.596,295.738 826.5,295.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#241932\",\n    d: \"M 616.5,302.5 C 616.643,299.903 617.477,297.569 619,295.5C 619.061,298.151 618.227,300.484 616.5,302.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e321c\",\n    d: \"M 822.5,298.5 C 822.027,299.906 821.027,300.573 819.5,300.5C 819.973,299.094 820.973,298.427 822.5,298.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 213.5,312.5 C 215.725,316.235 218.558,319.568 222,322.5C 221.919,327.262 221.085,331.928 219.5,336.5C 217.5,336.167 215.5,335.833 213.5,335.5C 206.778,335.29 200.112,335.79 193.5,337C 190.71,337.561 188.377,338.894 186.5,341C 185.207,341.49 183.873,341.657 182.5,341.5C 181.198,339.178 179.198,337.845 176.5,337.5C 176.027,336.094 175.027,335.427 173.5,335.5C 171.371,333.05 168.704,331.383 165.5,330.5C 163.45,328.453 161.117,326.786 158.5,325.5C 154.455,321.62 150.955,317.287 148,312.5C 147.333,309.167 147.333,305.833 148,302.5C 148.519,301.484 149.353,300.818 150.5,300.5C 162.238,303.204 173.905,302.871 185.5,299.5C 191.501,303.836 197.834,307.669 204.5,311C 207.432,311.953 210.432,312.453 213.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 968.5,300.5 C 975.529,300.377 982.529,300.71 989.5,301.5C 989.668,305.939 988.001,308.606 984.5,309.5C 985.248,307.668 986.248,306.001 987.5,304.5C 981.551,302.172 975.551,302.006 969.5,304C 965.738,305.881 962.071,307.714 958.5,309.5C 958.297,307.61 958.963,306.11 960.5,305C 963.099,303.205 965.766,301.705 968.5,300.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b251b\",\n    d: \"M 819.5,300.5 C 819.027,301.906 818.027,302.573 816.5,302.5C 816.973,301.094 817.973,300.427 819.5,300.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191919\",\n    d: \"M 1025.5,298.5 C 1025.7,303.611 1023.54,307.944 1019,311.5C 1019.08,307.545 1020.24,303.878 1022.5,300.5C 1024.4,301.639 1025.4,300.973 1025.5,298.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251a33\",\n    d: \"M 660.5,296.5 C 659.908,299.127 659.575,301.794 659.5,304.5C 657.774,304.815 656.107,304.981 654.5,305C 655.563,303.812 656.897,303.312 658.5,303.5C 658.171,300.772 658.837,298.438 660.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#261a35\",\n    d: \"M 738.5,296.5 C 741.022,300.572 742.855,304.906 744,309.5C 741.289,305.532 739.456,301.198 738.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f2a1f\",\n    d: \"M 816.5,302.5 C 815.738,304.262 814.404,305.262 812.5,305.5C 813.262,303.738 814.596,302.738 816.5,302.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e1e1e\",\n    d: \"M 1017.5,301.5 C 1018.52,304.377 1018.35,307.377 1017,310.5C 1014.29,313.165 1013.29,312.498 1014,308.5C 1015.26,306.216 1016.43,303.882 1017.5,301.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b1e3c\",\n    d: \"M 730.5,309.5 C 725.049,307.953 722.549,304.286 723,298.5C 724.15,303.18 726.65,306.846 730.5,309.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281b36\",\n    d: \"M 616.5,302.5 C 615.489,306.856 613.656,310.856 611,314.5C 612,310.164 613.833,306.164 616.5,302.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2e1c\",\n    d: \"M 812.5,305.5 C 812.027,306.906 811.027,307.573 809.5,307.5C 809.973,306.094 810.973,305.427 812.5,305.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c2c2b\",\n    d: \"M 214.5,312.5 C 214.167,312.5 213.833,312.5 213.5,312.5C 210.432,312.453 207.432,311.953 204.5,311C 197.834,307.669 191.501,303.836 185.5,299.5C 173.905,302.871 162.238,303.204 150.5,300.5C 149.353,300.818 148.519,301.484 148,302.5C 147.333,305.833 147.333,309.167 148,312.5C 150.955,317.287 154.455,321.62 158.5,325.5C 150.826,321.663 146.493,315.496 145.5,307C 145.376,304.41 146.042,302.077 147.5,300C 160.873,300.816 174.207,300.483 187.5,299C 195.503,305.668 204.503,310.168 214.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281a37\",\n    d: \"M 578.5,314.5 C 579.802,311.025 582.135,308.858 585.5,308C 583.297,310.372 580.963,312.539 578.5,314.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#192519\",\n    d: \"M 809.5,307.5 C 809.027,308.906 808.027,309.573 806.5,309.5C 806.973,308.094 807.973,307.427 809.5,307.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 924.5,311.5 C 935.48,315.825 946.814,319.158 958.5,321.5C 964.045,319.865 969.711,318.698 975.5,318C 988.89,317.076 1002.22,317.409 1015.5,319C 1021.49,323.958 1025.49,330.291 1027.5,338C 1027.36,338.772 1027.02,339.439 1026.5,340C 1021.51,341.391 1016.51,341.557 1011.5,340.5C 1009.34,332.781 1008.34,332.781 1008.5,340.5C 1007.5,340.5 1006.5,340.5 1005.5,340.5C 1005.66,337.813 1005.5,335.146 1005,332.5C 1003.85,335.393 1003.35,338.393 1003.5,341.5C 1002.5,341.5 1001.5,341.5 1000.5,341.5C 1000.63,339.345 1000.13,337.345 999,335.5C 998.232,338.835 997.066,342.001 995.5,345C 991.143,347.351 986.81,349.351 982.5,351C 983.765,349.663 984.265,348.163 984,346.5C 980.619,350.759 977.119,354.926 973.5,359C 972.167,359.167 970.833,359.333 969.5,359.5C 959.546,357.238 949.88,354.071 940.5,350C 930.878,347.756 921.212,345.756 911.5,344C 909.55,342.756 908.55,340.923 908.5,338.5C 910.04,327.063 915.373,318.063 924.5,311.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151514\",\n    d: \"M 105.5,287.5 C 105.5,287.167 105.5,286.833 105.5,286.5C 111.762,285.872 117.762,286.705 123.5,289C 128.629,296.086 133.129,303.586 137,311.5C 141.248,315.69 144.748,320.356 147.5,325.5C 143.116,321.094 138.949,316.428 135,311.5C 131.567,304.411 127.734,297.578 123.5,291C 117.94,287.957 111.94,286.79 105.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202020\",\n    d: \"M 162.5,313.5 C 163.946,312.387 165.613,312.22 167.5,313C 173.5,316 179.5,319 185.5,322C 190.453,322.995 195.453,323.662 200.5,324C 196.167,324.667 191.833,324.667 187.5,324C 179.365,319.93 171.031,316.43 162.5,313.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f1f41\",\n    d: \"M 730.5,309.5 C 732.411,309.574 733.578,310.574 734,312.5C 734.706,314.971 734.373,317.305 733,319.5C 732.974,315.861 732.14,312.528 730.5,309.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1120.5,313.5 C 1121.65,317.99 1120.82,322.324 1118,326.5C 1113.84,330.674 1112.84,330.007 1115,324.5C 1116.85,320.807 1118.68,317.14 1120.5,313.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1f\",\n    d: \"M 1118.5,304.5 C 1120.86,304.337 1123.19,304.503 1125.5,305C 1112.18,309.161 1099.18,314.161 1086.5,320C 1078.74,322.13 1071.07,321.963 1063.5,319.5C 1071.83,319.943 1080.16,319.109 1088.5,317C 1098.88,313.491 1108.88,309.324 1118.5,304.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b7871\",\n    d: \"M 1168.5,287.5 C 1170.29,287.215 1171.95,287.548 1173.5,288.5C 1164.11,304.386 1151.78,317.553 1136.5,328C 1131.85,331.642 1128.35,336.142 1126,341.5C 1124.13,348.011 1125.96,353.178 1131.5,357C 1137.1,360.201 1143.1,362.201 1149.5,363C 1165.41,362.98 1181.24,363.813 1197,365.5C 1210.12,363.645 1223.28,362.145 1236.5,361C 1243.01,360.047 1249.34,360.38 1255.5,362C 1221.49,368.621 1187.16,371.954 1152.5,372C 1145.62,373.902 1138.62,375.236 1131.5,376C 1119.13,377.003 1106.8,378.336 1094.5,380C 1091.38,380.479 1088.54,381.646 1086,383.5C 1083.59,379.858 1082.93,375.858 1084,371.5C 1084.45,364.627 1086.45,358.294 1090,352.5C 1095.05,347.726 1100.55,343.56 1106.5,340C 1119.49,333.507 1132.16,326.507 1144.5,319C 1147,316.5 1149.5,314 1152,311.5C 1153.81,300.858 1159.31,292.858 1168.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 213.5,312.5 C 213.833,312.5 214.167,312.5 214.5,312.5C 217.14,315.971 220.306,318.971 224,321.5C 224.781,322.729 225.281,324.062 225.5,325.5C 224.034,329.064 222.868,332.73 222,336.5C 221.023,337.774 220.189,337.774 219.5,336.5C 221.085,331.928 221.919,327.262 222,322.5C 218.558,319.568 215.725,316.235 213.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#412c5b\",\n    d: \"M 578.5,314.5 C 577.545,316.746 576.878,319.079 576.5,321.5C 578.5,321.5 580.5,321.5 582.5,321.5C 579.939,322.767 577.272,322.767 574.5,321.5C 575.095,318.683 576.428,316.35 578.5,314.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d100d\",\n    d: \"M 806.5,309.5 C 801.073,314.058 795.073,317.891 788.5,321C 779.5,324.667 770.5,328.333 761.5,332C 762.833,333.333 762.833,334.667 761.5,336C 758.833,337.333 756.167,338.667 753.5,340C 746.518,340.328 739.685,341.495 733,343.5C 725.2,341.626 717.367,340.96 709.5,341.5C 710.803,343.937 712.47,346.104 714.5,348C 708.909,350.197 703.242,352.197 697.5,354C 703.067,355.783 708.401,358.117 713.5,361C 718.534,365.699 723.2,370.699 727.5,376C 732.102,377.749 736.768,377.916 741.5,376.5C 741.842,377.338 742.508,377.672 743.5,377.5C 737.846,379.777 731.846,380.944 725.5,381C 709.133,381.221 692.8,382.055 676.5,383.5C 667.13,382.83 657.797,381.83 648.5,380.5C 635.39,383.194 622.39,386.361 609.5,390C 596.911,392.709 584.245,394.876 571.5,396.5C 571.833,395.833 572.167,395.167 572.5,394.5C 586.961,393.641 600.961,390.808 614.5,386C 577.356,381.088 540.856,373.255 505,362.5C 494.125,366.275 482.959,368.775 471.5,370C 450.5,370.333 429.5,370.667 408.5,371C 378.835,373.204 349.168,375.37 319.5,377.5C 310.841,376.917 302.174,376.584 293.5,376.5C 294.209,375.596 295.209,375.263 296.5,375.5C 341.92,373.686 387.254,370.519 432.5,366C 413.114,364.48 393.78,362.48 374.5,360C 357.503,353.918 340.17,349.084 322.5,345.5C 316.854,346.095 311.188,346.428 305.5,346.5C 298.92,346.716 292.587,346.049 286.5,344.5C 307.173,345.541 327.506,343.374 347.5,338C 351.944,336.889 355.944,334.889 359.5,332C 361.712,327.276 365.379,324.776 370.5,324.5C 365.728,326.615 362.728,330.282 361.5,335.5C 367.768,337.806 374.101,339.806 380.5,341.5C 380.494,338.15 379.494,335.15 377.5,332.5C 376.702,334.078 376.202,335.744 376,337.5C 374.6,334.098 372.433,331.264 369.5,329C 379.185,330.451 388.852,332.451 398.5,335C 401.71,337.104 405.043,338.937 408.5,340.5C 410.055,340.278 411.389,339.611 412.5,338.5C 413.631,340.074 413.798,341.741 413,343.5C 411.853,342.542 410.853,342.875 410,344.5C 408.739,341.18 407.072,340.846 405,343.5C 404.163,341.993 402.996,341.493 401.5,342C 405.474,346.577 409.974,347.411 415,344.5C 414.983,336.331 416.15,335.831 418.5,343C 420.951,343.306 423.284,342.806 425.5,341.5C 415.656,334.265 404.656,329.432 392.5,327C 386.238,326.967 380.238,326.134 374.5,324.5C 390.419,324.063 405.419,327.563 419.5,335C 441.43,341.048 463.763,343.048 486.5,341C 499.864,340.816 511.197,335.982 520.5,326.5C 520.833,326.667 521.167,326.833 521.5,327C 518.384,330.718 514.718,333.718 510.5,336C 527.15,329.504 544.483,325.171 562.5,323C 563.914,321.007 564.914,318.84 565.5,316.5C 566.338,316.842 566.672,317.508 566.5,318.5C 566.461,319.583 566.127,320.583 565.5,321.5C 568.645,322.803 571.645,322.803 574.5,321.5C 577.272,322.767 579.939,322.767 582.5,321.5C 582.78,318.273 584.113,315.607 586.5,313.5C 586.833,313.667 587.167,313.833 587.5,314C 585.505,316.157 584.172,318.657 583.5,321.5C 585.948,322.473 588.615,322.806 591.5,322.5C 595.846,322.666 600.179,322.499 604.5,322C 606.429,320.172 606.762,320.505 605.5,323C 610.76,323.325 615.927,324.158 621,325.5C 622.385,325.486 623.551,325.152 624.5,324.5C 625.167,324.5 625.5,324.833 625.5,325.5C 653.321,334.886 681.987,338.886 711.5,337.5C 715.25,324.133 723.584,319.466 736.5,323.5C 724.281,321.427 717.281,326.427 715.5,338.5C 722.866,338.77 730.199,339.437 737.5,340.5C 744.779,339.454 751.779,337.454 758.5,334.5C 759.777,330.76 758.444,328.426 754.5,327.5C 762.2,328.041 769.533,326.708 776.5,323.5C 777.167,323.167 777.833,322.833 778.5,322.5C 788.038,318.546 797.371,314.213 806.5,309.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f2a58\",\n    d: \"M 591.5,322.5 C 588.615,322.806 585.948,322.473 583.5,321.5C 585.5,321.5 587.5,321.5 589.5,321.5C 589.755,318.984 590.589,316.65 592,314.5C 592.718,313.549 593.551,313.383 594.5,314C 592.07,316.305 591.07,319.138 591.5,322.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a1d3a\",\n    d: \"M 658.5,314.5 C 659.043,314.56 659.376,314.893 659.5,315.5C 654.889,320.618 654.556,320.285 658.5,314.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1111.5,319.5 C 1112.5,319.47 1113.16,319.97 1113.5,321C 1112.13,326.912 1109.13,331.745 1104.5,335.5C 1104.17,335.167 1103.83,334.833 1103.5,334.5C 1106.22,329.466 1108.89,324.466 1111.5,319.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 165.5,318.5 C 167.764,321.792 168.93,325.459 169,329.5C 166.147,326.423 164.981,322.756 165.5,318.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 858.5,346.5 C 858.737,347.791 858.404,348.791 857.5,349.5C 856.955,347.407 856.122,345.407 855,343.5C 854.667,346.833 854.333,350.167 854,353.5C 854.011,348.841 852.011,345.508 848,343.5C 847.667,346.5 847.333,349.5 847,352.5C 846.527,350.221 845.527,348.221 844,346.5C 843.248,349.894 843.415,353.227 844.5,356.5C 846.326,356.92 848.326,356.92 850.5,356.5C 850.351,355.448 850.517,354.448 851,353.5C 851.81,358.046 853.143,358.38 855,354.5C 855.464,355.094 855.631,355.761 855.5,356.5C 856.167,357.167 856.833,357.833 857.5,358.5C 856.547,360.61 854.881,361.777 852.5,362C 833.463,363.588 814.463,365.588 795.5,368C 786.482,368.832 777.482,368.665 768.5,367.5C 779.65,357.517 790.65,347.351 801.5,337C 819.395,324.609 839.062,320.276 860.5,324C 871.829,326.997 883.162,329.997 894.5,333C 886.833,337.833 879.167,342.667 871.5,347.5C 870.808,346.975 870.308,346.308 870,345.5C 868.75,346.573 867.416,346.573 866,345.5C 863.919,347.713 862.585,350.38 862,353.5C 861.743,349.623 860.743,345.957 859,342.5C 858.51,343.793 858.343,345.127 858.5,346.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 736.5,323.5 C 742.575,324.448 748.575,325.782 754.5,327.5C 758.444,328.426 759.777,330.76 758.5,334.5C 751.779,337.454 744.779,339.454 737.5,340.5C 730.199,339.437 722.866,338.77 715.5,338.5C 717.281,326.427 724.281,321.427 736.5,323.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 170.5,323.5 C 173.367,326.233 174.867,329.566 175,333.5C 172.135,330.772 170.635,327.438 170.5,323.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 175.5,323.5 C 176.222,323.918 176.722,324.584 177,325.5C 177.535,323.729 178.369,323.396 179.5,324.5C 181.396,327.827 182.396,331.16 182.5,334.5C 181.332,331.531 179.999,331.198 178.5,333.5C 177.093,330.279 176.093,326.945 175.5,323.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#898989\",\n    d: \"M 370.5,324.5 C 371.833,324.5 373.167,324.5 374.5,324.5C 380.238,326.134 386.238,326.967 392.5,327C 404.656,329.432 415.656,334.265 425.5,341.5C 423.284,342.806 420.951,343.306 418.5,343C 416.15,335.831 414.983,336.331 415,344.5C 409.974,347.411 405.474,346.577 401.5,342C 402.996,341.493 404.163,341.993 405,343.5C 407.072,340.846 408.739,341.18 410,344.5C 410.853,342.875 411.853,342.542 413,343.5C 413.798,341.741 413.631,340.074 412.5,338.5C 411.389,339.611 410.055,340.278 408.5,340.5C 405.043,338.937 401.71,337.104 398.5,335C 388.852,332.451 379.185,330.451 369.5,329C 372.433,331.264 374.6,334.098 376,337.5C 376.202,335.744 376.702,334.078 377.5,332.5C 379.494,335.15 380.494,338.15 380.5,341.5C 374.101,339.806 367.768,337.806 361.5,335.5C 362.728,330.282 365.728,326.615 370.5,324.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#61bf57\",\n    d: \"M 560.5,324.5 C 592.217,322.503 623.217,326.169 653.5,335.5C 649.878,336.325 646.211,336.825 642.5,337C 636.705,337.782 634.538,340.949 636,346.5C 636.75,347.126 637.584,347.626 638.5,348C 647.874,348.776 657.207,348.442 666.5,347C 671.439,346.754 673.106,344.421 671.5,340C 674.833,339.333 678.167,339.333 681.5,340C 679.913,340.862 678.246,341.529 676.5,342C 674.093,345.353 671.593,348.52 669,351.5C 660.732,350.173 652.398,349.506 644,349.5C 632.162,350.084 620.329,350.75 608.5,351.5C 593.14,350.329 577.806,348.829 562.5,347C 553.167,346.333 543.833,346.333 534.5,347C 522.499,352 510.165,356 497.5,359C 494.338,363.323 490.671,363.657 486.5,360C 482.5,356.667 478.5,353.333 474.5,350C 460.813,347.587 448.146,350.253 436.5,358C 435.139,359.584 434.472,361.418 434.5,363.5C 416.459,362.129 398.459,360.296 380.5,358C 363.833,353.333 347.167,348.667 330.5,344C 338.5,342 346.5,340 354.5,338C 355.685,336.647 357.019,335.48 358.5,334.5C 359.429,335.689 359.762,337.022 359.5,338.5C 365.268,338.442 370.601,339.942 375.5,343C 387.392,343.479 399.059,345.312 410.5,348.5C 416.34,346.496 422.34,344.996 428.5,344C 429.833,343 429.833,342 428.5,341C 430.167,340.833 431.833,340.667 433.5,340.5C 456.824,344.111 480.158,344.278 503.5,341C 522.541,335.147 541.541,329.647 560.5,324.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1098.5,320.5 C 1100.05,321.23 1100.88,322.563 1101,324.5C 1102,323.167 1103,321.833 1104,320.5C 1102.74,325.068 1101.41,329.735 1100,334.5C 1099.59,334.957 1099.09,335.291 1098.5,335.5C 1097.72,334.271 1097.22,332.938 1097,331.5C 1095.33,333.167 1093.67,334.833 1092,336.5C 1091.33,335.167 1091.33,333.833 1092,332.5C 1093.99,328.357 1096.16,324.357 1098.5,320.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1003.5,325.5 C 1005.29,325.215 1006.95,325.548 1008.5,326.5C 1001.87,332.098 994.207,334.598 985.5,334C 991.681,331.408 997.681,328.575 1003.5,325.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1091.5,323.5 C 1092.29,328.586 1090.29,332.586 1085.5,335.5C 1084.42,334.635 1084.25,333.635 1085,332.5C 1087.18,329.471 1089.34,326.471 1091.5,323.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121111\",\n    d: \"M 182.5,325.5 C 184.515,327.676 186.182,330.176 187.5,333C 183.809,332.179 182.142,329.679 182.5,325.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 56.5,292.5 C 57.1667,292.5 57.5,292.833 57.5,293.5C 49.1443,293.985 43.311,297.985 40,305.5C 38.5706,315.104 37.7373,324.771 37.5,334.5C 42.8605,335.099 48.1939,335.933 53.5,337C 59.6177,340.394 65.9511,343.227 72.5,345.5C 75.1497,345.035 77.8163,344.702 80.5,344.5C 91.4569,345.584 102.29,347.251 113,349.5C 116.878,348.124 120.878,347.458 125,347.5C 131.02,347.979 137.02,348.646 143,349.5C 152.764,349.643 156.764,344.976 155,335.5C 153.672,332.688 152.172,330.022 150.5,327.5C 156.954,331.661 159.454,337.661 158,345.5C 154.925,349.371 150.925,351.371 146,351.5C 139.533,350.505 133.033,349.838 126.5,349.5C 122.489,349.32 118.656,349.987 115,351.5C 103.628,349.739 92.2949,347.739 81,345.5C 76.5287,346.513 72.0287,346.679 67.5,346C 62.1667,343.333 56.8333,340.667 51.5,338C 45.8321,337.083 40.1655,336.25 34.5,335.5C 35.1989,327.525 35.6989,319.525 36,311.5C 37.8063,299.864 44.6396,293.53 56.5,292.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282726\",\n    d: \"M 165.5,330.5 C 168.704,331.383 171.371,333.05 173.5,335.5C 170.296,334.617 167.629,332.95 165.5,330.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 381.5,332.5 C 383.813,334.209 385.313,336.543 386,339.5C 386.494,337.866 386.66,336.199 386.5,334.5C 390.553,335.013 394.553,335.846 398.5,337C 399.423,339.041 399.756,341.208 399.5,343.5C 394.231,342.351 388.898,341.517 383.5,341C 382.518,338.262 381.852,335.428 381.5,332.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1c1b\",\n    d: \"M 213.5,335.5 C 206.564,336.173 199.564,337.34 192.5,339C 189.748,340.086 187.248,341.586 185,343.5C 183.699,343.361 182.866,342.695 182.5,341.5C 183.873,341.657 185.207,341.49 186.5,341C 188.377,338.894 190.71,337.561 193.5,337C 200.112,335.79 206.778,335.29 213.5,335.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1f\",\n    d: \"M 962.5,336.5 C 963.274,335.853 964.274,335.52 965.5,335.5C 970.02,336.212 974.353,337.379 978.5,339C 972.902,339.766 967.569,338.933 962.5,336.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#868686\",\n    d: \"M 644.5,337.5 C 652.536,337.93 660.536,338.763 668.5,340C 670.007,340.837 670.507,342.004 670,343.5C 659.754,346.205 649.254,347.205 638.5,346.5C 638.28,341.922 640.28,338.922 644.5,337.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262625\",\n    d: \"M 176.5,337.5 C 179.198,337.845 181.198,339.178 182.5,341.5C 180.147,340.66 178.147,339.326 176.5,337.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 850.5,332.5 C 851.675,332.281 852.675,332.614 853.5,333.5C 843.137,340.091 831.804,343.591 819.5,344C 827.313,341.047 835.313,338.713 843.5,337C 846.239,335.974 848.572,334.474 850.5,332.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 231.5,344.5 C 234.641,345.321 237.975,345.821 241.5,346C 243.078,347.094 244.745,347.928 246.5,348.5C 247.953,349.825 247.619,350.658 245.5,351C 233.966,353.55 222.632,356.384 211.5,359.5C 208.219,359.42 205.219,360.087 202.5,361.5C 199.167,361.833 195.833,362.167 192.5,362.5C 190.994,356.269 190.327,349.936 190.5,343.5C 196.93,342.123 203.43,341.123 210,340.5C 217.225,341.599 224.392,342.932 231.5,344.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#878787\",\n    d: \"M 697.5,340.5 C 703.475,339.813 707.809,342.147 710.5,347.5C 700.154,351.592 689.487,353.425 678.5,353C 670.64,350.848 670.64,349.181 678.5,348C 676.473,346.604 676.14,344.938 677.5,343C 681.857,342.369 686.191,342.535 690.5,343.5C 693.252,343.286 695.586,342.286 697.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1039.5,340.5 C 1054.16,340.102 1068.33,342.435 1082,347.5C 1082.71,358.018 1080.54,367.851 1075.5,377C 1072.1,378.916 1068.43,379.916 1064.5,380C 1056.8,380.231 1049.14,380.731 1041.5,381.5C 1033.6,379.46 1025.6,378.627 1017.5,379C 1012.62,381.256 1007.78,383.422 1003,385.5C 995.484,384.54 987.984,383.54 980.5,382.5C 976.727,363.534 984.061,351.368 1002.5,346C 1015.28,346.271 1027.61,344.438 1039.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 652.5,340.5 C 655.85,340.335 659.183,340.502 662.5,341C 656.658,343.395 650.658,343.895 644.5,342.5C 647.306,341.832 649.972,341.166 652.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 887.5,342.5 C 890.187,342.336 892.854,342.503 895.5,343C 909.03,346.553 922.697,349.553 936.5,352C 945.231,354.799 953.897,357.799 962.5,361C 965.757,362.043 969.09,362.543 972.5,362.5C 973.417,367.004 974.417,371.504 975.5,376C 975.262,379.071 973.596,380.571 970.5,380.5C 952.841,379.562 935.175,379.395 917.5,380C 899.935,375.692 882.268,371.859 864.5,368.5C 869.475,357.206 877.142,348.54 887.5,342.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c057\",\n    d: \"M 286.5,344.5 C 292.587,346.049 298.92,346.716 305.5,346.5C 311.188,346.428 316.854,346.095 322.5,345.5C 340.17,349.084 357.503,353.918 374.5,360C 393.78,362.48 413.114,364.48 432.5,366C 387.254,370.519 341.92,373.686 296.5,375.5C 274.733,372.046 253.066,373.046 231.5,378.5C 225.537,378.149 219.704,378.816 214,380.5C 211.528,379.678 209.028,379.011 206.5,378.5C 205.069,376.811 204.236,374.811 204,372.5C 201.873,374.114 200.373,376.114 199.5,378.5C 197.729,379.866 196.062,381.366 194.5,383C 192.527,383.495 190.527,383.662 188.5,383.5C 171.149,386.002 153.816,388.669 136.5,391.5C 134.927,391.248 133.594,390.582 132.5,389.5C 131.415,387.413 129.749,386.08 127.5,385.5C 126.251,383.864 124.584,382.697 122.5,382C 123.056,381.617 123.389,381.117 123.5,380.5C 133.793,378.01 144.126,375.677 154.5,373.5C 155.167,373.5 155.5,373.167 155.5,372.5C 171.381,369.278 187.047,365.612 202.5,361.5C 205.781,361.58 208.781,360.913 211.5,359.5C 224.828,357.452 237.828,354.452 250.5,350.5C 253.428,350.435 256.095,349.768 258.5,348.5C 265.599,347.309 272.599,345.642 279.5,343.5C 281.782,344.223 284.116,344.557 286.5,344.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 857.5,349.5 C 858.01,352.388 857.344,354.721 855.5,356.5C 855.631,355.761 855.464,355.094 855,354.5C 853.143,358.38 851.81,358.046 851,353.5C 850.517,354.448 850.351,355.448 850.5,356.5C 848.326,356.92 846.326,356.92 844.5,356.5C 843.415,353.227 843.248,349.894 844,346.5C 845.527,348.221 846.527,350.221 847,352.5C 847.333,349.5 847.667,346.5 848,343.5C 852.011,345.508 854.011,348.841 854,353.5C 854.333,350.167 854.667,346.833 855,343.5C 856.122,345.407 856.955,347.407 857.5,349.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 972.5,342.5 C 973.376,342.369 974.043,342.702 974.5,343.5C 973.494,344.396 973.494,345.062 974.5,345.5C 976.494,343.083 978.327,343.083 980,345.5C 981,344.5 982,343.5 983,342.5C 981.272,347.586 977.939,351.586 973,354.5C 973,353.167 973,351.833 973,350.5C 971.261,352.741 969.094,354.408 966.5,355.5C 965.808,354.975 965.308,354.308 965,353.5C 961.589,356.091 960.922,355.424 963,351.5C 966.062,348.268 969.229,345.268 972.5,342.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 700.5,345.5 C 702.857,345.337 705.19,345.503 707.5,346C 701.377,348.41 695.044,349.41 688.5,349C 692.675,348.009 696.675,346.842 700.5,345.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a7871\",\n    d: \"M 1295.5,348.5 C 1302.5,348.5 1309.5,348.5 1316.5,348.5C 1318.89,359.381 1319.72,370.381 1319,381.5C 1315.05,374.219 1309.22,369.053 1301.5,366C 1290.49,362.276 1279.15,360.609 1267.5,361C 1276.81,356.509 1286.14,352.342 1295.5,348.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 538.5,348.5 C 560.854,349.869 583.187,351.702 605.5,354C 629.521,354.134 653.521,354.8 677.5,356C 667.911,357.706 658.244,358.706 648.5,359C 651.207,360.057 654.04,360.557 657,360.5C 667.292,359.104 677.625,358.104 688,357.5C 695.4,357.078 702.233,358.744 708.5,362.5C 705.894,366.609 702.727,370.276 699,373.5C 699.007,370.137 700.173,367.137 702.5,364.5C 701.998,363.479 701.332,363.312 700.5,364C 698.592,367.896 696.592,371.729 694.5,375.5C 693.5,375.167 692.833,374.5 692.5,373.5C 693.706,371.484 693.706,369.484 692.5,367.5C 690.355,369.732 688.855,372.399 688,375.5C 684.561,379.371 680.394,380.371 675.5,378.5C 674.764,376.207 674.598,373.874 675,371.5C 673.853,374.618 672.52,377.618 671,380.5C 671.011,375.449 671.345,370.449 672,365.5C 670.107,369.59 668.941,373.923 668.5,378.5C 662.556,378.934 656.556,378.934 650.5,378.5C 651.219,374.562 652.885,371.062 655.5,368C 651.771,369.837 649.271,373.004 648,377.5C 646.817,378.731 645.651,378.731 644.5,377.5C 646.731,373.844 648.565,370.177 650,366.5C 647.045,370.244 644.211,374.078 641.5,378C 642.167,378.333 642.833,378.667 643.5,379C 636.304,381.206 628.971,382.706 621.5,383.5C 582.174,380.102 543.841,372.102 506.5,359.5C 517.121,355.405 527.788,351.738 538.5,348.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1d1b\",\n    d: \"M 231.5,344.5 C 224.392,342.932 217.225,341.599 210,340.5C 203.43,341.123 196.93,342.123 190.5,343.5C 190.327,349.936 190.994,356.269 192.5,362.5C 195.833,362.167 199.167,361.833 202.5,361.5C 187.047,365.612 171.381,369.278 155.5,372.5C 156.5,371.833 157.5,371.167 158.5,370.5C 164.293,369.979 169.96,368.812 175.5,367C 174.5,366.667 173.5,366.333 172.5,366C 159.629,365.077 146.963,363.077 134.5,360C 114.85,359.362 95.5171,356.696 76.5,352C 68.8333,351.333 61.1667,351.333 53.5,352C 43.3956,353.6 38.0623,359.433 37.5,369.5C 36.3065,369.03 35.6399,368.03 35.5,366.5C 35.7628,363.972 36.5961,361.639 38,359.5C 47.4467,349.592 58.9467,346.092 72.5,349C 93.8353,354.278 115.502,357.278 137.5,358C 151.251,361.751 165.251,364.251 179.5,365.5C 183.754,365.437 187.754,364.437 191.5,362.5C 189.682,356.275 188.849,349.942 189,343.5C 195.682,340.781 202.682,339.448 210,339.5C 219.755,341.395 229.588,342.895 239.5,344C 236.854,344.497 234.187,344.664 231.5,344.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 458.5,350.5 C 470.384,350.107 480.051,354.607 487.5,364C 485.365,365.381 483.032,366.381 480.5,367C 466.447,367.386 452.447,367.719 438.5,368C 437.426,367.261 436.759,366.261 436.5,365C 437.376,362.121 439.042,359.787 441.5,358C 447.032,354.894 452.699,352.394 458.5,350.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 158.5,370.5 C 144.5,370.5 130.5,370.5 116.5,370.5C 90.3386,369.502 64.0053,369.169 37.5,369.5C 38.0623,359.433 43.3956,353.6 53.5,352C 61.1667,351.333 68.8333,351.333 76.5,352C 95.5171,356.696 114.85,359.362 134.5,360C 146.963,363.077 159.629,365.077 172.5,366C 173.5,366.333 174.5,366.667 175.5,367C 169.96,368.812 164.293,369.979 158.5,370.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#243022\",\n    d: \"M 246.5,348.5 C 248.062,348.733 249.395,349.4 250.5,350.5C 237.828,354.452 224.828,357.452 211.5,359.5C 222.632,356.384 233.966,353.55 245.5,351C 247.619,350.658 247.953,349.825 246.5,348.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e4e4e\",\n    d: \"M 858.5,346.5 C 859.823,350.598 859.489,354.598 857.5,358.5C 856.833,357.833 856.167,357.167 855.5,356.5C 857.344,354.721 858.01,352.388 857.5,349.5C 858.404,348.791 858.737,347.791 858.5,346.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202020\",\n    d: \"M 1058.5,354.5 C 1062.42,355.117 1062.42,355.784 1058.5,356.5C 1048.2,358.35 1037.87,358.684 1027.5,357.5C 1036.48,356.668 1045.48,356.168 1054.5,356C 1056.06,355.79 1057.39,355.29 1058.5,354.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 471.5,358.5 C 476.367,358.96 477.534,361.293 475,365.5C 474.167,364.5 473.333,363.5 472.5,362.5C 471.808,363.025 471.308,363.692 471,364.5C 470.322,362.402 470.489,360.402 471.5,358.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1f1a\",\n    d: \"M 211.5,359.5 C 208.781,360.913 205.781,361.58 202.5,361.5C 205.219,360.087 208.219,359.42 211.5,359.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 549.5,353.5 C 550.705,354.672 550.705,356.005 549.5,357.5C 550.651,358.731 551.817,358.731 553,357.5C 554.694,362.689 556.694,362.689 559,357.5C 559.195,359.207 559.195,360.874 559,362.5C 560,361.833 561,361.167 562,360.5C 561.924,364.357 563.258,364.357 566,360.5C 566.492,361.549 566.326,362.549 565.5,363.5C 566.325,364.386 567.325,364.719 568.5,364.5C 568.5,363.167 568.5,361.833 568.5,360.5C 569.5,360.5 570.5,360.5 571.5,360.5C 571.703,362.39 571.037,363.89 569.5,365C 573.677,365.579 577.677,366.579 581.5,368C 576.103,368.086 570.77,368.252 565.5,368.5C 564.148,366.364 562.482,366.03 560.5,367.5C 559.749,366.624 559.249,365.624 559,364.5C 556.989,368.002 555.656,368.002 555,364.5C 551.524,367.186 551.024,366.853 553.5,363.5C 553,363.167 552.5,362.833 552,362.5C 549.749,363.56 547.582,364.393 545.5,365C 547.607,363.736 548.607,361.903 548.5,359.5C 546.007,360.229 543.674,361.063 541.5,362C 543.607,360.736 544.607,358.903 544.5,356.5C 546.989,356.759 548.656,355.759 549.5,353.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252525\",\n    d: \"M 988.5,360.5 C 996.335,361.876 1004,363.709 1011.5,366C 1004.47,365.552 997.474,364.552 990.5,363C 989.244,362.583 988.577,361.75 988.5,360.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282828\",\n    d: \"M 894.5,356.5 C 894.917,355.876 895.584,355.543 896.5,355.5C 906.805,358.435 917.138,361.268 927.5,364C 923.018,364.873 918.685,365.873 914.5,367C 916.394,365.899 917.061,364.566 916.5,363C 909.297,360.32 901.963,358.154 894.5,356.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#838383\",\n    d: \"M 709.5,363.5 C 713.745,364.006 715.579,366.34 715,370.5C 713.794,373.06 712.294,373.56 710.5,372C 712.029,370.418 712.529,368.585 712,366.5C 702.941,375.752 702.108,374.752 709.5,363.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1312.5,410.5 C 1311.54,412.265 1311.21,414.265 1311.5,416.5C 1307.5,416.5 1303.5,416.5 1299.5,416.5C 1234.49,415.097 1169.49,413.43 1104.5,411.5C 1097.66,411.539 1091,412.206 1084.5,413.5C 1082.66,411.473 1082.16,409.14 1083,406.5C 1087.94,400.014 1090.27,392.68 1090,384.5C 1092.47,382.562 1095.3,381.396 1098.5,381C 1113.51,379.718 1128.51,378.384 1143.5,377C 1148.01,376.737 1152.34,375.737 1156.5,374C 1190.78,373.79 1224.78,370.79 1258.5,365C 1276.04,362.509 1292.7,365.176 1308.5,373C 1313.84,377.02 1316.84,382.353 1317.5,389C 1315.76,396.145 1314.09,403.312 1312.5,410.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1072.5,365.5 C 1073.62,367.089 1073.45,368.756 1072,370.5C 1070.69,372.976 1068.86,374.976 1066.5,376.5C 1065.42,375.635 1065.25,374.635 1066,373.5C 1068.76,371.249 1070.93,368.582 1072.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 634.5,365.5 C 636.225,365.843 636.725,366.843 636,368.5C 633.705,371.797 631.038,374.797 628,377.5C 629.833,373.453 632,369.453 634.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1052.5,364.5 C 1052.17,369.279 1049.83,373.279 1045.5,376.5C 1044.42,375.635 1044.25,374.635 1045,373.5C 1047.33,370.335 1049.83,367.335 1052.5,364.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1060.5,363.5 C 1061.04,363.56 1061.38,363.893 1061.5,364.5C 1058.53,370.126 1054.53,374.793 1049.5,378.5C 1049.17,378.167 1048.83,377.833 1048.5,377.5C 1052.15,372.519 1056.15,367.853 1060.5,363.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1066.5,365.5 C 1065.98,369.97 1063.65,373.803 1059.5,377C 1058.5,377.667 1057.5,377.667 1056.5,377C 1059.67,372.999 1063,369.166 1066.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#708a33\",\n    d: \"M 116.5,370.5 C 130.5,370.5 144.5,370.5 158.5,370.5C 157.5,371.167 156.5,371.833 155.5,372.5C 155.5,373.167 155.167,373.5 154.5,373.5C 153.054,372.387 151.387,372.22 149.5,373C 140.535,374.903 131.869,377.403 123.5,380.5C 121.645,380.272 120.812,380.939 121,382.5C 122.993,383.914 125.16,384.914 127.5,385.5C 129.749,386.08 131.415,387.413 132.5,389.5C 132.414,390.496 132.748,391.329 133.5,392C 129.616,392.179 126.283,393.512 123.5,396C 124.256,398.856 125.089,401.689 126,404.5C 130.933,405.824 135.766,405.824 140.5,404.5C 148.541,404.729 156.541,405.396 164.5,406.5C 199.711,410.048 235.044,413.715 270.5,417.5C 270.281,418.675 270.614,419.675 271.5,420.5C 272.107,420.376 272.44,420.043 272.5,419.5C 274.734,419.62 276.901,419.287 279,418.5C 308.13,423.037 337.297,427.371 366.5,431.5C 367.726,431.48 368.726,431.147 369.5,430.5C 370.492,430.328 371.158,430.662 371.5,431.5C 394.965,434.402 418.631,436.736 442.5,438.5C 442.232,440.099 442.566,441.432 443.5,442.5C 444.708,441.766 446.041,441.433 447.5,441.5C 452.32,441.069 457.153,440.736 462,440.5C 476.977,441.693 491.81,442.693 506.5,443.5C 504.157,446.33 501.157,448.163 497.5,449C 504.815,448.647 512.148,448.647 519.5,449C 517.582,451.109 517.249,453.275 518.5,455.5C 519.708,454.766 521.041,454.433 522.5,454.5C 525.187,454.664 527.854,454.497 530.5,454C 531.416,453.722 532.082,453.222 532.5,452.5C 535.453,451.183 538.453,450.183 541.5,449.5C 545.819,448.965 550.152,448.465 554.5,448C 552.183,445.843 549.516,444.343 546.5,443.5C 545.508,443.672 544.842,443.338 544.5,442.5C 557.328,441.273 570.328,440.273 583.5,439.5C 586.167,439.833 588.833,440.167 591.5,440.5C 590.246,442.643 590.246,444.643 591.5,446.5C 591.833,446.5 592.167,446.5 592.5,446.5C 596.985,445.66 601.319,444.66 605.5,443.5C 605.973,442.094 606.973,441.427 608.5,441.5C 610.735,441.795 612.735,441.461 614.5,440.5C 619.136,439.851 623.802,439.351 628.5,439C 627.449,437.615 626.116,436.615 624.5,436C 629.272,435.017 633.938,434.183 638.5,433.5C 640.167,433.5 641.833,433.5 643.5,433.5C 643.724,437.562 645.724,440.395 649.5,442C 660.468,443.415 671.468,443.749 682.5,443C 689.432,440.697 696.432,438.697 703.5,437C 710.826,436.5 718.159,436.334 725.5,436.5C 725.702,434.011 725.202,431.677 724,429.5C 721.937,427.266 719.771,425.266 717.5,423.5C 725.043,421.827 732.71,420.66 740.5,420C 771.503,418.037 802.503,416.037 833.5,414C 844.008,413.175 854.342,413.341 864.5,414.5C 863.094,414.973 862.427,415.973 862.5,417.5C 857.738,420.684 856.071,425.017 857.5,430.5C 850.966,434.865 844.3,439.031 837.5,443C 845.984,442.994 854.317,442.494 862.5,441.5C 862.833,441.5 863.167,441.5 863.5,441.5C 863.938,441.435 864.272,441.601 864.5,442C 863.695,443.113 863.028,444.279 862.5,445.5C 861.861,446.097 861.528,446.93 861.5,448C 861.388,449.662 862.054,450.829 863.5,451.5C 868.78,450.144 874.114,448.977 879.5,448C 881.426,447.578 882.426,446.411 882.5,444.5C 885.496,446.076 888.162,445.743 890.5,443.5C 895.801,442.823 901.134,442.323 906.5,442C 902.765,438.466 898.432,435.966 893.5,434.5C 889.162,433.605 888.829,432.605 892.5,431.5C 894.017,431.489 895.184,430.823 896,429.5C 897.061,426.438 898.894,423.938 901.5,422C 893.392,419.404 885.725,420.237 878.5,424.5C 877.274,422.722 875.607,421.722 873.5,421.5C 870.392,421.625 868.392,420.292 867.5,417.5C 867.5,415.833 867.5,414.167 867.5,412.5C 871.167,412.5 874.833,412.5 878.5,412.5C 889.807,411.616 901.14,411.283 912.5,411.5C 912.263,412.791 912.596,413.791 913.5,414.5C 914.167,414.5 914.833,414.5 915.5,414.5C 919.078,414.451 922.411,413.785 925.5,412.5C 926.605,411.4 927.938,410.733 929.5,410.5C 935.58,410.483 941.58,409.817 947.5,408.5C 991.833,408.5 1036.17,408.5 1080.5,408.5C 1080.62,411.374 1081.62,413.874 1083.5,416C 1088.76,417.069 1094.09,417.903 1099.5,418.5C 1102.9,425.876 1106.4,433.21 1110,440.5C 1111.23,441.108 1112.56,441.441 1114,441.5C 1171.21,434.969 1228.37,428.136 1285.5,421C 1296.81,419.865 1308.14,419.365 1319.5,419.5C 1319.74,477.834 1320.07,536.167 1320.5,594.5C 886.833,594.5 453.167,594.5 19.5,594.5C 19.0989,523.495 18.4323,452.495 17.5,381.5C 18.4816,378.038 18.815,374.371 18.5,370.5C 51.1667,370.5 83.8333,370.5 116.5,370.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 645.5,365.5 C 646.043,365.56 646.376,365.893 646.5,366.5C 644.333,370.167 642.167,373.833 640,377.5C 638.951,378.517 637.784,378.684 636.5,378C 639.877,374.069 642.877,369.902 645.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1027.5,370.5 C 1028.5,370.414 1029.33,370.748 1030,371.5C 1030.85,374.053 1030.52,376.386 1029,378.5C 1028.95,376.26 1028.11,374.093 1026.5,372C 1027.06,371.617 1027.39,371.117 1027.5,370.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 1042.5,368.5 C 1044.03,368.517 1044.53,369.184 1044,370.5C 1041.96,372.874 1039.63,374.874 1037,376.5C 1036.33,375.5 1036.33,374.5 1037,373.5C 1038.81,371.7 1040.65,370.033 1042.5,368.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b5226\",\n    d: \"M 296.5,375.5 C 295.209,375.263 294.209,375.596 293.5,376.5C 279.848,375.495 266.181,375.329 252.5,376C 245.373,377.259 238.373,378.759 231.5,380.5C 231.5,379.833 231.5,379.167 231.5,378.5C 253.066,373.046 274.733,372.046 296.5,375.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa982\",\n    d: \"M 206.5,378.5 C 208.838,379.682 210.838,381.348 212.5,383.5C 211.051,384.172 209.718,384.839 208.5,385.5C 204.647,386.562 203.647,388.895 205.5,392.5C 205.423,393.75 204.756,394.583 203.5,395C 198.316,395.816 193.316,395.65 188.5,394.5C 191.656,390.922 195.656,388.922 200.5,388.5C 199.065,387.071 198.065,385.405 197.5,383.5C 198.187,381.823 198.854,380.156 199.5,378.5C 200.373,376.114 201.873,374.114 204,372.5C 204.236,374.811 205.069,376.811 206.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1d1d\",\n    d: \"M 638.5,367.5 C 639.376,367.369 640.043,367.702 640.5,368.5C 631.049,383.259 630.382,382.926 638.5,367.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202e15\",\n    d: \"M 154.5,373.5 C 144.126,375.677 133.793,378.01 123.5,380.5C 131.869,377.403 140.535,374.903 149.5,373C 151.387,372.22 153.054,372.387 154.5,373.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c057\",\n    d: \"M 572.5,394.5 C 563.819,394.248 555.152,394.082 546.5,394C 554.79,395.206 563.123,396.039 571.5,396.5C 584.245,394.876 596.911,392.709 609.5,390C 622.39,386.361 635.39,383.194 648.5,380.5C 657.797,381.83 667.13,382.83 676.5,383.5C 692.8,382.055 709.133,381.221 725.5,381C 731.846,380.944 737.846,379.777 743.5,377.5C 750.474,375.598 757.307,373.264 764,370.5C 771.316,371.103 778.649,371.437 786,371.5C 804.478,370.102 822.978,369.602 841.5,370C 853.71,372.568 866.043,374.235 878.5,375C 850.521,381.462 822.521,387.796 794.5,394C 791.167,394.667 787.833,394.667 784.5,394C 779.252,389.125 773.085,386.292 766,385.5C 754.423,389.018 742.589,391.518 730.5,393C 725.516,393.66 721.183,395.66 717.5,399C 712.167,399.333 706.833,399.667 701.5,400C 706.167,400.333 710.833,400.667 715.5,401C 712.431,405.325 713.098,408.992 717.5,412C 731.086,412.41 744.419,410.744 757.5,407C 769.252,405.906 780.919,404.239 792.5,402C 791.167,400.667 789.833,399.333 788.5,398C 821.305,392.106 853.805,384.94 886,376.5C 892.967,378.564 899.8,381.064 906.5,384C 914.165,384.595 921.832,385.095 929.5,385.5C 934.347,386.619 939.347,386.619 944.5,385.5C 960.763,382.596 976.763,383.763 992.5,389C 976.125,392.365 960.791,398.198 946.5,406.5C 944.95,405.559 943.284,404.893 941.5,404.5C 939.304,403.188 936.97,402.021 934.5,401C 935.858,400.066 937.192,399.232 938.5,398.5C 940.033,396.645 941.7,394.812 943.5,393C 943.167,392.667 942.833,392.333 942.5,392C 936.749,390.751 931.416,391.584 926.5,394.5C 925.378,393.37 924.044,392.703 922.5,392.5C 919.615,391.213 917.282,389.213 915.5,386.5C 913.712,387.283 912.712,388.616 912.5,390.5C 908.929,392.642 907.929,395.642 909.5,399.5C 904.647,401.421 900.314,404.088 896.5,407.5C 895.711,407.783 895.044,408.283 894.5,409C 895.737,409.232 896.737,409.732 897.5,410.5C 890.978,410.177 884.645,410.51 878.5,411.5C 830.438,412.754 782.438,415.254 734.5,419C 728.42,419.983 722.42,421.15 716.5,422.5C 711.992,419.833 707.159,417.833 702,416.5C 688.274,419.463 674.441,420.63 660.5,420C 656.6,423.083 652.266,425.416 647.5,427C 645.787,428.378 644.453,430.045 643.5,432C 641.527,432.495 639.527,432.662 637.5,432.5C 631.469,433.676 625.469,434.009 619.5,433.5C 617.842,432.819 616.175,431.985 614.5,431C 615.737,430.768 616.737,430.268 617.5,429.5C 619.685,427.053 622.018,424.553 624.5,422C 623.552,421.517 622.552,421.351 621.5,421.5C 615.549,419.547 610.049,420.547 605,424.5C 603.871,422.859 602.371,421.859 600.5,421.5C 597.104,420.37 594.937,418.037 594,414.5C 591.873,416.114 590.373,418.114 589.5,420.5C 586.534,423.118 585.867,426.285 587.5,430C 584.624,430.438 581.957,431.438 579.5,433C 577.423,435.738 574.757,437.738 571.5,439C 561.85,439.877 552.183,440.377 542.5,440.5C 543.167,439.833 543.833,439.167 544.5,438.5C 546.266,436.229 548.266,434.063 550.5,432C 544.054,429.662 537.887,430.162 532,433.5C 530.594,432.586 529.094,431.92 527.5,431.5C 526.063,430.275 524.396,429.275 522.5,428.5C 521.719,427.271 521.219,425.938 521,424.5C 518.873,426.114 517.373,428.114 516.5,430.5C 513.611,432.775 512.944,435.608 514.5,439C 512.975,440.009 511.308,440.509 509.5,440.5C 493.473,440.777 477.473,440.277 461.5,439C 460.584,438.722 459.918,438.222 459.5,437.5C 462.059,437.802 464.393,437.468 466.5,436.5C 470.49,436.001 474.49,435.501 478.5,435C 476.937,433.053 474.937,431.886 472.5,431.5C 470.304,430.188 467.97,429.021 465.5,428C 466.858,427.066 468.192,426.232 469.5,425.5C 471.266,423.229 473.266,421.063 475.5,419C 469.093,416.691 462.927,417.191 457,420.5C 455.862,420.011 454.695,419.678 453.5,419.5C 451.891,418.229 450.058,417.229 448,416.5C 447.798,414.744 447.298,413.078 446.5,411.5C 445.143,413.186 443.81,414.852 442.5,416.5C 438.738,418.958 437.738,422.292 439.5,426.5C 434.462,428.701 429.796,431.534 425.5,435C 407.51,434.014 389.51,432.847 371.5,431.5C 371.158,430.662 370.492,430.328 369.5,430.5C 340.806,426.568 312.14,422.401 283.5,418C 284.056,417.617 284.389,417.117 284.5,416.5C 286.952,415.935 289.285,415.268 291.5,414.5C 295.49,414.001 299.49,413.501 303.5,413C 301.609,411.558 299.609,410.391 297.5,409.5C 295.745,408.208 293.745,407.208 291.5,406.5C 293.184,405.85 294.517,404.85 295.5,403.5C 296.473,401.861 297.806,400.527 299.5,399.5C 333.237,400.244 366.903,399.244 400.5,396.5C 402.099,396.768 403.432,396.434 404.5,395.5C 424.863,394.071 445.197,392.238 465.5,390C 482.5,389.333 499.5,389.333 516.5,390C 525.478,391.57 534.478,392.57 543.5,393C 519.095,387.793 494.428,386.126 469.5,388C 447.203,390.605 424.87,392.772 402.5,394.5C 400.265,394.205 398.265,394.539 396.5,395.5C 363.868,397.307 331.201,397.973 298.5,397.5C 291.5,397.5 284.5,397.5 277.5,397.5C 275.174,396.31 274.007,394.31 274,391.5C 271.873,393.114 270.373,395.114 269.5,397.5C 251.901,398.682 234.234,399.682 216.5,400.5C 219.41,399.061 222.41,397.727 225.5,396.5C 238.035,397.752 239.035,396.086 228.5,391.5C 226.852,390.073 224.852,389.24 222.5,389C 223.858,388.066 225.192,387.232 226.5,386.5C 228.156,384.54 229.823,382.54 231.5,380.5C 238.373,378.759 245.373,377.259 252.5,376C 266.181,375.329 279.848,375.495 293.5,376.5C 302.174,376.584 310.841,376.917 319.5,377.5C 349.168,375.37 378.835,373.204 408.5,371C 429.5,370.667 450.5,370.333 471.5,370C 482.959,368.775 494.125,366.275 505,362.5C 540.856,373.255 577.356,381.088 614.5,386C 600.961,390.808 586.961,393.641 572.5,394.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f9318\",\n    d: \"M 1080.5,408.5 C 1036.17,408.5 991.833,408.5 947.5,408.5C 947.5,408.167 947.5,407.833 947.5,407.5C 949.746,406.79 952.08,406.29 954.5,406C 968.921,398.227 984.255,393.227 1000.5,391C 1005.95,386.94 1011.95,383.94 1018.5,382C 1033.79,383.053 1049.13,383.387 1064.5,383C 1070.85,382.808 1076.35,380.642 1081,376.5C 1083.24,381.819 1085.07,387.319 1086.5,393C 1084.35,398.129 1082.35,403.296 1080.5,408.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dca780\",\n    d: \"M 226.5,386.5 C 225.192,387.232 223.858,388.066 222.5,389C 224.852,389.24 226.852,390.073 228.5,391.5C 228.953,392.458 229.619,393.292 230.5,394C 228.509,394.374 226.842,395.207 225.5,396.5C 222.873,397.092 220.206,397.425 217.5,397.5C 217.5,396.167 217.5,394.833 217.5,393.5C 218.947,392.866 219.613,391.699 219.5,390C 219.613,388.301 218.947,387.134 217.5,386.5C 216.942,385.21 215.942,384.377 214.5,384C 217,381.128 220.167,379.961 224,380.5C 225.833,380.667 227.667,380.833 229.5,381C 227.84,382.488 226.84,384.321 226.5,386.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b453b\",\n    d: \"M 206.5,378.5 C 209.028,379.011 211.528,379.678 214,380.5C 219.704,378.816 225.537,378.149 231.5,378.5C 231.5,379.167 231.5,379.833 231.5,380.5C 229.823,382.54 228.156,384.54 226.5,386.5C 226.84,384.321 227.84,382.488 229.5,381C 227.667,380.833 225.833,380.667 224,380.5C 220.167,379.961 217,381.128 214.5,384C 215.942,384.377 216.942,385.21 217.5,386.5C 214.57,385.701 211.57,385.368 208.5,385.5C 209.718,384.839 211.051,384.172 212.5,383.5C 210.838,381.348 208.838,379.682 206.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#212f16\",\n    d: \"M 123.5,380.5 C 123.389,381.117 123.056,381.617 122.5,382C 124.584,382.697 126.251,383.864 127.5,385.5C 125.16,384.914 122.993,383.914 121,382.5C 120.812,380.939 121.645,380.272 123.5,380.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62bf57\",\n    d: \"M 190.5,384.5 C 193.604,383.971 195.937,384.971 197.5,387.5C 192.737,388.718 188.737,391.218 185.5,395C 183.754,395.471 182.087,396.138 180.5,397C 183.039,397.796 185.372,397.629 187.5,396.5C 192.214,396.173 196.88,396.507 201.5,397.5C 200.754,398.736 200.421,400.07 200.5,401.5C 180.491,401.945 160.491,402.611 140.5,403.5C 136.067,403.818 131.734,403.818 127.5,403.5C 126.593,400.943 125.593,398.443 124.5,396C 125.167,395.667 125.833,395.333 126.5,395C 147.844,390.72 169.177,387.22 190.5,384.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23441f\",\n    d: \"M 944.5,385.5 C 939.347,386.619 934.347,386.619 929.5,385.5C 934.673,384.707 939.673,384.707 944.5,385.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa982\",\n    d: \"M 922.5,392.5 C 923.141,393.482 923.807,394.482 924.5,395.5C 923.398,396.176 922.398,396.842 921.5,397.5C 917.67,398.689 916.67,401.022 918.5,404.5C 917.942,405.79 916.942,406.623 915.5,407C 910.833,407.667 906.167,407.667 901.5,407C 904.427,402.87 908.427,400.87 913.5,401C 909.971,397.743 909.637,394.243 912.5,390.5C 912.712,388.616 913.712,387.283 915.5,386.5C 917.282,389.213 919.615,391.213 922.5,392.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c8c8c\",\n    d: \"M 762.5,387.5 C 772.858,388.514 781.524,393.014 788.5,401C 782.779,401.59 777.112,402.423 771.5,403.5C 771.005,400.53 769.505,398.196 767,396.5C 766.542,399.096 767.375,401.263 769.5,403C 769.167,403.167 768.833,403.333 768.5,403.5C 767.059,402.135 765.726,400.635 764.5,399C 763.207,398.51 761.873,398.343 760.5,398.5C 760.383,400.484 761.05,402.15 762.5,403.5C 763.5,400.833 764.5,400.833 765.5,403.5C 763.604,404.466 761.604,404.799 759.5,404.5C 759.716,402.319 758.883,400.653 757,399.5C 756.376,401.464 756.876,403.131 758.5,404.5C 757.675,405.386 756.675,405.719 755.5,405.5C 754.633,401.47 752.3,398.97 748.5,398C 749.945,399.71 750.778,401.544 751,403.5C 749.587,401.586 747.753,400.253 745.5,399.5C 744.5,399.833 743.833,400.5 743.5,401.5C 747.602,409.153 746.769,409.486 741,402.5C 740.835,404.678 741.668,406.511 743.5,408C 734.873,409.426 726.207,410.092 717.5,410C 715.813,408.087 715.313,405.92 716,403.5C 722.569,396.537 730.736,393.371 740.5,394C 748.042,392.12 755.376,389.953 762.5,387.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111b0f\",\n    d: \"M 404.5,395.5 C 403.508,395.672 402.842,395.338 402.5,394.5C 424.87,392.772 447.203,390.605 469.5,388C 494.428,386.126 519.095,387.793 543.5,393C 534.478,392.57 525.478,391.57 516.5,390C 499.5,389.333 482.5,389.333 465.5,390C 445.197,392.238 424.863,394.071 404.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#25401d\",\n    d: \"M 188.5,383.5 C 188.842,384.338 189.508,384.672 190.5,384.5C 169.177,387.22 147.844,390.72 126.5,395C 125.833,395.333 125.167,395.667 124.5,396C 125.593,398.443 126.593,400.943 127.5,403.5C 131.734,403.818 136.067,403.818 140.5,403.5C 140.5,403.833 140.5,404.167 140.5,404.5C 135.766,405.824 130.933,405.824 126,404.5C 125.089,401.689 124.256,398.856 123.5,396C 126.283,393.512 129.616,392.179 133.5,392C 132.748,391.329 132.414,390.496 132.5,389.5C 133.594,390.582 134.927,391.248 136.5,391.5C 153.816,388.669 171.149,386.002 188.5,383.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474a3c\",\n    d: \"M 199.5,378.5 C 198.854,380.156 198.187,381.823 197.5,383.5C 198.065,385.405 199.065,387.071 200.5,388.5C 195.656,388.922 191.656,390.922 188.5,394.5C 187.662,394.842 187.328,395.508 187.5,396.5C 185.372,397.629 183.039,397.796 180.5,397C 182.087,396.138 183.754,395.471 185.5,395C 188.737,391.218 192.737,388.718 197.5,387.5C 195.937,384.971 193.604,383.971 190.5,384.5C 189.508,384.672 188.842,384.338 188.5,383.5C 190.527,383.662 192.527,383.495 194.5,383C 196.062,381.366 197.729,379.866 199.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dca680\",\n    d: \"M 938.5,398.5 C 937.192,399.232 935.858,400.066 934.5,401C 936.97,402.021 939.304,403.188 941.5,404.5C 941.611,405.117 941.944,405.617 942.5,406C 938.055,407.575 933.722,409.075 929.5,410.5C 927.938,410.733 926.605,411.4 925.5,412.5C 921.84,412.159 918.507,412.825 915.5,414.5C 914.833,414.5 914.167,414.5 913.5,414.5C 913.5,413.5 913.5,412.5 913.5,411.5C 914.962,410.542 916.295,409.376 917.5,408C 921.956,408.102 925.956,407.268 929.5,405.5C 930.947,404.866 931.613,403.699 931.5,402C 931.613,400.301 930.947,399.134 929.5,398.5C 927.069,396.932 927.069,395.432 929.5,394C 933.375,392.48 937.375,392.146 941.5,393C 939.84,394.488 938.84,396.321 938.5,398.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a23331\",\n    d: \"M 208.5,385.5 C 211.57,385.368 214.57,385.701 217.5,386.5C 218.947,387.134 219.613,388.301 219.5,390C 219.613,391.699 218.947,392.866 217.5,393.5C 213.282,395.067 209.282,394.734 205.5,392.5C 203.647,388.895 204.647,386.562 208.5,385.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea881\",\n    d: \"M 277.5,397.5 C 279.118,398.451 280.451,399.784 281.5,401.5C 279.456,402.065 277.79,403.065 276.5,404.5C 274.403,405.879 274.07,407.545 275.5,409.5C 275.423,410.75 274.756,411.583 273.5,412C 268.845,412.499 264.179,412.666 259.5,412.5C 262.303,408.29 266.303,406.457 271.5,407C 268.346,404.397 267.679,401.231 269.5,397.5C 270.373,395.114 271.873,393.114 274,391.5C 274.007,394.31 275.174,396.31 277.5,397.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#625e49\",\n    d: \"M 228.5,391.5 C 239.035,396.086 238.035,397.752 225.5,396.5C 226.842,395.207 228.509,394.374 230.5,394C 229.619,393.292 228.953,392.458 228.5,391.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#274b22\",\n    d: \"M 396.5,395.5 C 398.265,394.539 400.265,394.205 402.5,394.5C 402.842,395.338 403.508,395.672 404.5,395.5C 403.432,396.434 402.099,396.768 400.5,396.5C 399.432,395.566 398.099,395.232 396.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#213f1e\",\n    d: \"M 572.5,394.5 C 572.167,395.167 571.833,395.833 571.5,396.5C 563.123,396.039 554.79,395.206 546.5,394C 555.152,394.082 563.819,394.248 572.5,394.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e443c\",\n    d: \"M 938.5,398.5 C 938.84,396.321 939.84,394.488 941.5,393C 937.375,392.146 933.375,392.48 929.5,394C 927.069,395.432 927.069,396.932 929.5,398.5C 926.904,397.735 924.237,397.401 921.5,397.5C 922.398,396.842 923.398,396.176 924.5,395.5C 923.807,394.482 923.141,393.482 922.5,392.5C 924.044,392.703 925.378,393.37 926.5,394.5C 931.416,391.584 936.749,390.751 942.5,392C 942.833,392.333 943.167,392.667 943.5,393C 941.7,394.812 940.033,396.645 938.5,398.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 215.5,399.5 C 211.58,399.935 207.913,400.935 204.5,402.5C 204.167,402.5 203.833,402.5 203.5,402.5C 202.503,402.53 201.836,402.03 201.5,401C 202.439,399.056 203.773,397.389 205.5,396C 209.152,395.501 212.818,395.335 216.5,395.5C 216.567,396.959 216.234,398.292 215.5,399.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a2c16\",\n    d: \"M 396.5,395.5 C 398.099,395.232 399.432,395.566 400.5,396.5C 366.903,399.244 333.237,400.244 299.5,399.5C 299.167,398.833 298.833,398.167 298.5,397.5C 331.201,397.973 363.868,397.307 396.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a5d4a\",\n    d: \"M 205.5,392.5 C 209.282,394.734 213.282,395.067 217.5,393.5C 217.5,394.833 217.5,396.167 217.5,397.5C 220.206,397.425 222.873,397.092 225.5,396.5C 222.41,397.727 219.41,399.061 216.5,400.5C 215.833,400.5 215.5,400.167 215.5,399.5C 216.234,398.292 216.567,396.959 216.5,395.5C 212.818,395.335 209.152,395.501 205.5,396C 203.773,397.389 202.439,399.056 201.5,401C 201.836,402.03 202.503,402.53 203.5,402.5C 202.791,403.404 201.791,403.737 200.5,403.5C 200.5,402.833 200.5,402.167 200.5,401.5C 200.421,400.07 200.754,398.736 201.5,397.5C 196.88,396.507 192.214,396.173 187.5,396.5C 187.328,395.508 187.662,394.842 188.5,394.5C 193.316,395.65 198.316,395.816 203.5,395C 204.756,394.583 205.423,393.75 205.5,392.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#484136\",\n    d: \"M 277.5,397.5 C 284.5,397.5 291.5,397.5 298.5,397.5C 298.833,398.167 299.167,398.833 299.5,399.5C 297.806,400.527 296.473,401.861 295.5,403.5C 295.297,401.61 295.963,400.11 297.5,399C 292.548,397.69 288.215,398.69 284.5,402C 285.056,402.383 285.389,402.883 285.5,403.5C 282.43,403.368 279.43,403.701 276.5,404.5C 277.79,403.065 279.456,402.065 281.5,401.5C 280.451,399.784 279.118,398.451 277.5,397.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d3a17c\",\n    d: \"M 295.5,403.5 C 294.517,404.85 293.184,405.85 291.5,406.5C 293.745,407.208 295.745,408.208 297.5,409.5C 297.953,410.458 298.619,411.292 299.5,412C 296.478,412.098 293.811,412.932 291.5,414.5C 289.285,415.268 286.952,415.935 284.5,416.5C 280.252,416.953 276.252,417.953 272.5,419.5C 271.596,418.791 271.263,417.791 271.5,416.5C 273.363,414.295 275.697,412.961 278.5,412.5C 282.115,412.794 285.282,411.794 288,409.5C 288.167,408.833 288.333,408.167 288.5,407.5C 287.714,405.959 286.714,404.626 285.5,403.5C 285.389,402.883 285.056,402.383 284.5,402C 288.215,398.69 292.548,397.69 297.5,399C 295.963,400.11 295.297,401.61 295.5,403.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a33230\",\n    d: \"M 921.5,397.5 C 924.237,397.401 926.904,397.735 929.5,398.5C 930.947,399.134 931.613,400.301 931.5,402C 931.613,403.699 930.947,404.866 929.5,405.5C 925.61,407.054 921.943,406.721 918.5,404.5C 916.67,401.022 917.67,398.689 921.5,397.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#61bd56\",\n    d: \"M 255.5,412.5 C 250.919,413.607 246.252,413.773 241.5,413C 216.453,410.708 191.453,408.208 166.5,405.5C 173.78,404.102 185.114,403.436 200.5,403.5C 201.791,403.737 202.791,403.404 203.5,402.5C 203.833,402.5 204.167,402.5 204.5,402.5C 225.501,401.413 246.501,400.58 267.5,400C 266.167,401.667 266.167,403.333 267.5,405C 263.083,406.933 259.083,409.433 255.5,412.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#192a15\",\n    d: \"M 614.5,400.5 C 615.167,401.167 615.833,401.833 616.5,402.5C 607.413,401.511 598.413,400.011 589.5,398C 597.824,398.593 606.158,399.426 614.5,400.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2e24\",\n    d: \"M 269.5,397.5 C 267.679,401.231 268.346,404.397 271.5,407C 266.303,406.457 262.303,408.29 259.5,412.5C 258.833,412.5 258.5,412.833 258.5,413.5C 257.833,413.5 257.167,413.5 256.5,413.5C 255.833,413.5 255.5,413.167 255.5,412.5C 259.083,409.433 263.083,406.933 267.5,405C 266.167,403.333 266.167,401.667 267.5,400C 246.501,400.58 225.501,401.413 204.5,402.5C 207.913,400.935 211.58,399.935 215.5,399.5C 215.5,400.167 215.833,400.5 216.5,400.5C 234.234,399.682 251.901,398.682 269.5,397.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060b04\",\n    d: \"M 614.5,400.5 C 630.145,401.402 645.812,401.735 661.5,401.5C 663.099,401.232 664.432,401.566 665.5,402.5C 649.167,402.5 632.833,402.5 616.5,402.5C 615.833,401.833 615.167,401.167 614.5,400.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#213d1d\",\n    d: \"M 661.5,401.5 C 673.66,400.34 685.993,400.173 698.5,401C 687.518,401.943 676.518,402.443 665.5,402.5C 664.432,401.566 663.099,401.232 661.5,401.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#192613\",\n    d: \"M 200.5,401.5 C 200.5,402.167 200.5,402.833 200.5,403.5C 185.114,403.436 173.78,404.102 166.5,405.5C 166.158,406.338 165.492,406.672 164.5,406.5C 156.541,405.396 148.541,404.729 140.5,404.5C 140.5,404.167 140.5,403.833 140.5,403.5C 160.491,402.611 180.491,401.945 200.5,401.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#524c3f\",\n    d: \"M 912.5,390.5 C 909.637,394.243 909.971,397.743 913.5,401C 908.427,400.87 904.427,402.87 901.5,407C 906.167,407.667 910.833,407.667 915.5,407C 916.942,406.623 917.942,405.79 918.5,404.5C 921.943,406.721 925.61,407.054 929.5,405.5C 925.956,407.268 921.956,408.102 917.5,408C 916.295,409.376 914.962,410.542 913.5,411.5C 913.5,410.833 913.5,410.167 913.5,409.5C 908.408,408.793 902.742,408.126 896.5,407.5C 900.314,404.088 904.647,401.421 909.5,399.5C 907.929,395.642 908.929,392.642 912.5,390.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a4b37\",\n    d: \"M 941.5,404.5 C 943.284,404.893 944.95,405.559 946.5,406.5C 946.5,407.167 946.833,407.5 947.5,407.5C 947.5,407.833 947.5,408.167 947.5,408.5C 941.58,409.817 935.58,410.483 929.5,410.5C 933.722,409.075 938.055,407.575 942.5,406C 941.944,405.617 941.611,405.117 941.5,404.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#519348\",\n    d: \"M 896.5,407.5 C 902.742,408.126 908.408,408.793 913.5,409.5C 908.203,410.275 902.87,410.608 897.5,410.5C 896.737,409.732 895.737,409.232 894.5,409C 895.044,408.283 895.711,407.783 896.5,407.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a13331\",\n    d: \"M 285.5,403.5 C 286.714,404.626 287.714,405.959 288.5,407.5C 288.333,408.167 288.167,408.833 288,409.5C 285.282,411.794 282.115,412.794 278.5,412.5C 277.833,411.167 276.833,410.167 275.5,409.5C 274.07,407.545 274.403,405.879 276.5,404.5C 279.43,403.701 282.43,403.368 285.5,403.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#32441d\",\n    d: \"M 913.5,409.5 C 913.5,410.167 913.5,410.833 913.5,411.5C 913.5,412.5 913.5,413.5 913.5,414.5C 912.596,413.791 912.263,412.791 912.5,411.5C 901.14,411.283 889.807,411.616 878.5,412.5C 878.5,412.167 878.5,411.833 878.5,411.5C 884.645,410.51 890.978,410.177 897.5,410.5C 902.87,410.608 908.203,410.275 913.5,409.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b3b1b\",\n    d: \"M 166.5,405.5 C 191.453,408.208 216.453,410.708 241.5,413C 246.252,413.773 250.919,413.607 255.5,412.5C 255.5,413.167 255.833,413.5 256.5,413.5C 261.25,415.031 266.25,415.698 271.5,415.5C 271.5,415.833 271.5,416.167 271.5,416.5C 271.263,417.791 271.596,418.791 272.5,419.5C 272.44,420.043 272.107,420.376 271.5,420.5C 270.614,419.675 270.281,418.675 270.5,417.5C 235.044,413.715 199.711,410.048 164.5,406.5C 165.492,406.672 166.158,406.338 166.5,405.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a6b53\",\n    d: \"M 275.5,409.5 C 276.833,410.167 277.833,411.167 278.5,412.5C 275.697,412.961 273.363,414.295 271.5,416.5C 271.5,416.167 271.5,415.833 271.5,415.5C 267.627,413.57 263.294,412.903 258.5,413.5C 258.5,412.833 258.833,412.5 259.5,412.5C 264.179,412.666 268.845,412.499 273.5,412C 274.756,411.583 275.423,410.75 275.5,409.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d5941\",\n    d: \"M 297.5,409.5 C 299.609,410.391 301.609,411.558 303.5,413C 299.49,413.501 295.49,414.001 291.5,414.5C 293.811,412.932 296.478,412.098 299.5,412C 298.619,411.292 297.953,410.458 297.5,409.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5eb053\",\n    d: \"M 256.5,413.5 C 257.167,413.5 257.833,413.5 258.5,413.5C 263.294,412.903 267.627,413.57 271.5,415.5C 266.25,415.698 261.25,415.031 256.5,413.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d9a57f\",\n    d: \"M 453.5,419.5 C 454.234,420.708 454.567,422.041 454.5,423.5C 452.302,423.12 450.635,423.787 449.5,425.5C 448.053,426.134 447.387,427.301 447.5,429C 447.528,430.07 447.861,430.903 448.5,431.5C 447.674,433.264 446.341,434.598 444.5,435.5C 439.833,435.5 435.167,435.5 430.5,435.5C 430.062,435.565 429.728,435.399 429.5,435C 433.093,430.537 437.76,428.203 443.5,428C 439.933,424.554 439.6,420.721 442.5,416.5C 443.81,414.852 445.143,413.186 446.5,411.5C 447.298,413.078 447.798,414.744 448,416.5C 450.058,417.229 451.891,418.229 453.5,419.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#57523d\",\n    d: \"M 925.5,412.5 C 922.411,413.785 919.078,414.451 915.5,414.5C 918.507,412.825 921.84,412.159 925.5,412.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 867.5,417.5 C 868.392,420.292 870.392,421.625 873.5,421.5C 875.385,423.053 876.385,425.053 876.5,427.5C 873.99,427.054 871.99,427.72 870.5,429.5C 866.942,431.996 866.608,434.996 869.5,438.5C 867.629,439.797 865.629,440.797 863.5,441.5C 863.167,441.5 862.833,441.5 862.5,441.5C 856.824,441.666 851.157,441.499 845.5,441C 848.557,438.277 851.89,435.944 855.5,434C 857.833,433.667 860.167,433.333 862.5,433C 860.274,431.38 858.94,429.214 858.5,426.5C 859.585,423.335 860.918,420.335 862.5,417.5C 862.427,415.973 863.094,414.973 864.5,414.5C 865.117,414.389 865.617,414.056 866,413.5C 866.21,415.058 866.71,416.391 867.5,417.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dda781\",\n    d: \"M 600.5,421.5 C 601.476,422.815 602.476,424.148 603.5,425.5C 602.051,426.172 600.718,426.839 599.5,427.5C 595.028,429.515 594.361,432.515 597.5,436.5C 590.977,438.435 584.311,438.935 577.5,438C 580.838,433.831 585.172,431.497 590.5,431C 589.484,429.323 588.484,427.657 587.5,426C 588.32,424.2 588.986,422.366 589.5,420.5C 590.373,418.114 591.873,416.114 594,414.5C 594.937,418.037 597.104,420.37 600.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c3e1b\",\n    d: \"M 878.5,411.5 C 878.5,411.833 878.5,412.167 878.5,412.5C 874.833,412.5 871.167,412.5 867.5,412.5C 867.5,414.167 867.5,415.833 867.5,417.5C 866.71,416.391 866.21,415.058 866,413.5C 865.617,414.056 865.117,414.389 864.5,414.5C 854.342,413.341 844.008,413.175 833.5,414C 802.503,416.037 771.503,418.037 740.5,420C 732.71,420.66 725.043,421.827 717.5,423.5C 716.833,423.5 716.5,423.167 716.5,422.5C 722.42,421.15 728.42,419.983 734.5,419C 782.438,415.254 830.438,412.754 878.5,411.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#454545\",\n    d: \"M 1312.5,410.5 C 1312.5,412.833 1312.5,415.167 1312.5,417.5C 1307.97,417.818 1303.63,417.485 1299.5,416.5C 1303.5,416.5 1307.5,416.5 1311.5,416.5C 1311.21,414.265 1311.54,412.265 1312.5,410.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7972\",\n    d: \"M 1101.5,418.5 C 1107.66,417.834 1113.99,417.5 1120.5,417.5C 1173.5,418.22 1226.5,419.053 1279.5,420C 1224.81,426.265 1170.14,432.765 1115.5,439.5C 1113.9,439.449 1112.4,439.116 1111,438.5C 1108.06,431.621 1104.89,424.954 1101.5,418.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#52493e\",\n    d: \"M 469.5,425.5 C 469.84,423.321 470.84,421.488 472.5,420C 468.044,419.133 463.711,419.466 459.5,421C 458.833,421.667 458.167,422.333 457.5,423C 458.942,423.377 459.942,424.21 460.5,425.5C 456.833,424.167 453.167,424.167 449.5,425.5C 450.635,423.787 452.302,423.12 454.5,423.5C 454.567,422.041 454.234,420.708 453.5,419.5C 454.695,419.678 455.862,420.011 457,420.5C 462.927,417.191 469.093,416.691 475.5,419C 473.266,421.063 471.266,423.229 469.5,425.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7a37e\",\n    d: \"M 469.5,425.5 C 468.192,426.232 466.858,427.066 465.5,428C 467.97,429.021 470.304,430.188 472.5,431.5C 472.804,432.15 473.137,432.817 473.5,433.5C 470.898,434.132 468.564,435.132 466.5,436.5C 464.393,437.468 462.059,437.802 459.5,437.5C 455.504,438.924 451.504,440.257 447.5,441.5C 446.041,441.433 444.708,441.766 443.5,442.5C 443.833,437.5 446.5,434.833 451.5,434.5C 456.945,435.749 460.611,433.915 462.5,429C 462.613,427.301 461.947,426.134 460.5,425.5C 459.942,424.21 458.942,423.377 457.5,423C 458.167,422.333 458.833,421.667 459.5,421C 463.711,419.466 468.044,419.133 472.5,420C 470.84,421.488 469.84,423.321 469.5,425.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b381b\",\n    d: \"M 284.5,416.5 C 284.389,417.117 284.056,417.617 283.5,418C 312.14,422.401 340.806,426.568 369.5,430.5C 368.726,431.147 367.726,431.48 366.5,431.5C 337.297,427.371 308.13,423.037 279,418.5C 276.901,419.287 274.734,419.62 272.5,419.5C 276.252,417.953 280.252,416.953 284.5,416.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c3f39\",\n    d: \"M 892.5,431.5 C 894.713,428.408 896.379,425.074 897.5,421.5C 890.526,420.29 884.526,422.123 879.5,427C 882.641,427.715 884.641,429.548 885.5,432.5C 881.182,428.497 876.182,427.497 870.5,429.5C 871.99,427.72 873.99,427.054 876.5,427.5C 876.385,425.053 875.385,423.053 873.5,421.5C 875.607,421.722 877.274,422.722 878.5,424.5C 885.725,420.237 893.392,419.404 901.5,422C 898.894,423.938 897.061,426.438 896,429.5C 895.184,430.823 894.017,431.489 892.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f423b\",\n    d: \"M 621.5,421.5 C 615.879,420.674 610.879,422.007 606.5,425.5C 608.404,426.766 609.737,428.433 610.5,430.5C 607.332,427.944 603.666,426.944 599.5,427.5C 600.718,426.839 602.051,426.172 603.5,425.5C 602.476,424.148 601.476,422.815 600.5,421.5C 602.371,421.859 603.871,422.859 605,424.5C 610.049,420.547 615.549,419.547 621.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dca680\",\n    d: \"M 621.5,421.5 C 620.18,424.14 618.847,426.807 617.5,429.5C 616.737,430.268 615.737,430.768 614.5,431C 616.175,431.985 617.842,432.819 619.5,433.5C 620.574,434.885 621.907,436.051 623.5,437C 620.135,437.505 617.135,438.672 614.5,440.5C 612.833,440.5 611.167,440.5 609.5,440.5C 609.567,439.041 609.234,437.708 608.5,436.5C 611.349,435.08 612.016,433.08 610.5,430.5C 609.737,428.433 608.404,426.766 606.5,425.5C 610.879,422.007 615.879,420.674 621.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa881\",\n    d: \"M 892.5,431.5 C 888.829,432.605 889.162,433.605 893.5,434.5C 895.927,436.558 898.593,438.391 901.5,440C 897.321,439.936 893.655,441.102 890.5,443.5C 888.167,443.5 885.833,443.5 883.5,443.5C 883.5,441.833 883.5,440.167 883.5,438.5C 885.28,437.01 885.946,435.01 885.5,432.5C 884.641,429.548 882.641,427.715 879.5,427C 884.526,422.123 890.526,420.29 897.5,421.5C 896.379,425.074 894.713,428.408 892.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49423a\",\n    d: \"M 862.5,417.5 C 860.918,420.335 859.585,423.335 858.5,426.5C 858.94,429.214 860.274,431.38 862.5,433C 860.167,433.333 857.833,433.667 855.5,434C 851.89,435.944 848.557,438.277 845.5,441C 851.157,441.499 856.824,441.666 862.5,441.5C 854.317,442.494 845.984,442.994 837.5,443C 844.3,439.031 850.966,434.865 857.5,430.5C 856.071,425.017 857.738,420.684 862.5,417.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a4c3e\",\n    d: \"M 621.5,421.5 C 622.552,421.351 623.552,421.517 624.5,422C 622.018,424.553 619.685,427.053 617.5,429.5C 618.847,426.807 620.18,424.14 621.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dda881\",\n    d: \"M 527.5,431.5 C 528.29,432.794 529.29,433.961 530.5,435C 529.944,435.383 529.611,435.883 529.5,436.5C 523.531,436.481 521.531,439.148 523.5,444.5C 523.119,445.931 522.119,446.764 520.5,447C 515.5,447.667 510.5,447.667 505.5,447C 508.692,442.571 513.025,440.571 518.5,441C 515.312,438.047 514.645,434.547 516.5,430.5C 517.373,428.114 518.873,426.114 521,424.5C 521.219,425.938 521.719,427.271 522.5,428.5C 524.396,429.275 526.063,430.275 527.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e3431\",\n    d: \"M 599.5,427.5 C 603.666,426.944 607.332,427.944 610.5,430.5C 612.016,433.08 611.349,435.08 608.5,436.5C 607.833,436.5 607.5,436.833 607.5,437.5C 604.833,438.833 602.167,438.833 599.5,437.5C 599.158,436.662 598.492,436.328 597.5,436.5C 594.361,432.515 595.028,429.515 599.5,427.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a43433\",\n    d: \"M 460.5,425.5 C 461.947,426.134 462.613,427.301 462.5,429C 460.611,433.915 456.945,435.749 451.5,434.5C 450.833,433.167 449.833,432.167 448.5,431.5C 447.861,430.903 447.528,430.07 447.5,429C 447.387,427.301 448.053,426.134 449.5,425.5C 453.167,424.167 456.833,424.167 460.5,425.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131511\",\n    d: \"M 716.5,422.5 C 716.5,423.167 716.833,423.5 717.5,423.5C 719.771,425.266 721.937,427.266 724,429.5C 725.202,431.677 725.702,434.011 725.5,436.5C 718.159,436.334 710.826,436.5 703.5,437C 696.432,438.697 689.432,440.697 682.5,443C 671.468,443.749 660.468,443.415 649.5,442C 645.724,440.395 643.724,437.562 643.5,433.5C 641.833,433.5 640.167,433.5 638.5,433.5C 637.833,433.5 637.5,433.167 637.5,432.5C 639.527,432.662 641.527,432.495 643.5,432C 644.453,430.045 645.787,428.378 647.5,427C 652.266,425.416 656.6,423.083 660.5,420C 674.441,420.63 688.274,419.463 702,416.5C 707.159,417.833 711.992,419.833 716.5,422.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 695.5,419.5 C 706.605,418.967 715.772,422.967 723,431.5C 723.483,432.448 723.649,433.448 723.5,434.5C 718.833,434.5 714.167,434.5 709.5,434.5C 709.725,432.284 708.892,430.617 707,429.5C 706.805,431.207 706.805,432.874 707,434.5C 705.529,430.85 703.029,429.517 699.5,430.5C 701.024,436.067 700.357,436.567 697.5,432C 696.668,431.312 696.002,431.479 695.5,432.5C 696.04,433.748 696.707,434.915 697.5,436C 697.167,436.167 696.833,436.333 696.5,436.5C 694.439,433.73 691.939,431.396 689,429.5C 690,432.167 691,434.833 692,437.5C 689.445,433.928 686.112,431.595 682,430.5C 683.333,433.833 684.667,437.167 686,440.5C 684.691,438.024 682.858,436.024 680.5,434.5C 680.167,434.833 679.833,435.167 679.5,435.5C 680.752,437.001 681.752,438.668 682.5,440.5C 671.484,441.749 660.484,441.583 649.5,440C 644.167,436 644.167,432 649.5,428C 653.112,426.861 656.446,425.194 659.5,423C 671.746,422.769 683.746,421.602 695.5,419.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a23230\",\n    d: \"M 885.5,432.5 C 885.946,435.01 885.28,437.01 883.5,438.5C 882.29,438.932 881.29,439.599 880.5,440.5C 877.833,441.833 875.167,441.833 872.5,440.5C 871.71,439.599 870.71,438.932 869.5,438.5C 866.608,434.996 866.942,431.996 870.5,429.5C 876.182,427.497 881.182,428.497 885.5,432.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48443c\",\n    d: \"M 544.5,438.5 C 544.962,436.243 545.962,434.243 547.5,432.5C 541.391,430.378 536.391,431.712 532.5,436.5C 531.5,436.5 530.5,436.5 529.5,436.5C 529.611,435.883 529.944,435.383 530.5,435C 529.29,433.961 528.29,432.794 527.5,431.5C 529.094,431.92 530.594,432.586 532,433.5C 537.887,430.162 544.054,429.662 550.5,432C 548.266,434.063 546.266,436.229 544.5,438.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea781\",\n    d: \"M 544.5,438.5 C 543.833,439.167 543.167,439.833 542.5,440.5C 542.062,440.435 541.728,440.601 541.5,441C 542.244,442.039 543.244,442.539 544.5,442.5C 544.842,443.338 545.508,443.672 546.5,443.5C 547.058,444.79 548.058,445.623 549.5,446C 546.524,446.705 543.858,447.871 541.5,449.5C 539.5,449.5 537.5,449.5 535.5,449.5C 535.5,448.167 535.5,446.833 535.5,445.5C 537.441,443.989 537.941,441.989 537,439.5C 536.082,437.624 534.582,436.624 532.5,436.5C 536.391,431.712 541.391,430.378 547.5,432.5C 545.962,434.243 544.962,436.243 544.5,438.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#414132\",\n    d: \"M 589.5,420.5 C 588.986,422.366 588.32,424.2 587.5,426C 588.484,427.657 589.484,429.323 590.5,431C 585.172,431.497 580.838,433.831 577.5,438C 584.311,438.935 590.977,438.435 597.5,436.5C 598.492,436.328 599.158,436.662 599.5,437.5C 594.67,438.659 592.004,441.659 591.5,446.5C 590.246,444.643 590.246,442.643 591.5,440.5C 588.833,440.167 586.167,439.833 583.5,439.5C 570.328,440.273 557.328,441.273 544.5,442.5C 543.244,442.539 542.244,442.039 541.5,441C 541.728,440.601 542.062,440.435 542.5,440.5C 552.183,440.377 561.85,439.877 571.5,439C 574.757,437.738 577.423,435.738 579.5,433C 581.957,431.438 584.624,430.438 587.5,430C 585.867,426.285 586.534,423.118 589.5,420.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#515342\",\n    d: \"M 472.5,431.5 C 474.937,431.886 476.937,433.053 478.5,435C 474.49,435.501 470.49,436.001 466.5,436.5C 468.564,435.132 470.898,434.132 473.5,433.5C 473.137,432.817 472.804,432.15 472.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#454831\",\n    d: \"M 637.5,432.5 C 637.5,433.167 637.833,433.5 638.5,433.5C 633.938,434.183 629.272,435.017 624.5,436C 626.116,436.615 627.449,437.615 628.5,439C 623.802,439.351 619.136,439.851 614.5,440.5C 617.135,438.672 620.135,437.505 623.5,437C 621.907,436.051 620.574,434.885 619.5,433.5C 625.469,434.009 631.469,433.676 637.5,432.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#363d28\",\n    d: \"M 442.5,416.5 C 439.6,420.721 439.933,424.554 443.5,428C 437.76,428.203 433.093,430.537 429.5,435C 429.728,435.399 430.062,435.565 430.5,435.5C 434.002,436.306 437.669,436.973 441.5,437.5C 443.038,437.547 444.038,436.88 444.5,435.5C 446.341,434.598 447.674,433.264 448.5,431.5C 449.833,432.167 450.833,433.167 451.5,434.5C 446.5,434.833 443.833,437.5 443.5,442.5C 442.566,441.432 442.232,440.099 442.5,438.5C 418.631,436.736 394.965,434.402 371.5,431.5C 389.51,432.847 407.51,434.014 425.5,435C 429.796,431.534 434.462,428.701 439.5,426.5C 437.738,422.292 438.738,418.958 442.5,416.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#549a4a\",\n    d: \"M 430.5,435.5 C 435.167,435.5 439.833,435.5 444.5,435.5C 444.038,436.88 443.038,437.547 441.5,437.5C 437.669,436.973 434.002,436.306 430.5,435.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a882\",\n    d: \"M 599.5,437.5 C 602.167,438.833 604.833,438.833 607.5,437.5C 608.234,438.708 608.567,440.041 608.5,441.5C 606.973,441.427 605.973,442.094 605.5,443.5C 600.688,442.965 596.355,443.965 592.5,446.5C 592.167,446.5 591.833,446.5 591.5,446.5C 592.004,441.659 594.67,438.659 599.5,437.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a13431\",\n    d: \"M 529.5,436.5 C 530.5,436.5 531.5,436.5 532.5,436.5C 534.582,436.624 536.082,437.624 537,439.5C 537.941,441.989 537.441,443.989 535.5,445.5C 531.282,447.067 527.282,446.734 523.5,444.5C 521.531,439.148 523.531,436.481 529.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73604c\",\n    d: \"M 608.5,436.5 C 609.234,437.708 609.567,439.041 609.5,440.5C 611.167,440.5 612.833,440.5 614.5,440.5C 612.735,441.461 610.735,441.795 608.5,441.5C 608.567,440.041 608.234,438.708 607.5,437.5C 607.5,436.833 607.833,436.5 608.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#374920\",\n    d: \"M 459.5,437.5 C 459.918,438.222 460.584,438.722 461.5,439C 477.473,440.277 493.473,440.777 509.5,440.5C 508.5,441.5 507.5,442.5 506.5,443.5C 491.81,442.693 476.977,441.693 462,440.5C 457.153,440.736 452.32,441.069 447.5,441.5C 451.504,440.257 455.504,438.924 459.5,437.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1a983\",\n    d: \"M 872.5,440.5 C 875.167,441.833 877.833,441.833 880.5,440.5C 882.176,441.183 882.843,442.517 882.5,444.5C 881.317,445.504 879.984,446.338 878.5,447C 874.009,447.145 869.676,447.979 865.5,449.5C 864.287,449.253 863.62,448.586 863.5,447.5C 865.025,443.312 868.025,440.979 872.5,440.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b413b\",\n    d: \"M 869.5,438.5 C 870.71,438.932 871.71,439.599 872.5,440.5C 868.025,440.979 865.025,443.312 863.5,447.5C 862.662,447.158 862.328,446.492 862.5,445.5C 863.028,444.279 863.695,443.113 864.5,442C 864.272,441.601 863.938,441.435 863.5,441.5C 865.629,440.797 867.629,439.797 869.5,438.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d493a\",\n    d: \"M 893.5,434.5 C 898.432,435.966 902.765,438.466 906.5,442C 901.134,442.323 895.801,442.823 890.5,443.5C 893.655,441.102 897.321,439.936 901.5,440C 898.593,438.391 895.927,436.558 893.5,434.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564f3e\",\n    d: \"M 546.5,443.5 C 549.516,444.343 552.183,445.843 554.5,448C 550.152,448.465 545.819,448.965 541.5,449.5C 543.858,447.871 546.524,446.705 549.5,446C 548.058,445.623 547.058,444.79 546.5,443.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#725e4a\",\n    d: \"M 883.5,438.5 C 883.5,440.167 883.5,441.833 883.5,443.5C 885.833,443.5 888.167,443.5 890.5,443.5C 888.162,445.743 885.496,446.076 882.5,444.5C 882.843,442.517 882.176,441.183 880.5,440.5C 881.29,439.599 882.29,438.932 883.5,438.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595040\",\n    d: \"M 605.5,443.5 C 601.319,444.66 596.985,445.66 592.5,446.5C 596.355,443.965 600.688,442.965 605.5,443.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c4f40\",\n    d: \"M 516.5,430.5 C 514.645,434.547 515.312,438.047 518.5,441C 513.025,440.571 508.692,442.571 505.5,447C 510.5,447.667 515.5,447.667 520.5,447C 522.119,446.764 523.119,445.931 523.5,444.5C 527.282,446.734 531.282,447.067 535.5,445.5C 535.5,446.833 535.5,448.167 535.5,449.5C 537.5,449.5 539.5,449.5 541.5,449.5C 538.453,450.183 535.453,451.183 532.5,452.5C 533.942,451.18 534.608,449.514 534.5,447.5C 530.486,447.334 526.486,447.501 522.5,448C 519.976,449.883 518.642,452.383 518.5,455.5C 517.249,453.275 517.582,451.109 519.5,449C 512.148,448.647 504.815,448.647 497.5,449C 501.157,448.163 504.157,446.33 506.5,443.5C 507.5,442.5 508.5,441.5 509.5,440.5C 511.308,440.509 512.975,440.009 514.5,439C 512.944,435.608 513.611,432.775 516.5,430.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1a982\",\n    d: \"M 532.5,452.5 C 529.813,452.336 527.146,452.503 524.5,453C 523.584,453.278 522.918,453.778 522.5,454.5C 521.041,454.433 519.708,454.766 518.5,455.5C 518.642,452.383 519.976,449.883 522.5,448C 526.486,447.501 530.486,447.334 534.5,447.5C 534.608,449.514 533.942,451.18 532.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c6047\",\n    d: \"M 882.5,444.5 C 882.426,446.411 881.426,447.578 879.5,448C 874.114,448.977 868.78,450.144 863.5,451.5C 862.054,450.829 861.388,449.662 861.5,448C 861.528,446.93 861.861,446.097 862.5,445.5C 862.328,446.492 862.662,447.158 863.5,447.5C 863.62,448.586 864.287,449.253 865.5,449.5C 869.676,447.979 874.009,447.145 878.5,447C 879.984,446.338 881.317,445.504 882.5,444.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#59513f\",\n    d: \"M 532.5,452.5 C 532.082,453.222 531.416,453.722 530.5,454C 527.854,454.497 525.187,454.664 522.5,454.5C 522.918,453.778 523.584,453.278 524.5,453C 527.146,452.503 529.813,452.336 532.5,452.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgGameBackground1366);\nexport default __webpack_public_path__ + \"static/media/GameBackground1366.e1e9b6422fc88879d5bce6b929e1e7e2.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgGameBackground1920(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1873px\",\n    height: \"838px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.703\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 921.5,24.5 C 927.562,24.5782 933.229,26.0782 938.5,29C 941.938,32.0251 945.271,35.1917 948.5,38.5C 955.422,34.2558 962.756,33.4225 970.5,36C 974.567,38.7477 977.067,42.5811 978,47.5C 984.283,49.6101 987.116,53.9434 986.5,60.5C 990.915,62.3934 995.249,64.5601 999.5,67C 1001.75,68.995 1002.75,71.495 1002.5,74.5C 1006.4,74.3399 1009.07,76.0066 1010.5,79.5C 1007.17,79.8333 1003.83,80.1667 1000.5,80.5C 952.477,79.324 904.477,77.6573 856.5,75.5C 858.028,74.1387 859.695,72.972 861.5,72C 866.543,70.8225 871.543,69.4892 876.5,68C 879.5,65.7709 882.833,64.1043 886.5,63C 888.539,60.6255 890.872,58.6255 893.5,57C 886.902,52.0892 886.902,47.0892 893.5,42C 895.909,40.2932 898.575,39.4598 901.5,39.5C 902.465,33.0303 906.132,28.8637 912.5,27C 915.628,26.1588 918.628,25.3254 921.5,24.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fbfbfb\",\n    d: \"M 918.5,26.5 C 929.875,25.2269 938.542,29.3935 944.5,39C 946.274,39.9704 948.107,40.8037 950,41.5C 957.647,34.8368 965.313,34.8368 973,41.5C 974.562,43.9573 975.562,46.624 976,49.5C 983.045,51.2506 984.878,55.2506 981.5,61.5C 984.107,62.3184 986.774,62.8184 989.5,63C 989.834,65.0014 989.834,66.8347 989.5,68.5C 993.377,65.5102 996.544,66.1768 999,70.5C 999.495,72.4727 999.662,74.4727 999.5,76.5C 1002.07,76.1485 1004.41,76.6485 1006.5,78C 958.806,77.5848 911.139,76.2515 863.5,74C 868.258,71.8561 873.258,71.0227 878.5,71.5C 878.33,70.1779 878.663,69.0113 879.5,68C 882.044,66.908 884.711,66.2414 887.5,66C 889.654,61.6683 893.154,59.1683 898,58.5C 900.117,60.0319 901.784,62.0319 903,64.5C 900.755,57.3243 903.255,52.1577 910.5,49C 916.052,47.804 921.219,48.6374 926,51.5C 925.233,49.0924 923.4,47.5924 920.5,47C 911.27,44.9611 904.27,47.9611 899.5,56C 892.414,55.576 890.247,52.076 893,45.5C 896.294,42.603 900.128,40.9363 904.5,40.5C 904.441,36.452 906.108,33.2854 909.5,31C 912.592,29.4541 915.592,27.9541 918.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.828\n    },\n    fill: \"#080808\",\n    d: \"M 1294.5,40.5 C 1305.52,39.5368 1315.85,41.7035 1325.5,47C 1330.4,51.7346 1335.07,56.568 1339.5,61.5C 1343.44,60.1965 1347.11,58.3631 1350.5,56C 1362.38,53.1095 1372.54,55.9429 1381,64.5C 1382.85,67.5687 1383.85,70.9021 1384,74.5C 1388.58,76.7818 1392.58,79.7818 1396,83.5C 1397.24,87.0601 1397.74,90.7267 1397.5,94.5C 1402.84,94.3345 1406.84,96.5012 1409.5,101C 1417.9,102.883 1421.9,108.05 1421.5,116.5C 1425.26,116.857 1428.93,117.69 1432.5,119C 1435.17,121 1435.17,123 1432.5,125C 1354.82,123.555 1277.15,121.389 1199.5,118.5C 1202.28,115.6 1205.62,113.434 1209.5,112C 1216.01,109.898 1222.68,108.565 1229.5,108C 1233.14,103.008 1238.14,100.342 1244.5,100C 1246.4,98.1847 1248.07,96.1847 1249.5,94C 1251.84,92.8289 1254.18,91.6622 1256.5,90.5C 1251.26,86.3622 1249.09,81.0289 1250,74.5C 1254.19,67.6426 1260.36,63.6426 1268.5,62.5C 1268.96,56.748 1271.63,52.248 1276.5,49C 1282.01,44.8984 1288.01,42.0651 1294.5,40.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 1228.5,116.5 C 1223.17,115.833 1217.83,115.167 1212.5,114.5C 1219.22,112.008 1226.22,110.675 1233.5,110.5C 1233.3,108.61 1233.96,107.11 1235.5,106C 1239.96,103.884 1244.63,102.384 1249.5,101.5C 1254.98,90.8355 1261.81,89.8355 1270,98.5C 1268.44,88.7893 1272.28,81.956 1281.5,78C 1288.55,76.004 1295.55,76.1706 1302.5,78.5C 1294.86,71.7071 1286.52,70.8738 1277.5,76C 1272.9,80.7663 1268.24,85.2663 1263.5,89.5C 1252.88,85.4603 1250.88,78.9603 1257.5,70C 1262.86,66.8823 1268.52,64.549 1274.5,63C 1273.42,61.2739 1273.26,59.4406 1274,57.5C 1281.14,48.1823 1290.64,43.5157 1302.5,43.5C 1315.52,43.5094 1325.52,49.0094 1332.5,60C 1335.48,62.9747 1338.98,65.1414 1343,66.5C 1354.54,54.6868 1366.21,54.6868 1378,66.5C 1380.13,70.2076 1380.97,74.2076 1380.5,78.5C 1384.87,78.9363 1388.71,80.603 1392,83.5C 1394.37,88.2381 1393.87,92.5715 1390.5,96.5C 1393.78,97.3236 1397.12,97.8236 1400.5,98C 1402.92,98.7319 1404.09,100.232 1404,102.5C 1402.5,104 1401,105.5 1399.5,107C 1403.64,105.555 1407.97,104.888 1412.5,105C 1414.33,105.5 1415.5,106.667 1416,108.5C 1416.33,111.833 1416.67,115.167 1417,118.5C 1420.41,119.293 1423.91,119.793 1427.5,120C 1428.17,120.667 1428.83,121.333 1429.5,122C 1362.5,120.476 1295.5,118.643 1228.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.828\n    },\n    fill: \"#080808\",\n    d: \"M 572.5,57.5 C 584.818,55.8623 596.152,58.3623 606.5,65C 610.573,69.6969 614.74,74.1969 619,78.5C 633.196,68.8633 646.863,69.53 660,80.5C 661.995,84.3176 663.495,88.3176 664.5,92.5C 673.872,95.1635 677.872,101.163 676.5,110.5C 681.428,111.354 685.428,113.687 688.5,117.5C 693.32,118.831 697.153,121.497 700,125.5C 700.333,127.833 700.667,130.167 701,132.5C 704.595,133.289 708.095,134.456 711.5,136C 713.62,137.523 713.953,139.356 712.5,141.5C 637.523,140.242 562.523,138.408 487.5,136C 484.5,135.667 481.5,135.333 478.5,135C 487.654,128.116 497.987,124.95 509.5,125.5C 509.297,123.61 509.963,122.11 511.5,121C 515.232,118.867 519.232,117.534 523.5,117C 526.721,112.724 530.721,109.391 535.5,107C 525.836,97.3376 526.836,89.0043 538.5,82C 541.5,81 544.5,80 547.5,79C 548.611,73.7894 551.278,69.4561 555.5,66C 560.712,62.0607 566.379,59.2273 572.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 572.5,60.5 C 579.906,60.152 587.239,60.652 594.5,62C 602.048,66.5412 608.714,72.2079 614.5,79C 616.933,80.6324 619.433,82.1324 622,83.5C 633.248,71.8517 644.915,71.5184 657,82.5C 659.863,86.3798 661.03,90.7132 660.5,95.5C 668.705,96.2009 672.872,100.534 673,108.5C 672.215,110.286 671.049,111.786 669.5,113C 674.164,113.664 678.664,114.831 683,116.5C 682.912,119.642 681.412,122.142 678.5,124C 682.898,122.106 687.565,121.439 692.5,122C 693.333,122.833 694.167,123.667 695,124.5C 695.238,128.222 695.738,131.889 696.5,135.5C 700.122,136.325 703.789,136.825 707.5,137C 708.167,137.667 708.833,138.333 709.5,139C 636.82,137.407 564.154,135.074 491.5,132C 491.833,131.667 492.167,131.333 492.5,131C 498.976,128.856 505.642,127.69 512.5,127.5C 512.393,125.097 513.393,123.264 515.5,122C 519.725,120.421 524.059,119.254 528.5,118.5C 534.061,107.877 540.894,106.877 549,115.5C 548.031,104.944 552.531,97.7769 562.5,94C 569.296,93.2966 575.963,93.6299 582.5,95C 574.228,88.5504 565.562,87.8838 556.5,93C 551.934,97.5664 547.434,102.066 543,106.5C 532.54,102.466 530.373,95.9657 536.5,87C 541.45,83.9595 546.783,81.7928 552.5,80.5C 552.47,75.0641 554.804,70.5641 559.5,67C 563.925,64.7874 568.259,62.6207 572.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.788\n    },\n    fill: \"#747474\",\n    d: \"M 1302.5,78.5 C 1303.76,78.4614 1304.76,78.9614 1305.5,80C 1304,80.5847 1303,80.0847 1302.5,78.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.874\n    },\n    fill: \"#0a0a0b\",\n    d: \"M 1202.5,213.5 C 1193.71,206.545 1185.04,199.378 1176.5,192C 1167.81,190.77 1159.81,187.77 1152.5,183C 1147.77,178.373 1144.43,172.873 1142.5,166.5C 1132.95,170.26 1128.45,177.26 1129,187.5C 1123.58,191.49 1117.74,192.323 1111.5,190C 1110.54,188.581 1109.71,187.081 1109,185.5C 1107.47,176.904 1106.47,168.237 1106,159.5C 1094.85,156.905 1086.51,160.905 1081,171.5C 1080.6,171.272 1080.43,170.938 1080.5,170.5C 1080.88,167.231 1082.22,164.397 1084.5,162C 1091.21,157.538 1098.55,155.538 1106.5,156C 1107.67,156.5 1108.5,157.333 1109,158.5C 1109.84,167.247 1111.18,175.913 1113,184.5C 1114.06,187.064 1115.9,188.731 1118.5,189.5C 1121.46,188.792 1124.29,187.792 1127,186.5C 1127.85,177.939 1131.01,170.439 1136.5,164C 1139.99,160.692 1143.15,160.859 1146,164.5C 1153.13,179.276 1164.97,187.443 1181.5,189C 1183.17,190.667 1184.83,192.333 1186.5,194C 1187.64,194.749 1188.64,194.583 1189.5,193.5C 1187.57,188.204 1185.73,182.871 1184,177.5C 1173.24,173.739 1166.24,166.405 1163,155.5C 1160.49,138.644 1154.83,122.978 1146,108.5C 1143.2,104.701 1140.04,101.201 1136.5,98C 1134.5,97.3333 1132.5,97.3333 1130.5,98C 1126.21,104.75 1122.04,111.583 1118,118.5C 1114.58,120.461 1111.08,122.294 1107.5,124C 1103.94,127.073 1100.27,129.906 1096.5,132.5C 1100.52,124.815 1106.52,119.148 1114.5,115.5C 1117.81,107.713 1122.47,100.879 1128.5,95C 1133,92.8791 1137.33,93.2125 1141.5,96C 1147.79,103.406 1152.96,111.573 1157,120.5C 1161.18,134.23 1165.51,147.897 1170,161.5C 1174.84,167.832 1181.01,172.499 1188.5,175.5C 1192.7,183.405 1194.54,191.739 1194,200.5C 1197.91,204.222 1200.74,208.555 1202.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.996\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 1080.5,170.5 C 1079.66,170.842 1079.33,171.508 1079.5,172.5C 1079.53,174.582 1078.86,176.416 1077.5,178C 1074.88,178.939 1072.21,179.772 1069.5,180.5C 1068.02,182.483 1066.35,184.316 1064.5,186C 1059.33,189.085 1054.33,192.419 1049.5,196C 1034.7,195.705 1020.04,195.205 1005.5,194.5C 1005.98,193.522 1006.64,192.689 1007.5,192C 1010.46,190.735 1013.46,189.569 1016.5,188.5C 1017.09,180.196 1021.42,177.362 1029.5,180C 1035.67,182.224 1042,183.724 1048.5,184.5C 1052.9,185.053 1056.06,183.386 1058,179.5C 1058.79,176.529 1059.46,173.529 1060,170.5C 1065.07,164.272 1069.91,157.938 1074.5,151.5C 1081.22,144.448 1088.55,138.115 1096.5,132.5C 1100.27,129.906 1103.94,127.073 1107.5,124C 1111.08,122.294 1114.58,120.461 1118,118.5C 1122.04,111.583 1126.21,104.75 1130.5,98C 1132.5,97.3333 1134.5,97.3333 1136.5,98C 1140.04,101.201 1143.2,104.701 1146,108.5C 1154.83,122.978 1160.49,138.644 1163,155.5C 1166.24,166.405 1173.24,173.739 1184,177.5C 1185.73,182.871 1187.57,188.204 1189.5,193.5C 1188.64,194.583 1187.64,194.749 1186.5,194C 1184.83,192.333 1183.17,190.667 1181.5,189C 1164.97,187.443 1153.13,179.276 1146,164.5C 1143.15,160.859 1139.99,160.692 1136.5,164C 1131.01,170.439 1127.85,177.939 1127,186.5C 1124.29,187.792 1121.46,188.792 1118.5,189.5C 1115.9,188.731 1114.06,187.064 1113,184.5C 1111.18,175.913 1109.84,167.247 1109,158.5C 1108.5,157.333 1107.67,156.5 1106.5,156C 1098.55,155.538 1091.21,157.538 1084.5,162C 1082.22,164.397 1080.88,167.231 1080.5,170.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.205\n    },\n    fill: \"#fefefe\",\n    d: \"M 881.5,111.5 C 883.62,112.85 883.453,114.517 881,116.5C 881.019,114.893 881.185,113.226 881.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.773\n    },\n    fill: \"#a4a4a4\",\n    d: \"M 1212.5,114.5 C 1217.83,115.167 1223.17,115.833 1228.5,116.5C 1222.79,116.829 1217.13,116.495 1211.5,115.5C 1211.62,114.893 1211.96,114.56 1212.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.974\n    },\n    fill: \"#090909\",\n    d: \"M 1074.5,151.5 C 1069.91,157.938 1065.07,164.272 1060,170.5C 1059.46,173.529 1058.79,176.529 1058,179.5C 1056.06,183.386 1052.9,185.053 1048.5,184.5C 1042,183.724 1035.67,182.224 1029.5,180C 1021.42,177.362 1017.09,180.196 1016.5,188.5C 1013.46,189.569 1010.46,190.735 1007.5,192C 1006.64,192.689 1005.98,193.522 1005.5,194.5C 1020.04,195.205 1034.7,195.705 1049.5,196C 1054.33,192.419 1059.33,189.085 1064.5,186C 1066.35,184.316 1068.02,182.483 1069.5,180.5C 1072.21,179.772 1074.88,178.939 1077.5,178C 1078.86,176.416 1079.53,174.582 1079.5,172.5C 1080.42,174.662 1080.42,176.995 1079.5,179.5C 1076.31,180.092 1073.31,181.259 1070.5,183C 1063.5,189.834 1055.5,195.167 1046.5,199C 1041.23,200.068 1036.23,199.401 1031.5,197C 1021.71,195.455 1012.38,196.788 1003.5,201C 998.5,206 993.5,211 988.5,216C 996.059,223.395 1004.06,230.229 1012.5,236.5C 1016.54,232.481 1021.21,229.481 1026.5,227.5C 1022.19,231.478 1017.85,235.478 1013.5,239.5C 1014.53,240.7 1015.36,242.034 1016,243.5C 1016.63,250.947 1018.63,257.947 1022,264.5C 1026.48,267.27 1031.31,268.937 1036.5,269.5C 1036.47,270.497 1036.97,271.164 1038,271.5C 1169.81,236.922 1301.65,202.422 1433.5,168C 1459.08,158.697 1484.58,149.197 1510,139.5C 1512.43,140.479 1514.93,141.145 1517.5,141.5C 1518.53,145.735 1519.19,150.068 1519.5,154.5C 1517.17,197.821 1515.17,241.155 1513.5,284.5C 1520.27,283.628 1526.94,282.295 1533.5,280.5C 1545.94,263.889 1560.28,249.056 1576.5,236C 1579.38,234.392 1582.38,233.059 1585.5,232C 1619.1,231.489 1651.77,236.823 1683.5,248C 1692.38,251.686 1700.54,256.52 1708,262.5C 1709.23,264.866 1710.07,267.366 1710.5,270C 1709.29,275.647 1707.29,280.98 1704.5,286C 1705.17,286.667 1705.83,287.333 1706.5,288C 1736.5,287.333 1766.5,287.666 1796.5,289C 1822.93,292.77 1839.1,307.603 1845,333.5C 1845.67,361.167 1845.67,388.833 1845,416.5C 1844.7,421.691 1844.2,426.857 1843.5,432C 1845.23,444.288 1846.56,456.621 1847.5,469C 1847.36,472.552 1846.86,476.052 1846,479.5C 1845.48,482.023 1844.15,484.023 1842,485.5C 1841.83,486.667 1841.67,487.833 1841.5,489C 1845.08,507.014 1846.24,525.181 1845,543.5C 1843.56,551.307 1842.39,559.14 1841.5,567C 1842.08,573.49 1842.42,579.99 1842.5,586.5C 1822.77,586.01 1803.1,586.843 1783.5,589C 1706.89,598.607 1630.22,607.773 1553.5,616.5C 1552.5,616.167 1551.5,615.833 1550.5,615.5C 1545.5,604.833 1540.5,594.167 1535.5,583.5C 1528.86,582.669 1522.19,582.169 1515.5,582C 1511,579.506 1508.67,575.673 1508.5,570.5C 1509.98,563.866 1512.82,557.866 1517,552.5C 1517.17,551.167 1517.33,549.833 1517.5,548.5C 1514.97,540.91 1512.64,533.243 1510.5,525.5C 1503.34,531.548 1495.01,534.715 1485.5,535C 1463.49,534.997 1441.49,534.664 1419.5,534C 1411.04,538.063 1402.71,542.397 1394.5,547C 1371.78,549.795 1350.45,556.795 1330.5,568C 1327.5,568.333 1324.5,568.667 1321.5,569C 1320.58,569.278 1319.92,569.778 1319.5,570.5C 1318.83,570.5 1318.17,570.5 1317.5,570.5C 1339.07,557.228 1362.4,548.062 1387.5,543C 1374.25,540.178 1360.92,537.678 1347.5,535.5C 1340.54,536.607 1333.54,537.274 1326.5,537.5C 1318.57,536.489 1310.57,536.822 1302.5,538.5C 1290.15,537.999 1277.81,537.165 1265.5,536C 1256.39,532.029 1247.22,528.195 1238,524.5C 1225.17,528.333 1212.33,532.167 1199.5,536C 1165.54,542.553 1132.54,549.386 1100.5,556.5C 1099.83,556.5 1099.5,556.833 1099.5,557.5C 1092.13,550.651 1083.8,545.151 1074.5,541C 1063.83,541.388 1053.49,543.554 1043.5,547.5C 1043.17,546.833 1042.83,546.167 1042.5,545.5C 1051.51,541.831 1060.84,539.165 1070.5,537.5C 1078.6,538.884 1085.6,542.384 1091.5,548C 1094.42,549.881 1097.59,551.048 1101,551.5C 1143.03,543.244 1184.87,534.078 1226.5,524C 1209.06,522.122 1191.73,519.455 1174.5,516C 1164.83,515.333 1155.17,515.333 1145.5,516C 1127.85,517.374 1110.18,518.541 1092.5,519.5C 1083.21,519.527 1074.05,518.527 1065,516.5C 1039.48,529.911 1012.31,535.078 983.5,532C 970.657,533.05 957.823,534.216 945,535.5C 929.87,533.549 914.704,532.382 899.5,532C 869.516,540.247 839.183,546.747 808.5,551.5C 806.847,551.66 805.514,552.326 804.5,553.5C 798.848,552.968 793.181,552.635 787.5,552.5C 787.842,551.662 788.508,551.328 789.5,551.5C 813.523,550.823 836.856,546.656 859.5,539C 806.911,532.811 755.411,521.644 705,505.5C 687.151,512.403 668.651,516.237 649.5,517C 622.167,517.333 594.833,517.667 567.5,518C 532.84,520.75 498.173,523.416 463.5,526C 446.157,526.633 428.824,526.466 411.5,525.5C 411.842,524.662 412.508,524.328 413.5,524.5C 429.173,524.253 444.839,523.753 460.5,523C 509.183,518.999 557.85,514.999 606.5,511C 579.139,508.617 551.806,505.95 524.5,503C 502.299,494.783 479.632,488.116 456.5,483C 440.179,483.45 423.846,483.45 407.5,483C 402.298,482.131 397.298,480.964 392.5,479.5C 407.097,481.442 421.764,481.942 436.5,481C 454.536,477.883 472.536,474.55 490.5,471C 494.5,468.333 498.5,465.667 502.5,463C 505.359,455.737 510.693,452.237 518.5,452.5C 511.598,455.572 506.931,460.739 504.5,468C 511.326,470.275 517.993,472.942 524.5,476C 526.81,476.497 529.143,476.663 531.5,476.5C 531.19,471.559 529.523,467.226 526.5,463.5C 525.679,466.447 525.179,469.447 525,472.5C 523.377,466.543 519.877,462.043 514.5,459C 527.753,461.643 541.087,464.309 554.5,467C 559.602,469.968 564.769,472.801 570,475.5C 572.475,475.016 574.308,473.683 575.5,471.5C 576.086,471.709 576.586,472.043 577,472.5C 577.667,475.167 577.667,477.833 577,480.5C 576.167,479.5 575.333,478.5 574.5,477.5C 573.757,478.908 572.923,480.241 572,481.5C 570.183,476.593 567.683,476.26 564.5,480.5C 568.662,483.36 573.328,484.193 578.5,483C 579.894,481.261 580.561,479.261 580.5,477C 580.039,474.801 579.873,472.634 580,470.5C 582.05,473.148 583.216,476.148 583.5,479.5C 587.41,479.737 591.077,478.904 594.5,477C 588.497,471.994 581.83,467.994 574.5,465C 559.593,458.023 543.927,454.689 527.5,455C 525.148,454.76 523.148,453.927 521.5,452.5C 536.53,452.212 551.197,454.379 565.5,459C 595.023,472.256 626.023,478.423 658.5,477.5C 672.702,477.78 686.702,476.28 700.5,473C 710.647,469.351 719.313,463.518 726.5,455.5C 722.889,461.584 717.556,466.418 710.5,470C 711,470.167 711.5,470.333 712,470.5C 735.718,459.53 760.551,452.863 786.5,450.5C 788.611,451.742 790.611,451.742 792.5,450.5C 795.833,450.5 799.167,450.5 802.5,450.5C 802.263,449.209 802.596,448.209 803.5,447.5C 803.5,448.167 803.5,448.833 803.5,449.5C 812.318,450.493 821.318,450.827 830.5,450.5C 835.214,450.827 839.88,450.493 844.5,449.5C 847.756,445.666 848.09,446 845.5,450.5C 854.055,452.486 862.721,453.82 871.5,454.5C 872.167,454.833 872.833,455.167 873.5,455.5C 907.805,466.259 942.972,471.926 979,472.5C 983.833,472.167 988.667,471.833 993.5,471.5C 998.559,452.485 1010.23,445.818 1028.5,451.5C 1016.32,449.047 1007.15,453.047 1001,463.5C 999.491,466.329 999.325,469.162 1000.5,472C 1009.71,472.786 1018.88,473.952 1028,475.5C 1038.82,473.836 1049.32,471.002 1059.5,467C 1060.98,464.408 1060.65,462.075 1058.5,460C 1055.84,458.522 1053.18,457.355 1050.5,456.5C 1062.69,457.81 1074.36,455.977 1085.5,451C 1085.27,450.601 1084.94,450.435 1084.5,450.5C 1084.5,449.833 1084.83,449.5 1085.5,449.5C 1089.05,449.561 1092.38,448.727 1095.5,447C 1105.4,441.883 1115.4,437.05 1125.5,432.5C 1118.75,438.055 1111.41,442.888 1103.5,447C 1090.04,452.229 1076.71,457.729 1063.5,463.5C 1064.98,466.245 1064.31,468.412 1061.5,470C 1054.58,474.767 1046.91,476.767 1038.5,476C 1033.85,477.995 1029.02,479.161 1024,479.5C 1012.97,477.091 1001.8,475.758 990.5,475.5C 991.264,478.787 993.097,481.454 996,483.5C 996.749,484.635 996.583,485.635 995.5,486.5C 988.334,488.777 981.334,491.443 974.5,494.5C 990.527,498.54 1002.86,507.54 1011.5,521.5C 1013.36,523.192 1015.36,524.692 1017.5,526C 1024.67,526.988 1031.67,526.322 1038.5,524C 1049.45,519.194 1060.11,513.861 1070.5,508C 1084.47,496.367 1097.47,483.701 1109.5,470C 1125.33,460.085 1142,451.752 1159.5,445C 1163.78,444.045 1168.11,443.545 1172.5,443.5C 1185.86,444.402 1199.19,445.235 1212.5,446C 1215.62,442.282 1219.28,439.282 1223.5,437C 1241.67,426.751 1259.34,415.751 1276.5,404C 1261.63,401.187 1259.63,394.521 1270.5,384C 1274.83,381.416 1279.5,379.749 1284.5,379C 1294.58,378.391 1304.58,378.724 1314.5,380C 1301.81,372.745 1288.15,369.412 1273.5,370C 1271.02,368.691 1269.02,366.858 1267.5,364.5C 1266.39,363.978 1265.23,363.645 1264,363.5C 1255.11,365.763 1246.28,368.096 1237.5,370.5C 1236.08,368.969 1235.41,369.302 1235.5,371.5C 1226.66,368.164 1217.49,366.164 1208,365.5C 1198.46,367.408 1188.96,369.575 1179.5,372C 1175.54,374.629 1174.54,378.129 1176.5,382.5C 1172.3,385.738 1170.64,390.072 1171.5,395.5C 1168.86,391.554 1169.03,387.554 1172,383.5C 1172.33,379.833 1172.67,376.167 1173,372.5C 1173.9,371.299 1175.07,370.465 1176.5,370C 1188.3,366.897 1200.13,364.064 1212,361.5C 1219.91,362.142 1227.24,364.475 1234,368.5C 1243.45,364.511 1253.28,362.511 1263.5,362.5C 1264.12,348.408 1271.12,339.241 1284.5,335C 1293.17,334.667 1301.83,334.333 1310.5,334C 1314.42,330.749 1317.59,326.916 1320,322.5C 1320.67,317.202 1320.17,312.036 1318.5,307C 1318.4,303.362 1319.57,300.195 1322,297.5C 1329.37,291.071 1337.54,286.738 1346.5,284.5C 1337.93,288.03 1330.1,292.697 1323,298.5C 1322,300.167 1321,301.833 1320,303.5C 1321.28,309.719 1321.95,316.053 1322,322.5C 1319.19,326.975 1316.02,331.141 1312.5,335C 1317.54,336.569 1322.54,338.069 1327.5,339.5C 1316.64,338.855 1305.81,337.855 1295,336.5C 1288.85,337.605 1283.02,339.605 1277.5,342.5C 1273.52,349.748 1271.36,357.414 1271,365.5C 1279.41,366.964 1287.91,368.13 1296.5,369C 1306.03,373.264 1315.7,377.264 1325.5,381C 1330.49,381.499 1335.49,381.666 1340.5,381.5C 1339.57,376.967 1338.57,372.467 1337.5,368C 1337.98,363.718 1338.98,359.551 1340.5,355.5C 1339,351.18 1336.5,347.513 1333,344.5C 1332.65,342.753 1332.15,341.086 1331.5,339.5C 1331.4,336.763 1331.73,334.096 1332.5,331.5C 1334.44,348.838 1344.11,355.338 1361.5,351C 1373.76,346.523 1386.1,342.357 1398.5,338.5C 1397.65,332.414 1398.98,326.914 1402.5,322C 1402.36,321.228 1402.02,320.561 1401.5,320C 1384.43,315.866 1367.1,313.366 1349.5,312.5C 1354.27,310.115 1359.44,309.115 1365,309.5C 1375.86,310.486 1386.69,311.319 1397.5,312C 1387.32,303.138 1382.49,291.971 1383,278.5C 1383.94,292.551 1389.78,304.051 1400.5,313C 1418.1,314.67 1435.44,313.337 1452.5,309C 1456.33,307.254 1459.99,305.254 1463.5,303C 1461.03,299.773 1460.36,296.273 1461.5,292.5C 1462.14,296.059 1463.31,299.393 1465,302.5C 1468.33,300.5 1471.67,298.5 1475,296.5C 1475.59,289.365 1476.75,289.032 1478.5,295.5C 1486.89,291.702 1495.56,288.702 1504.5,286.5C 1504.38,285.893 1504.04,285.56 1503.5,285.5C 1503.5,284.833 1503.83,284.5 1504.5,284.5C 1505.58,284.539 1506.58,284.873 1507.5,285.5C 1508.32,282.215 1508.82,278.882 1509,275.5C 1511.24,231.513 1513.07,187.513 1514.5,143.5C 1511.1,142.014 1507.77,142.18 1504.5,144C 1475.25,155.46 1445.92,166.627 1416.5,177.5C 1417.57,175.716 1419.24,174.549 1421.5,174C 1419.23,173.595 1417.23,174.095 1415.5,175.5C 1244.97,219.897 1074.47,264.564 904,309.5C 903.235,309.43 902.735,309.097 902.5,308.5C 926.626,301.902 950.626,294.902 974.5,287.5C 964.896,280.404 958.729,271.07 956,259.5C 955.173,255.459 955.34,251.459 956.5,247.5C 958.595,253.612 960.095,259.945 961,266.5C 965.615,274.07 970.948,281.07 977,287.5C 979.856,286.744 982.689,285.911 985.5,285C 981.007,281.37 978.007,277.204 976.5,272.5C 981.982,275.382 986.316,279.382 989.5,284.5C 990.167,284.5 990.5,284.167 990.5,283.5C 991.167,283.5 991.833,283.5 992.5,283.5C 993.492,283.672 994.158,283.338 994.5,282.5C 995.167,282.5 995.833,282.5 996.5,282.5C 997.167,282.5 997.5,282.167 997.5,281.5C 998.167,281.5 998.833,281.5 999.5,281.5C 1000.49,281.672 1001.16,281.338 1001.5,280.5C 1001.83,280.5 1002.17,280.5 1002.5,280.5C 1003.79,280.737 1004.79,280.404 1005.5,279.5C 1005.83,279.5 1006.17,279.5 1006.5,279.5C 1007.79,279.737 1008.79,279.404 1009.5,278.5C 1017.18,276.83 1024.85,274.996 1032.5,273C 1031.21,272.51 1029.87,272.343 1028.5,272.5C 1023.95,270.964 1020.11,268.298 1017,264.5C 1015.16,257.623 1013.83,250.623 1013,243.5C 1012.3,239.934 1010.47,237.1 1007.5,235C 1000.83,230 994.167,225 987.5,220C 983.938,216.942 980.938,213.442 978.5,209.5C 976.902,210.485 975.235,210.651 973.5,210C 972.415,207.828 971.081,205.828 969.5,204C 962.616,201.823 955.616,200.157 948.5,199C 945.063,197.895 942.563,195.728 941,192.5C 941.156,199.202 941.489,205.868 942,212.5C 931.363,216.562 922.196,222.729 914.5,231C 911.907,230.454 909.74,228.954 908,226.5C 904.912,222.564 902.578,218.23 901,213.5C 895.337,215.581 889.837,218.081 884.5,221C 879.281,224.769 873.947,228.269 868.5,231.5C 871.296,228.203 874.296,225.036 877.5,222C 887.316,215.59 897.649,210.59 908.5,207C 904.934,214.34 906.434,220.506 913,225.5C 919.137,220.512 925.971,216.679 933.5,214C 936.303,212.22 937.969,209.72 938.5,206.5C 937.679,201.855 936.012,197.521 933.5,193.5C 934.213,189.317 936.213,185.984 939.5,183.5C 943.334,186.66 946.334,190.493 948.5,195C 956.707,197.68 965.041,198.846 973.5,198.5C 958.06,192.221 948.56,180.887 945,164.5C 944.024,156.862 943.357,149.195 943,141.5C 938.113,135.614 933.613,129.447 929.5,123C 928.167,122.333 926.833,122.333 925.5,123C 922,125.167 919.167,128 917,131.5C 913.329,140.214 909.662,148.881 906,157.5C 900.208,163.398 893.541,168.064 886,171.5C 884.802,179.819 882.469,187.819 879,195.5C 871.802,202.51 863.969,208.677 855.5,214C 856.549,217.146 856.383,220.312 855,223.5C 852.205,229.417 849.705,235.417 847.5,241.5C 852.787,240.689 857.787,239.023 862.5,236.5C 859.561,239.918 855.894,242.418 851.5,244C 841.284,247.405 830.951,250.405 820.5,253C 817.473,254.513 814.473,256.013 811.5,257.5C 810.833,257.5 810.5,257.833 810.5,258.5C 806.355,261.44 803.689,265.44 802.5,270.5C 800.754,272.252 798.754,273.585 796.5,274.5C 795.833,274.5 795.5,274.833 795.5,275.5C 790.528,278.656 785.528,281.823 780.5,285C 775.037,286.757 769.537,288.257 764,289.5C 763.241,292.785 761.908,295.785 760,298.5C 750.333,306.833 740.667,315.167 731,323.5C 731.437,333.757 728.77,343.091 723,351.5C 715.571,358.44 708.071,365.106 700.5,371.5C 698.572,375.285 697.238,379.285 696.5,383.5C 691.256,382.546 686.923,380.046 683.5,376C 684.761,374.038 686.428,372.538 688.5,371.5C 691.579,370.696 694.579,369.696 697.5,368.5C 698.79,367.942 699.623,366.942 700,365.5C 700.833,366.5 701.667,367.5 702.5,368.5C 704.65,365.849 706.983,363.349 709.5,361C 704.437,361.348 699.437,362.181 694.5,363.5C 693.833,363.833 693.167,364.167 692.5,364.5C 569.862,396.714 447.196,428.714 324.5,460.5C 324.328,459.508 324.662,458.842 325.5,458.5C 454.839,424.444 584.173,390.277 713.5,356C 723.675,346.467 728.508,334.633 728,320.5C 738.04,312.64 747.706,304.306 757,295.5C 758.411,292.421 759.911,289.421 761.5,286.5C 766.912,285.313 772.245,283.813 777.5,282C 783.897,277.273 790.564,272.94 797.5,269C 802.259,257.273 810.925,250.273 823.5,248C 830.512,246.499 837.512,244.999 844.5,243.5C 845.287,240.152 846.121,236.818 847,233.5C 851.883,226.866 853.883,219.532 853,211.5C 860.36,206.652 867.36,201.319 874,195.5C 878.967,187.512 882.134,178.845 883.5,169.5C 890.084,165.625 896.584,161.625 903,157.5C 907.852,147.955 912.519,138.288 917,128.5C 920.482,122.013 925.649,119.846 932.5,122C 936.641,127.776 941.141,133.276 946,138.5C 947.193,148.117 947.859,157.784 948,167.5C 949.405,174.576 952.905,180.409 958.5,185C 965.412,188.372 972.245,191.872 979,195.5C 979.687,199.58 980.687,203.58 982,207.5C 982.637,209.303 983.803,210.636 985.5,211.5C 993.876,207.097 999.709,200.431 1003,191.5C 1009.46,187.376 1014.96,182.21 1019.5,176C 1027.94,176.109 1035.94,178.109 1043.5,182C 1052.95,183.88 1057.45,180.046 1057,170.5C 1062.7,163.97 1068.53,157.637 1074.5,151.5 Z M 1028.5,272.5 C 1029.87,272.343 1031.21,272.51 1032.5,273C 1024.85,274.996 1017.18,276.83 1009.5,278.5C 1015.62,276.13 1021.95,274.13 1028.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 868.5,231.5 C 866.46,233.177 864.46,234.844 862.5,236.5C 857.787,239.023 852.787,240.689 847.5,241.5C 849.705,235.417 852.205,229.417 855,223.5C 856.383,220.312 856.549,217.146 855.5,214C 863.969,208.677 871.802,202.51 879,195.5C 882.469,187.819 884.802,179.819 886,171.5C 893.541,168.064 900.208,163.398 906,157.5C 909.662,148.881 913.329,140.214 917,131.5C 919.167,128 922,125.167 925.5,123C 926.833,122.333 928.167,122.333 929.5,123C 933.613,129.447 938.113,135.614 943,141.5C 943.357,149.195 944.024,156.862 945,164.5C 948.56,180.887 958.06,192.221 973.5,198.5C 965.041,198.846 956.707,197.68 948.5,195C 946.334,190.493 943.334,186.66 939.5,183.5C 936.213,185.984 934.213,189.317 933.5,193.5C 936.012,197.521 937.679,201.855 938.5,206.5C 937.969,209.72 936.303,212.22 933.5,214C 925.971,216.679 919.137,220.512 913,225.5C 906.434,220.506 904.934,214.34 908.5,207C 897.649,210.59 887.316,215.59 877.5,222C 874.296,225.036 871.296,228.203 868.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 1504.5,284.5 C 1501.98,282.639 1499.48,280.639 1497,278.5C 1496.77,275.262 1495.27,272.762 1492.5,271C 1489.83,269.667 1487.17,268.333 1484.5,267C 1482.76,264.808 1481.6,262.308 1481,259.5C 1474.8,257.657 1472.47,253.657 1474,247.5C 1476.01,242.973 1477.51,238.306 1478.5,233.5C 1478.84,230.528 1477.84,228.194 1475.5,226.5C 1472.38,233.01 1469.55,239.677 1467,246.5C 1461.72,250.428 1458.05,255.428 1456,261.5C 1449.57,265.695 1446.23,271.695 1446,279.5C 1441.07,282.714 1435.91,285.548 1430.5,288C 1428.6,289.815 1426.93,291.815 1425.5,294C 1423.71,294.52 1422.04,294.187 1420.5,293C 1415.74,288.633 1411.58,283.8 1408,278.5C 1407.67,274.833 1407.33,271.167 1407,267.5C 1403.37,262.866 1399.37,258.533 1395,254.5C 1394.67,250.833 1394.33,247.167 1394,243.5C 1392.08,240.162 1390.58,236.662 1389.5,233C 1389.7,230.594 1390.7,228.594 1392.5,227C 1397.1,224.785 1401.27,221.952 1405,218.5C 1406.5,216.55 1406.66,214.55 1405.5,212.5C 1398.5,216.667 1391.5,220.833 1384.5,225C 1380.07,234.442 1373.73,242.442 1365.5,249C 1351.51,258.997 1337.18,268.497 1322.5,277.5C 1321.72,276.271 1321.22,274.938 1321,273.5C 1320.67,266.167 1320.33,258.833 1320,251.5C 1319.15,248.302 1317.65,245.469 1315.5,243C 1319.16,239.503 1321.66,235.336 1323,230.5C 1323.62,224.694 1323.29,219.027 1322,213.5C 1353.34,201.08 1384.84,189.08 1416.5,177.5C 1445.92,166.627 1475.25,155.46 1504.5,144C 1507.77,142.18 1511.1,142.014 1514.5,143.5C 1513.07,187.513 1511.24,231.513 1509,275.5C 1508.82,278.882 1508.32,282.215 1507.5,285.5C 1506.58,284.873 1505.58,284.539 1504.5,284.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.856\n    },\n    fill: \"#070707\",\n    d: \"M 425.5,146.5 C 448.608,143.021 466.775,150.687 480,169.5C 481.501,171.584 483.501,172.917 486,173.5C 499.557,163.479 514.057,161.979 529.5,169C 536.597,174.348 540.764,181.514 542,190.5C 547.71,193.189 552.71,196.856 557,201.5C 558.663,205.46 558.83,209.46 557.5,213.5C 561.06,215.146 564.727,216.646 568.5,218C 570.923,219.571 572.256,221.737 572.5,224.5C 584.356,225.496 589.689,231.663 588.5,243C 593.416,243.229 598.082,244.396 602.5,246.5C 603.877,248.289 604.877,250.289 605.5,252.5C 605.113,253.72 604.28,254.387 603,254.5C 503.53,251.413 404.03,248.58 304.5,246C 307.484,243.174 310.817,240.841 314.5,239C 323.362,236.161 332.362,233.827 341.5,232C 344.772,230.392 347.772,228.392 350.5,226C 355.104,225.077 359.437,223.41 363.5,221C 368.03,216.132 373.363,212.465 379.5,210C 367.054,200.679 366.387,190.679 377.5,180C 382.415,176.876 387.748,174.876 393.5,174C 394.844,166.657 398.51,160.657 404.5,156C 411.095,151.698 418.095,148.531 425.5,146.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.335\n    },\n    fill: \"#fefefe\",\n    d: \"M 1181.5,148.5 C 1183.04,150.939 1183.87,153.606 1184,156.5C 1180.63,154.555 1179.8,151.889 1181.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 598.5,248.5 C 592.355,249.49 586.022,249.823 579.5,249.5C 492.482,247.812 405.482,245.479 318.5,242.5C 321.782,240.127 325.448,238.627 329.5,238C 335.787,236.893 342.12,236.393 348.5,236.5C 348.269,233.215 349.603,230.715 352.5,229C 356.943,227.06 361.61,226.06 366.5,226C 370.75,218.023 377.417,213.19 386.5,211.5C 388.029,211.529 389.196,212.196 390,213.5C 391.895,218.218 394.728,222.218 398.5,225.5C 398.833,225.167 399.167,224.833 399.5,224.5C 397.5,221.167 395.5,217.833 393.5,214.5C 398.624,196.238 410.624,188.738 429.5,192C 436.029,193.859 441.529,197.359 446,202.5C 441.356,191.987 433.023,186.987 421,187.5C 405.801,188.053 394.801,195.053 388,208.5C 380.023,206.632 375.189,201.799 373.5,194C 375.291,187.535 379.291,182.868 385.5,180C 390,178.208 394.667,177.375 399.5,177.5C 398.559,169.213 401.559,162.713 408.5,158C 425.739,147.413 443.406,146.746 461.5,156C 468.019,160.542 473.019,166.376 476.5,173.5C 480.5,175.5 484.5,177.5 488.5,179.5C 496.783,168.63 507.449,165.464 520.5,170C 532.081,174.08 538.081,182.246 538.5,194.5C 550.141,196.482 554.807,203.148 552.5,214.5C 551.167,215.167 550.167,216.167 549.5,217.5C 554.041,218.95 558.708,219.783 563.5,220C 567.341,221.165 568.175,223.332 566,226.5C 564.167,228.333 562.333,230.167 560.5,232C 565.657,230.096 570.99,228.763 576.5,228C 583.899,232.465 586.232,238.798 583.5,247C 588.582,247.219 593.582,247.719 598.5,248.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.998\n    },\n    fill: \"#a58ec6\",\n    d: \"M 1202.5,213.5 C 1202.95,214.458 1203.62,215.292 1204.5,216C 1191.42,221.192 1178.09,225.692 1164.5,229.5C 1163.83,229.833 1163.17,230.167 1162.5,230.5C 1120.79,244.427 1078.79,257.427 1036.5,269.5C 1031.31,268.937 1026.48,267.27 1022,264.5C 1018.63,257.947 1016.63,250.947 1016,243.5C 1015.36,242.034 1014.53,240.7 1013.5,239.5C 1017.85,235.478 1022.19,231.478 1026.5,227.5C 1021.21,229.481 1016.54,232.481 1012.5,236.5C 1004.06,230.229 996.059,223.395 988.5,216C 993.5,211 998.5,206 1003.5,201C 1012.38,196.788 1021.71,195.455 1031.5,197C 1036.23,199.401 1041.23,200.068 1046.5,199C 1055.5,195.167 1063.5,189.834 1070.5,183C 1073.31,181.259 1076.31,180.092 1079.5,179.5C 1080.42,176.995 1080.42,174.662 1079.5,172.5C 1079.33,171.508 1079.66,170.842 1080.5,170.5C 1080.43,170.938 1080.6,171.272 1081,171.5C 1086.51,160.905 1094.85,156.905 1106,159.5C 1106.47,168.237 1107.47,176.904 1109,185.5C 1109.71,187.081 1110.54,188.581 1111.5,190C 1117.74,192.323 1123.58,191.49 1129,187.5C 1128.45,177.26 1132.95,170.26 1142.5,166.5C 1144.43,172.873 1147.77,178.373 1152.5,183C 1159.81,187.77 1167.81,190.77 1176.5,192C 1185.04,199.378 1193.71,206.545 1202.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a51ab\",\n    d: \"M 1415.5,175.5 C 1383.45,187.908 1351.29,200.241 1319,212.5C 1322.61,220.881 1322.28,229.214 1318,237.5C 1316.31,239.017 1314.81,240.684 1313.5,242.5C 1315,245.5 1316.5,248.5 1318,251.5C 1318.33,259.5 1318.67,267.5 1319,275.5C 1319.67,276.833 1320.33,278.167 1321,279.5C 1321.72,280.451 1322.55,280.617 1323.5,280C 1338.17,270 1352.83,260 1367.5,250C 1375.77,243.415 1382.1,235.415 1386.5,226C 1392.19,222.661 1397.85,219.661 1403.5,217C 1399.44,220.782 1394.94,223.948 1390,226.5C 1387.73,229.12 1387.06,232.12 1388,235.5C 1391.68,241.294 1393.35,247.627 1393,254.5C 1396.3,258.8 1399.96,262.8 1404,266.5C 1405.2,270.716 1405.87,275.049 1406,279.5C 1409.83,284 1413.67,288.5 1417.5,293C 1420.07,295.459 1423.07,296.459 1426.5,296C 1427.93,293.815 1429.6,291.815 1431.5,290C 1437.17,286.833 1442.83,283.667 1448.5,280.5C 1447.73,272.378 1450.89,266.378 1458,262.5C 1459.71,256.771 1463.05,252.104 1468,248.5C 1470.67,242.466 1473.34,236.466 1476,230.5C 1476.21,236.455 1474.87,242.122 1472,247.5C 1470.4,253.964 1472.73,258.297 1479,260.5C 1479.94,263.656 1481.44,266.489 1483.5,269C 1487.11,270.139 1490.45,271.806 1493.5,274C 1494.25,275.734 1494.75,277.567 1495,279.5C 1497.71,281.72 1500.55,283.72 1503.5,285.5C 1504.04,285.56 1504.38,285.893 1504.5,286.5C 1495.56,288.702 1486.89,291.702 1478.5,295.5C 1476.75,289.032 1475.59,289.365 1475,296.5C 1471.67,298.5 1468.33,300.5 1465,302.5C 1463.31,299.393 1462.14,296.059 1461.5,292.5C 1460.36,296.273 1461.03,299.773 1463.5,303C 1459.99,305.254 1456.33,307.254 1452.5,309C 1435.44,313.337 1418.1,314.67 1400.5,313C 1389.78,304.051 1383.94,292.551 1383,278.5C 1382.49,291.971 1387.32,303.138 1397.5,312C 1386.69,311.319 1375.86,310.486 1365,309.5C 1359.44,309.115 1354.27,310.115 1349.5,312.5C 1340.7,315.97 1335.03,322.304 1332.5,331.5C 1331.73,334.096 1331.4,336.763 1331.5,339.5C 1330.17,339.5 1328.83,339.5 1327.5,339.5C 1322.54,338.069 1317.54,336.569 1312.5,335C 1316.02,331.141 1319.19,326.975 1322,322.5C 1321.95,316.053 1321.28,309.719 1320,303.5C 1321,301.833 1322,300.167 1323,298.5C 1330.1,292.697 1337.93,288.03 1346.5,284.5C 1337.54,286.738 1329.37,291.071 1322,297.5C 1319.57,300.195 1318.4,303.362 1318.5,307C 1320.17,312.036 1320.67,317.202 1320,322.5C 1317.59,326.916 1314.42,330.749 1310.5,334C 1301.83,334.333 1293.17,334.667 1284.5,335C 1271.12,339.241 1264.12,348.408 1263.5,362.5C 1253.28,362.511 1243.45,364.511 1234,368.5C 1227.24,364.475 1219.91,362.142 1212,361.5C 1200.13,364.064 1188.3,366.897 1176.5,370C 1175.07,370.465 1173.9,371.299 1173,372.5C 1172.67,376.167 1172.33,379.833 1172,383.5C 1169.03,387.554 1168.86,391.554 1171.5,395.5C 1171.61,398.079 1170.94,400.412 1169.5,402.5C 1167.97,402.427 1166.97,403.094 1166.5,404.5C 1166.16,405.338 1165.49,405.672 1164.5,405.5C 1162.97,405.427 1161.97,406.094 1161.5,407.5C 1159.97,407.427 1158.97,408.094 1158.5,409.5C 1156.97,409.427 1155.97,410.094 1155.5,411.5C 1152.63,412.433 1150.3,414.1 1148.5,416.5C 1146.6,416.738 1145.26,417.738 1144.5,419.5C 1142.97,419.427 1141.97,420.094 1141.5,421.5C 1139.97,421.427 1138.97,422.094 1138.5,423.5C 1136.6,423.738 1135.26,424.738 1134.5,426.5C 1132.97,426.427 1131.97,427.094 1131.5,428.5C 1129.97,428.427 1128.97,429.094 1128.5,430.5C 1126.97,430.427 1125.97,431.094 1125.5,432.5C 1115.4,437.05 1105.4,441.883 1095.5,447C 1092.38,448.727 1089.05,449.561 1085.5,449.5C 1080.9,445.398 1076.4,441.064 1072,436.5C 1054.67,411.167 1037.33,385.833 1020,360.5C 1012.22,358.669 1004.72,355.836 997.5,352C 993.241,348.642 990.074,344.475 988,339.5C 986.687,338.427 985.187,337.76 983.5,337.5C 968.773,345.06 958.44,356.56 952.5,372C 935.132,372.268 920.965,379.101 910,392.5C 906.974,396.852 903.974,401.185 901,405.5C 889.479,400.975 879.979,393.808 872.5,384C 867.5,380.667 862.5,380.667 857.5,384C 849.977,388.877 845.311,395.71 843.5,404.5C 824.009,409.876 807.509,419.876 794,434.5C 791.213,439.739 788.713,445.072 786.5,450.5C 760.551,452.863 735.718,459.53 712,470.5C 711.5,470.333 711,470.167 710.5,470C 717.556,466.418 722.889,461.584 726.5,455.5C 719.313,463.518 710.647,469.351 700.5,473C 686.702,476.28 672.702,477.78 658.5,477.5C 626.023,478.423 595.023,472.256 565.5,459C 551.197,454.379 536.53,452.212 521.5,452.5C 520.5,452.5 519.5,452.5 518.5,452.5C 510.693,452.237 505.359,455.737 502.5,463C 498.5,465.667 494.5,468.333 490.5,471C 472.536,474.55 454.536,477.883 436.5,481C 421.764,481.942 407.097,481.442 392.5,479.5C 386.175,480.829 379.842,482.163 373.5,483.5C 370.572,483.565 367.905,484.232 365.5,485.5C 364.432,486.434 363.099,486.768 361.5,486.5C 360.167,486.5 358.833,486.5 357.5,486.5C 354.026,483.198 350.359,480.032 346.5,477C 337.814,476.256 329.147,475.423 320.5,474.5C 321.231,469.643 322.564,464.976 324.5,460.5C 447.196,428.714 569.862,396.714 692.5,364.5C 691.431,366.969 690.098,369.302 688.5,371.5C 686.428,372.538 684.761,374.038 683.5,376C 686.923,380.046 691.256,382.546 696.5,383.5C 697.238,379.285 698.572,375.285 700.5,371.5C 709.118,368.627 717.784,365.96 726.5,363.5C 725.375,365.129 724.041,366.629 722.5,368C 728.273,368.455 731.94,365.955 733.5,360.5C 749.51,355.493 765.51,350.493 781.5,345.5C 778.76,349.584 776.426,353.918 774.5,358.5C 775.002,359.521 775.668,359.688 776.5,359C 780.691,354.442 783.691,349.276 785.5,343.5C 824.594,331.979 863.594,320.312 902.5,308.5C 902.735,309.097 903.235,309.43 904,309.5C 1074.47,264.564 1244.97,219.897 1415.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.18\n    },\n    fill: \"#fefefe\",\n    d: \"M 863.5,190.5 C 865.62,191.85 865.453,193.517 863,195.5C 862.616,193.803 862.782,192.137 863.5,190.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 1420.5,193.5 C 1422.17,193.5 1423.83,193.5 1425.5,193.5C 1424.2,202.477 1419.2,208.477 1410.5,211.5C 1409.07,211.267 1408.57,210.6 1409,209.5C 1413.05,204.288 1416.89,198.955 1420.5,193.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#a48ec6\",\n    d: \"M 1028.5,272.5 C 1021.95,274.13 1015.62,276.13 1009.5,278.5C 1008.21,278.263 1007.21,278.596 1006.5,279.5C 1006.17,279.5 1005.83,279.5 1005.5,279.5C 1004.21,279.263 1003.21,279.596 1002.5,280.5C 1002.17,280.5 1001.83,280.5 1001.5,280.5C 1000.51,280.328 999.842,280.662 999.5,281.5C 998.833,281.5 998.167,281.5 997.5,281.5C 996.833,281.5 996.5,281.833 996.5,282.5C 995.833,282.5 995.167,282.5 994.5,282.5C 993.508,282.328 992.842,282.662 992.5,283.5C 991.833,283.5 991.167,283.5 990.5,283.5C 989.833,283.5 989.5,283.833 989.5,284.5C 986.316,279.382 981.982,275.382 976.5,272.5C 978.007,277.204 981.007,281.37 985.5,285C 982.689,285.911 979.856,286.744 977,287.5C 970.948,281.07 965.615,274.07 961,266.5C 960.095,259.945 958.595,253.612 956.5,247.5C 955.34,251.459 955.173,255.459 956,259.5C 958.729,271.07 964.896,280.404 974.5,287.5C 950.626,294.902 926.626,301.902 902.5,308.5C 863.594,320.312 824.594,331.979 785.5,343.5C 785.649,342.448 785.483,341.448 785,340.5C 783.824,342.196 782.657,343.862 781.5,345.5C 765.51,350.493 749.51,355.493 733.5,360.5C 733.44,359.957 733.107,359.624 732.5,359.5C 730.754,361.252 728.754,362.585 726.5,363.5C 717.784,365.96 709.118,368.627 700.5,371.5C 708.071,365.106 715.571,358.44 723,351.5C 728.77,343.091 731.437,333.757 731,323.5C 740.667,315.167 750.333,306.833 760,298.5C 761.908,295.785 763.241,292.785 764,289.5C 769.537,288.257 775.037,286.757 780.5,285C 785.528,281.823 790.528,278.656 795.5,275.5C 796.167,275.5 796.5,275.167 796.5,274.5C 798.754,273.585 800.754,272.252 802.5,270.5C 803.689,265.44 806.355,261.44 810.5,258.5C 811.167,258.5 811.5,258.167 811.5,257.5C 814.473,256.013 817.473,254.513 820.5,253C 830.951,250.405 841.284,247.405 851.5,244C 855.894,242.418 859.561,239.918 862.5,236.5C 864.46,234.844 866.46,233.177 868.5,231.5C 873.947,228.269 879.281,224.769 884.5,221C 889.837,218.081 895.337,215.581 901,213.5C 902.578,218.23 904.912,222.564 908,226.5C 909.74,228.954 911.907,230.454 914.5,231C 922.196,222.729 931.363,216.562 942,212.5C 941.489,205.868 941.156,199.202 941,192.5C 942.563,195.728 945.063,197.895 948.5,199C 955.616,200.157 962.616,201.823 969.5,204C 971.081,205.828 972.415,207.828 973.5,210C 975.235,210.651 976.902,210.485 978.5,209.5C 980.938,213.442 983.938,216.942 987.5,220C 994.167,225 1000.83,230 1007.5,235C 1010.47,237.1 1012.3,239.934 1013,243.5C 1013.83,250.623 1015.16,257.623 1017,264.5C 1020.11,268.298 1023.95,270.964 1028.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.979\n    },\n    fill: \"#070609\",\n    d: \"M 1065.5,195.5 C 1066.1,195.735 1066.43,196.235 1066.5,197C 1063.7,202.296 1059.7,206.462 1054.5,209.5C 1053.39,208.277 1053.22,206.944 1054,205.5C 1057.44,201.559 1061.27,198.225 1065.5,195.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.972\n    },\n    fill: \"#0f0d12\",\n    d: \"M 1155.5,194.5 C 1155.9,193.475 1156.56,193.308 1157.5,194C 1165.29,200.78 1171.95,208.447 1177.5,217C 1174.56,216.107 1172.06,214.274 1170,211.5C 1165.68,205.348 1160.84,199.681 1155.5,194.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.987\n    },\n    fill: \"#0b0a0e\",\n    d: \"M 1146.5,203.5 C 1151.81,209.656 1156.14,216.489 1159.5,224C 1159.17,224.5 1158.83,225 1158.5,225.5C 1152.34,219.343 1148.34,212.01 1146.5,203.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.986\n    },\n    fill: \"#0b090d\",\n    d: \"M 1026.5,227.5 C 1033.27,223.946 1039.93,220.113 1046.5,216C 1047.5,215.333 1048.5,215.333 1049.5,216C 1043.42,223.041 1035.75,226.874 1026.5,227.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.982\n    },\n    fill: \"#0b090d\",\n    d: \"M 947.5,217.5 C 955.139,224.477 957.973,233.144 956,243.5C 954.259,234.445 951.426,225.778 947.5,217.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.357\n    },\n    fill: \"#fdfdfe\",\n    d: \"M 1164.5,229.5 C 1167.24,237.019 1166.58,237.353 1162.5,230.5C 1163.17,230.167 1163.83,229.833 1164.5,229.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#919191\",\n    d: \"M 1589.5,235.5 C 1626.54,233.338 1661.2,241.171 1693.5,259C 1696.37,261.537 1698.87,264.37 1701,267.5C 1701.32,274.902 1700.65,282.235 1699,289.5C 1690.75,294.958 1682.08,299.624 1673,303.5C 1653.52,299.793 1634.02,299.627 1614.5,303C 1608.39,304.891 1602.39,307.058 1596.5,309.5C 1582.39,303.611 1568.39,297.444 1554.5,291C 1548.5,289.333 1542.5,287.667 1536.5,286C 1535.33,285.581 1534.33,284.915 1533.5,284C 1545.05,276.785 1554.21,267.285 1561,255.5C 1568.67,245.941 1578.17,239.274 1589.5,235.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.979\n    },\n    fill: \"#131116\",\n    d: \"M 870.5,244.5 C 871.621,246.089 871.454,247.756 870,249.5C 866.054,255.779 861.721,261.779 857,267.5C 859.518,258.782 864.018,251.115 870.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.759\n    },\n    fill: \"#b1b1b1\",\n    d: \"M 598.5,248.5 C 599.289,248.783 599.956,249.283 600.5,250C 593.321,250.821 586.321,250.655 579.5,249.5C 586.022,249.823 592.355,249.49 598.5,248.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161318\",\n    d: \"M 1416.5,177.5 C 1384.84,189.08 1353.34,201.08 1322,213.5C 1323.29,219.027 1323.62,224.694 1323,230.5C 1321.66,235.336 1319.16,239.503 1315.5,243C 1317.65,245.469 1319.15,248.302 1320,251.5C 1320.33,258.833 1320.67,266.167 1321,273.5C 1321.22,274.938 1321.72,276.271 1322.5,277.5C 1337.18,268.497 1351.51,258.997 1365.5,249C 1373.73,242.442 1380.07,234.442 1384.5,225C 1391.5,220.833 1398.5,216.667 1405.5,212.5C 1406.66,214.55 1406.5,216.55 1405,218.5C 1401.27,221.952 1397.1,224.785 1392.5,227C 1390.7,228.594 1389.7,230.594 1389.5,233C 1390.58,236.662 1392.08,240.162 1394,243.5C 1394.33,247.167 1394.67,250.833 1395,254.5C 1399.37,258.533 1403.37,262.866 1407,267.5C 1407.33,271.167 1407.67,274.833 1408,278.5C 1411.58,283.8 1415.74,288.633 1420.5,293C 1422.04,294.187 1423.71,294.52 1425.5,294C 1426.93,291.815 1428.6,289.815 1430.5,288C 1435.91,285.548 1441.07,282.714 1446,279.5C 1446.23,271.695 1449.57,265.695 1456,261.5C 1458.05,255.428 1461.72,250.428 1467,246.5C 1469.55,239.677 1472.38,233.01 1475.5,226.5C 1477.84,228.194 1478.84,230.528 1478.5,233.5C 1477.51,238.306 1476.01,242.973 1474,247.5C 1472.47,253.657 1474.8,257.657 1481,259.5C 1481.6,262.308 1482.76,264.808 1484.5,267C 1487.17,268.333 1489.83,269.667 1492.5,271C 1495.27,272.762 1496.77,275.262 1497,278.5C 1499.48,280.639 1501.98,282.639 1504.5,284.5C 1503.83,284.5 1503.5,284.833 1503.5,285.5C 1500.55,283.72 1497.71,281.72 1495,279.5C 1494.75,277.567 1494.25,275.734 1493.5,274C 1490.45,271.806 1487.11,270.139 1483.5,269C 1481.44,266.489 1479.94,263.656 1479,260.5C 1472.73,258.297 1470.4,253.964 1472,247.5C 1474.87,242.122 1476.21,236.455 1476,230.5C 1473.34,236.466 1470.67,242.466 1468,248.5C 1463.05,252.104 1459.71,256.771 1458,262.5C 1450.89,266.378 1447.73,272.378 1448.5,280.5C 1442.83,283.667 1437.17,286.833 1431.5,290C 1429.6,291.815 1427.93,293.815 1426.5,296C 1423.07,296.459 1420.07,295.459 1417.5,293C 1413.67,288.5 1409.83,284 1406,279.5C 1405.87,275.049 1405.2,270.716 1404,266.5C 1399.96,262.8 1396.3,258.8 1393,254.5C 1393.35,247.627 1391.68,241.294 1388,235.5C 1387.06,232.12 1387.73,229.12 1390,226.5C 1394.94,223.948 1399.44,220.782 1403.5,217C 1397.85,219.661 1392.19,222.661 1386.5,226C 1382.1,235.415 1375.77,243.415 1367.5,250C 1352.83,260 1338.17,270 1323.5,280C 1322.55,280.617 1321.72,280.451 1321,279.5C 1320.33,278.167 1319.67,276.833 1319,275.5C 1318.67,267.5 1318.33,259.5 1318,251.5C 1316.5,248.5 1315,245.5 1313.5,242.5C 1314.81,240.684 1316.31,239.017 1318,237.5C 1322.28,229.214 1322.61,220.881 1319,212.5C 1351.29,200.241 1383.45,187.908 1415.5,175.5C 1417.23,174.095 1419.23,173.595 1421.5,174C 1419.24,174.549 1417.57,175.716 1416.5,177.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191919\",\n    d: \"M 1671.5,257.5 C 1672.98,257.238 1674.31,257.571 1675.5,258.5C 1667.41,262.961 1659.25,267.294 1651,271.5C 1650.91,269.887 1651.74,268.72 1653.5,268C 1659.4,264.221 1665.4,260.721 1671.5,257.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.989\n    },\n    fill: \"#100e13\",\n    d: \"M 934.5,260.5 C 935.793,261.842 936.626,263.509 937,265.5C 934.891,276.199 938.224,284.532 947,290.5C 948.982,292.246 948.815,293.579 946.5,294.5C 939.397,290.207 935.231,283.874 934,275.5C 933.222,270.416 933.389,265.416 934.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1688.5,260.5 C 1689.12,260.611 1689.62,260.944 1690,261.5C 1690.28,267.617 1688.28,272.951 1684,277.5C 1683.82,281.656 1682.98,285.656 1681.5,289.5C 1680.34,286.216 1680.18,282.882 1681,279.5C 1682.97,272.901 1685.47,266.568 1688.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1676.5,264.5 C 1677.98,264.238 1679.31,264.571 1680.5,265.5C 1676.11,270.992 1674.27,277.326 1675,284.5C 1674.26,286.221 1673.43,287.887 1672.5,289.5C 1670.31,280.499 1671.65,272.166 1676.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e1e1e\",\n    d: \"M 1589.5,264.5 C 1589.74,263.903 1590.24,263.57 1591,263.5C 1603.8,264.931 1616.63,266.098 1629.5,267C 1623.46,267.009 1617.62,267.842 1612,269.5C 1609.29,268.99 1606.63,268.323 1604,267.5C 1598.98,267.893 1594.14,266.893 1589.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1656.5,269.5 C 1657.5,269.47 1658.16,269.97 1658.5,271C 1655.35,276.795 1653.52,282.961 1653,289.5C 1652.31,290.357 1651.48,291.023 1650.5,291.5C 1649.83,283.499 1651.83,276.166 1656.5,269.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150e1b\",\n    d: \"M 1271.5,255.5 C 1273.2,255.34 1274.87,255.506 1276.5,256C 1267.63,258.509 1259.3,262.175 1251.5,267C 1238.96,277.878 1226.12,288.378 1213,298.5C 1212.38,297.551 1212.55,296.718 1213.5,296C 1225.42,287.422 1236.75,278.089 1247.5,268C 1255.15,263.009 1263.15,258.842 1271.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1625.5,271.5 C 1631.08,271.21 1636.42,272.043 1641.5,274C 1638.43,276.282 1635.93,279.116 1634,282.5C 1632,287.167 1630,291.833 1628,296.5C 1626.28,293.944 1626.28,291.278 1628,288.5C 1629.96,283.41 1632.79,278.91 1636.5,275C 1631.92,273.855 1627.25,273.189 1622.5,273C 1623.74,272.768 1624.74,272.268 1625.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120c18\",\n    d: \"M 1466.5,271.5 C 1467.77,275.025 1469.27,278.358 1471,281.5C 1467.59,279.021 1466.09,275.688 1466.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.98\n    },\n    fill: \"#110e13\",\n    d: \"M 851.5,273.5 C 846.654,285.852 838.654,296.352 827.5,305C 825.99,305.85 824.49,306.683 823,307.5C 822.5,307.167 822,306.833 821.5,306.5C 832.885,296.78 842.885,285.78 851.5,273.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1646.5,272.5 C 1647.12,272.917 1647.46,273.584 1647.5,274.5C 1645.52,282.48 1641.85,289.48 1636.5,295.5C 1635.39,294.277 1635.22,292.944 1636,291.5C 1640.03,285.434 1643.53,279.101 1646.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.969\n    },\n    fill: \"#110e13\",\n    d: \"M 838.5,277.5 C 838.406,281.908 836.406,285.741 832.5,289C 817.805,297.994 817.139,297.328 830.5,287C 833.754,284.253 836.42,281.086 838.5,277.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1521.5,289.5 C 1538.12,290.488 1554.12,294.321 1569.5,301C 1574.67,303.08 1579.33,305.913 1583.5,309.5C 1581.69,312.472 1579.69,315.305 1577.5,318C 1564.87,316.741 1553.21,319.408 1542.5,326C 1535.15,332.523 1530.82,340.689 1529.5,350.5C 1509.68,339.422 1488.68,331.422 1466.5,326.5C 1467.97,317.06 1471.97,308.893 1478.5,302C 1482.44,299.196 1486.78,297.196 1491.5,296C 1501.73,294.356 1511.73,292.189 1521.5,289.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 1718.5,291.5 C 1744.13,293.049 1769.8,293.882 1795.5,294C 1812.63,294.143 1823.8,302.31 1829,318.5C 1830.23,329.661 1831.39,340.827 1832.5,352C 1832.24,354.547 1831.74,357.047 1831,359.5C 1829.95,360.517 1828.78,360.684 1827.5,360C 1822.77,354.296 1816.77,351.963 1809.5,353C 1800.5,357.333 1791.5,361.667 1782.5,366C 1771.11,369.428 1759.44,370.428 1747.5,369C 1733.5,364.667 1719.5,360.333 1705.5,356C 1699.21,354.977 1692.87,354.311 1686.5,354C 1682.89,349.766 1680.39,344.932 1679,339.5C 1676.67,338.767 1675.17,337.267 1674.5,335C 1675.67,328.166 1676.83,321.333 1678,314.5C 1680.41,307.091 1685.24,301.924 1692.5,299C 1701.2,296.163 1709.87,293.663 1718.5,291.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.98\n    },\n    fill: \"#0e0b10\",\n    d: \"M 780.5,296.5 C 781.239,296.369 781.906,296.536 782.5,297C 776.667,304.833 770.833,312.667 765,320.5C 760.055,323.445 755.722,327.112 752,331.5C 750.204,335.683 748.871,340.016 748,344.5C 746.159,348.183 743.826,351.516 741,354.5C 743.568,346.137 746.568,337.803 750,329.5C 757.755,323.747 764.089,316.747 769,308.5C 773.037,304.631 776.87,300.631 780.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.98\n    },\n    fill: \"#0d0b10\",\n    d: \"M 813.5,298.5 C 814.289,298.783 814.956,299.283 815.5,300C 803.7,310.131 792.2,320.631 781,331.5C 780.333,330.833 780.333,330.167 781,329.5C 784.385,325.783 787.385,321.783 790,317.5C 798.178,311.507 806.011,305.174 813.5,298.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 1457.5,319.5 C 1456.15,318.399 1454.65,317.399 1453,316.5C 1452.35,314.765 1452.52,313.098 1453.5,311.5C 1470.88,298.665 1474.05,300.998 1463,318.5C 1461.3,319.406 1459.47,319.739 1457.5,319.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1635.5,304.5 C 1647.12,304.179 1658.28,306.179 1669,310.5C 1668.07,315.206 1667.57,320.039 1667.5,325C 1668.46,337.158 1668.63,349.325 1668,361.5C 1666.96,367.406 1664.46,372.573 1660.5,377C 1650.67,382.414 1641,388.081 1631.5,394C 1626.66,397.676 1622.32,401.842 1618.5,406.5C 1615.66,401.829 1611.99,397.996 1607.5,395C 1592.17,395.154 1576.84,395.154 1561.5,395C 1553.16,392.659 1547.33,387.493 1544,379.5C 1541.18,368.236 1538.68,356.902 1536.5,345.5C 1540,330.667 1549.33,322.667 1564.5,321.5C 1572.15,322.835 1579.82,323.668 1587.5,324C 1595.59,320.582 1602.59,315.582 1608.5,309C 1617.65,307.53 1626.65,306.03 1635.5,304.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 1652.5,309.5 C 1653.5,309.5 1654.5,309.5 1655.5,309.5C 1655.33,313.514 1655.5,317.514 1656,321.5C 1657.58,324.994 1659.41,328.327 1661.5,331.5C 1661,332.521 1660.33,332.688 1659.5,332C 1657.67,330.167 1655.83,328.333 1654,326.5C 1653.83,327 1653.67,327.5 1653.5,328C 1656.08,331.158 1658.41,334.492 1660.5,338C 1660.33,338.5 1660.17,339 1660,339.5C 1657.98,337.65 1656.15,335.65 1654.5,333.5C 1652.93,332.691 1651.26,332.357 1649.5,332.5C 1650.37,324.819 1651.37,317.152 1652.5,309.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.979\n    },\n    fill: \"#0d0b0f\",\n    d: \"M 816.5,312.5 C 818.688,313.536 818.688,315.036 816.5,317C 807,323.833 797.5,330.667 788,337.5C 787.464,335.433 787.964,333.599 789.5,332C 798.921,325.968 807.921,319.468 816.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1349.5,312.5 C 1367.1,313.366 1384.43,315.866 1401.5,320C 1402.02,320.561 1402.36,321.228 1402.5,322C 1398.98,326.914 1397.65,332.414 1398.5,338.5C 1386.1,342.357 1373.76,346.523 1361.5,351C 1344.11,355.338 1334.44,348.838 1332.5,331.5C 1335.03,322.304 1340.7,315.97 1349.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120b17\",\n    d: \"M 1193.5,306.5 C 1194.53,306.897 1194.69,307.563 1194,308.5C 1190.37,311.13 1187.03,314.13 1184,317.5C 1186.16,313.157 1189.33,309.491 1193.5,306.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 1449.5,320.5 C 1449.59,321.496 1449.25,322.329 1448.5,323C 1439.36,322.953 1430.36,323.953 1421.5,326C 1415.38,329.726 1409.05,332.893 1402.5,335.5C 1402,327.486 1405.66,322.319 1413.5,320C 1424.05,317.688 1434.72,317.021 1445.5,318C 1446.98,318.662 1448.32,319.496 1449.5,320.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#828282\",\n    d: \"M 1457.5,319.5 C 1459.04,320.141 1460.38,321.141 1461.5,322.5C 1457.15,323.974 1453.15,323.307 1449.5,320.5C 1449.37,319.624 1449.7,318.957 1450.5,318.5C 1452.75,319.374 1455.08,319.708 1457.5,319.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1524.5,320.5 C 1525.5,320.47 1526.16,320.97 1526.5,322C 1525.38,324.616 1524.05,327.116 1522.5,329.5C 1523.32,330.386 1524.32,330.719 1525.5,330.5C 1525.35,332.942 1526.19,333.609 1528,332.5C 1528.71,334.367 1528.21,335.867 1526.5,337C 1521.9,338.102 1517.23,338.935 1512.5,339.5C 1512.17,339.167 1511.83,338.833 1511.5,338.5C 1515.88,332.464 1520.22,326.464 1524.5,320.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1429.5,326.5 C 1441.06,325.706 1452.4,326.873 1463.5,330C 1487.08,337.123 1509.75,346.457 1531.5,358C 1533.41,366.203 1535.58,374.369 1538,382.5C 1540.06,387.888 1543.56,392.054 1548.5,395C 1537.92,394.321 1527.42,392.821 1517,390.5C 1505.27,396.613 1493.77,403.113 1482.5,410C 1471.82,412.503 1461.16,415.003 1450.5,417.5C 1446.4,408.446 1439.4,403.279 1429.5,402C 1424.86,401.17 1420.19,400.503 1415.5,400C 1398.83,399.667 1382.17,399.333 1365.5,399C 1358.2,398.241 1351.2,396.408 1344.5,393.5C 1343.42,392.635 1343.25,391.635 1344,390.5C 1352.39,383.39 1361.22,376.89 1370.5,371C 1384.62,357.206 1399.62,344.54 1415.5,333C 1420.14,330.511 1424.8,328.344 1429.5,326.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#110b16\",\n    d: \"M 1164.5,324.5 C 1165.55,324.351 1166.55,324.517 1167.5,325C 1154.12,329.189 1142.45,336.189 1132.5,346C 1131.83,346.667 1131.17,346.667 1130.5,346C 1140.18,336.142 1151.51,328.975 1164.5,324.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191919\",\n    d: \"M 1394.5,322.5 C 1395.24,322.369 1395.91,322.536 1396.5,323C 1390.7,328.399 1384.37,333.066 1377.5,337C 1366.59,336.552 1355.92,334.552 1345.5,331C 1355.86,331.144 1366.03,332.644 1376,335.5C 1382.35,331.304 1388.51,326.97 1394.5,322.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1327.5,339.5 C 1328.83,339.5 1330.17,339.5 1331.5,339.5C 1332.15,341.086 1332.65,342.753 1333,344.5C 1336.5,347.513 1339,351.18 1340.5,355.5C 1338.98,359.551 1337.98,363.718 1337.5,368C 1338.57,372.467 1339.57,376.967 1340.5,381.5C 1335.49,381.666 1330.49,381.499 1325.5,381C 1315.7,377.264 1306.03,373.264 1296.5,369C 1287.91,368.13 1279.41,366.964 1271,365.5C 1271.36,357.414 1273.52,349.748 1277.5,342.5C 1283.02,339.605 1288.85,337.605 1295,336.5C 1305.81,337.855 1316.64,338.855 1327.5,339.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.988\n    },\n    fill: \"#7c7972\",\n    d: \"M 325.5,458.5 C 324.662,458.842 324.328,459.508 324.5,460.5C 322.564,464.976 321.231,469.643 320.5,474.5C 329.147,475.423 337.814,476.256 346.5,477C 350.359,480.032 354.026,483.198 357.5,486.5C 356.167,487.167 354.833,487.833 353.5,488.5C 350.763,488.599 348.096,488.265 345.5,487.5C 341.733,484.107 337.4,481.44 332.5,479.5C 329.029,480.097 325.695,480.764 322.5,481.5C 321.209,481.737 320.209,481.404 319.5,480.5C 320.239,480.631 320.906,480.464 321.5,480C 311.993,477.039 302.326,474.873 292.5,473.5C 282.87,473.938 273.536,475.771 264.5,479C 263.57,488.949 264.57,498.782 267.5,508.5C 267.167,508.5 266.833,508.5 266.5,508.5C 258.91,510.148 251.244,510.648 243.5,510C 227.894,508.288 212.56,505.288 197.5,501C 165.725,499.927 134.391,495.593 103.5,488C 94.1667,487.333 84.8333,487.333 75.5,488C 63.6161,490.329 55.1161,496.829 50,507.5C 49.502,510.482 49.3354,513.482 49.5,516.5C 41.5,516.5 33.5,516.5 25.5,516.5C 25.8214,522.026 25.4881,527.36 24.5,532.5C 18.3908,505.308 17.8908,477.974 23,450.5C 23.3333,429.833 23.6667,409.167 24,388.5C 24.7653,377.779 25.932,367.112 27.5,356.5C 39.1483,355.698 50.815,355.365 62.5,355.5C 62.2574,363.033 61.5907,370.533 60.5,378C 60.6667,379.833 60.8333,381.667 61,383.5C 62.4609,384.883 63.2942,384.549 63.5,382.5C 66.368,381.647 69.0347,380.314 71.5,378.5C 79.8751,383.19 88.5418,387.69 97.5,392C 103.5,392.667 109.5,392.667 115.5,392C 123.018,390.24 130.352,387.907 137.5,385C 142.785,383.974 148.118,383.307 153.5,383C 155.813,379.092 158.313,375.259 161,371.5C 161.183,365.106 160.516,358.773 159,352.5C 156.778,348.612 153.612,345.779 149.5,344C 143.952,341.928 138.285,340.262 132.5,339C 115.837,338.5 99.17,338.333 82.5,338.5C 86.8537,336.657 91.5204,335.657 96.5,335.5C 112.843,336.146 129.176,336.979 145.5,338C 153.252,338.71 160.252,341.377 166.5,346C 175.16,345.823 183.826,345.823 192.5,346C 196.797,347.158 201.131,348.158 205.5,349C 211.546,353.364 217.879,357.364 224.5,361C 240.905,357.331 252.738,362.831 260,377.5C 260.01,385.796 258.843,393.963 256.5,402C 256.909,404.321 257.743,406.487 259,408.5C 263.666,410.704 268.5,412.537 273.5,414C 278.543,418.712 283.877,423.045 289.5,427C 296.422,428.727 303.089,431.06 309.5,434C 314.667,440.5 319.833,447 325,453.5C 325.494,455.134 325.66,456.801 325.5,458.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.85\n    },\n    fill: \"#131312\",\n    d: \"M 82.5,338.5 C 99.17,338.333 115.837,338.5 132.5,339C 138.285,340.262 143.952,341.928 149.5,344C 153.612,345.779 156.778,348.612 159,352.5C 160.516,358.773 161.183,365.106 161,371.5C 158.313,375.259 155.813,379.092 153.5,383C 148.118,383.307 142.785,383.974 137.5,385C 130.352,387.907 123.018,390.24 115.5,392C 109.5,392.667 103.5,392.667 97.5,392C 88.5418,387.69 79.8751,383.19 71.5,378.5C 73.1992,378.34 74.8659,378.506 76.5,379C 82.5,382.333 88.5,385.667 94.5,389C 98.5252,390.548 102.692,391.381 107,391.5C 117.807,389.84 128.307,387.006 138.5,383C 142.833,382.667 147.167,382.333 151.5,382C 153.306,378.256 155.472,374.756 158,371.5C 158.332,366.146 157.999,360.813 157,355.5C 155.444,350.124 151.944,346.624 146.5,345C 141.923,343.356 137.256,342.022 132.5,341C 114.833,340.333 97.1667,340.333 79.5,341C 71.6111,343.258 66.7778,348.425 65,356.5C 64.073,365.145 63.573,373.811 63.5,382.5C 63.2942,384.549 62.4609,384.883 61,383.5C 60.8333,381.667 60.6667,379.833 60.5,378C 61.5907,370.533 62.2574,363.033 62.5,355.5C 64.886,344.78 71.5527,339.113 82.5,338.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 71.5,378.5 C 69.0347,380.314 66.368,381.647 63.5,382.5C 63.573,373.811 64.073,365.145 65,356.5C 66.7778,348.425 71.6111,343.258 79.5,341C 97.1667,340.333 114.833,340.333 132.5,341C 137.256,342.022 141.923,343.356 146.5,345C 151.944,346.624 155.444,350.124 157,355.5C 157.999,360.813 158.332,366.146 158,371.5C 155.472,374.756 153.306,378.256 151.5,382C 147.167,382.333 142.833,382.667 138.5,383C 128.307,387.006 117.807,389.84 107,391.5C 102.692,391.381 98.5252,390.548 94.5,389C 88.5,385.667 82.5,382.333 76.5,379C 74.8659,378.506 73.1992,378.34 71.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7950a9\",\n    d: \"M 1084.5,450.5 C 1084.94,450.435 1085.27,450.601 1085.5,451C 1074.36,455.977 1062.69,457.81 1050.5,456.5C 1043.24,454.519 1035.91,452.852 1028.5,451.5C 1010.23,445.818 998.559,452.485 993.5,471.5C 988.667,471.833 983.833,472.167 979,472.5C 942.972,471.926 907.805,466.259 873.5,455.5C 879.277,446.344 879.944,436.844 875.5,427C 883.198,426.102 890.198,423.435 896.5,419C 900.942,410.618 905.775,402.452 911,394.5C 922.214,380.642 936.714,373.976 954.5,374.5C 958.419,361.07 966.086,350.237 977.5,342C 980.366,340.543 983.366,340.21 986.5,341C 989.061,346.895 993.061,351.561 998.5,355C 1005.28,357.894 1012.11,360.394 1019,362.5C 1036.67,388.167 1054.33,413.833 1072,439.5C 1075.74,443.747 1079.91,447.414 1084.5,450.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 1647.5,340.5 C 1648.5,340.5 1649.5,340.5 1650.5,340.5C 1646.24,349.423 1639.58,356.089 1630.5,360.5C 1629.3,360.154 1629.3,359.654 1630.5,359C 1638.12,354.546 1643.79,348.379 1647.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1391.5,341.5 C 1392.5,341.5 1393.5,341.5 1394.5,341.5C 1394.65,342.552 1394.48,343.552 1394,344.5C 1382.83,354.333 1371.67,364.167 1360.5,374C 1356,377.085 1351.33,379.918 1346.5,382.5C 1342.09,375.774 1340.26,368.441 1341,360.5C 1343.17,356.99 1346.34,354.823 1350.5,354C 1365.55,353.993 1379.22,349.826 1391.5,341.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#110d14\",\n    d: \"M 785.5,343.5 C 783.691,349.276 780.691,354.442 776.5,359C 775.668,359.688 775.002,359.521 774.5,358.5C 776.426,353.918 778.76,349.584 781.5,345.5C 782.657,343.862 783.824,342.196 785,340.5C 785.483,341.448 785.649,342.448 785.5,343.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 1296.5,348.5 C 1307.3,348.182 1317.97,349.182 1328.5,351.5C 1318.63,352.52 1308.8,352.187 1299,350.5C 1295.16,353.086 1291.16,355.419 1287,357.5C 1286.5,357.333 1286,357.167 1285.5,357C 1289.07,353.92 1292.73,351.087 1296.5,348.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1662.5,345.5 C 1663.7,356.334 1660.36,365.834 1652.5,374C 1651.21,374.49 1649.87,374.657 1648.5,374.5C 1648.34,373.127 1648.51,371.793 1649,370.5C 1654.03,362.432 1658.53,354.098 1662.5,345.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 205.5,355.5 C 209.168,363.001 215.168,366.335 223.5,365.5C 225.099,365.768 226.432,365.434 227.5,364.5C 237.749,363.912 244.249,368.579 247,378.5C 246.331,388.518 243.998,398.185 240,407.5C 237.658,410.754 234.491,412.588 230.5,413C 221.161,413.166 211.827,413.166 202.5,413C 201.244,413.417 200.577,414.25 200.5,415.5C 199.094,415.973 198.427,416.973 198.5,418.5C 197.85,418.804 197.183,419.137 196.5,419.5C 189.902,411.356 181.902,404.856 172.5,400C 170.959,398.421 169.792,396.587 169,394.5C 167.88,381.519 167.38,368.519 167.5,355.5C 171.812,353.016 176.478,351.682 181.5,351.5C 189.578,352.449 197.578,353.783 205.5,355.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161515\",\n    d: \"M 205.5,355.5 C 197.578,353.783 189.578,352.449 181.5,351.5C 176.478,351.682 171.812,353.016 167.5,355.5C 167.38,368.519 167.88,381.519 169,394.5C 169.792,396.587 170.959,398.421 172.5,400C 181.902,404.856 189.902,411.356 196.5,419.5C 197.183,419.137 197.85,418.804 198.5,418.5C 198.489,420.686 197.489,421.519 195.5,421C 193.205,417.703 190.538,414.703 187.5,412C 180.694,407.52 174.194,402.687 168,397.5C 167.529,395.754 166.862,394.087 166,392.5C 165.996,379.132 165.829,365.799 165.5,352.5C 170.547,350.947 175.713,349.947 181,349.5C 188.205,350.426 195.371,351.593 202.5,353C 204.119,353.236 205.119,354.069 205.5,355.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b7871\",\n    d: \"M 1676.5,350.5 C 1678.41,354.905 1681.75,357.739 1686.5,359C 1695.2,359.298 1703.86,359.965 1712.5,361C 1725.03,365.4 1737.7,369.4 1750.5,373C 1773.29,375.577 1794.12,370.41 1813,357.5C 1822.68,361.394 1832.52,364.894 1842.5,368C 1843.71,386.445 1843.55,404.945 1842,423.5C 1839.2,410.036 1831.04,401.869 1817.5,399C 1784.63,391.246 1751.63,384.246 1718.5,378C 1708.43,377.347 1698.43,377.847 1688.5,379.5C 1680.8,378.994 1673.14,378.161 1665.5,377C 1672.9,369.703 1676.57,360.87 1676.5,350.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 176.5,354.5 C 178.322,359.205 179.322,364.205 179.5,369.5C 176.737,369.744 174.571,371.077 173,373.5C 172.333,372.833 172.333,372.167 173,371.5C 174.983,370.234 175.983,368.568 176,366.5C 174.887,368.329 173.387,369.163 171.5,369C 174.926,364.805 176.593,359.972 176.5,354.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#292827\",\n    d: \"M 205.5,355.5 C 207.917,357.411 210.25,359.578 212.5,362C 216.102,363.757 219.768,364.924 223.5,365.5C 215.168,366.335 209.168,363.001 205.5,355.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120f15\",\n    d: \"M 733.5,360.5 C 731.94,365.955 728.273,368.455 722.5,368C 724.041,366.629 725.375,365.129 726.5,363.5C 728.754,362.585 730.754,361.252 732.5,359.5C 733.107,359.624 733.44,359.957 733.5,360.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1399.5,356.5 C 1400.95,355.387 1402.61,355.22 1404.5,356C 1415.18,359.506 1425.51,363.839 1435.5,369C 1437.83,369.333 1440.17,369.667 1442.5,370C 1440.09,371.885 1437.42,372.552 1434.5,372C 1423.62,365.201 1411.95,360.034 1399.5,356.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d4998\",\n    d: \"M 697.5,368.5 C 696.925,366.589 695.925,364.922 694.5,363.5C 699.437,362.181 704.437,361.348 709.5,361C 706.983,363.349 704.65,365.849 702.5,368.5C 701.667,367.5 700.833,366.5 700,365.5C 699.623,366.942 698.79,367.942 697.5,368.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 1639.5,360.5 C 1641.05,361.23 1641.88,362.563 1642,364.5C 1643.19,362.441 1644.35,362.274 1645.5,364C 1644.19,369.779 1641.69,374.945 1638,379.5C 1637.09,378.672 1636.42,377.672 1636,376.5C 1633.47,382.237 1629.97,387.237 1625.5,391.5C 1624.35,388.894 1624.18,386.227 1625,383.5C 1629.34,375.468 1634.18,367.801 1639.5,360.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e87bf\",\n    d: \"M 694.5,363.5 C 695.925,364.922 696.925,366.589 697.5,368.5C 694.579,369.696 691.579,370.696 688.5,371.5C 690.098,369.302 691.431,366.969 692.5,364.5C 693.167,364.167 693.833,363.833 694.5,363.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c058\",\n    d: \"M 1125.5,432.5 C 1127.03,432.573 1128.03,431.906 1128.5,430.5C 1130.03,430.573 1131.03,429.906 1131.5,428.5C 1133.03,428.573 1134.03,427.906 1134.5,426.5C 1136.4,426.262 1137.74,425.262 1138.5,423.5C 1140.03,423.573 1141.03,422.906 1141.5,421.5C 1143.03,421.573 1144.03,420.906 1144.5,419.5C 1146.4,419.262 1147.74,418.262 1148.5,416.5C 1151.37,415.567 1153.7,413.9 1155.5,411.5C 1157.03,411.573 1158.03,410.906 1158.5,409.5C 1160.03,409.573 1161.03,408.906 1161.5,407.5C 1163.03,407.573 1164.03,406.906 1164.5,405.5C 1165.49,405.672 1166.16,405.338 1166.5,404.5C 1168.03,404.573 1169.03,403.906 1169.5,402.5C 1171.78,401.36 1174.11,400.193 1176.5,399C 1181.83,398.333 1187.17,398.333 1192.5,399C 1206.22,402.796 1219.89,406.796 1233.5,411C 1247.57,411.445 1253.07,404.612 1250,390.5C 1247.4,387.148 1246.9,383.481 1248.5,379.5C 1244.99,376.253 1241.32,373.253 1237.5,370.5C 1246.28,368.096 1255.11,365.763 1264,363.5C 1265.23,363.645 1266.39,363.978 1267.5,364.5C 1269.02,366.858 1271.02,368.691 1273.5,370C 1288.15,369.412 1301.81,372.745 1314.5,380C 1304.58,378.724 1294.58,378.391 1284.5,379C 1279.5,379.749 1274.83,381.416 1270.5,384C 1259.63,394.521 1261.63,401.187 1276.5,404C 1259.34,415.751 1241.67,426.751 1223.5,437C 1219.28,439.282 1215.62,442.282 1212.5,446C 1199.19,445.235 1185.86,444.402 1172.5,443.5C 1168.11,443.545 1163.78,444.045 1159.5,445C 1142,451.752 1125.33,460.085 1109.5,470C 1097.47,483.701 1084.47,496.367 1070.5,508C 1060.11,513.861 1049.45,519.194 1038.5,524C 1031.67,526.322 1024.67,526.988 1017.5,526C 1015.36,524.692 1013.36,523.192 1011.5,521.5C 1002.86,507.54 990.527,498.54 974.5,494.5C 981.334,491.443 988.334,488.777 995.5,486.5C 996.583,485.635 996.749,484.635 996,483.5C 993.097,481.454 991.264,478.787 990.5,475.5C 1001.8,475.758 1012.97,477.091 1024,479.5C 1029.02,479.161 1033.85,477.995 1038.5,476C 1046.91,476.767 1054.58,474.767 1061.5,470C 1064.31,468.412 1064.98,466.245 1063.5,463.5C 1076.71,457.729 1090.04,452.229 1103.5,447C 1111.41,442.888 1118.75,438.055 1125.5,432.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1235.5,371.5 C 1241.72,375.362 1244.22,381.029 1243,388.5C 1247.6,395.028 1247.43,401.528 1242.5,408C 1238.45,408.518 1234.45,408.184 1230.5,407C 1220.7,404.4 1211.03,401.4 1201.5,398C 1192.85,396.316 1184.19,396.149 1175.5,397.5C 1173.93,397.248 1172.59,396.582 1171.5,395.5C 1170.64,390.072 1172.3,385.738 1176.5,382.5C 1174.54,378.129 1175.54,374.629 1179.5,372C 1188.96,369.575 1198.46,367.408 1208,365.5C 1217.49,366.164 1226.66,368.164 1235.5,371.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#100a15\",\n    d: \"M 1085.5,449.5 C 1084.83,449.5 1084.5,449.833 1084.5,450.5C 1079.91,447.414 1075.74,443.747 1072,439.5C 1054.33,413.833 1036.67,388.167 1019,362.5C 1012.11,360.394 1005.28,357.894 998.5,355C 993.061,351.561 989.061,346.895 986.5,341C 983.366,340.21 980.366,340.543 977.5,342C 966.086,350.237 958.419,361.07 954.5,374.5C 936.714,373.976 922.214,380.642 911,394.5C 905.775,402.452 900.942,410.618 896.5,419C 890.198,423.435 883.198,426.102 875.5,427C 879.944,436.844 879.277,446.344 873.5,455.5C 872.833,455.167 872.167,454.833 871.5,454.5C 876.398,445.02 876.731,435.354 872.5,425.5C 881.887,424.986 890.054,421.653 897,415.5C 898.555,413.557 899.722,411.39 900.5,409C 889.173,402.96 879.173,394.96 870.5,385C 866.833,383 863.167,383 859.5,385C 851.321,389.699 846.655,396.699 845.5,406C 829.885,410.974 815.551,418.307 802.5,428C 796.223,434.283 791.557,441.617 788.5,450C 789.793,450.49 791.127,450.657 792.5,450.5C 790.611,451.742 788.611,451.742 786.5,450.5C 788.713,445.072 791.213,439.739 794,434.5C 807.509,419.876 824.009,409.876 843.5,404.5C 845.311,395.71 849.977,388.877 857.5,384C 862.5,380.667 867.5,380.667 872.5,384C 879.979,393.808 889.479,400.975 901,405.5C 903.974,401.185 906.974,396.852 910,392.5C 920.965,379.101 935.132,372.268 952.5,372C 958.44,356.56 968.773,345.06 983.5,337.5C 985.187,337.76 986.687,338.427 988,339.5C 990.074,344.475 993.241,348.642 997.5,352C 1004.72,355.836 1012.22,358.669 1020,360.5C 1037.33,385.833 1054.67,411.167 1072,436.5C 1076.4,441.064 1080.9,445.398 1085.5,449.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1623.5,366.5 C 1624.73,367.152 1625.39,368.319 1625.5,370C 1623.99,379.529 1619.32,387.029 1611.5,392.5C 1609.08,389.358 1608.91,386.025 1611,382.5C 1612.28,379.397 1614.11,376.731 1616.5,374.5C 1617.31,376.423 1617.81,378.423 1618,380.5C 1620.12,375.924 1621.96,371.257 1623.5,366.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 200.5,415.5 C 200.577,414.25 201.244,413.417 202.5,413C 211.827,413.166 221.161,413.166 230.5,413C 234.491,412.588 237.658,410.754 240,407.5C 243.998,398.185 246.331,388.518 247,378.5C 244.249,368.579 237.749,363.912 227.5,364.5C 228.69,363.324 231.357,363.157 235.5,364C 242.237,365.736 246.737,369.903 249,376.5C 248.885,387.184 246.885,397.517 243,407.5C 240.688,411.58 237.188,414.08 232.5,415C 224.249,415.807 216.082,415.307 208,413.5C 205.256,413.41 202.756,414.077 200.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1517.5,368.5 C 1518.69,368.97 1519.36,369.97 1519.5,371.5C 1518.62,377.017 1517.12,382.35 1515,387.5C 1513.99,388.337 1512.82,388.67 1511.5,388.5C 1512.09,381.397 1514.09,374.731 1517.5,368.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1616.5,365.5 C 1617.24,365.369 1617.91,365.536 1618.5,366C 1613.68,371.409 1607.68,374.743 1600.5,376C 1594.5,376.333 1588.5,376.667 1582.5,377C 1579.55,380.79 1575.88,383.623 1571.5,385.5C 1573.29,381.853 1576.29,378.687 1580.5,376C 1574.27,375.594 1568.11,374.761 1562,373.5C 1559.58,373.25 1557.41,372.416 1555.5,371C 1564.34,370.3 1573.01,371.3 1581.5,374C 1594.59,376.311 1606.25,373.477 1616.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1480.5,371.5 C 1483.01,376.948 1482.84,382.614 1480,388.5C 1479.31,389.357 1478.48,390.023 1477.5,390.5C 1476.35,388.235 1476.19,385.902 1477,383.5C 1478.48,379.57 1479.64,375.57 1480.5,371.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1477.5,369.5 C 1478.1,369.735 1478.43,370.235 1478.5,371C 1477.17,378.313 1475.34,385.479 1473,392.5C 1471.67,393.833 1470.33,395.167 1469,396.5C 1468.06,395.737 1467.56,394.737 1467.5,393.5C 1469.75,385.005 1473.08,377.005 1477.5,369.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1527.5,371.5 C 1528.38,371.369 1529.04,371.702 1529.5,372.5C 1528.31,377.888 1525.81,382.555 1522,386.5C 1521.33,384.833 1521.33,383.167 1522,381.5C 1524.09,378.26 1525.92,374.926 1527.5,371.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0f09\",\n    d: \"M 1237.5,370.5 C 1241.32,373.253 1244.99,376.253 1248.5,379.5C 1246.9,383.481 1247.4,387.148 1250,390.5C 1253.07,404.612 1247.57,411.445 1233.5,411C 1219.89,406.796 1206.22,402.796 1192.5,399C 1187.17,398.333 1181.83,398.333 1176.5,399C 1174.11,400.193 1171.78,401.36 1169.5,402.5C 1170.94,400.412 1171.61,398.079 1171.5,395.5C 1172.59,396.582 1173.93,397.248 1175.5,397.5C 1184.19,396.149 1192.85,396.316 1201.5,398C 1211.03,401.4 1220.7,404.4 1230.5,407C 1234.45,408.184 1238.45,408.518 1242.5,408C 1247.43,401.528 1247.6,395.028 1243,388.5C 1244.22,381.029 1241.72,375.362 1235.5,371.5C 1235.41,369.302 1236.08,368.969 1237.5,370.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#140e1a\",\n    d: \"M 1189.5,325.5 C 1190.38,325.369 1191.04,325.702 1191.5,326.5C 1183.35,328.577 1176.01,332.244 1169.5,337.5C 1166.96,341.743 1165.8,346.41 1166,351.5C 1165.2,354.244 1164.2,356.911 1163,359.5C 1151.13,369.368 1141.46,381.034 1134,394.5C 1126.55,401.775 1120.05,409.775 1114.5,418.5C 1114,419.521 1113.33,419.688 1112.5,419C 1117.86,409.969 1124.36,401.802 1132,394.5C 1139.46,381.034 1149.13,369.368 1161,359.5C 1163.88,353.922 1165.21,347.922 1165,341.5C 1167.17,336.667 1170.67,333.167 1175.5,331C 1180.16,328.842 1184.83,327.009 1189.5,325.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1445.5,395.5 C 1448.3,389.237 1451.63,383.237 1455.5,377.5C 1456.33,382.802 1456.83,388.136 1457,393.5C 1459.44,388.277 1462.6,383.61 1466.5,379.5C 1465.87,386.465 1463.2,392.798 1458.5,398.5C 1456.16,397.384 1454,396.05 1452,394.5C 1450.62,395.551 1449.62,396.884 1449,398.5C 1447.48,397.837 1446.31,396.837 1445.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1440.5,376.5 C 1441.04,376.56 1441.38,376.893 1441.5,377.5C 1440.53,382.126 1439.7,386.792 1439,391.5C 1438.43,394.707 1436.59,396.374 1433.5,396.5C 1433.57,389.029 1435.9,382.362 1440.5,376.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 170.5,378.5 C 174.686,384.559 177.186,391.226 178,398.5C 172.457,393.007 169.957,386.34 170.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202020\",\n    d: \"M 178.5,375.5 C 182.192,379.698 186.192,383.864 190.5,388C 184.404,386.067 180.404,381.901 178.5,375.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1229.5,373.5 C 1230.24,373.369 1230.91,373.536 1231.5,374C 1220.65,385.546 1207.98,387.879 1193.5,381C 1201.86,380.958 1210.2,381.291 1218.5,382C 1222.6,379.63 1226.26,376.797 1229.5,373.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1282.5,380.5 C 1298.29,379.302 1313.29,382.136 1327.5,389C 1328.34,390.011 1328.67,391.178 1328.5,392.5C 1317.34,392.165 1306.34,392.998 1295.5,395C 1298.37,392.463 1300.87,389.63 1303,386.5C 1303.59,385.517 1303.26,384.85 1302,384.5C 1299.74,387.798 1296.91,390.631 1293.5,393C 1288.23,394.106 1282.9,394.773 1277.5,395C 1280.47,397.004 1283.81,398.004 1287.5,398C 1282.4,400.343 1277.06,401.01 1271.5,400C 1267.34,398.184 1266.5,395.351 1269,391.5C 1272.77,386.894 1277.27,383.227 1282.5,380.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 1699.5,380.5 C 1736.9,384.025 1773.57,391.192 1809.5,402C 1823.78,405.281 1832.28,414.115 1835,428.5C 1836.98,446.108 1838.15,463.774 1838.5,481.5C 1827.13,481.737 1815.79,482.57 1804.5,484C 1790.4,490.199 1776.06,495.699 1761.5,500.5C 1749.16,497.147 1736.83,496.98 1724.5,500C 1709.5,500.972 1694.5,501.972 1679.5,503C 1676.54,503.989 1673.54,504.822 1670.5,505.5C 1660.92,502.351 1651.09,500.684 1641,500.5C 1626.2,502.096 1611.37,502.596 1596.5,502C 1579.7,496.559 1575.53,486.059 1584,470.5C 1587.95,463.219 1593.78,458.053 1601.5,455C 1607.26,449.296 1612.43,443.129 1617,436.5C 1620.52,433.734 1623.86,430.734 1627,427.5C 1634.08,415.665 1641.42,403.998 1649,392.5C 1653.28,387.941 1658.45,384.774 1664.5,383C 1675.17,382.667 1685.83,382.333 1696.5,382C 1697.74,381.768 1698.74,381.268 1699.5,380.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#332348\",\n    d: \"M 966.5,370.5 C 967.239,370.369 967.906,370.536 968.5,371C 967.333,372.167 966.167,373.333 965,374.5C 964.84,378.287 964.174,381.954 963,385.5C 961.559,379.772 962.726,374.772 966.5,370.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7850a8\",\n    d: \"M 871.5,454.5 C 862.721,453.82 854.055,452.486 845.5,450.5C 848.09,446 847.756,445.666 844.5,449.5C 839.88,450.493 835.214,450.827 830.5,450.5C 829.081,449.549 827.415,449.216 825.5,449.5C 825.338,447.473 825.505,445.473 826,443.5C 827.602,441.631 828.602,439.631 829,437.5C 825.103,440.563 823.603,444.563 824.5,449.5C 821.167,449.5 817.833,449.5 814.5,449.5C 815.141,446.779 815.641,444.112 816,441.5C 814.269,443.862 813.435,446.529 813.5,449.5C 810.167,449.5 806.833,449.5 803.5,449.5C 803.5,448.833 803.5,448.167 803.5,447.5C 802.596,448.209 802.263,449.209 802.5,450.5C 799.167,450.5 795.833,450.5 792.5,450.5C 791.127,450.657 789.793,450.49 788.5,450C 791.557,441.617 796.223,434.283 802.5,428C 815.551,418.307 829.885,410.974 845.5,406C 846.655,396.699 851.321,389.699 859.5,385C 863.167,383 866.833,383 870.5,385C 879.173,394.96 889.173,402.96 900.5,409C 899.722,411.39 898.555,413.557 897,415.5C 890.054,421.653 881.887,424.986 872.5,425.5C 876.731,435.354 876.398,445.02 871.5,454.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5eb854\",\n    d: \"M 1321.5,383.5 C 1322.27,382.853 1323.27,382.52 1324.5,382.5C 1330.66,382.909 1336.66,383.743 1342.5,385C 1340.22,387.948 1337.39,390.114 1334,391.5C 1330.49,387.822 1326.32,385.155 1321.5,383.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1445.5,395.5 C 1444.22,397.452 1442.55,399.118 1440.5,400.5C 1440.17,399.667 1439.83,398.833 1439.5,398C 1441.39,391.397 1444.22,385.23 1448,379.5C 1447.72,384.878 1446.88,390.211 1445.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 183.5,388.5 C 187.593,392.791 190.76,397.791 193,403.5C 193.808,405.579 193.641,407.579 192.5,409.5C 190.347,407.206 188.68,404.54 187.5,401.5C 186.726,400.289 185.893,400.289 185,401.5C 183.239,398.551 182.072,395.384 181.5,392C 181.873,390.45 182.54,389.283 183.5,388.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 193.5,393.5 C 194.935,395.598 196.102,397.931 197,400.5C 197.308,399.692 197.808,399.025 198.5,398.5C 202.161,402.078 202.994,406.078 201,410.5C 195.781,406.06 193.281,400.393 193.5,393.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#322245\",\n    d: \"M 953.5,393.5 C 954.525,393.897 954.692,394.563 954,395.5C 953.28,397.255 952.113,398.089 950.5,398C 951.386,396.385 952.386,394.885 953.5,393.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a1d3b\",\n    d: \"M 1009.5,391.5 C 1010.97,395.071 1012.13,398.738 1013,402.5C 1010.15,399.386 1008.98,395.719 1009.5,391.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1320.5,395.5 C 1335.48,395.385 1350.15,397.552 1364.5,402C 1384.91,402.758 1405.25,404.425 1425.5,407C 1430.88,408.524 1435.88,410.858 1440.5,414C 1443.87,417.4 1444.7,421.233 1443,425.5C 1438.33,429.5 1433.67,433.5 1429,437.5C 1427.05,440.139 1426.05,443.139 1426,446.5C 1420.21,442.235 1413.71,439.735 1406.5,439C 1378.49,438.975 1350.49,439.309 1322.5,440C 1313.42,436.751 1304.26,433.918 1295,431.5C 1288.98,431.757 1283.48,433.59 1278.5,437C 1273.47,441.699 1268.8,446.699 1264.5,452C 1256.35,456.289 1247.68,457.622 1238.5,456C 1231.48,454.75 1224.82,452.583 1218.5,449.5C 1241.46,434.013 1264.46,418.513 1287.5,403C 1298.38,399.359 1309.38,396.859 1320.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1516.5,396.5 C 1530.47,398.655 1544.47,400.822 1558.5,403C 1573.72,404.076 1588.72,403.076 1603.5,400C 1608.18,406.419 1609.68,413.586 1608,421.5C 1607.1,425.538 1605.43,429.205 1603,432.5C 1595.67,441.17 1587.17,448.337 1577.5,454C 1558.09,464.454 1538.92,475.287 1520,486.5C 1511.5,477.548 1501,473.048 1488.5,473C 1486.13,472.464 1484.13,471.297 1482.5,469.5C 1471.87,470.161 1461.21,470.328 1450.5,470C 1447.45,470.679 1444.45,471.512 1441.5,472.5C 1437.44,463.159 1434.94,453.493 1434,443.5C 1434.67,442.167 1435.33,440.833 1436,439.5C 1443.95,434.601 1450.79,428.435 1456.5,421C 1479.14,418.962 1499.14,410.796 1516.5,396.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191919\",\n    d: \"M 197.5,393.5 C 197.56,392.957 197.893,392.624 198.5,392.5C 201.166,394.835 204.166,396.669 207.5,398C 215.746,398.808 223.913,398.308 232,396.5C 233.167,396.833 234.333,397.167 235.5,397.5C 230.89,398.856 226.223,400.022 221.5,401C 223.638,402.422 224.805,404.255 225,406.5C 222.54,405.042 220.373,403.209 218.5,401C 210.32,401.553 203.32,399.053 197.5,393.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b7871\",\n    d: \"M 1632.5,401.5 C 1634.5,401.5 1636.5,401.5 1638.5,401.5C 1638.24,404.016 1637.41,406.35 1636,408.5C 1622.17,429 1605,446.167 1584.5,460C 1577.33,466.319 1573,474.153 1571.5,483.5C 1572.28,491.864 1576.61,497.698 1584.5,501C 1590.92,503.807 1597.59,505.807 1604.5,507C 1619.84,507.733 1635.18,507.566 1650.5,506.5C 1657.48,507.717 1664.48,508.717 1671.5,509.5C 1690.54,508.048 1709.54,506.215 1728.5,504C 1738.55,503.169 1748.55,503.502 1758.5,505C 1710.28,514.288 1661.62,518.955 1612.5,519C 1604.63,521.301 1596.63,522.967 1588.5,524C 1567.83,526.333 1547.17,528.667 1526.5,531C 1522.36,531.651 1518.86,533.485 1516,536.5C 1514.01,532.243 1512.84,527.743 1512.5,523C 1514.8,516.011 1516.3,508.844 1517,501.5C 1521.75,491.745 1528.92,484.245 1538.5,479C 1554.18,469.825 1570.18,461.158 1586.5,453C 1595.21,448.285 1602.71,442.118 1609,434.5C 1611.2,430.429 1612.54,426.096 1613,421.5C 1617.02,412.313 1623.52,405.647 1632.5,401.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#233a20\",\n    d: \"M 1169.5,402.5 C 1169.03,403.906 1168.03,404.573 1166.5,404.5C 1166.97,403.094 1167.97,402.427 1169.5,402.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271a36\",\n    d: \"M 929.5,403.5 C 930.239,403.369 930.906,403.536 931.5,404C 929,406.5 926.5,409 924,411.5C 923.333,410.833 923.333,410.167 924,409.5C 926.04,407.63 927.873,405.63 929.5,403.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a231b\",\n    d: \"M 1164.5,405.5 C 1164.03,406.906 1163.03,407.573 1161.5,407.5C 1161.97,406.094 1162.97,405.427 1164.5,405.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271a35\",\n    d: \"M 1016.5,406.5 C 1020.47,406.669 1024.47,407.836 1028.5,410C 1031.52,412.541 1033.02,415.707 1033,419.5C 1030.08,411.948 1024.58,407.615 1016.5,406.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#172117\",\n    d: \"M 1161.5,407.5 C 1161.03,408.906 1160.03,409.573 1158.5,409.5C 1158.97,408.094 1159.97,407.427 1161.5,407.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151f14\",\n    d: \"M 1158.5,409.5 C 1158.03,410.906 1157.03,411.573 1155.5,411.5C 1155.97,410.094 1156.97,409.427 1158.5,409.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111110\",\n    d: \"M 208.5,456.5 C 212.362,457.524 215.195,459.857 217,463.5C 225.782,479.939 220.949,488.939 202.5,490.5C 193.649,489.64 184.816,488.64 176,487.5C 170.496,487.601 165.163,488.601 160,490.5C 144.007,487.786 128.007,485.12 112,482.5C 107.493,483.12 102.993,483.787 98.5,484.5C 89.281,480.892 80.281,476.725 71.5,472C 64.2137,470.673 56.8804,469.673 49.5,469C 48.4844,468.481 47.8178,467.647 47.5,466.5C 48.0127,453.064 49.5127,439.731 52,426.5C 55.9038,416.272 63.4038,410.438 74.5,409C 95.58,403.764 116.913,399.931 138.5,397.5C 146.708,399.118 155.041,399.952 163.5,400C 169.187,400.928 173.687,403.761 177,408.5C 181.667,417.167 186.333,425.833 191,434.5C 197.082,441.682 202.916,449.015 208.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 208.5,456.5 C 215.307,463.122 217.807,471.122 216,480.5C 211.796,485.766 206.296,488.099 199.5,487.5C 190.847,486.653 182.18,485.986 173.5,485.5C 168.384,485.394 163.384,486.061 158.5,487.5C 143.169,485.167 127.836,482.833 112.5,480.5C 108.136,480.981 103.802,481.647 99.5,482.5C 90.7166,478.609 82.0499,474.442 73.5,470C 66.2169,468.673 58.8836,467.84 51.5,467.5C 52.0898,455.82 52.9231,444.154 54,432.5C 55.1237,426.085 57.957,420.585 62.5,416C 71.0902,411.803 80.0902,408.803 89.5,407C 105.347,403.519 121.347,401.019 137.5,399.5C 145.713,401.069 154.046,401.903 162.5,402C 169.394,403.226 174.227,407.06 177,413.5C 180.667,420.5 184.333,427.5 188,434.5C 193.1,439.597 197.433,445.264 201,451.5C 203.128,453.808 205.628,455.474 208.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151d15\",\n    d: \"M 1155.5,411.5 C 1153.7,413.9 1151.37,415.567 1148.5,416.5C 1150.3,414.1 1152.63,412.433 1155.5,411.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2d1b\",\n    d: \"M 1148.5,416.5 C 1147.74,418.262 1146.4,419.262 1144.5,419.5C 1145.26,417.738 1146.6,416.738 1148.5,416.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 292.5,435.5 C 293.568,436.434 294.901,436.768 296.5,436.5C 300.824,441.324 305.324,445.991 310,450.5C 309.608,457.401 307.941,464.068 305,470.5C 291.742,467.575 278.575,468.075 265.5,472C 262.421,473.248 259.754,475.081 257.5,477.5C 245.699,470.197 234.032,462.697 222.5,455C 215.181,450.017 209.681,443.517 206,435.5C 205.333,431.5 205.333,427.5 206,423.5C 206.608,421.934 207.442,420.6 208.5,419.5C 208.833,419.5 209.167,419.5 209.5,419.5C 215.516,421.336 221.682,422.336 228,422.5C 238.121,422.042 248.121,420.709 258,418.5C 259.627,418.625 261.127,419.125 262.5,420C 271.018,428.013 281.018,433.18 292.5,435.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1353.5,419.5 C 1362.54,419.335 1371.54,419.835 1380.5,421C 1381.66,426.539 1379.83,431.039 1375,434.5C 1375.01,431.137 1376.17,428.137 1378.5,425.5C 1374.17,423.233 1369.51,422.233 1364.5,422.5C 1361.08,422.482 1357.74,422.982 1354.5,424C 1348.98,426.735 1343.65,429.568 1338.5,432.5C 1338.08,429.675 1339.08,427.509 1341.5,426C 1345.43,423.536 1349.43,421.369 1353.5,419.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20351e\",\n    d: \"M 1144.5,419.5 C 1144.03,420.906 1143.03,421.573 1141.5,421.5C 1141.97,420.094 1142.97,419.427 1144.5,419.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1432.5,416.5 C 1433.61,417.946 1433.78,419.613 1433,421.5C 1430.44,426.723 1427.11,431.39 1423,435.5C 1423.26,429.719 1424.93,424.385 1428,419.5C 1428.67,420.167 1429.33,420.833 1430,421.5C 1430.85,419.807 1431.68,418.14 1432.5,416.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c1e3d\",\n    d: \"M 1010.5,420.5 C 1012.24,422.119 1012.74,424.119 1012,426.5C 1010.87,424.655 1010.37,422.655 1010.5,420.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2c1e\",\n    d: \"M 1141.5,421.5 C 1141.03,422.906 1140.03,423.573 1138.5,423.5C 1138.97,422.094 1139.97,421.427 1141.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1420.5,421.5 C 1421.96,426.221 1421.46,430.887 1419,435.5C 1417.99,436.337 1416.82,436.67 1415.5,436.5C 1415.34,434.801 1415.51,433.134 1416,431.5C 1417.79,428.264 1419.29,424.93 1420.5,421.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1c1c\",\n    d: \"M 292.5,435.5 C 281.018,433.18 271.018,428.013 262.5,420C 261.127,419.125 259.627,418.625 258,418.5C 248.121,420.709 238.121,422.042 228,422.5C 221.682,422.336 215.516,421.336 209.5,419.5C 209.917,418.876 210.584,418.543 211.5,418.5C 227.779,421.284 243.946,420.617 260,416.5C 270.319,424.858 281.152,431.192 292.5,435.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#261a35\",\n    d: \"M 858.5,427.5 C 859.36,424.089 860.526,420.756 862,417.5C 862.123,421.299 860.956,424.633 858.5,427.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a1d3a\",\n    d: \"M 921.5,413.5 C 922.043,413.56 922.376,413.893 922.5,414.5C 921.134,417.692 920.301,421.026 920,424.5C 918.612,425.554 917.112,425.72 915.5,425C 916.416,424.626 917.25,424.126 918,423.5C 919.077,420.101 920.244,416.767 921.5,413.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2b1f\",\n    d: \"M 1138.5,423.5 C 1137.74,425.262 1136.4,426.262 1134.5,426.5C 1135.26,424.738 1136.6,423.738 1138.5,423.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20321e\",\n    d: \"M 1134.5,426.5 C 1134.03,427.906 1133.03,428.573 1131.5,428.5C 1131.97,427.094 1132.97,426.427 1134.5,426.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b281a\",\n    d: \"M 1131.5,428.5 C 1131.03,429.906 1130.03,430.573 1128.5,430.5C 1128.97,429.094 1129.97,428.427 1131.5,428.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#302143\",\n    d: \"M 858.5,427.5 C 858.519,430.659 857.352,433.326 855,435.5C 855.329,432.505 856.496,429.838 858.5,427.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151d14\",\n    d: \"M 1128.5,430.5 C 1128.03,431.906 1127.03,432.573 1125.5,432.5C 1125.97,431.094 1126.97,430.427 1128.5,430.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d1e3e\",\n    d: \"M 1020.5,433.5 C 1020.9,432.475 1021.56,432.308 1022.5,433C 1026.01,436.884 1026.34,441.051 1023.5,445.5C 1023.45,442.335 1023.28,439.002 1023,435.5C 1022.29,434.619 1021.46,433.953 1020.5,433.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1290.5,435.5 C 1292.86,435.337 1295.19,435.503 1297.5,436C 1306.01,439.726 1314.68,443.059 1323.5,446C 1328.43,447.266 1333.43,448.099 1338.5,448.5C 1364.27,442.438 1390.27,441.271 1416.5,445C 1420.92,447.088 1424.42,450.255 1427,454.5C 1430.92,460.666 1433.42,467.333 1434.5,474.5C 1427.24,476.105 1419.91,476.605 1412.5,476C 1411.34,473.184 1410.17,470.35 1409,467.5C 1408.5,470.146 1408.34,472.813 1408.5,475.5C 1407.17,475.5 1405.83,475.5 1404.5,475.5C 1404.92,471.297 1404.42,467.297 1403,463.5C 1401.53,468.063 1400.69,472.73 1400.5,477.5C 1399.5,477.5 1398.5,477.5 1397.5,477.5C 1397.14,474.375 1396.3,471.375 1395,468.5C 1394.5,470.81 1394.34,473.143 1394.5,475.5C 1393.5,475.5 1392.5,475.5 1391.5,475.5C 1391.8,477.604 1391.47,479.604 1390.5,481.5C 1384.25,484.432 1378.25,487.766 1372.5,491.5C 1372.17,491.167 1371.83,490.833 1371.5,490.5C 1373.21,488.76 1374.04,486.76 1374,484.5C 1368.98,490.02 1364.15,495.686 1359.5,501.5C 1354.41,502.488 1349.41,501.988 1344.5,500C 1332.17,495.667 1319.83,491.333 1307.5,487C 1295.72,485.204 1284.05,482.87 1272.5,480C 1269.1,478.68 1267.77,476.18 1268.5,472.5C 1270.5,456.811 1277.83,444.478 1290.5,435.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1564.5,436.5 C 1565.95,437.134 1566.61,438.301 1566.5,440C 1565.51,446.306 1563.34,452.139 1560,457.5C 1555.29,462.097 1553.96,461.43 1556,455.5C 1559.39,449.381 1562.23,443.048 1564.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#261a34\",\n    d: \"M 803.5,447.5 C 803.841,444.484 805.007,441.818 807,439.5C 806.671,442.495 805.504,445.162 803.5,447.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1564.5,424.5 C 1567.85,424.335 1571.18,424.502 1574.5,425C 1555.62,430.406 1537.29,437.406 1519.5,446C 1509.95,448.253 1500.28,448.92 1490.5,448C 1488.62,447.784 1486.95,447.117 1485.5,446C 1497.01,447.322 1508.35,446.322 1519.5,443C 1534.82,437.333 1549.82,431.166 1564.5,424.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#37264b\",\n    d: \"M 915.5,444.5 C 916.525,444.897 916.692,445.563 916,446.5C 914.887,448.329 913.387,449.163 911.5,449C 913.041,447.629 914.375,446.129 915.5,444.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1552.5,446.5 C 1553.79,455.312 1550.45,462.646 1542.5,468.5C 1541.42,467.635 1541.25,466.635 1542,465.5C 1545,458.818 1548.5,452.484 1552.5,446.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20162b\",\n    d: \"M 830.5,450.5 C 821.318,450.827 812.318,450.493 803.5,449.5C 806.833,449.5 810.167,449.5 813.5,449.5C 813.435,446.529 814.269,443.862 816,441.5C 815.641,444.112 815.141,446.779 814.5,449.5C 817.833,449.5 821.167,449.5 824.5,449.5C 823.603,444.563 825.103,440.563 829,437.5C 828.602,439.631 827.602,441.631 826,443.5C 825.505,445.473 825.338,447.473 825.5,449.5C 827.415,449.216 829.081,449.549 830.5,450.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1168.5,449.5 C 1182.02,449.265 1195.36,450.765 1208.5,454C 1222.06,458.075 1235.72,461.741 1249.5,465C 1239.33,471.584 1229,477.918 1218.5,484C 1216.43,483.773 1214.43,483.939 1212.5,484.5C 1211.45,483.617 1210.29,482.95 1209,482.5C 1206.39,485.293 1204.73,488.626 1204,492.5C 1203.15,487.575 1201.48,482.909 1199,478.5C 1199.57,484.423 1199.57,490.423 1199,496.5C 1198.39,499.548 1196.89,502.048 1194.5,504C 1173.44,506.007 1152.44,508.674 1131.5,512C 1117.19,513.213 1102.85,514.046 1088.5,514.5C 1083,514.645 1077.66,514.145 1072.5,513C 1087.07,501.436 1100.74,488.769 1113.5,475C 1122.38,468.059 1132.04,462.392 1142.5,458C 1151.37,455.43 1160.04,452.597 1168.5,449.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1534.5,446.5 C 1535.5,446.414 1536.33,446.748 1537,447.5C 1537.31,449.557 1537.31,451.557 1537,453.5C 1538.33,451.5 1539.67,449.5 1541,447.5C 1541.65,446.304 1542.15,446.304 1542.5,447.5C 1540.05,454.063 1537.89,460.73 1536,467.5C 1534.99,468.337 1533.82,468.67 1532.5,468.5C 1532.58,465.748 1532.74,463.082 1533,460.5C 1530.95,463.423 1528.79,466.257 1526.5,469C 1525.55,469.483 1524.55,469.649 1523.5,469.5C 1526.38,461.418 1530.04,453.751 1534.5,446.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62bf57\",\n    d: \"M 789.5,452.5 C 833.113,450.735 875.78,456.235 917.5,469C 907.722,468.452 898.388,470.119 889.5,474C 886.911,477.598 886.911,481.264 889.5,485C 904.958,487.39 920.291,486.724 935.5,483C 940.368,480.523 940.701,477.523 936.5,474C 941.84,473.814 947.174,474.148 952.5,475C 949.363,475.601 946.363,476.601 943.5,478C 941.041,481.75 938.708,485.583 936.5,489.5C 935.333,489.833 934.167,490.167 933,490.5C 905.146,487.886 877.313,488.219 849.5,491.5C 830.773,489.882 812.106,487.715 793.5,485C 778.188,483.626 762.854,483.292 747.5,484C 731.263,491.301 714.43,496.801 697,500.5C 694.575,501.916 692.409,503.75 690.5,506C 686.29,507.02 682.623,506.02 679.5,503C 674.017,498.094 668.351,493.428 662.5,489C 654.992,486.123 647.326,485.79 639.5,488C 627.936,489.902 617.602,494.402 608.5,501.5C 606.914,503.173 606.247,505.173 606.5,507.5C 583.148,505.604 559.815,503.438 536.5,501C 510.938,494.611 485.605,487.611 460.5,480C 471.838,477.333 483.172,474.666 494.5,472C 495.851,468.805 498.185,466.972 501.5,466.5C 501.261,468.467 501.594,470.301 502.5,472C 509.701,472.27 516.368,474.27 522.5,478C 537.425,478.731 552.091,481.065 566.5,485C 571.167,485.667 575.833,485.667 580.5,485C 582.116,484.385 583.449,483.385 584.5,482C 589.198,481.649 593.864,481.149 598.5,480.5C 598.739,478.533 598.406,476.699 597.5,475C 619.435,476.924 641.435,478.424 663.5,479.5C 683.599,479.605 703.266,476.772 722.5,471C 744.215,462.031 766.548,455.865 789.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1028.5,451.5 C 1035.91,452.852 1043.24,454.519 1050.5,456.5C 1053.18,457.355 1055.84,458.522 1058.5,460C 1060.65,462.075 1060.98,464.408 1059.5,467C 1049.32,471.002 1038.82,473.836 1028,475.5C 1018.88,473.952 1009.71,472.786 1000.5,472C 999.325,469.162 999.491,466.329 1001,463.5C 1007.15,453.047 1016.32,449.047 1028.5,451.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8b8b8b\",\n    d: \"M 518.5,452.5 C 519.5,452.5 520.5,452.5 521.5,452.5C 523.148,453.927 525.148,454.76 527.5,455C 543.927,454.689 559.593,458.023 574.5,465C 581.83,467.994 588.497,471.994 594.5,477C 591.077,478.904 587.41,479.737 583.5,479.5C 583.216,476.148 582.05,473.148 580,470.5C 579.873,472.634 580.039,474.801 580.5,477C 580.561,479.261 579.894,481.261 578.5,483C 573.328,484.193 568.662,483.36 564.5,480.5C 567.683,476.26 570.183,476.593 572,481.5C 572.923,480.241 573.757,478.908 574.5,477.5C 575.333,478.5 576.167,479.5 577,480.5C 577.667,477.833 577.667,475.167 577,472.5C 576.586,472.043 576.086,471.709 575.5,471.5C 574.308,473.683 572.475,475.016 570,475.5C 564.769,472.801 559.602,469.968 554.5,467C 541.087,464.309 527.753,461.643 514.5,459C 519.877,462.043 523.377,466.543 525,472.5C 525.179,469.447 525.679,466.447 526.5,463.5C 529.523,467.226 531.19,471.559 531.5,476.5C 529.143,476.663 526.81,476.497 524.5,476C 517.993,472.942 511.326,470.275 504.5,468C 506.931,460.739 511.598,455.572 518.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1525.5,449.5 C 1526.21,457.738 1522.88,464.071 1515.5,468.5C 1514.39,467.277 1514.22,465.944 1515,464.5C 1518.51,459.471 1522.01,454.471 1525.5,449.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1402.5,454.5 C 1404.6,454.201 1406.6,454.534 1408.5,455.5C 1406.57,457.804 1404.24,459.638 1401.5,461C 1395.93,463.285 1390.26,465.285 1384.5,467C 1381.62,467.874 1378.95,467.54 1376.5,466C 1385.28,462.248 1393.94,458.415 1402.5,454.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1187.5,464.5 C 1189.2,464.34 1190.87,464.506 1192.5,465C 1184.41,470.877 1175.41,474.877 1165.5,477C 1158.2,478.861 1150.87,480.195 1143.5,481C 1146.22,479.092 1149.22,477.759 1152.5,477C 1160.86,475.127 1169.2,473.127 1177.5,471C 1181.07,469.058 1184.4,466.892 1187.5,464.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 532.5,464.5 C 534.017,464.511 535.184,465.177 536,466.5C 537.55,474.435 538.716,474.435 539.5,466.5C 545.506,467.835 551.506,469.168 557.5,470.5C 557.616,473.86 557.949,477.193 558.5,480.5C 550.706,478.077 542.706,476.744 534.5,476.5C 533.514,472.557 532.848,468.557 532.5,464.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 1342.5,468.5 C 1342.74,467.903 1343.24,467.57 1344,467.5C 1351.66,468.962 1359.16,470.796 1366.5,473C 1357.9,474.346 1349.9,472.846 1342.5,468.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151514\",\n    d: \"M 208.5,419.5 C 207.442,420.6 206.608,421.934 206,423.5C 205.333,427.5 205.333,431.5 206,435.5C 209.681,443.517 215.181,450.017 222.5,455C 234.032,462.697 245.699,470.197 257.5,477.5C 259.754,475.081 262.421,473.248 265.5,472C 278.575,468.075 291.742,467.575 305,470.5C 307.941,464.068 309.608,457.401 310,450.5C 305.324,445.991 300.824,441.324 296.5,436.5C 297.251,435.427 298.251,435.26 299.5,436C 303.333,441.167 307.833,445.667 313,449.5C 313.667,452.5 313.667,455.5 313,458.5C 311.673,462.809 310.506,467.142 309.5,471.5C 300.466,470.999 291.466,470.332 282.5,469.5C 276.963,471.424 271.296,472.924 265.5,474C 263.208,475.29 261.208,476.957 259.5,479C 258.5,479.667 257.5,479.667 256.5,479C 246.337,472.084 236.003,465.417 225.5,459C 216.62,453.121 209.454,445.621 204,436.5C 201.265,429.458 202.265,423.125 207,417.5C 208.03,417.836 208.53,418.503 208.5,419.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 254.5,454.5 C 258.185,457.869 260.185,461.869 260.5,466.5C 256.413,463.59 254.413,459.59 254.5,454.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 247.5,451.5 C 248.496,451.414 249.329,451.748 250,452.5C 252.897,457.191 254.564,462.191 255,467.5C 253.287,466.122 251.953,464.455 251,462.5C 250.781,463.938 250.281,465.271 249.5,466.5C 247.002,462.506 245.836,458.172 246,453.5C 246.333,453.833 246.667,454.167 247,454.5C 247.483,453.552 247.649,452.552 247.5,451.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 237.5,450.5 C 241.313,454.792 243.48,459.792 244,465.5C 239.646,461.458 237.48,456.458 237.5,450.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 246.5,445.5 C 246.56,444.957 246.893,444.624 247.5,444.5C 257.363,450.398 268.029,452.898 279.5,452C 274.282,453.563 268.949,453.896 263.5,453C 257.572,451.035 251.906,448.535 246.5,445.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 230.5,444.5 C 232.962,448.69 234.962,453.19 236.5,458C 236.167,458.5 235.833,459 235.5,459.5C 231.656,455.303 229.99,450.303 230.5,444.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 225.5,436.5 C 232.365,436.289 238.698,438.456 244.5,443C 238.223,440.962 231.889,438.796 225.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a8a8a\",\n    d: \"M 899.5,471.5 C 910.968,471.455 922.301,472.622 933.5,475C 937.738,477.844 937.404,479.844 932.5,481C 919.309,483.441 905.976,484.107 892.5,483C 891.612,477.356 893.945,473.523 899.5,471.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 319.5,480.5 C 320.209,481.404 321.209,481.737 322.5,481.5C 326.514,481.334 330.514,481.501 334.5,482C 338.22,483.86 341.886,485.693 345.5,487.5C 345.611,488.117 345.944,488.617 346.5,489C 343.058,490.184 339.725,491.35 336.5,492.5C 327.865,493.743 319.531,495.743 311.5,498.5C 311.167,498.5 310.833,498.5 310.5,498.5C 305.88,498.74 301.547,499.74 297.5,501.5C 296.022,501.762 294.689,501.429 293.5,500.5C 292.655,498.238 291.322,497.571 289.5,498.5C 290.04,499.748 290.707,500.915 291.5,502C 290.5,502.667 289.5,502.667 288.5,502C 283.014,494.529 282.014,494.695 285.5,502.5C 285.167,502.833 284.833,503.167 284.5,503.5C 282.183,501.684 280.016,499.684 278,497.5C 277.571,499.669 278.071,501.669 279.5,503.5C 279.167,503.833 278.833,504.167 278.5,504.5C 275.948,500.708 274.615,501.375 274.5,506.5C 272.5,506.833 270.5,507.167 268.5,507.5C 267.455,500.016 266.455,492.516 265.5,485C 265.544,483.236 265.878,481.569 266.5,480C 274.961,477.312 283.627,475.812 292.5,475.5C 301.704,476.125 310.704,477.792 319.5,480.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 973.5,475.5 C 982.791,474.132 988.791,477.799 991.5,486.5C 982.522,488.597 973.522,490.764 964.5,493C 956.143,494.375 948.143,493.375 940.5,490C 940.043,489.586 939.709,489.086 939.5,488.5C 942.785,487.676 946.118,487.176 949.5,487C 947.759,485.38 945.925,483.88 944,482.5C 943.383,481.551 943.549,480.718 944.5,480C 952.5,479.667 960.5,479.333 968.5,479C 970.233,477.811 971.9,476.644 973.5,475.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1451.5,475.5 C 1471.72,475.055 1491.39,478.055 1510.5,484.5C 1511.36,498.281 1509.2,511.615 1504,524.5C 1500.21,527.914 1495.71,529.747 1490.5,530C 1480.5,530.333 1470.5,530.667 1460.5,531C 1458.58,531.808 1456.58,532.308 1454.5,532.5C 1448.48,531.441 1442.48,530.274 1436.5,529C 1439.19,526.347 1440.03,523.18 1439,519.5C 1433.06,517.922 1432.23,519.256 1436.5,523.5C 1435.69,525.071 1435.36,526.738 1435.5,528.5C 1430.82,528.334 1426.15,528.501 1421.5,529C 1414.84,531.666 1408.5,534.832 1402.5,538.5C 1391.84,536.964 1381.17,535.464 1370.5,534C 1368.12,525.376 1367.96,516.543 1370,507.5C 1371.92,501.57 1375.42,496.737 1380.5,493C 1387.8,488.265 1395.63,484.765 1404,482.5C 1409.15,483.471 1414.31,483.637 1419.5,483C 1430.44,481.096 1441.11,478.596 1451.5,475.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#727272\",\n    d: \"M 564.5,480.5 C 560.139,479.228 559.805,477.895 563.5,476.5C 563.433,477.959 563.766,479.292 564.5,480.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 914.5,475.5 C 917.898,475.18 921.232,475.513 924.5,476.5C 916.337,479.205 908.004,479.872 899.5,478.5C 904.534,477.085 909.534,476.085 914.5,475.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1241.5,477.5 C 1263.28,482.744 1285.28,487.244 1307.5,491C 1319.49,495.327 1331.49,499.66 1343.5,504C 1348.2,504.671 1352.87,505.504 1357.5,506.5C 1360.12,513.967 1361.29,521.634 1361,529.5C 1336.53,529.045 1312.03,529.545 1287.5,531C 1280.08,530.652 1272.74,529.652 1265.5,528C 1252.9,524.349 1240.23,521.016 1227.5,518C 1220.86,517.048 1214.2,516.548 1207.5,516.5C 1213.18,498.488 1224.52,485.488 1241.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191a19\",\n    d: \"M 319.5,480.5 C 310.704,477.792 301.704,476.125 292.5,475.5C 283.627,475.812 274.961,477.312 266.5,480C 265.878,481.569 265.544,483.236 265.5,485C 266.455,492.516 267.455,500.016 268.5,507.5C 270.5,507.167 272.5,506.833 274.5,506.5C 274.833,506.5 275.167,506.5 275.5,506.5C 273.162,508.04 270.495,508.706 267.5,508.5C 264.57,498.782 263.57,488.949 264.5,479C 273.536,475.771 282.87,473.938 292.5,473.5C 302.326,474.873 311.993,477.039 321.5,480C 320.906,480.464 320.239,480.631 319.5,480.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1f\",\n    d: \"M 345.5,487.5 C 341.886,485.693 338.22,483.86 334.5,482C 330.514,481.501 326.514,481.334 322.5,481.5C 325.695,480.764 329.029,480.097 332.5,479.5C 337.4,481.44 341.733,484.107 345.5,487.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1182.5,477.5 C 1183.97,478.347 1184.8,479.68 1185,481.5C 1186.59,480.273 1187.92,480.606 1189,482.5C 1190.56,484.957 1191.56,487.624 1192,490.5C 1192.33,486.5 1192.67,482.5 1193,478.5C 1197.34,484.604 1198.51,491.271 1196.5,498.5C 1194.3,496.747 1193.13,494.414 1193,491.5C 1192.5,493.81 1192.34,496.143 1192.5,498.5C 1189.65,498.191 1188.15,496.525 1188,493.5C 1187.51,494.793 1187.34,496.127 1187.5,497.5C 1186.17,497.5 1184.83,497.5 1183.5,497.5C 1183.55,490.809 1183.21,484.143 1182.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1359.5,477.5 C 1360.38,477.369 1361.04,477.702 1361.5,478.5C 1360.5,479.833 1359.5,481.167 1358.5,482.5C 1358.83,482.833 1359.17,483.167 1359.5,483.5C 1361.95,481.607 1364.62,480.274 1367.5,479.5C 1367.35,480.552 1367.52,481.552 1368,482.5C 1369.39,480.699 1370.89,480.032 1372.5,480.5C 1368.52,486.313 1363.69,491.313 1358,495.5C 1357.83,495 1357.67,494.5 1357.5,494C 1358.93,492.3 1359.76,490.467 1360,488.5C 1356.33,491.5 1352.67,494.5 1349,497.5C 1348.67,496.167 1348.33,494.833 1348,493.5C 1342.4,497.616 1341.4,496.616 1345,490.5C 1349.43,485.56 1354.27,481.227 1359.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 983.5,481.5 C 985.288,481.215 986.955,481.548 988.5,482.5C 981.842,485.393 974.842,487.226 967.5,488C 964.5,488.667 961.5,488.667 958.5,488C 966.993,485.961 975.326,483.795 983.5,481.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1d22\",\n    d: \"M 373.5,483.5 C 371.162,485.04 368.495,485.706 365.5,485.5C 367.905,484.232 370.572,483.565 373.5,483.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1177.5,483.5 C 1179.69,484.823 1181.19,486.823 1182,489.5C 1182.82,492.882 1182.66,496.216 1181.5,499.5C 1179.73,498.73 1178.73,497.397 1178.5,495.5C 1177.64,491.547 1177.3,487.547 1177.5,483.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b7871\",\n    d: \"M 1810.5,486.5 C 1820.08,486.182 1829.58,486.515 1839,487.5C 1841.93,503.048 1843.27,518.714 1843,534.5C 1838.11,523.941 1830.27,516.441 1819.5,512C 1803.67,506.452 1787.34,503.786 1770.5,504C 1783.58,497.285 1796.92,491.452 1810.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f281e\",\n    d: \"M 357.5,486.5 C 358.833,486.5 360.167,486.5 361.5,486.5C 359.22,488.223 356.553,488.889 353.5,488.5C 354.833,487.833 356.167,487.167 357.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 926.5,499.5 C 918.16,499.334 909.827,499.5 901.5,500C 902.244,501.039 903.244,501.539 904.5,501.5C 919.194,502.888 933.86,502.388 948.5,500C 961.496,498.448 974.163,499.781 986.5,504C 987.91,504.368 988.91,505.201 989.5,506.5C 985.221,512.282 980.388,517.615 975,522.5C 974.333,521.167 974.333,519.833 975,518.5C 977.034,515.294 978.867,511.96 980.5,508.5C 979.998,507.479 979.332,507.312 978.5,508C 975.592,513.563 972.592,519.063 969.5,524.5C 968.054,523.829 967.388,522.662 967.5,521C 968.159,518.538 968.493,516.038 968.5,513.5C 967.022,513.238 965.689,513.571 964.5,514.5C 962.259,525.591 955.593,530.758 944.5,530C 944,529.5 943.5,529 943,528.5C 942.718,524.998 942.551,521.665 942.5,518.5C 941.117,523.039 939.284,527.372 937,531.5C 936.693,523.7 937.359,516.033 939,508.5C 938.085,509.328 937.419,510.328 937,511.5C 935.501,517.73 934.001,523.897 932.5,530C 924.434,529.937 916.434,529.104 908.5,527.5C 908.167,527.167 907.833,526.833 907.5,526.5C 909.569,521.609 912.236,517.109 915.5,513C 909.971,516.294 906.304,521.294 904.5,528C 892.324,531.362 879.991,533.862 867.5,535.5C 812.46,530.659 758.794,519.493 706.5,502C 720.374,496.931 734.374,492.264 748.5,488C 762.833,487.333 777.167,487.333 791.5,488C 807.02,490.986 822.686,492.986 838.5,494C 874.533,493.973 910.533,494.973 946.5,497C 939.946,498.461 933.28,499.294 926.5,499.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 640.5,489.5 C 657.146,488.822 670.479,495.156 680.5,508.5C 675.929,511.3 670.929,512.8 665.5,513C 648.142,513.194 630.809,513.694 613.5,514.5C 608.297,510.554 608.297,506.387 613.5,502C 621.82,496.17 630.82,492.004 640.5,489.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919190\",\n    d: \"M 222.5,517.5 C 165.834,517.107 109.167,516.773 52.5,516.5C 52.2827,502.871 58.9494,494.704 72.5,492C 83.4558,490.483 94.4558,490.15 105.5,491C 135.356,498.254 165.689,502.254 196.5,503C 200.392,504.64 204.392,505.973 208.5,507C 219.516,508.168 230.516,509.502 241.5,511C 244.028,511.998 244.028,512.831 241.5,513.5C 235.317,515.586 228.983,516.919 222.5,517.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f231e\",\n    d: \"M 345.5,487.5 C 348.096,488.265 350.763,488.599 353.5,488.5C 348.122,490.593 342.455,491.927 336.5,492.5C 339.725,491.35 343.058,490.184 346.5,489C 345.944,488.617 345.611,488.117 345.5,487.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222d20\",\n    d: \"M 336.5,492.5 C 328.536,495.573 320.203,497.573 311.5,498.5C 319.531,495.743 327.865,493.743 336.5,492.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 1477.5,495.5 C 1479.2,495.34 1480.87,495.506 1482.5,496C 1482.17,496.333 1481.83,496.667 1481.5,497C 1465.92,499.352 1450.26,500.018 1434.5,499C 1447.07,497.705 1459.74,497.038 1472.5,497C 1474.38,496.802 1476.05,496.302 1477.5,495.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141513\",\n    d: \"M 266.5,508.5 C 251.052,512.61 235.385,516.277 219.5,519.5C 220.5,518.833 221.5,518.167 222.5,517.5C 228.983,516.919 235.317,515.586 241.5,513.5C 244.028,512.831 244.028,511.998 241.5,511C 230.516,509.502 219.516,508.168 208.5,507C 204.392,505.973 200.392,504.64 196.5,503C 165.689,502.254 135.356,498.254 105.5,491C 94.4558,490.15 83.4558,490.483 72.5,492C 58.9494,494.704 52.2827,502.871 52.5,516.5C 51.5,516.5 50.5,516.5 49.5,516.5C 49.3354,513.482 49.502,510.482 50,507.5C 55.1161,496.829 63.6161,490.329 75.5,488C 84.8333,487.333 94.1667,487.333 103.5,488C 134.391,495.593 165.725,499.927 197.5,501C 212.56,505.288 227.894,508.288 243.5,510C 251.244,510.648 258.91,510.148 266.5,508.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f261e\",\n    d: \"M 310.5,498.5 C 306.503,500.489 302.17,501.489 297.5,501.5C 301.547,499.74 305.88,498.74 310.5,498.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b4b4b\",\n    d: \"M 926.5,499.5 C 919.167,500.167 911.833,500.833 904.5,501.5C 903.244,501.539 902.244,501.039 901.5,500C 909.827,499.5 918.16,499.334 926.5,499.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060606\",\n    d: \"M 658.5,500.5 C 660.722,500.178 662.556,500.845 664,502.5C 664.497,504.81 664.663,507.143 664.5,509.5C 662.362,509.297 660.695,508.297 659.5,506.5C 657.721,509.276 656.721,508.943 656.5,505.5C 656.437,503.486 657.103,501.819 658.5,500.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e6f6e\",\n    d: \"M 297.5,501.5 C 290.42,503.768 283.086,505.434 275.5,506.5C 275.167,506.5 274.833,506.5 274.5,506.5C 274.615,501.375 275.948,500.708 278.5,504.5C 278.833,504.167 279.167,503.833 279.5,503.5C 278.071,501.669 277.571,499.669 278,497.5C 280.016,499.684 282.183,501.684 284.5,503.5C 284.833,503.167 285.167,502.833 285.5,502.5C 282.014,494.695 283.014,494.529 288.5,502C 289.5,502.667 290.5,502.667 291.5,502C 290.707,500.915 290.04,499.748 289.5,498.5C 291.322,497.571 292.655,498.238 293.5,500.5C 294.689,501.429 296.022,501.762 297.5,501.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 767.5,493.5 C 768.09,495.99 768.257,498.657 768,501.5C 771.097,498.318 772.763,498.985 773,503.5C 773.561,504.022 774.228,504.355 775,504.5C 777.296,503.372 779.129,501.705 780.5,499.5C 780.985,501.777 780.319,503.944 778.5,506C 781.351,505.828 783.851,504.661 786,502.5C 785.667,504.167 785.333,505.833 785,507.5C 790.038,501.564 791.538,502.231 789.5,509.5C 793.485,509.371 794.818,507.537 793.5,504C 795.319,503.217 796.652,503.717 797.5,505.5C 796.833,506.833 796.167,508.167 795.5,509.5C 800.833,510.833 806.167,512.167 811.5,513.5C 805.283,514.596 799.117,514.263 793,512.5C 791.374,513.289 789.874,514.289 788.5,515.5C 787.41,514.609 787.41,513.609 788.5,512.5C 787.833,512.167 787.167,511.833 786.5,511.5C 784.865,512.046 783.199,512.38 781.5,512.5C 781.719,511.325 781.386,510.325 780.5,509.5C 778.851,510.648 777.351,511.981 776,513.5C 775.805,511.793 775.805,510.126 776,508.5C 770.46,512.826 769.627,512.326 773.5,507C 772.667,506.833 771.833,506.667 771,506.5C 767.652,507.609 764.485,508.776 761.5,510C 763.351,508.316 765.018,506.483 766.5,504.5C 766,503.119 765,502.453 763.5,502.5C 759.447,504.379 755.78,506.879 752.5,510C 751.668,510.688 751.002,510.521 750.5,509.5C 753.759,506.952 756.926,504.286 760,501.5C 760.684,500.216 760.517,499.049 759.5,498C 763.45,498.443 766.117,496.943 767.5,493.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f1f1f\",\n    d: \"M 1379.5,503.5 C 1390.83,504.798 1401.83,507.298 1412.5,511C 1401.75,510.208 1391.08,508.542 1380.5,506C 1379.75,505.329 1379.41,504.496 1379.5,503.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 392.5,479.5 C 397.298,480.964 402.298,482.131 407.5,483C 423.846,483.45 440.179,483.45 456.5,483C 479.632,488.116 502.299,494.783 524.5,503C 551.806,505.95 579.139,508.617 606.5,511C 557.85,514.999 509.183,518.999 460.5,523C 444.839,523.753 429.173,524.253 413.5,524.5C 395.695,522.619 377.695,522.119 359.5,523C 376.868,523.286 394.201,524.119 411.5,525.5C 428.824,526.466 446.157,526.633 463.5,526C 498.173,523.416 532.84,520.75 567.5,518C 594.833,517.667 622.167,517.333 649.5,517C 668.651,516.237 687.151,512.403 705,505.5C 755.411,521.644 806.911,532.811 859.5,539C 836.856,546.656 813.523,550.823 789.5,551.5C 779.628,550.659 769.628,549.659 759.5,548.5C 724.166,541.062 688.499,538.896 652.5,542C 608.551,546.874 564.551,551.207 520.5,555C 494.835,555.5 469.169,555.667 443.5,555.5C 444.29,554.206 445.29,553.039 446.5,552C 438.654,548.151 431.321,548.985 424.5,554.5C 422.919,551.875 420.585,550.542 417.5,550.5C 414.404,548.843 412.737,546.176 412.5,542.5C 410.007,544.83 408.007,547.497 406.5,550.5C 404.926,551.984 403.593,553.651 402.5,555.5C 344.48,557.301 286.48,559.634 228.5,562.5C 223.305,562.179 218.305,562.513 213.5,563.5C 208.833,563.5 204.167,563.5 199.5,563.5C 196.287,563.19 193.287,563.523 190.5,564.5C 186.154,564.666 181.821,564.499 177.5,564C 176.069,559.874 174.736,555.707 173.5,551.5C 214.861,544.377 256.361,538.043 298,532.5C 299.07,532.528 299.903,532.861 300.5,533.5C 296.879,537.318 292.546,540.151 287.5,542C 296.316,541.986 304.983,541.486 313.5,540.5C 313.833,540.5 314.167,540.5 314.5,540.5C 315.043,540.56 315.376,540.893 315.5,541.5C 312.917,543.911 312.25,546.578 313.5,549.5C 314.5,550.833 315.5,550.833 316.5,549.5C 322.404,549.31 328.071,548.144 333.5,546C 334.252,545.329 334.586,544.496 334.5,543.5C 335.167,543.5 335.833,543.5 336.5,543.5C 339.597,544.788 342.597,544.288 345.5,542C 362.487,543.327 363.487,540.827 348.5,534.5C 346.304,533.188 343.97,532.021 341.5,531C 343.058,530.79 344.391,530.29 345.5,529.5C 347.682,528.7 349.349,527.2 350.5,525C 358.834,524.479 359.167,523.813 351.5,523C 353.394,521.899 354.061,520.566 353.5,519C 345.193,516.229 337.526,517.395 330.5,522.5C 328.358,520.095 325.691,518.762 322.5,518.5C 319.404,516.843 317.737,514.176 317.5,510.5C 315.062,511.931 313.396,513.931 312.5,516.5C 307.702,519.687 306.369,524.021 308.5,529.5C 306.955,530.452 305.288,530.785 303.5,530.5C 265.334,535.047 227.334,540.714 189.5,547.5C 188.148,546.476 186.815,545.476 185.5,544.5C 183.363,541.027 180.363,538.694 176.5,537.5C 174.572,535.526 172.239,534.026 169.5,533C 170.416,532.722 171.082,532.222 171.5,531.5C 176.438,530.769 181.105,529.435 185.5,527.5C 190.893,526.818 196.227,525.818 201.5,524.5C 202.167,524.5 202.5,524.167 202.5,523.5C 207.833,522.5 213.167,521.5 218.5,520.5C 219.167,520.5 219.5,520.167 219.5,519.5C 235.385,516.277 251.052,512.61 266.5,508.5C 266.833,508.5 267.167,508.5 267.5,508.5C 270.495,508.706 273.162,508.04 275.5,506.5C 283.086,505.434 290.42,503.768 297.5,501.5C 302.17,501.489 306.503,500.489 310.5,498.5C 310.833,498.5 311.167,498.5 311.5,498.5C 320.203,497.573 328.536,495.573 336.5,492.5C 342.455,491.927 348.122,490.593 353.5,488.5C 356.553,488.889 359.22,488.223 361.5,486.5C 363.099,486.768 364.432,486.434 365.5,485.5C 368.495,485.706 371.162,485.04 373.5,483.5C 379.842,482.163 386.175,480.829 392.5,479.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 1252.5,498.5 C 1252.92,497.876 1253.58,497.543 1254.5,497.5C 1267.27,500.691 1279.93,504.191 1292.5,508C 1287.54,509.822 1282.54,511.155 1277.5,512C 1279.02,510.649 1280.35,509.149 1281.5,507.5C 1272.01,503.891 1262.34,500.891 1252.5,498.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#858585\",\n    d: \"M 991.5,507.5 C 996.813,509.312 998.98,512.979 998,518.5C 996.172,520.081 994.172,521.415 992,522.5C 991.84,519.102 993.007,516.102 995.5,513.5C 995,513.167 994.5,512.833 994,512.5C 990.733,515.767 987.4,519.1 984,522.5C 984.874,516.753 987.374,511.753 991.5,507.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1759.5,508.5 C 1776.36,507.885 1793.03,509.385 1809.5,513C 1818.42,515.208 1826.25,519.375 1833,525.5C 1837.29,530.914 1839.46,537.081 1839.5,544C 1837.95,552.982 1835.78,561.815 1833,570.5C 1832.5,574.486 1832.33,578.486 1832.5,582.5C 1727.48,579.619 1622.48,576.785 1517.5,574C 1516.38,575.074 1515.38,576.24 1514.5,577.5C 1511.86,574.707 1511.03,571.374 1512,567.5C 1516.51,561.486 1519.67,554.819 1521.5,547.5C 1520.1,545.192 1519.1,542.692 1518.5,540C 1518.7,537.463 1520.03,535.796 1522.5,535C 1531.65,532.355 1540.99,530.689 1550.5,530C 1564.56,529.78 1578.56,528.78 1592.5,527C 1600.38,526.298 1608.05,524.631 1615.5,522C 1645.83,520.704 1676.17,519.37 1706.5,518C 1724.34,515.028 1742.01,511.862 1759.5,508.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1469.5,508.5 C 1470.38,508.369 1471.04,508.702 1471.5,509.5C 1468.95,515.945 1464.95,521.279 1459.5,525.5C 1458.43,523.813 1458.6,522.146 1460,520.5C 1463.38,516.625 1466.55,512.625 1469.5,508.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a982\",\n    d: \"M 322.5,518.5 C 324.355,519.69 326.188,521.023 328,522.5C 328.483,523.448 328.649,524.448 328.5,525.5C 324.073,524.875 321.073,526.541 319.5,530.5C 318.206,532.68 318.539,534.68 320.5,536.5C 318.918,538.374 316.918,539.707 314.5,540.5C 314.167,540.5 313.833,540.5 313.5,540.5C 307.491,540.666 301.491,540.499 295.5,540C 298.5,537.667 301.5,535.333 304.5,533C 307.553,532.821 310.553,532.321 313.5,531.5C 311.279,529.627 309.946,527.293 309.5,524.5C 309.964,521.583 310.964,518.916 312.5,516.5C 313.396,513.931 315.062,511.931 317.5,510.5C 317.737,514.176 319.404,516.843 322.5,518.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 886.5,510.5 C 889.716,510.872 890.216,512.206 888,514.5C 884.5,518.667 881,522.833 877.5,527C 876.833,527.667 876.167,527.667 875.5,527C 878.996,521.346 882.663,515.846 886.5,510.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1498.5,509.5 C 1498.25,515.497 1495.58,520.663 1490.5,525C 1489.55,525.483 1488.55,525.649 1487.5,525.5C 1487.35,524.448 1487.52,523.448 1488,522.5C 1491.71,518.292 1495.21,513.959 1498.5,509.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 892.5,512.5 C 893.376,512.369 894.043,512.702 894.5,513.5C 891.59,519.239 888.09,524.572 884,529.5C 883.333,528.5 883.333,527.5 884,526.5C 886.662,521.684 889.495,517.018 892.5,512.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1490.5,509.5 C 1491.04,509.56 1491.38,509.893 1491.5,510.5C 1488.83,513.837 1486.66,517.504 1485,521.5C 1482.93,523.452 1480.76,525.285 1478.5,527C 1477.36,527.749 1476.36,527.583 1475.5,526.5C 1479.46,519.872 1484.46,514.205 1490.5,509.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 902.5,509.5 C 903.043,509.56 903.376,509.893 903.5,510.5C 900.167,516.167 896.833,521.833 893.5,527.5C 892.167,528.833 890.833,528.833 889.5,527.5C 893.843,521.471 898.176,515.471 902.5,509.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1481.5,507.5 C 1482.53,507.897 1482.69,508.563 1482,509.5C 1478.64,514.03 1475.47,518.697 1472.5,523.5C 1470.34,525.412 1468.01,527.079 1465.5,528.5C 1464.42,527.635 1464.25,526.635 1465,525.5C 1470.34,519.33 1475.84,513.33 1481.5,507.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c057\",\n    d: \"M 1042.5,545.5 C 1033.61,547.544 1024.61,549.044 1015.5,550C 1009.89,551.472 1004.89,553.972 1000.5,557.5C 991.185,558.232 981.852,558.566 972.5,558.5C 969.287,558.19 966.287,558.523 963.5,559.5C 946.162,559.618 928.828,559.952 911.5,560.5C 909.5,560.5 907.5,560.5 905.5,560.5C 895.167,560.5 884.833,560.5 874.5,560.5C 866.146,560.573 857.812,560.24 849.5,559.5C 835.752,556.599 821.752,554.432 807.5,553C 808.056,552.617 808.389,552.117 808.5,551.5C 839.183,546.747 869.516,540.247 899.5,532C 914.704,532.382 929.87,533.549 945,535.5C 957.823,534.216 970.657,533.05 983.5,532C 1012.31,535.078 1039.48,529.911 1065,516.5C 1074.05,518.527 1083.21,519.527 1092.5,519.5C 1110.18,518.541 1127.85,517.374 1145.5,516C 1155.17,515.333 1164.83,515.333 1174.5,516C 1191.73,519.455 1209.06,522.122 1226.5,524C 1184.87,534.078 1143.03,543.244 1101,551.5C 1097.59,551.048 1094.42,549.881 1091.5,548C 1085.6,542.384 1078.6,538.884 1070.5,537.5C 1060.84,539.165 1051.51,541.831 1042.5,545.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#708a33\",\n    d: \"M 49.5,516.5 C 50.5,516.5 51.5,516.5 52.5,516.5C 109.167,516.773 165.834,517.107 222.5,517.5C 221.5,518.167 220.5,518.833 219.5,519.5C 219.5,520.167 219.167,520.5 218.5,520.5C 217.903,519.861 217.07,519.528 216,519.5C 211.224,520.314 206.724,521.647 202.5,523.5C 202.5,524.167 202.167,524.5 201.5,524.5C 195.978,523.874 190.645,524.874 185.5,527.5C 180.471,527.92 175.805,529.254 171.5,531.5C 169.897,531.312 168.563,531.812 167.5,533C 170.243,535.038 173.243,536.538 176.5,537.5C 180.363,538.694 183.363,541.027 185.5,544.5C 185.414,545.496 185.748,546.329 186.5,547C 181.908,548.071 177.575,549.571 173.5,551.5C 173.093,556.069 174.093,560.569 176.5,565C 184.656,565.979 189.323,565.812 190.5,564.5C 193.287,563.523 196.287,563.19 199.5,563.5C 206.011,564.694 212.678,565.694 219.5,566.5C 268.64,571.764 317.974,576.597 367.5,581C 388.092,584.442 408.758,587.275 429.5,589.5C 434.606,590.98 439.94,591.98 445.5,592.5C 446.726,592.48 447.726,592.147 448.5,591.5C 450.099,591.232 451.432,591.566 452.5,592.5C 451.761,592.369 451.094,592.536 450.5,593C 461.576,595.43 472.576,596.597 483.5,596.5C 486.01,596.927 488.343,597.593 490.5,598.5C 495.629,599.858 500.962,600.858 506.5,601.5C 507.726,601.48 508.726,601.147 509.5,600.5C 511.099,600.232 512.432,600.566 513.5,601.5C 512.761,601.369 512.094,601.536 511.5,602C 548.132,605.882 584.799,609.382 621.5,612.5C 619.747,614.223 617.747,615.723 615.5,617C 623.012,617.822 630.345,617.655 637.5,616.5C 637.833,616.5 638.167,616.5 638.5,616.5C 642.133,616.443 642.3,617.443 639,619.5C 638.503,621.81 638.337,624.143 638.5,626.5C 639.791,626.737 640.791,626.404 641.5,625.5C 645.163,625.048 648.83,624.548 652.5,624C 654.852,623.76 656.852,622.927 658.5,621.5C 658.833,620.5 659.5,619.833 660.5,619.5C 664.993,619.731 669.326,619.064 673.5,617.5C 692.489,616.697 711.489,616.364 730.5,616.5C 730.472,618.582 731.139,620.416 732.5,622C 730.122,622.511 727.788,623.178 725.5,624C 721.452,627.716 717.118,631.05 712.5,634C 719.679,634.821 726.679,634.655 733.5,633.5C 734.167,633.5 734.833,633.5 735.5,633.5C 736.675,633.281 737.675,633.614 738.5,634.5C 736.87,637.276 736.203,640.276 736.5,643.5C 737.791,643.737 738.791,643.404 739.5,642.5C 744.84,641.777 750.173,640.943 755.5,640C 758.754,637.291 762.421,635.791 766.5,635.5C 772.402,634.099 778.402,633.266 784.5,633C 781.594,630.381 778.261,628.547 774.5,627.5C 771.577,626.705 768.91,625.372 766.5,623.5C 767.577,622.295 768.91,621.628 770.5,621.5C 771.239,621.631 771.906,621.464 772.5,621C 773.399,619.348 774.399,617.848 775.5,616.5C 788.32,615.337 800.986,614.003 813.5,612.5C 815.199,612.34 816.866,612.506 818.5,613C 815.215,616.973 811.215,619.973 806.5,622C 809.146,622.497 811.813,622.664 814.5,622.5C 821.202,622.664 827.869,622.331 834.5,621.5C 832.104,624.407 831.438,627.573 832.5,631C 833.749,631.74 834.749,631.573 835.5,630.5C 840.879,629.994 846.213,629.161 851.5,628C 853.687,626.975 855.354,625.475 856.5,623.5C 860.556,624.853 864.556,624.353 868.5,622C 872.833,621.667 877.167,621.333 881.5,621C 876.545,617.357 871.212,614.524 865.5,612.5C 861.642,610.959 861.975,609.959 866.5,609.5C 868.027,609.573 869.027,608.906 869.5,607.5C 877.503,606.944 885.503,606.277 893.5,605.5C 895.785,605.676 897.785,606.343 899.5,607.5C 900.132,612.305 902.799,615.472 907.5,617C 922.797,618.546 938.131,618.879 953.5,618C 960.768,616.466 967.768,614.133 974.5,611C 978.147,610.226 981.814,609.559 985.5,609C 994.498,609.047 1003.5,609.047 1012.5,609C 1013.55,607.612 1013.72,606.112 1013,604.5C 1009.88,599.046 1005.71,594.546 1000.5,591C 1001.79,590.51 1003.13,590.343 1004.5,590.5C 1011.13,589.228 1017.8,588.061 1024.5,587C 1070.18,583.849 1113.18,580.683 1153.5,577.5C 1155.95,576.527 1158.61,576.194 1161.5,576.5C 1187.17,576.53 1212.83,576.53 1238.5,576.5C 1235.9,578.81 1232.9,580.643 1229.5,582C 1237.97,581.955 1246.31,581.455 1254.5,580.5C 1255.17,580.5 1255.83,580.5 1256.5,580.5C 1255.15,582.392 1254.48,584.558 1254.5,587C 1254.83,588.167 1255.17,589.333 1255.5,590.5C 1256.11,590.376 1256.44,590.043 1256.5,589.5C 1256.83,589.5 1257.17,589.5 1257.5,589.5C 1262.4,589.046 1267.07,588.046 1271.5,586.5C 1272.8,585.512 1274.13,584.512 1275.5,583.5C 1276.17,583.5 1276.83,583.5 1277.5,583.5C 1278.83,583.5 1280.17,583.5 1281.5,583.5C 1286.93,581.284 1292.59,580.117 1298.5,580C 1296.18,577.843 1293.52,576.343 1290.5,575.5C 1290.39,574.883 1290.06,574.383 1289.5,574C 1294.75,572.729 1300.09,572.229 1305.5,572.5C 1309.18,572.665 1312.85,572.499 1316.5,572C 1317.06,571.617 1317.39,571.117 1317.5,570.5C 1318.17,570.5 1318.83,570.5 1319.5,570.5C 1382.5,570.5 1445.5,570.5 1508.5,570.5C 1508.67,575.673 1511,579.506 1515.5,582C 1522.19,582.169 1528.86,582.669 1535.5,583.5C 1540.5,594.167 1545.5,604.833 1550.5,615.5C 1551.5,615.833 1552.5,616.167 1553.5,616.5C 1630.22,607.773 1706.89,598.607 1783.5,589C 1803.1,586.843 1822.77,586.01 1842.5,586.5C 1842.6,670.181 1843.27,753.848 1844.5,837.5C 1238.83,837.5 633.167,837.5 27.5,837.5C 26.4633,735.835 25.4633,634.168 24.5,532.5C 25.4881,527.36 25.8214,522.026 25.5,516.5C 33.5,516.5 41.5,516.5 49.5,516.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 907.5,511.5 C 908.043,511.56 908.376,511.893 908.5,512.5C 904.443,517.284 901.443,522.617 899.5,528.5C 895.446,528.79 894.946,528.123 898,526.5C 900.678,521.134 903.844,516.134 907.5,511.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181818\",\n    d: \"M 1457.5,513.5 C 1458.24,513.369 1458.91,513.536 1459.5,514C 1456.97,519.363 1452.97,523.196 1447.5,525.5C 1447.17,525.167 1446.83,524.833 1446.5,524.5C 1447.86,522.972 1449.03,521.305 1450,519.5C 1452.84,517.841 1455.34,515.841 1457.5,513.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dca680\",\n    d: \"M 345.5,529.5 C 344.391,530.29 343.058,530.79 341.5,531C 343.97,532.021 346.304,533.188 348.5,534.5C 350.253,536.223 352.253,537.723 354.5,539C 348.282,539.798 342.282,541.298 336.5,543.5C 335.659,541.621 335.325,539.621 335.5,537.5C 337.026,536.508 337.693,535.008 337.5,533C 337.884,530.258 336.884,528.425 334.5,527.5C 333.942,526.21 332.942,525.377 331.5,525C 336.907,519.732 343.24,518.232 350.5,520.5C 348.639,523.439 346.973,526.439 345.5,529.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#213117\",\n    d: \"M 218.5,520.5 C 213.167,521.5 207.833,522.5 202.5,523.5C 206.724,521.647 211.224,520.314 216,519.5C 217.07,519.528 217.903,519.861 218.5,520.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#244320\",\n    d: \"M 413.5,524.5 C 412.508,524.328 411.842,524.662 411.5,525.5C 394.201,524.119 376.868,523.286 359.5,523C 377.695,522.119 395.695,522.619 413.5,524.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49433c\",\n    d: \"M 312.5,516.5 C 310.964,518.916 309.964,521.583 309.5,524.5C 309.946,527.293 311.279,529.627 313.5,531.5C 310.553,532.321 307.553,532.821 304.5,533C 301.5,535.333 298.5,537.667 295.5,540C 301.491,540.499 307.491,540.666 313.5,540.5C 304.983,541.486 296.316,541.986 287.5,542C 292.546,540.151 296.879,537.318 300.5,533.5C 301.833,532.833 302.833,531.833 303.5,530.5C 305.288,530.785 306.955,530.452 308.5,529.5C 306.369,524.021 307.702,519.687 312.5,516.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474138\",\n    d: \"M 345.5,529.5 C 346.973,526.439 348.639,523.439 350.5,520.5C 343.24,518.232 336.907,519.732 331.5,525C 332.942,525.377 333.942,526.21 334.5,527.5C 328.801,525.453 323.801,526.453 319.5,530.5C 321.073,526.541 324.073,524.875 328.5,525.5C 328.649,524.448 328.483,523.448 328,522.5C 326.188,521.023 324.355,519.69 322.5,518.5C 325.691,518.762 328.358,520.095 330.5,522.5C 337.526,517.395 345.193,516.229 353.5,519C 354.061,520.566 353.394,521.899 351.5,523C 359.167,523.813 358.834,524.479 350.5,525C 349.349,527.2 347.682,528.7 345.5,529.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#253618\",\n    d: \"M 201.5,524.5 C 196.227,525.818 190.893,526.818 185.5,527.5C 190.645,524.874 195.978,523.874 201.5,524.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 1302.5,538.5 C 1304.13,539.161 1305.97,539.494 1308,539.5C 1314.18,538.873 1320.35,538.207 1326.5,537.5C 1333.54,537.274 1340.54,536.607 1347.5,535.5C 1360.92,537.678 1374.25,540.178 1387.5,543C 1362.4,548.062 1339.07,557.228 1317.5,570.5C 1311.64,570.178 1305.98,570.511 1300.5,571.5C 1294.97,571.821 1289.64,571.488 1284.5,570.5C 1285.49,570.672 1286.16,570.338 1286.5,569.5C 1288.88,566.609 1291.55,563.776 1294.5,561C 1286.81,557.515 1279.31,558.015 1272,562.5C 1269.78,560.807 1267.28,559.807 1264.5,559.5C 1260.67,557.855 1258.84,554.855 1259,550.5C 1256.87,552.114 1255.37,554.114 1254.5,556.5C 1249.17,559.958 1247.83,564.458 1250.5,570C 1247.05,570.895 1243.72,572.062 1240.5,573.5C 1214.18,574.753 1187.84,575.753 1161.5,576.5C 1158.61,576.194 1155.95,576.527 1153.5,577.5C 1112.8,579.383 1072.13,581.883 1031.5,585C 1021.61,585.941 1011.94,587.441 1002.5,589.5C 997.584,589.71 993.251,588.21 989.5,585C 986.436,583.756 983.269,582.923 980,582.5C 960.867,585.406 941.701,586.906 922.5,587C 917.008,590.946 911.008,593.946 904.5,596C 901.879,598.114 899.879,600.614 898.5,603.5C 889.152,604.368 879.819,605.368 870.5,606.5C 871.882,603.606 873.882,601.106 876.5,599C 867.168,594.776 858.668,595.942 851,602.5C 848.971,599.404 846.138,597.738 842.5,597.5C 838.668,595.855 836.835,592.855 837,588.5C 834.546,590.441 832.713,592.775 831.5,595.5C 826.034,599.073 824.701,603.739 827.5,609.5C 822.954,610.985 818.287,611.652 813.5,611.5C 801.374,613.226 789.374,613.893 777.5,613.5C 778.289,613.217 778.956,612.717 779.5,612C 770.827,608.091 762.661,608.925 755,614.5C 752.618,612.226 749.785,610.893 746.5,610.5C 743.294,608.511 741.627,605.511 741.5,601.5C 739.389,602.605 738.055,604.271 737.5,606.5C 734.785,609.214 732.451,612.214 730.5,615.5C 715.167,615.5 699.833,615.5 684.5,615.5C 681.287,612.726 677.62,610.726 673.5,609.5C 671.852,608.073 669.852,607.24 667.5,607C 669.175,606.015 670.842,605.181 672.5,604.5C 674.907,601.416 677.574,598.416 680.5,595.5C 671.803,592.238 663.636,593.238 656,598.5C 654.429,596.077 652.263,594.744 649.5,594.5C 645.248,593.072 643.082,590.072 643,585.5C 640.873,587.114 639.373,589.114 638.5,591.5C 633,595.124 631.666,599.791 634.5,605.5C 629.656,605.922 625.656,607.922 622.5,611.5C 586.185,608.047 549.852,604.714 513.5,601.5C 512.432,600.566 511.099,600.232 509.5,600.5C 503.188,599.646 496.855,598.979 490.5,598.5C 488.343,597.593 486.01,596.927 483.5,596.5C 473.167,595.167 462.833,593.833 452.5,592.5C 451.432,591.566 450.099,591.232 448.5,591.5C 442.227,590.313 435.894,589.646 429.5,589.5C 409.398,585.775 389.065,582.608 368.5,580C 320.172,575.273 271.839,570.607 223.5,566C 226.207,565.605 228.873,565.105 231.5,564.5C 275.167,562.472 318.834,560.305 362.5,558C 375.829,557.5 389.163,557.333 402.5,557.5C 403.391,558.261 404.058,559.261 404.5,560.5C 402.138,561.271 399.804,562.105 397.5,563C 394.744,566.427 391.41,569.093 387.5,571C 394.856,571.169 402.189,571.669 409.5,572.5C 408.626,574.747 408.292,577.08 408.5,579.5C 410.099,579.768 411.432,579.434 412.5,578.5C 417.531,578.557 422.198,577.557 426.5,575.5C 429.394,574.047 432.394,573.047 435.5,572.5C 440.801,571.823 446.134,571.323 451.5,571C 447.401,567.392 442.734,564.892 437.5,563.5C 436.737,562.732 435.737,562.232 434.5,562C 436.058,561.79 437.391,561.29 438.5,560.5C 440.71,560.106 442.043,558.773 442.5,556.5C 470.835,556.667 499.169,556.5 527.5,556C 565.879,552.706 604.213,549.039 642.5,545C 658.661,544.034 674.827,543.2 691,542.5C 713.639,543.559 736.139,545.893 758.5,549.5C 767.951,551.212 777.618,552.212 787.5,552.5C 793.181,552.635 798.848,552.968 804.5,553.5C 819.512,555.502 834.512,557.835 849.5,560.5C 855.797,561.32 862.131,561.653 868.5,561.5C 872.634,562.485 876.968,562.818 881.5,562.5C 893.012,562.828 904.346,562.495 915.5,561.5C 933.51,561.577 951.51,561.243 969.5,560.5C 974.695,560.821 979.695,560.487 984.5,559.5C 989.363,559.181 994.03,559.514 998.5,560.5C 994.75,568.67 997.25,574.004 1006,576.5C 1016.07,574.673 1026.23,573.507 1036.5,573C 1058.35,567.663 1080.52,564.163 1103,562.5C 1104.17,562.167 1105.33,561.833 1106.5,561.5C 1105.09,559.086 1103.09,557.419 1100.5,556.5C 1132.54,549.386 1165.54,542.553 1199.5,536C 1212.33,532.167 1225.17,528.333 1238,524.5C 1247.22,528.195 1256.39,532.029 1265.5,536C 1277.81,537.165 1290.15,537.999 1302.5,538.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f9419\",\n    d: \"M 1508.5,570.5 C 1445.5,570.5 1382.5,570.5 1319.5,570.5C 1319.92,569.778 1320.58,569.278 1321.5,569C 1324.5,568.667 1327.5,568.333 1330.5,568C 1350.45,556.795 1371.78,549.795 1394.5,547C 1402.71,542.397 1411.04,538.063 1419.5,534C 1441.49,534.664 1463.49,534.997 1485.5,535C 1495.01,534.715 1503.34,531.548 1510.5,525.5C 1512.64,533.243 1514.97,540.91 1517.5,548.5C 1517.33,549.833 1517.17,551.167 1517,552.5C 1512.82,557.866 1509.98,563.866 1508.5,570.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#243618\",\n    d: \"M 185.5,527.5 C 181.105,529.435 176.438,530.769 171.5,531.5C 175.805,529.254 180.471,527.92 185.5,527.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a83433\",\n    d: \"M 334.5,527.5 C 336.884,528.425 337.884,530.258 337.5,533C 337.693,535.008 337.026,536.508 335.5,537.5C 334.005,537.989 332.671,538.655 331.5,539.5C 328.974,540.657 326.307,540.657 323.5,539.5C 322.833,538.167 321.833,537.167 320.5,536.5C 318.539,534.68 318.206,532.68 319.5,530.5C 323.801,526.453 328.801,525.453 334.5,527.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#203016\",\n    d: \"M 171.5,531.5 C 171.082,532.222 170.416,532.722 169.5,533C 172.239,534.026 174.572,535.526 176.5,537.5C 173.243,536.538 170.243,535.038 167.5,533C 168.563,531.812 169.897,531.312 171.5,531.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a4c3e\",\n    d: \"M 348.5,534.5 C 363.487,540.827 362.487,543.327 345.5,542C 342.597,544.288 339.597,544.788 336.5,543.5C 342.282,541.298 348.282,539.798 354.5,539C 352.253,537.723 350.253,536.223 348.5,534.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#264a22\",\n    d: \"M 1326.5,537.5 C 1320.35,538.207 1314.18,538.873 1308,539.5C 1305.97,539.494 1304.13,539.161 1302.5,538.5C 1310.57,536.822 1318.57,536.489 1326.5,537.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d473e\",\n    d: \"M 320.5,536.5 C 321.833,537.167 322.833,538.167 323.5,539.5C 317.833,540.5 314.5,543.833 313.5,549.5C 312.25,546.578 312.917,543.911 315.5,541.5C 315.376,540.893 315.043,540.56 314.5,540.5C 316.918,539.707 318.918,538.374 320.5,536.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea881\",\n    d: \"M 323.5,539.5 C 326.307,540.657 328.974,540.657 331.5,539.5C 333.912,539.694 334.912,541.027 334.5,543.5C 328.504,545.59 322.504,547.59 316.5,549.5C 315.5,550.833 314.5,550.833 313.5,549.5C 314.5,543.833 317.833,540.5 323.5,539.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 1099.5,557.5 C 1100.63,558.122 1101.63,558.955 1102.5,560C 1093.54,561.829 1084.54,562.829 1075.5,563C 1076.86,559.122 1075.52,556.289 1071.5,554.5C 1070.57,557.869 1071.57,560.702 1074.5,563C 1074,563.167 1073.5,563.333 1073,563.5C 1071.2,560.752 1069.03,558.252 1066.5,556C 1064.24,556.698 1062.4,556.198 1061,554.5C 1061.59,557.069 1062.26,559.735 1063,562.5C 1064.01,563.337 1065.18,563.67 1066.5,563.5C 1066.35,562.448 1066.52,561.448 1067,560.5C 1067.47,561.931 1068.3,563.097 1069.5,564C 1066.85,564.497 1064.19,564.664 1061.5,564.5C 1061.08,561.561 1059.58,559.228 1057,557.5C 1055.96,560.636 1056.79,563.136 1059.5,565C 1058.44,566.188 1057.1,566.688 1055.5,566.5C 1054.07,561.227 1050.91,557.227 1046,554.5C 1047.12,559.335 1049.62,563.502 1053.5,567C 1052.36,567.749 1051.36,567.583 1050.5,566.5C 1048.46,562.291 1045.29,559.291 1041,557.5C 1039.7,558.098 1038.87,559.098 1038.5,560.5C 1039.79,563.58 1041.46,566.414 1043.5,569C 1043.17,569.167 1042.83,569.333 1042.5,569.5C 1040.17,566.34 1037.34,563.673 1034,561.5C 1034.42,564.521 1035.58,567.355 1037.5,570C 1036.5,570.333 1035.5,570.667 1034.5,571C 1025.07,571.648 1015.74,572.815 1006.5,574.5C 1000.52,573.202 998.018,569.535 999,563.5C 1003.51,556.994 1009.68,553.16 1017.5,552C 1026.27,550.988 1034.94,549.488 1043.5,547.5C 1053.49,543.554 1063.83,541.388 1074.5,541C 1083.8,545.151 1092.13,550.651 1099.5,557.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#264621\",\n    d: \"M 303.5,530.5 C 302.833,531.833 301.833,532.833 300.5,533.5C 299.903,532.861 299.07,532.528 298,532.5C 256.361,538.043 214.861,544.377 173.5,551.5C 177.575,549.571 181.908,548.071 186.5,547C 185.748,546.329 185.414,545.496 185.5,544.5C 186.815,545.476 188.148,546.476 189.5,547.5C 227.334,540.714 265.334,535.047 303.5,530.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#675547\",\n    d: \"M 335.5,537.5 C 335.325,539.621 335.659,541.621 336.5,543.5C 335.833,543.5 335.167,543.5 334.5,543.5C 334.912,541.027 333.912,539.694 331.5,539.5C 332.671,538.655 334.005,537.989 335.5,537.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dda881\",\n    d: \"M 417.5,550.5 C 419.756,551.483 421.423,553.15 422.5,555.5C 419.128,556.269 416.295,557.935 414,560.5C 413.22,562.387 413.387,564.054 414.5,565.5C 414.833,566.167 415.167,566.833 415.5,567.5C 414.158,568.793 412.491,569.626 410.5,570C 404.5,570.667 398.5,570.667 392.5,570C 394.792,568.71 396.792,567.043 398.5,565C 401.648,563.395 404.981,562.395 408.5,562C 405.288,558.698 404.621,554.865 406.5,550.5C 408.007,547.497 410.007,544.83 412.5,542.5C 412.737,546.176 414.404,548.843 417.5,550.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555143\",\n    d: \"M 334.5,543.5 C 334.586,544.496 334.252,545.329 333.5,546C 328.071,548.144 322.404,549.31 316.5,549.5C 322.504,547.59 328.504,545.59 334.5,543.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#10190d\",\n    d: \"M 759.5,548.5 C 759.5,549.167 759.167,549.5 758.5,549.5C 736.139,545.893 713.639,543.559 691,542.5C 674.827,543.2 658.661,544.034 642.5,545C 604.213,549.039 565.879,552.706 527.5,556C 499.169,556.5 470.835,556.667 442.5,556.5C 442.5,555.833 442.833,555.5 443.5,555.5C 469.169,555.667 494.835,555.5 520.5,555C 564.551,551.207 608.551,546.874 652.5,542C 688.499,538.896 724.166,541.062 759.5,548.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b5327\",\n    d: \"M 759.5,548.5 C 769.628,549.659 779.628,550.659 789.5,551.5C 788.508,551.328 787.842,551.662 787.5,552.5C 777.618,552.212 767.951,551.212 758.5,549.5C 759.167,549.5 759.5,549.167 759.5,548.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#daa57f\",\n    d: \"M 438.5,560.5 C 437.391,561.29 436.058,561.79 434.5,562C 435.737,562.232 436.737,562.732 437.5,563.5C 440.436,565.308 443.436,567.141 446.5,569C 442.386,569.115 438.719,570.282 435.5,572.5C 432.394,573.047 429.394,574.047 426.5,575.5C 421.55,575.77 416.883,576.77 412.5,578.5C 411.5,578.5 410.5,578.5 409.5,578.5C 410.124,573.209 413.124,570.209 418.5,569.5C 422.54,571.104 426.207,570.437 429.5,567.5C 432.134,564.754 432.134,562.088 429.5,559.5C 428.426,558.115 427.093,556.949 425.5,556C 430.507,551.698 436.173,550.531 442.5,552.5C 441.346,555.32 440.013,557.986 438.5,560.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa982\",\n    d: \"M 1264.5,559.5 C 1266.45,560.785 1268.12,562.451 1269.5,564.5C 1266.13,565.177 1263.47,566.843 1261.5,569.5C 1258.97,571.75 1258.97,574.084 1261.5,576.5C 1260.41,578.534 1258.74,579.868 1256.5,580.5C 1255.83,580.5 1255.17,580.5 1254.5,580.5C 1248.82,580.666 1243.16,580.499 1237.5,580C 1240.13,578.374 1242.46,576.374 1244.5,574C 1247.77,573.005 1251.1,572.172 1254.5,571.5C 1252.56,569.72 1251.22,567.553 1250.5,565C 1251.72,562.054 1253.06,559.22 1254.5,556.5C 1255.37,554.114 1256.87,552.114 1259,550.5C 1258.84,554.855 1260.67,557.855 1264.5,559.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f2e16\",\n    d: \"M 173.5,551.5 C 174.736,555.707 176.069,559.874 177.5,564C 181.821,564.499 186.154,564.666 190.5,564.5C 189.323,565.812 184.656,565.979 176.5,565C 174.093,560.569 173.093,556.069 173.5,551.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d473c\",\n    d: \"M 443.5,555.5 C 442.833,555.5 442.5,555.833 442.5,556.5C 442.043,558.773 440.71,560.106 438.5,560.5C 440.013,557.986 441.346,555.32 442.5,552.5C 436.173,550.531 430.507,551.698 425.5,556C 427.093,556.949 428.426,558.115 429.5,559.5C 424.11,556.392 419.277,557.059 415,561.5C 414.51,562.793 414.343,564.127 414.5,565.5C 413.387,564.054 413.22,562.387 414,560.5C 416.295,557.935 419.128,556.269 422.5,555.5C 421.423,553.15 419.756,551.483 417.5,550.5C 420.585,550.542 422.919,551.875 424.5,554.5C 431.321,548.985 438.654,548.151 446.5,552C 445.29,553.039 444.29,554.206 443.5,555.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223f1e\",\n    d: \"M 808.5,551.5 C 808.389,552.117 808.056,552.617 807.5,553C 821.752,554.432 835.752,556.599 849.5,559.5C 849.5,559.833 849.5,560.167 849.5,560.5C 834.512,557.835 819.512,555.502 804.5,553.5C 805.514,552.326 806.847,551.66 808.5,551.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121511\",\n    d: \"M 1042.5,545.5 C 1042.83,546.167 1043.17,546.833 1043.5,547.5C 1034.94,549.488 1026.27,550.988 1017.5,552C 1009.68,553.16 1003.51,556.994 999,563.5C 998.018,569.535 1000.52,573.202 1006.5,574.5C 1015.74,572.815 1025.07,571.648 1034.5,571C 1035.5,570.667 1036.5,570.333 1037.5,570C 1035.58,567.355 1034.42,564.521 1034,561.5C 1037.34,563.673 1040.17,566.34 1042.5,569.5C 1042.83,569.333 1043.17,569.167 1043.5,569C 1041.46,566.414 1039.79,563.58 1038.5,560.5C 1038.87,559.098 1039.7,558.098 1041,557.5C 1045.29,559.291 1048.46,562.291 1050.5,566.5C 1051.36,567.583 1052.36,567.749 1053.5,567C 1049.62,563.502 1047.12,559.335 1046,554.5C 1050.91,557.227 1054.07,561.227 1055.5,566.5C 1057.1,566.688 1058.44,566.188 1059.5,565C 1056.79,563.136 1055.96,560.636 1057,557.5C 1059.58,559.228 1061.08,561.561 1061.5,564.5C 1064.19,564.664 1066.85,564.497 1069.5,564C 1068.3,563.097 1067.47,561.931 1067,560.5C 1066.52,561.448 1066.35,562.448 1066.5,563.5C 1065.18,563.67 1064.01,563.337 1063,562.5C 1062.26,559.735 1061.59,557.069 1061,554.5C 1062.4,556.198 1064.24,556.698 1066.5,556C 1069.03,558.252 1071.2,560.752 1073,563.5C 1073.5,563.333 1074,563.167 1074.5,563C 1071.57,560.702 1070.57,557.869 1071.5,554.5C 1075.52,556.289 1076.86,559.122 1075.5,563C 1084.54,562.829 1093.54,561.829 1102.5,560C 1101.63,558.955 1100.63,558.122 1099.5,557.5C 1099.5,556.833 1099.83,556.5 1100.5,556.5C 1103.09,557.419 1105.09,559.086 1106.5,561.5C 1105.33,561.833 1104.17,562.167 1103,562.5C 1080.52,564.163 1058.35,567.663 1036.5,573C 1026.23,573.507 1016.07,574.673 1006,576.5C 997.25,574.004 994.75,568.67 998.5,560.5C 999.906,560.027 1000.57,559.027 1000.5,557.5C 1004.89,553.972 1009.89,551.472 1015.5,550C 1024.61,549.044 1033.61,547.544 1042.5,545.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#182613\",\n    d: \"M 402.5,555.5 C 402.5,556.167 402.5,556.833 402.5,557.5C 389.163,557.333 375.829,557.5 362.5,558C 318.834,560.305 275.167,562.472 231.5,564.5C 230.5,563.833 229.5,563.167 228.5,562.5C 286.48,559.634 344.48,557.301 402.5,555.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#254521\",\n    d: \"M 1000.5,557.5 C 1000.57,559.027 999.906,560.027 998.5,560.5C 994.03,559.514 989.363,559.181 984.5,559.5C 980.298,559.817 976.298,559.483 972.5,558.5C 981.852,558.566 991.185,558.232 1000.5,557.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#46893e\",\n    d: \"M 963.5,559.5 C 966.287,558.523 969.287,558.19 972.5,558.5C 976.298,559.483 980.298,559.817 984.5,559.5C 979.695,560.487 974.695,560.821 969.5,560.5C 967.735,559.539 965.735,559.205 963.5,559.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#091007\",\n    d: \"M 849.5,560.5 C 849.5,560.167 849.5,559.833 849.5,559.5C 857.812,560.24 866.146,560.573 874.5,560.5C 872.735,561.461 870.735,561.795 868.5,561.5C 862.131,561.653 855.797,561.32 849.5,560.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#182914\",\n    d: \"M 905.5,560.5 C 907.5,560.5 909.5,560.5 911.5,560.5C 912.568,561.434 913.901,561.768 915.5,561.5C 904.346,562.495 893.012,562.828 881.5,562.5C 889.5,561.833 897.5,561.167 905.5,560.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a2d17\",\n    d: \"M 963.5,559.5 C 965.735,559.205 967.735,559.539 969.5,560.5C 951.51,561.243 933.51,561.577 915.5,561.5C 913.901,561.768 912.568,561.434 911.5,560.5C 928.828,559.952 946.162,559.618 963.5,559.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1a982\",\n    d: \"M 1286.5,569.5 C 1286.16,570.338 1285.49,570.672 1284.5,570.5C 1282.66,570.639 1282.33,571.306 1283.5,572.5C 1285.74,573.788 1288.07,574.788 1290.5,575.5C 1291.57,576.885 1292.91,578.051 1294.5,579C 1291.09,579.297 1287.75,579.964 1284.5,581C 1283.06,581.377 1282.06,582.21 1281.5,583.5C 1280.17,583.5 1278.83,583.5 1277.5,583.5C 1276.66,581.621 1276.33,579.621 1276.5,577.5C 1278.07,575.898 1278.74,573.898 1278.5,571.5C 1277.41,568.572 1275.41,566.406 1272.5,565C 1277.85,560.647 1283.85,559.481 1290.5,561.5C 1289.15,564.193 1287.82,566.86 1286.5,569.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#284b22\",\n    d: \"M 874.5,560.5 C 884.833,560.5 895.167,560.5 905.5,560.5C 897.5,561.167 889.5,561.833 881.5,562.5C 876.968,562.818 872.634,562.485 868.5,561.5C 870.735,561.795 872.735,561.461 874.5,560.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#50443c\",\n    d: \"M 1286.5,569.5 C 1287.82,566.86 1289.15,564.193 1290.5,561.5C 1283.85,559.481 1277.85,560.647 1272.5,565C 1275.41,566.406 1277.41,568.572 1278.5,571.5C 1273.37,566.953 1267.71,566.286 1261.5,569.5C 1263.47,566.843 1266.13,565.177 1269.5,564.5C 1268.12,562.451 1266.45,560.785 1264.5,559.5C 1267.28,559.807 1269.78,560.807 1272,562.5C 1279.31,558.015 1286.81,557.515 1294.5,561C 1291.55,563.776 1288.88,566.609 1286.5,569.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171f0e\",\n    d: \"M 199.5,563.5 C 204.167,563.5 208.833,563.5 213.5,563.5C 216.166,563.933 218.832,564.433 221.5,565C 220.584,565.278 219.918,565.778 219.5,566.5C 212.678,565.694 206.011,564.694 199.5,563.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a43231\",\n    d: \"M 429.5,559.5 C 432.134,562.088 432.134,564.754 429.5,567.5C 426.207,570.437 422.54,571.104 418.5,569.5C 417.71,568.599 416.71,567.932 415.5,567.5C 415.167,566.833 414.833,566.167 414.5,565.5C 414.343,564.127 414.51,562.793 415,561.5C 419.277,557.059 424.11,556.392 429.5,559.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b463d\",\n    d: \"M 406.5,550.5 C 404.621,554.865 405.288,558.698 408.5,562C 404.981,562.395 401.648,563.395 398.5,565C 396.792,567.043 394.792,568.71 392.5,570C 398.5,570.667 404.5,570.667 410.5,570C 412.491,569.626 414.158,568.793 415.5,567.5C 416.71,567.932 417.71,568.599 418.5,569.5C 413.124,570.209 410.124,573.209 409.5,578.5C 410.5,578.5 411.5,578.5 412.5,578.5C 411.432,579.434 410.099,579.768 408.5,579.5C 408.292,577.08 408.626,574.747 409.5,572.5C 402.189,571.669 394.856,571.169 387.5,571C 391.41,569.093 394.744,566.427 397.5,563C 399.804,562.105 402.138,561.271 404.5,560.5C 404.058,559.261 403.391,558.261 402.5,557.5C 402.5,556.833 402.5,556.167 402.5,555.5C 403.593,553.651 404.926,551.984 406.5,550.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a93534\",\n    d: \"M 1278.5,571.5 C 1278.74,573.898 1278.07,575.898 1276.5,577.5C 1275,577.989 1273.67,578.655 1272.5,579.5C 1269.97,580.657 1267.31,580.657 1264.5,579.5C 1263.83,578.167 1262.83,577.167 1261.5,576.5C 1258.97,574.084 1258.97,571.75 1261.5,569.5C 1267.71,566.286 1273.37,566.953 1278.5,571.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#293a19\",\n    d: \"M 213.5,563.5 C 218.305,562.513 223.305,562.179 228.5,562.5C 229.5,563.167 230.5,563.833 231.5,564.5C 228.873,565.105 226.207,565.605 223.5,566C 271.839,570.607 320.172,575.273 368.5,580C 389.065,582.608 409.398,585.775 429.5,589.5C 408.758,587.275 388.092,584.442 367.5,581C 317.974,576.597 268.64,571.764 219.5,566.5C 219.918,565.778 220.584,565.278 221.5,565C 218.832,564.433 216.166,563.933 213.5,563.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f5240\",\n    d: \"M 437.5,563.5 C 442.734,564.892 447.401,567.392 451.5,571C 446.134,571.323 440.801,571.823 435.5,572.5C 438.719,570.282 442.386,569.115 446.5,569C 443.436,567.141 440.436,565.308 437.5,563.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#375524\",\n    d: \"M 1300.5,571.5 C 1305.98,570.511 1311.64,570.178 1317.5,570.5C 1317.39,571.117 1317.06,571.617 1316.5,572C 1312.85,572.499 1309.18,572.665 1305.5,572.5C 1304.08,571.549 1302.41,571.216 1300.5,571.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#374323\",\n    d: \"M 1284.5,570.5 C 1289.64,571.488 1294.97,571.821 1300.5,571.5C 1302.41,571.216 1304.08,571.549 1305.5,572.5C 1300.09,572.229 1294.75,572.729 1289.5,574C 1290.06,574.383 1290.39,574.883 1290.5,575.5C 1288.07,574.788 1285.74,573.788 1283.5,572.5C 1282.33,571.306 1282.66,570.639 1284.5,570.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273919\",\n    d: \"M 1240.5,573.5 C 1240.57,575.027 1239.91,576.027 1238.5,576.5C 1212.83,576.53 1187.17,576.53 1161.5,576.5C 1187.84,575.753 1214.18,574.753 1240.5,573.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c453e\",\n    d: \"M 426.5,575.5 C 422.198,577.557 417.531,578.557 412.5,578.5C 416.883,576.77 421.55,575.77 426.5,575.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48403a\",\n    d: \"M 1290.5,575.5 C 1293.52,576.343 1296.18,577.843 1298.5,580C 1292.59,580.117 1286.93,581.284 1281.5,583.5C 1282.06,582.21 1283.06,581.377 1284.5,581C 1287.75,579.964 1291.09,579.297 1294.5,579C 1292.91,578.051 1291.57,576.885 1290.5,575.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47423a\",\n    d: \"M 1254.5,556.5 C 1253.06,559.22 1251.72,562.054 1250.5,565C 1251.22,567.553 1252.56,569.72 1254.5,571.5C 1251.1,572.172 1247.77,573.005 1244.5,574C 1242.46,576.374 1240.13,578.374 1237.5,580C 1243.16,580.499 1248.82,580.666 1254.5,580.5C 1246.31,581.455 1237.97,581.955 1229.5,582C 1232.9,580.643 1235.9,578.81 1238.5,576.5C 1239.91,576.027 1240.57,575.027 1240.5,573.5C 1243.72,572.062 1247.05,570.895 1250.5,570C 1247.83,564.458 1249.17,559.958 1254.5,556.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b423b\",\n    d: \"M 1261.5,576.5 C 1262.83,577.167 1263.83,578.167 1264.5,579.5C 1258.24,580.387 1255.57,583.72 1256.5,589.5C 1256.44,590.043 1256.11,590.376 1255.5,590.5C 1255.17,589.333 1254.83,588.167 1254.5,587C 1254.48,584.558 1255.15,582.392 1256.5,580.5C 1258.74,579.868 1260.41,578.534 1261.5,576.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a982\",\n    d: \"M 1264.5,579.5 C 1267.31,580.657 1269.97,580.657 1272.5,579.5C 1274.91,579.694 1275.91,581.027 1275.5,583.5C 1274.13,584.512 1272.8,585.512 1271.5,586.5C 1266.36,585.91 1261.69,586.91 1257.5,589.5C 1257.17,589.5 1256.83,589.5 1256.5,589.5C 1255.57,583.72 1258.24,580.387 1264.5,579.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#785d4d\",\n    d: \"M 1276.5,577.5 C 1276.33,579.621 1276.66,581.621 1277.5,583.5C 1276.83,583.5 1276.17,583.5 1275.5,583.5C 1275.91,581.027 1274.91,579.694 1272.5,579.5C 1273.67,578.655 1275,577.989 1276.5,577.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283919\",\n    d: \"M 1153.5,577.5 C 1113.18,580.683 1070.18,583.849 1024.5,587C 1017.8,588.061 1011.13,589.228 1004.5,590.5C 1004.16,589.662 1003.49,589.328 1002.5,589.5C 1011.94,587.441 1021.61,585.941 1031.5,585C 1072.13,581.883 1112.8,579.383 1153.5,577.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7972\",\n    d: \"M 1538.5,583.5 C 1622.84,583.92 1707.17,584.754 1791.5,586C 1712.35,595.72 1633.19,605.22 1554,614.5C 1553.17,614.167 1552.33,613.833 1551.5,613.5C 1546.6,603.701 1542.26,593.701 1538.5,583.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e453d\",\n    d: \"M 1271.5,586.5 C 1267.07,588.046 1262.4,589.046 1257.5,589.5C 1261.69,586.91 1266.36,585.91 1271.5,586.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa882\",\n    d: \"M 649.5,594.5 C 656.599,599.513 655.599,602.347 646.5,603C 645.748,603.671 645.414,604.504 645.5,605.5C 644.853,606.274 644.52,607.274 644.5,608.5C 644.34,610.355 645.007,611.688 646.5,612.5C 644.12,614.405 641.453,615.738 638.5,616.5C 638.167,616.5 637.833,616.5 637.5,616.5C 631.824,616.666 626.157,616.499 620.5,616C 623.5,613.667 626.5,611.333 629.5,609C 632.753,607.964 636.086,607.297 639.5,607C 637.042,605.213 635.376,602.879 634.5,600C 635.725,597.054 637.058,594.22 638.5,591.5C 639.373,589.114 640.873,587.114 643,585.5C 643.082,590.072 645.248,593.072 649.5,594.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3aa83\",\n    d: \"M 1197.5,596.5 C 1199.27,597.892 1201.27,599.059 1203.5,600C 1205.61,601.264 1206.61,603.097 1206.5,605.5C 1198.3,606.01 1194.63,610.01 1195.5,617.5C 1195.43,619.027 1196.09,620.027 1197.5,620.5C 1195.3,622.1 1192.96,623.433 1190.5,624.5C 1190.17,624.5 1189.83,624.5 1189.5,624.5C 1181.65,624.825 1173.98,624.492 1166.5,623.5C 1172.26,616.79 1179.59,613.624 1188.5,614C 1185.48,611.623 1183.48,608.623 1182.5,605C 1183.88,600.475 1185.88,596.308 1188.5,592.5C 1189.06,590.271 1190.39,588.605 1192.5,587.5C 1193.23,590.212 1194.06,592.879 1195,595.5C 1195.67,596.252 1196.5,596.586 1197.5,596.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa881\",\n    d: \"M 842.5,597.5 C 844.355,598.69 846.188,600.023 848,601.5C 848.483,602.448 848.649,603.448 848.5,604.5C 844.348,604.403 841.348,606.069 839.5,609.5C 838.074,612.299 838.408,614.966 840.5,617.5C 838.928,618.687 837.261,619.687 835.5,620.5C 828.313,620.825 821.313,620.491 814.5,619.5C 819.302,614.267 825.302,611.434 832.5,611C 827.499,606.155 827.166,600.988 831.5,595.5C 832.713,592.775 834.546,590.441 837,588.5C 836.835,592.855 838.668,595.855 842.5,597.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#243217\",\n    d: \"M 429.5,589.5 C 435.894,589.646 442.227,590.313 448.5,591.5C 447.726,592.147 446.726,592.48 445.5,592.5C 439.94,591.98 434.606,590.98 429.5,589.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283919\",\n    d: \"M 452.5,592.5 C 462.833,593.833 473.167,595.167 483.5,596.5C 472.576,596.597 461.576,595.43 450.5,593C 451.094,592.536 451.761,592.369 452.5,592.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d423b\",\n    d: \"M 672.5,604.5 C 673.293,601.581 674.626,598.915 676.5,596.5C 669.302,594.282 662.969,595.615 657.5,600.5C 658.665,601.584 659.998,602.417 661.5,603C 662.823,603.816 663.489,604.983 663.5,606.5C 657.763,601.604 651.763,601.27 645.5,605.5C 645.414,604.504 645.748,603.671 646.5,603C 655.599,602.347 656.599,599.513 649.5,594.5C 652.263,594.744 654.429,596.077 656,598.5C 663.636,593.238 671.803,592.238 680.5,595.5C 677.574,598.416 674.907,601.416 672.5,604.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dda781\",\n    d: \"M 672.5,604.5 C 670.842,605.181 669.175,606.015 667.5,607C 669.852,607.24 671.852,608.073 673.5,609.5C 675.647,611.47 677.98,613.303 680.5,615C 674.071,615.871 667.737,617.038 661.5,618.5C 661.634,616.708 661.301,615.042 660.5,613.5C 663.092,611.964 664.092,609.631 663.5,606.5C 663.489,604.983 662.823,603.816 661.5,603C 659.998,602.417 658.665,601.584 657.5,600.5C 662.969,595.615 669.302,594.282 676.5,596.5C 674.626,598.915 673.293,601.581 672.5,604.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#493e39\",\n    d: \"M 1197.5,596.5 C 1201.98,597.405 1205.98,599.405 1209.5,602.5C 1218.82,595.944 1228.82,594.778 1239.5,599C 1236.24,601.592 1233.74,604.759 1232,608.5C 1230.87,610.141 1229.37,611.141 1227.5,611.5C 1229.73,607.669 1232.07,603.836 1234.5,600C 1225.44,597.098 1217.44,598.932 1210.5,605.5C 1212.77,606.134 1214.44,607.468 1215.5,609.5C 1208.2,606.008 1201.7,607.008 1196,612.5C 1195.51,614.134 1195.34,615.801 1195.5,617.5C 1194.63,610.01 1198.3,606.01 1206.5,605.5C 1206.61,603.097 1205.61,601.264 1203.5,600C 1201.27,599.059 1199.27,597.892 1197.5,596.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49423a\",\n    d: \"M 870.5,606.5 C 869.833,606.5 869.5,606.833 869.5,607.5C 869.027,608.906 868.027,609.573 866.5,609.5C 868.364,606.277 870.364,603.11 872.5,600C 864.874,597.132 858.207,598.632 852.5,604.5C 853.77,605.288 854.77,606.288 855.5,607.5C 849.764,605.671 844.43,606.338 839.5,609.5C 841.348,606.069 844.348,604.403 848.5,604.5C 848.649,603.448 848.483,602.448 848,601.5C 846.188,600.023 844.355,598.69 842.5,597.5C 846.138,597.738 848.971,599.404 851,602.5C 858.668,595.942 867.168,594.776 876.5,599C 873.882,601.106 871.882,603.606 870.5,606.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f2b13\",\n    d: \"M 490.5,598.5 C 496.855,598.979 503.188,599.646 509.5,600.5C 508.726,601.147 507.726,601.48 506.5,601.5C 500.962,600.858 495.629,599.858 490.5,598.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a882\",\n    d: \"M 866.5,609.5 C 861.975,609.959 861.642,610.959 865.5,612.5C 868.939,614.394 872.272,616.56 875.5,619C 869.124,620.534 862.791,622.034 856.5,623.5C 856.634,621.708 856.301,620.042 855.5,618.5C 858.524,615.702 859.19,612.369 857.5,608.5C 857.043,607.702 856.376,607.369 855.5,607.5C 854.77,606.288 853.77,605.288 852.5,604.5C 858.207,598.632 864.874,597.132 872.5,600C 870.364,603.11 868.364,606.277 866.5,609.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a882\",\n    d: \"M 1227.5,611.5 C 1225.69,611.491 1224.02,611.991 1222.5,613C 1223.24,614.039 1224.24,614.539 1225.5,614.5C 1230.27,617.056 1234.94,619.89 1239.5,623C 1232.99,622.838 1226.99,624.504 1221.5,628C 1219.87,628.494 1218.2,628.66 1216.5,628.5C 1215.95,626.374 1215.29,624.374 1214.5,622.5C 1218.17,619.707 1219.34,616.04 1218,611.5C 1217.29,610.619 1216.46,609.953 1215.5,609.5C 1214.44,607.468 1212.77,606.134 1210.5,605.5C 1217.44,598.932 1225.44,597.098 1234.5,600C 1232.07,603.836 1229.73,607.669 1227.5,611.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#443d39\",\n    d: \"M 1188.5,592.5 C 1185.88,596.308 1183.88,600.475 1182.5,605C 1183.48,608.623 1185.48,611.623 1188.5,614C 1179.59,613.624 1172.26,616.79 1166.5,623.5C 1165.71,623.783 1165.04,624.283 1164.5,625C 1166.06,625.21 1167.39,625.71 1168.5,626.5C 1164.82,626.665 1161.15,626.499 1157.5,626C 1163.11,623.042 1168.11,619.376 1172.5,615C 1175.64,613.308 1178.98,612.142 1182.5,611.5C 1180.53,608.451 1180.03,605.118 1181,601.5C 1183.36,598.31 1185.86,595.31 1188.5,592.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea881\",\n    d: \"M 746.5,610.5 C 748.355,611.69 750.188,613.023 752,614.5C 752.483,615.448 752.649,616.448 752.5,617.5C 748.073,616.875 745.073,618.541 743.5,622.5C 742.861,623.097 742.528,623.93 742.5,625C 742.954,626.939 743.621,628.772 744.5,630.5C 741.443,631.633 738.443,632.633 735.5,633.5C 734.833,633.5 734.167,633.5 733.5,633.5C 728.489,633.666 723.489,633.499 718.5,633C 721.833,630.333 725.167,627.667 728.5,625C 731.5,624.667 734.5,624.333 737.5,624C 733.723,621.045 732.557,617.212 734,612.5C 735.442,610.609 736.609,608.609 737.5,606.5C 738.055,604.271 739.389,602.605 741.5,601.5C 741.627,605.511 743.294,608.511 746.5,610.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ab3535\",\n    d: \"M 663.5,606.5 C 664.092,609.631 663.092,611.964 660.5,613.5C 659.005,613.989 657.671,614.655 656.5,615.5C 654.5,615.5 652.5,615.5 650.5,615.5C 649.205,614.512 647.872,613.512 646.5,612.5C 645.007,611.688 644.34,610.355 644.5,608.5C 644.52,607.274 644.853,606.274 645.5,605.5C 651.763,601.27 657.763,601.604 663.5,606.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283818\",\n    d: \"M 898.5,603.5 C 899.234,604.708 899.567,606.041 899.5,607.5C 897.785,606.343 895.785,605.676 893.5,605.5C 885.503,606.277 877.503,606.944 869.5,607.5C 869.5,606.833 869.833,606.5 870.5,606.5C 879.819,605.368 889.152,604.368 898.5,603.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a4312f\",\n    d: \"M 855.5,607.5 C 856.376,607.369 857.043,607.702 857.5,608.5C 859.19,612.369 858.524,615.702 855.5,618.5C 854.508,618.328 853.842,618.662 853.5,619.5C 853.167,619.5 852.833,619.5 852.5,619.5C 848.258,619.921 844.258,619.254 840.5,617.5C 838.408,614.966 838.074,612.299 839.5,609.5C 844.43,606.338 849.764,605.671 855.5,607.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f3c35\",\n    d: \"M 831.5,595.5 C 827.166,600.988 827.499,606.155 832.5,611C 825.302,611.434 819.302,614.267 814.5,619.5C 811.902,620.528 811.902,621.528 814.5,622.5C 811.813,622.664 809.146,622.497 806.5,622C 811.215,619.973 815.215,616.973 818.5,613C 816.866,612.506 815.199,612.34 813.5,612.5C 813.5,612.167 813.5,611.833 813.5,611.5C 818.287,611.652 822.954,610.985 827.5,609.5C 824.701,603.739 826.034,599.073 831.5,595.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121411\",\n    d: \"M 1002.5,589.5 C 1003.49,589.328 1004.16,589.662 1004.5,590.5C 1003.13,590.343 1001.79,590.51 1000.5,591C 1005.71,594.546 1009.88,599.046 1013,604.5C 1013.72,606.112 1013.55,607.612 1012.5,609C 1003.5,609.047 994.498,609.047 985.5,609C 981.814,609.559 978.147,610.226 974.5,611C 967.768,614.133 960.768,616.466 953.5,618C 938.131,618.879 922.797,618.546 907.5,617C 902.799,615.472 900.132,612.305 899.5,607.5C 899.567,606.041 899.234,604.708 898.5,603.5C 899.879,600.614 901.879,598.114 904.5,596C 911.008,593.946 917.008,590.946 922.5,587C 941.701,586.906 960.867,585.406 980,582.5C 983.269,582.923 986.436,583.756 989.5,585C 993.251,588.21 997.584,589.71 1002.5,589.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 976.5,584.5 C 989.425,586.047 1000.26,591.714 1009,601.5C 1010.56,603.217 1011.39,605.217 1011.5,607.5C 1004.83,607.5 998.167,607.5 991.5,607.5C 991.977,603.134 990.144,600.134 986,598.5C 986.333,601.167 986.667,603.833 987,606.5C 985.859,604.391 984.359,602.558 982.5,601C 979.993,600.907 977.826,600.074 976,598.5C 976.59,601.283 977.423,604.117 978.5,607C 978.167,607.5 977.833,608 977.5,608.5C 976.565,605.898 974.898,603.898 972.5,602.5C 971.288,604.841 971.622,607.007 973.5,609C 973,609.167 972.5,609.333 972,609.5C 969.022,605.189 965.355,601.522 961,598.5C 962.321,602.798 964.487,606.798 967.5,610.5C 964.345,608.907 961.345,606.407 958.5,603C 956.479,602.86 954.645,602.693 953,602.5C 954.066,605.966 955.733,609.299 958,612.5C 958.667,613.5 958.667,614.5 958,615.5C 956.026,611.692 953.192,608.692 949.5,606.5C 949.826,609.977 951.493,613.144 954.5,616C 938.806,616.819 923.139,616.486 907.5,615C 901.975,612.081 900.142,607.581 902,601.5C 903.167,600.333 904.333,599.167 905.5,598C 911.61,595.779 917.277,592.779 922.5,589C 930.16,589.153 937.827,589.153 945.5,589C 956.008,587.661 966.341,586.161 976.5,584.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283718\",\n    d: \"M 513.5,601.5 C 549.852,604.714 586.185,608.047 622.5,611.5C 622.5,612.167 622.167,612.5 621.5,612.5C 584.799,609.382 548.132,605.882 511.5,602C 512.094,601.536 512.761,601.369 513.5,601.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a882\",\n    d: \"M 770.5,621.5 C 768.91,621.628 767.577,622.295 766.5,623.5C 768.91,625.372 771.577,626.705 774.5,627.5C 775.574,628.885 776.907,630.051 778.5,631C 774,631.441 770,632.941 766.5,635.5C 764.473,635.662 762.473,635.495 760.5,635C 759.62,633.644 759.286,632.144 759.5,630.5C 760.122,629.373 760.955,628.373 762,627.5C 762.78,625.613 762.613,623.946 761.5,622.5C 760.641,619.548 758.641,617.715 755.5,617C 761.295,611.787 767.962,610.287 775.5,612.5C 773.639,615.439 771.973,618.439 770.5,621.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c403a\",\n    d: \"M 777.5,613.5 C 776.094,613.973 775.427,614.973 775.5,616.5C 774.399,617.848 773.399,619.348 772.5,621C 771.906,621.464 771.239,621.631 770.5,621.5C 771.973,618.439 773.639,615.439 775.5,612.5C 767.962,610.287 761.295,611.787 755.5,617C 758.641,617.715 760.641,619.548 761.5,622.5C 755.468,617.254 749.468,617.254 743.5,622.5C 745.073,618.541 748.073,616.875 752.5,617.5C 752.649,616.448 752.483,615.448 752,614.5C 750.188,613.023 748.355,611.69 746.5,610.5C 749.785,610.893 752.618,612.226 755,614.5C 762.661,608.925 770.827,608.091 779.5,612C 778.956,612.717 778.289,613.217 777.5,613.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f453d\",\n    d: \"M 673.5,609.5 C 677.62,610.726 681.287,612.726 684.5,615.5C 680.833,616.167 677.167,616.833 673.5,617.5C 669.326,619.064 664.993,619.731 660.5,619.5C 660.833,616.5 659.5,615.167 656.5,615.5C 657.671,614.655 659.005,613.989 660.5,613.5C 661.301,615.042 661.634,616.708 661.5,618.5C 667.737,617.038 674.071,615.871 680.5,615C 677.98,613.303 675.647,611.47 673.5,609.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48423a\",\n    d: \"M 737.5,606.5 C 736.609,608.609 735.442,610.609 734,612.5C 732.557,617.212 733.723,621.045 737.5,624C 734.5,624.333 731.5,624.667 728.5,625C 725.167,627.667 721.833,630.333 718.5,633C 723.489,633.499 728.489,633.666 733.5,633.5C 726.679,634.655 719.679,634.821 712.5,634C 717.118,631.05 721.452,627.716 725.5,624C 727.788,623.178 730.122,622.511 732.5,622C 731.139,620.416 730.472,618.582 730.5,616.5C 730.5,616.167 730.5,615.833 730.5,615.5C 732.451,612.214 734.785,609.214 737.5,606.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#454039\",\n    d: \"M 638.5,591.5 C 637.058,594.22 635.725,597.054 634.5,600C 635.376,602.879 637.042,605.213 639.5,607C 636.086,607.297 632.753,607.964 629.5,609C 626.5,611.333 623.5,613.667 620.5,616C 626.157,616.499 631.824,616.666 637.5,616.5C 630.345,617.655 623.012,617.822 615.5,617C 617.747,615.723 619.747,614.223 621.5,612.5C 622.167,612.5 622.5,612.167 622.5,611.5C 625.656,607.922 629.656,605.922 634.5,605.5C 631.666,599.791 633,595.124 638.5,591.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#50453c\",\n    d: \"M 646.5,612.5 C 647.872,613.512 649.205,614.512 650.5,615.5C 644.867,615.482 641.2,618.148 639.5,623.5C 639.747,624.713 640.414,625.38 641.5,625.5C 640.791,626.404 639.791,626.737 638.5,626.5C 638.337,624.143 638.503,621.81 639,619.5C 642.3,617.443 642.133,616.443 638.5,616.5C 641.453,615.738 644.12,614.405 646.5,612.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a882\",\n    d: \"M 650.5,615.5 C 652.5,615.5 654.5,615.5 656.5,615.5C 659.5,615.167 660.833,616.5 660.5,619.5C 659.5,619.833 658.833,620.5 658.5,621.5C 652.411,621.622 646.745,622.955 641.5,625.5C 640.414,625.38 639.747,624.713 639.5,623.5C 641.2,618.148 644.867,615.482 650.5,615.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273e1c\",\n    d: \"M 684.5,615.5 C 699.833,615.5 715.167,615.5 730.5,615.5C 730.5,615.833 730.5,616.167 730.5,616.5C 711.489,616.364 692.489,616.697 673.5,617.5C 677.167,616.833 680.833,616.167 684.5,615.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d3e1b\",\n    d: \"M 813.5,611.5 C 813.5,611.833 813.5,612.167 813.5,612.5C 800.986,614.003 788.32,615.337 775.5,616.5C 775.427,614.973 776.094,613.973 777.5,613.5C 789.374,613.893 801.374,613.226 813.5,611.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d453c\",\n    d: \"M 865.5,612.5 C 871.212,614.524 876.545,617.357 881.5,621C 877.167,621.333 872.833,621.667 868.5,622C 864.556,624.353 860.556,624.853 856.5,623.5C 862.791,622.034 869.124,620.534 875.5,619C 872.272,616.56 868.939,614.394 865.5,612.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa3535\",\n    d: \"M 1215.5,609.5 C 1216.46,609.953 1217.29,610.619 1218,611.5C 1219.34,616.04 1218.17,619.707 1214.5,622.5C 1213.51,622.328 1212.84,622.662 1212.5,623.5C 1208.8,624.758 1205.13,624.758 1201.5,623.5C 1200.2,622.512 1198.87,621.512 1197.5,620.5C 1196.09,620.027 1195.43,619.027 1195.5,617.5C 1195.34,615.801 1195.51,614.134 1196,612.5C 1201.7,607.008 1208.2,606.008 1215.5,609.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3ab84\",\n    d: \"M 852.5,619.5 C 852.833,619.5 853.167,619.5 853.5,619.5C 854.942,621.817 854.608,623.984 852.5,626C 846.501,626.724 840.834,628.224 835.5,630.5C 834.351,630.209 833.684,629.376 833.5,628C 834.334,625.152 836,622.818 838.5,621C 843.351,620.826 848.018,620.326 852.5,619.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c6644\",\n    d: \"M 814.5,619.5 C 821.313,620.491 828.313,620.825 835.5,620.5C 835.5,621.167 835.167,621.5 834.5,621.5C 827.869,622.331 821.202,622.664 814.5,622.5C 811.902,621.528 811.902,620.528 814.5,619.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#473d39\",\n    d: \"M 1197.5,620.5 C 1198.87,621.512 1200.2,622.512 1201.5,623.5C 1194.62,623.886 1190.28,627.386 1188.5,634C 1188.68,635.376 1189.35,636.209 1190.5,636.5C 1189.79,637.404 1188.79,637.737 1187.5,637.5C 1186.63,632.553 1187.96,628.387 1191.5,625C 1191.27,624.601 1190.94,624.435 1190.5,624.5C 1192.96,623.433 1195.3,622.1 1197.5,620.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464039\",\n    d: \"M 1225.5,614.5 C 1232.86,616.68 1239.53,620.18 1245.5,625C 1236.48,624.675 1227.82,626.175 1219.5,629.5C 1218.27,629.48 1217.27,629.147 1216.5,628.5C 1218.2,628.66 1219.87,628.494 1221.5,628C 1226.99,624.504 1232.99,622.838 1239.5,623C 1234.94,619.89 1230.27,617.056 1225.5,614.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#52483f\",\n    d: \"M 658.5,621.5 C 656.852,622.927 654.852,623.76 652.5,624C 648.83,624.548 645.163,625.048 641.5,625.5C 646.745,622.955 652.411,621.622 658.5,621.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#55453c\",\n    d: \"M 840.5,617.5 C 844.258,619.254 848.258,619.921 852.5,619.5C 848.018,620.326 843.351,620.826 838.5,621C 836,622.818 834.334,625.152 833.5,628C 833.684,629.376 834.351,630.209 835.5,630.5C 834.749,631.573 833.749,631.74 832.5,631C 831.438,627.573 832.104,624.407 834.5,621.5C 835.167,621.5 835.5,621.167 835.5,620.5C 837.261,619.687 838.928,618.687 840.5,617.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 1201.5,623.5 C 1205.13,624.758 1208.8,624.758 1212.5,623.5C 1214.21,624.635 1214.88,626.302 1214.5,628.5C 1209.79,631.886 1204.46,633.386 1198.5,633C 1195.52,633.705 1192.86,634.871 1190.5,636.5C 1189.35,636.209 1188.68,635.376 1188.5,634C 1190.28,627.386 1194.62,623.886 1201.5,623.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564941\",\n    d: \"M 1212.5,623.5 C 1212.84,622.662 1213.51,622.328 1214.5,622.5C 1215.29,624.374 1215.95,626.374 1216.5,628.5C 1215.83,628.5 1215.17,628.5 1214.5,628.5C 1214.88,626.302 1214.21,624.635 1212.5,623.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#666043\",\n    d: \"M 1166.5,623.5 C 1173.98,624.492 1181.65,624.825 1189.5,624.5C 1188.39,625.29 1187.06,625.79 1185.5,626C 1179.84,626.499 1174.18,626.666 1168.5,626.5C 1167.39,625.71 1166.06,625.21 1164.5,625C 1165.04,624.283 1165.71,623.783 1166.5,623.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa3535\",\n    d: \"M 761.5,622.5 C 762.613,623.946 762.78,625.613 762,627.5C 760.955,628.373 760.122,629.373 759.5,630.5C 754.514,631.769 749.514,631.769 744.5,630.5C 743.621,628.772 742.954,626.939 742.5,625C 742.528,623.93 742.861,623.097 743.5,622.5C 749.468,617.254 755.468,617.254 761.5,622.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564b40\",\n    d: \"M 853.5,619.5 C 853.842,618.662 854.508,618.328 855.5,618.5C 856.301,620.042 856.634,621.708 856.5,623.5C 855.354,625.475 853.687,626.975 851.5,628C 846.213,629.161 840.879,629.994 835.5,630.5C 840.834,628.224 846.501,626.724 852.5,626C 854.608,623.984 854.942,621.817 853.5,619.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47403a\",\n    d: \"M 774.5,627.5 C 778.261,628.547 781.594,630.381 784.5,633C 778.402,633.266 772.402,634.099 766.5,635.5C 770,632.941 774,631.441 778.5,631C 776.907,630.051 775.574,628.885 774.5,627.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d433d\",\n    d: \"M 1214.5,628.5 C 1214.08,630.752 1212.75,632.252 1210.5,633C 1203.82,634.167 1197.16,635.334 1190.5,636.5C 1192.86,634.871 1195.52,633.705 1198.5,633C 1204.46,633.386 1209.79,631.886 1214.5,628.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#594a40\",\n    d: \"M 744.5,630.5 C 749.514,631.769 754.514,631.769 759.5,630.5C 759.286,632.144 759.62,633.644 760.5,635C 762.473,635.495 764.473,635.662 766.5,635.5C 762.421,635.791 758.754,637.291 755.5,640C 750.173,640.943 744.84,641.777 739.5,642.5C 738.791,643.404 737.791,643.737 736.5,643.5C 736.203,640.276 736.87,637.276 738.5,634.5C 737.675,633.614 736.675,633.281 735.5,633.5C 738.443,632.633 741.443,631.633 744.5,630.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 739.5,642.5 C 737.656,641.796 737.156,640.463 738,638.5C 739.167,636 741,634.167 743.5,633C 748.489,632.501 753.489,632.334 758.5,632.5C 758.822,634.722 758.155,636.556 756.5,638C 752.584,639.102 748.584,639.769 744.5,640C 742.685,640.757 741.019,641.59 739.5,642.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgGameBackground1920);\nexport default __webpack_public_path__ + \"static/media/GameBackground1920.e51d585f0e68a045eaa12fbea2e2237d.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgGameBackground2560(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"2496px\",\n    height: \"1117px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.786\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 1221.5,33.5 C 1230.8,32.6802 1239.8,33.8469 1248.5,37C 1254.03,41.5354 1259.2,46.3687 1264,51.5C 1273.2,45.2178 1283.04,44.0512 1293.5,48C 1298.95,51.7119 1302.28,56.8785 1303.5,63.5C 1307.11,65.2231 1310.28,67.5564 1313,70.5C 1314.66,73.2893 1314.83,76.1227 1313.5,79C 1316.52,80.1794 1319.52,81.5128 1322.5,83C 1323.34,84.0113 1323.67,85.1779 1323.5,86.5C 1331.69,87.0237 1335.69,91.357 1335.5,99.5C 1340.99,98.8096 1344.65,100.976 1346.5,106C 1346.17,106.5 1345.83,107 1345.5,107.5C 1277.51,105.588 1209.51,103.254 1141.5,100.5C 1143.49,98.5014 1145.83,97.0014 1148.5,96C 1154.83,94.3333 1161.17,92.6667 1167.5,91C 1169.46,90.0467 1171.12,88.7134 1172.5,87C 1174.95,86.7105 1177.29,86.0438 1179.5,85C 1183.02,81.9754 1186.69,79.1421 1190.5,76.5C 1182.03,67.3717 1183.37,59.8717 1194.5,54C 1197.06,52.9207 1199.73,52.4207 1202.5,52.5C 1202.06,49.1066 1202.9,46.1066 1205,43.5C 1209.92,39.0478 1215.42,35.7144 1221.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fcfcfc\",\n    d: \"M 1223.5,35.5 C 1238.93,33.4572 1250.6,38.9572 1258.5,52C 1260.94,53.3034 1263.44,54.47 1266,55.5C 1272.55,48.5022 1280.38,46.6689 1289.5,50C 1296.79,53.0854 1300.13,58.5854 1299.5,66.5C 1307.83,66.9893 1311.66,71.3226 1311,79.5C 1309.75,80.2106 1308.58,81.044 1307.5,82C 1311.5,82.8806 1315.5,83.714 1319.5,84.5C 1320.58,85.365 1320.75,86.365 1320,87.5C 1318.83,88.6667 1317.67,89.8333 1316.5,91C 1319.83,90.3333 1323.17,89.6667 1326.5,89C 1331.38,91.9182 1333.04,96.0848 1331.5,101.5C 1335.31,102.071 1338.98,102.904 1342.5,104C 1278.49,103 1214.49,101.333 1150.5,99C 1151.33,98.0853 1152.33,97.4186 1153.5,97C 1159.23,96.0765 1164.9,94.9098 1170.5,93.5C 1173.85,89.4834 1178.18,87.15 1183.5,86.5C 1187.27,80.3616 1192.6,78.0282 1199.5,79.5C 1200.59,82.6883 1202.43,85.355 1205,87.5C 1204.65,84.5963 1203.48,81.9296 1201.5,79.5C 1205.55,66.6363 1214.22,61.8029 1227.5,65C 1231.47,65.9643 1234.64,68.1309 1237,71.5C 1233.96,64.3187 1228.29,60.9854 1220,61.5C 1210.24,61.9412 1203.07,66.4412 1198.5,75C 1194.42,74.9479 1191.25,73.1146 1189,69.5C 1187.44,63.7992 1189.27,59.6326 1194.5,57C 1198.01,55.4383 1201.68,54.605 1205.5,54.5C 1205.03,48.5983 1207.37,44.0983 1212.5,41C 1216.02,38.6738 1219.68,36.8405 1223.5,35.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.875\n    },\n    fill: \"#060606\",\n    d: \"M 1723.5,54.5 C 1749.01,50.4325 1768.68,59.0991 1782.5,80.5C 1783.67,80.8333 1784.83,81.1667 1786,81.5C 1791.87,79.149 1797.71,76.649 1803.5,74C 1818.41,71.4157 1830.91,75.5824 1841,86.5C 1843.4,90.8764 1844.9,95.5431 1845.5,100.5C 1858.42,104.423 1864.09,113.09 1862.5,126.5C 1869.77,125.967 1875.11,128.801 1878.5,135C 1885.8,136.058 1890.97,139.891 1894,146.5C 1894.77,149.099 1894.6,151.599 1893.5,154C 1898.17,155.333 1902.83,156.667 1907.5,158C 1910.88,159.029 1912.04,161.196 1911,164.5C 1910.59,166.41 1909.43,167.41 1907.5,167.5C 1804.83,164.452 1702.17,161.119 1599.5,157.5C 1603.51,153.677 1608.17,150.844 1613.5,149C 1622.02,146.473 1630.69,144.64 1639.5,143.5C 1640.64,140.53 1642.64,138.364 1645.5,137C 1650.13,135.453 1654.79,134.12 1659.5,133C 1663.24,126.759 1668.57,122.592 1675.5,120.5C 1663.31,110.932 1662.65,100.766 1673.5,90C 1678.83,86.8319 1684.5,84.4986 1690.5,83C 1692.34,74.986 1696.68,68.6527 1703.5,64C 1709.87,59.9775 1716.54,56.8108 1723.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 1727.5,57.5 C 1748.89,55.3647 1765.56,63.198 1777.5,81C 1781.49,84.3309 1785.82,87.1642 1790.5,89.5C 1797.7,78.7449 1807.7,74.9116 1820.5,78C 1834.26,81.582 1840.93,90.4154 1840.5,104.5C 1849.82,105.313 1855.82,110.146 1858.5,119C 1857.75,122.66 1856.09,125.826 1853.5,128.5C 1859.48,129.356 1865.31,130.689 1871,132.5C 1871.45,137.427 1869.28,140.927 1864.5,143C 1869.28,141.39 1874.28,140.223 1879.5,139.5C 1881.63,139.515 1883.63,140.015 1885.5,141C 1886.97,146.734 1888.14,152.567 1889,158.5C 1893.75,159.305 1898.58,159.805 1903.5,160C 1906.21,162.423 1905.54,163.59 1901.5,163.5C 1806.16,160.419 1710.82,157.086 1615.5,153.5C 1616.67,152.416 1618,151.583 1619.5,151C 1627.37,148.98 1635.37,147.813 1643.5,147.5C 1643.79,143.039 1646.12,140.205 1650.5,139C 1655.19,138.092 1659.86,137.092 1664.5,136C 1666.33,133.5 1668.17,131 1670,128.5C 1678.52,121.416 1686.19,122.416 1693,131.5C 1691.56,112.755 1700.4,102.755 1719.5,101.5C 1726.56,101.809 1733.23,103.309 1739.5,106C 1727.73,95.1735 1715.06,93.8402 1701.5,102C 1696.59,106.244 1692.42,111.077 1689,116.5C 1685.8,120.187 1682.3,120.353 1678.5,117C 1668.77,109.617 1668.11,101.617 1676.5,93C 1682.94,88.9623 1689.94,86.2956 1697.5,85C 1697.73,82.631 1697.89,80.131 1698,77.5C 1700.08,73.421 1702.91,69.921 1706.5,67C 1713.1,62.698 1720.1,59.5314 1727.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.871\n    },\n    fill: \"#060606\",\n    d: \"M 764.5,76.5 C 780.56,74.5594 795.227,78.0594 808.5,87C 813.506,91.5264 817.673,96.6931 821,102.5C 821.804,103.804 822.971,104.471 824.5,104.5C 829.825,102.681 834.825,100.181 839.5,97C 855.273,93.1502 868.773,96.9836 880,108.5C 882.549,112.815 883.882,117.481 884,122.5C 894.87,125.698 901.036,132.864 902.5,144C 901.852,145.44 901.519,146.94 901.5,148.5C 909.166,148.212 914.833,151.379 918.5,158C 929.257,159.757 934.59,166.091 934.5,177C 940.035,177.845 945.202,179.678 950,182.5C 950.896,185.025 950.396,187.192 948.5,189C 845.149,186.78 741.816,183.78 638.5,180C 642.703,175.729 647.703,172.729 653.5,171C 661.76,168.761 670.093,166.927 678.5,165.5C 683.262,159.4 689.595,156.233 697.5,156C 701.864,149.982 707.531,145.649 714.5,143C 700.762,131.003 701.428,120.003 716.5,110C 721.02,107.993 725.687,106.493 730.5,105.5C 731.076,98.1907 734.409,92.3574 740.5,88C 747.71,82.3293 755.71,78.496 764.5,76.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 763.5,80.5 C 770.841,80.3337 778.174,80.5003 785.5,81C 793.257,82.212 799.924,85.5454 805.5,91C 811.832,99.8356 819.832,106.669 829.5,111.5C 840.295,98.4474 853.295,95.9474 868.5,104C 876.694,109.221 880.528,116.721 880,126.5C 889.149,127.473 894.983,132.306 897.5,141C 897.147,145.012 895.48,148.345 892.5,151C 896.848,151.573 901.181,152.24 905.5,153C 909.426,153.58 910.926,155.747 910,159.5C 907.795,162.04 905.295,164.207 902.5,166C 907.058,164.708 911.724,163.375 916.5,162C 920.421,161.041 923.588,162.208 926,165.5C 927.036,171.002 927.87,176.502 928.5,182C 932.784,181.543 937.118,181.543 941.5,182C 942.91,182.368 943.91,183.201 944.5,184.5C 851.513,182.73 758.513,180.23 665.5,177C 661.833,176.667 658.167,176.333 654.5,176C 656.001,174.748 657.668,173.748 659.5,173C 667.039,171.023 674.706,170.189 682.5,170.5C 682.642,167.383 683.976,164.883 686.5,163C 691.898,160.567 697.565,159.234 703.5,159C 711.87,142.646 721.703,141.479 733,155.5C 729.334,141.662 734.168,131.829 747.5,126C 751.061,124.693 754.727,123.86 758.5,123.5C 765.143,124.246 771.477,125.746 777.5,128C 758.644,113.174 742.81,116.007 730,136.5C 724.958,143.006 719.791,143.006 714.5,136.5C 707.317,128.61 707.984,121.443 716.5,115C 723.243,110.811 730.576,108.144 738.5,107C 735.725,102.518 736.225,98.351 740,94.5C 746.888,88.1438 754.721,83.4771 763.5,80.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.908\n    },\n    fill: \"#070707\",\n    d: \"M 1601.5,283.5 C 1590.16,274.818 1579.16,265.651 1568.5,256C 1556.93,254.367 1546.27,250.367 1536.5,244C 1529.93,237.694 1525.26,230.194 1522.5,221.5C 1516.24,224.929 1511.07,229.596 1507,235.5C 1505.79,240.051 1505.12,244.718 1505,249.5C 1488.6,260.788 1478.93,256.788 1476,237.5C 1475.67,229.5 1475.33,221.5 1475,213.5C 1471.22,209.285 1466.72,208.452 1461.5,211C 1450.72,214.285 1443.39,221.119 1439.5,231.5C 1439.21,223.912 1442.21,218.079 1448.5,214C 1456.84,208.883 1465.84,206.883 1475.5,208C 1477.49,209.319 1478.65,211.152 1479,213.5C 1479.5,223.627 1480.83,233.627 1483,243.5C 1483.72,245.949 1484.72,248.283 1486,250.5C 1486.96,251.894 1488.29,252.561 1490,252.5C 1494.15,251.561 1498.15,250.228 1502,248.5C 1503.07,237.262 1507.24,227.429 1514.5,219C 1516.68,217.16 1519.18,215.993 1522,215.5C 1524.15,215.643 1525.82,216.643 1527,218.5C 1535.82,238.013 1550.99,248.846 1572.5,251C 1576.02,254.025 1579.69,256.858 1583.5,259.5C 1584.64,257.579 1584.81,255.579 1584,253.5C 1581.8,247.909 1579.8,242.242 1578,236.5C 1563.84,231.008 1554.51,221.008 1550,206.5C 1546.73,190.399 1542.06,174.733 1536,159.5C 1530.72,148.884 1523.88,139.384 1515.5,131C 1512.5,129 1509.5,129 1506.5,131C 1500.71,140.083 1495.04,149.25 1489.5,158.5C 1485.18,160.662 1480.84,162.829 1476.5,165C 1470.77,169.517 1465.11,174.017 1459.5,178.5C 1462.79,173.427 1466.46,168.594 1470.5,164C 1475.39,160.109 1480.56,156.609 1486,153.5C 1490.66,143.016 1497.16,133.849 1505.5,126C 1509.83,124 1514.17,124 1518.5,126C 1528.08,135.314 1535.58,146.148 1541,158.5C 1546.74,172.734 1551.08,187.401 1554,202.5C 1558.88,217.715 1568.88,228.048 1584,233.5C 1589.89,244.044 1592.06,255.211 1590.5,267C 1595.65,271.146 1599.65,276.146 1602.5,282C 1602.43,282.765 1602.1,283.265 1601.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.997\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 1439.5,231.5 C 1438.61,233.291 1437.61,235.124 1436.5,237C 1433.23,237.995 1429.9,238.828 1426.5,239.5C 1424.02,242.484 1421.35,245.318 1418.5,248C 1411.33,252.419 1404.33,257.085 1397.5,262C 1381.83,261.309 1366.16,260.142 1350.5,258.5C 1347.17,259.224 1343.84,259.39 1340.5,259C 1341.17,258 1341.83,257 1342.5,256C 1346.46,254.402 1350.46,252.902 1354.5,251.5C 1355.48,239.841 1361.48,236.008 1372.5,240C 1380.86,242.715 1389.36,244.882 1398,246.5C 1408.37,245.151 1413.03,239.151 1412,228.5C 1419.74,218.939 1427.24,209.272 1434.5,199.5C 1442.52,192.154 1450.85,185.154 1459.5,178.5C 1465.11,174.017 1470.77,169.517 1476.5,165C 1480.84,162.829 1485.18,160.662 1489.5,158.5C 1495.04,149.25 1500.71,140.083 1506.5,131C 1509.5,129 1512.5,129 1515.5,131C 1523.88,139.384 1530.72,148.884 1536,159.5C 1542.06,174.733 1546.73,190.399 1550,206.5C 1554.51,221.008 1563.84,231.008 1578,236.5C 1579.8,242.242 1581.8,247.909 1584,253.5C 1584.81,255.579 1584.64,257.579 1583.5,259.5C 1579.69,256.858 1576.02,254.025 1572.5,251C 1550.99,248.846 1535.82,238.013 1527,218.5C 1525.82,216.643 1524.15,215.643 1522,215.5C 1519.18,215.993 1516.68,217.16 1514.5,219C 1507.24,227.429 1503.07,237.262 1502,248.5C 1498.15,250.228 1494.15,251.561 1490,252.5C 1488.29,252.561 1486.96,251.894 1486,250.5C 1484.72,248.283 1483.72,245.949 1483,243.5C 1480.83,233.627 1479.5,223.627 1479,213.5C 1478.65,211.152 1477.49,209.319 1475.5,208C 1465.84,206.883 1456.84,208.883 1448.5,214C 1442.21,218.079 1439.21,223.912 1439.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.263\n    },\n    fill: \"#fefefe\",\n    d: \"M 1175.5,148.5 C 1176.38,148.369 1177.04,148.702 1177.5,149.5C 1173.44,156.136 1172.77,155.803 1175.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.859\n    },\n    fill: \"#070608\",\n    d: \"M 1434.5,199.5 C 1427.24,209.272 1419.74,218.939 1412,228.5C 1413.03,239.151 1408.37,245.151 1398,246.5C 1389.36,244.882 1380.86,242.715 1372.5,240C 1361.48,236.008 1355.48,239.841 1354.5,251.5C 1350.46,252.902 1346.46,254.402 1342.5,256C 1341.83,257 1341.17,258 1340.5,259C 1343.84,259.39 1347.17,259.224 1350.5,258.5C 1366.16,260.142 1381.83,261.309 1397.5,262C 1404.33,257.085 1411.33,252.419 1418.5,248C 1421.35,245.318 1424.02,242.484 1426.5,239.5C 1429.9,238.828 1433.23,237.995 1436.5,237C 1437.61,235.124 1438.61,233.291 1439.5,231.5C 1439.5,233.833 1439.5,236.167 1439.5,238.5C 1434.97,239.763 1430.63,241.597 1426.5,244C 1417.31,252.198 1407.31,259.198 1396.5,265C 1389.21,267.38 1382.21,266.714 1375.5,263C 1366.83,262.333 1358.17,262.333 1349.5,263C 1342.9,264.277 1337.23,267.277 1332.5,272C 1327.87,277.635 1322.87,282.968 1317.5,288C 1328.02,297.354 1338.69,306.52 1349.5,315.5C 1354.46,310.357 1360.12,306.19 1366.5,303C 1377.44,298.533 1387.77,293.033 1397.5,286.5C 1397.83,286.833 1398.17,287.167 1398.5,287.5C 1390.05,297.229 1379.38,303.063 1366.5,305C 1361.29,309.717 1355.95,314.217 1350.5,318.5C 1352.53,321.221 1354.03,324.221 1355,327.5C 1356.03,335.005 1357.69,342.338 1360,349.5C 1362.26,352.433 1365.1,354.6 1368.5,356C 1373.05,356.763 1377.38,357.929 1381.5,359.5C 1381.05,360.458 1380.38,361.292 1379.5,362C 1376.52,362.498 1373.52,362.665 1370.5,362.5C 1363.86,360.929 1358.7,357.263 1355,351.5C 1352.53,342.318 1350.87,332.985 1350,323.5C 1348.32,318.822 1345.49,314.989 1341.5,312C 1328.83,304.01 1317.33,294.51 1307,283.5C 1306,281.833 1305,280.167 1304,278.5C 1299.18,281.596 1296.18,280.262 1295,274.5C 1293.79,272.951 1292.29,271.785 1290.5,271C 1281.55,268.757 1272.55,266.757 1263.5,265C 1259.39,263.221 1256.22,260.388 1254,256.5C 1254.01,264.005 1254.51,271.505 1255.5,279C 1255.17,280.5 1254.83,282 1254.5,283.5C 1240.94,288.114 1229.6,295.948 1220.5,307C 1218.83,307.667 1217.17,307.667 1215.5,307C 1209,301.5 1204.5,294.667 1202,286.5C 1201.28,285.941 1200.44,285.608 1199.5,285.5C 1193.16,287.169 1187.16,289.669 1181.5,293C 1173.6,298.416 1165.6,303.583 1157.5,308.5C 1162.3,302.865 1167.64,297.698 1173.5,293C 1185.1,286.953 1196.6,280.787 1208,274.5C 1210.99,275.518 1211.33,277.184 1209,279.5C 1207.45,288.078 1210.12,295.078 1217,300.5C 1225.76,293.864 1235.26,288.364 1245.5,284C 1250.79,279.559 1251.95,274.059 1249,267.5C 1242.77,258.865 1243.77,251.198 1252,244.5C 1254.28,245.776 1256.28,247.443 1258,249.5C 1260.04,253.084 1262.21,256.584 1264.5,260C 1274.61,262.422 1284.78,264.589 1295,266.5C 1295.83,266.167 1296.67,265.833 1297.5,265.5C 1296.69,263.528 1295.36,262.028 1293.5,261C 1275.18,254.006 1264.01,240.84 1260,221.5C 1258.34,209.86 1257,198.194 1256,186.5C 1253.04,182.534 1249.7,178.867 1246,175.5C 1244.73,171.131 1242.57,167.297 1239.5,164C 1234.88,162.703 1231.05,163.87 1228,167.5C 1219.71,177.752 1214.38,189.418 1212,202.5C 1208.78,208.777 1204.28,213.943 1198.5,218C 1192.59,222.209 1186.42,226.042 1180,229.5C 1179.29,241.357 1175.96,252.357 1170,262.5C 1160.8,270.849 1150.96,278.349 1140.5,285C 1141.58,289.139 1141.42,293.306 1140,297.5C 1137.19,304.446 1133.86,311.112 1130,317.5C 1129.51,319.134 1129.34,320.801 1129.5,322.5C 1136.62,320.938 1143.29,318.272 1149.5,314.5C 1145.8,319.195 1141.13,322.695 1135.5,325C 1126.9,327.815 1118.24,330.315 1109.5,332.5C 1108.83,332.5 1108.5,332.833 1108.5,333.5C 1107.5,333.5 1106.5,333.5 1105.5,333.5C 1104.83,333.5 1104.5,333.833 1104.5,334.5C 1100.33,334.877 1096.33,335.877 1092.5,337.5C 1091.83,337.5 1091.5,337.833 1091.5,338.5C 1091.17,338.5 1090.83,338.5 1090.5,338.5C 1089.51,338.328 1088.84,338.662 1088.5,339.5C 1087.51,339.328 1086.84,339.662 1086.5,340.5C 1085.51,340.328 1084.84,340.662 1084.5,341.5C 1083.83,341.5 1083.5,341.833 1083.5,342.5C 1083.17,342.5 1082.83,342.5 1082.5,342.5C 1081.83,342.5 1081.5,342.833 1081.5,343.5C 1080.83,343.5 1080.5,343.833 1080.5,344.5C 1078.27,345.228 1076.43,346.561 1075,348.5C 1072.88,352.344 1071.05,356.344 1069.5,360.5C 1068.15,361.524 1066.81,362.524 1065.5,363.5C 1064.83,363.5 1064.5,363.833 1064.5,364.5C 1063.51,364.328 1062.84,364.662 1062.5,365.5C 1061.83,365.5 1061.5,365.833 1061.5,366.5C 1060.51,366.328 1059.84,366.662 1059.5,367.5C 1058.83,367.5 1058.5,367.833 1058.5,368.5C 1058.17,368.5 1057.83,368.5 1057.5,368.5C 1056.83,368.5 1056.5,368.833 1056.5,369.5C 1050.86,372.989 1045.19,376.489 1039.5,380C 1032.74,382.685 1025.74,384.351 1018.5,385C 1017.44,389.504 1015.61,393.671 1013,397.5C 1009.5,401 1006,404.5 1002.5,408C 993.215,414.229 984.382,421.062 976,428.5C 975.581,429.672 974.915,430.672 974,431.5C 975.245,449.781 969.079,464.948 955.5,477C 947.34,482.339 940.007,488.505 933.5,495.5C 930.633,500.437 928.966,505.77 928.5,511.5C 920.853,510.351 914.853,506.685 910.5,500.5C 912.296,498.1 914.63,496.433 917.5,495.5C 920.772,494.242 924.106,493.075 927.5,492C 928.942,491.623 929.942,490.79 930.5,489.5C 931.458,489.047 932.292,488.381 933,487.5C 934,488.833 935,490.167 936,491.5C 939.131,487.367 942.631,483.534 946.5,480C 939.531,481.323 932.531,482.823 925.5,484.5C 923.973,484.427 922.973,485.094 922.5,486.5C 758.602,528.391 594.935,571.058 431.5,614.5C 431.427,612.973 432.094,611.973 433.5,611.5C 605.465,566.342 777.465,521.175 949.5,476C 958.452,469.273 964.285,460.44 967,449.5C 967.971,441.741 969.305,434.074 971,426.5C 983.185,416.738 995.185,406.738 1007,396.5C 1010.62,392.133 1012.79,387.133 1013.5,381.5C 1020.37,380.949 1027.04,379.449 1033.5,377C 1043.63,371.032 1053.63,364.865 1063.5,358.5C 1069.42,343.425 1080.42,334.258 1096.5,331C 1106.23,329.022 1115.89,326.855 1125.5,324.5C 1126.51,320.129 1127.68,315.796 1129,311.5C 1132.14,306.034 1134.81,300.367 1137,294.5C 1137.43,290.452 1137.43,286.452 1137,282.5C 1147.24,275.595 1156.91,267.928 1166,259.5C 1167.92,256.661 1169.59,253.661 1171,250.5C 1173.26,242.546 1175.26,234.546 1177,226.5C 1186.34,221.333 1195.34,215.667 1204,209.5C 1209.85,197.62 1215.52,185.62 1221,173.5C 1225.17,164 1232.34,160.166 1242.5,162C 1248.29,170.121 1254.45,177.954 1261,185.5C 1262.11,198.817 1263.11,212.15 1264,225.5C 1266.07,235.136 1271.23,242.636 1279.5,248C 1286.67,251.721 1294,255.054 1301.5,258C 1303.05,259.214 1304.22,260.714 1305,262.5C 1305.89,268.4 1307.56,274.067 1310,279.5C 1313.23,282.13 1316.39,281.964 1319.5,279C 1327.08,273.01 1332.58,265.51 1336,256.5C 1345.12,251.046 1352.62,243.88 1358.5,235C 1364.59,234.616 1370.59,235.282 1376.5,237C 1383.05,239.182 1389.55,241.349 1396,243.5C 1405.6,242.927 1409.43,238.094 1407.5,229C 1416,218.671 1425,208.838 1434.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 1157.5,308.5 C 1155.09,310.916 1152.43,312.916 1149.5,314.5C 1143.29,318.272 1136.62,320.938 1129.5,322.5C 1129.34,320.801 1129.51,319.134 1130,317.5C 1133.86,311.112 1137.19,304.446 1140,297.5C 1141.42,293.306 1141.58,289.139 1140.5,285C 1150.96,278.349 1160.8,270.849 1170,262.5C 1175.96,252.357 1179.29,241.357 1180,229.5C 1186.42,226.042 1192.59,222.209 1198.5,218C 1204.28,213.943 1208.78,208.777 1212,202.5C 1214.38,189.418 1219.71,177.752 1228,167.5C 1231.05,163.87 1234.88,162.703 1239.5,164C 1242.57,167.297 1244.73,171.131 1246,175.5C 1249.7,178.867 1253.04,182.534 1256,186.5C 1257,198.194 1258.34,209.86 1260,221.5C 1264.01,240.84 1275.18,254.006 1293.5,261C 1295.36,262.028 1296.69,263.528 1297.5,265.5C 1296.67,265.833 1295.83,266.167 1295,266.5C 1284.78,264.589 1274.61,262.422 1264.5,260C 1262.21,256.584 1260.04,253.084 1258,249.5C 1256.28,247.443 1254.28,245.776 1252,244.5C 1243.77,251.198 1242.77,258.865 1249,267.5C 1251.95,274.059 1250.79,279.559 1245.5,284C 1235.26,288.364 1225.76,293.864 1217,300.5C 1210.12,295.078 1207.45,288.078 1209,279.5C 1211.33,277.184 1210.99,275.518 1208,274.5C 1196.6,280.787 1185.1,286.953 1173.5,293C 1167.64,297.698 1162.3,302.865 1157.5,308.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.982\n    },\n    fill: \"#060706\",\n    d: \"M 2455.5,781.5 C 2434.81,781.16 2414.14,781.66 2393.5,783C 2286.04,796.08 2178.54,808.914 2071,821.5C 2069.56,821.441 2068.23,821.108 2067,820.5C 2060.61,806.047 2053.94,791.713 2047,777.5C 2037.48,776.961 2027.98,776.127 2018.5,775C 2012.72,770.603 2010.39,764.77 2011.5,757.5C 2011.69,755.436 2012.19,753.436 2013,751.5C 2016,746.5 2019,741.5 2022,736.5C 2022.81,734.577 2023.31,732.577 2023.5,730.5C 2021.85,723.525 2019.35,716.858 2016,710.5C 2015.44,706.814 2014.77,703.147 2014,699.5C 2011.08,703.092 2007.58,705.925 2003.5,708C 1996,710.416 1988.34,712.083 1980.5,713C 1966.5,713.667 1952.5,713.667 1938.5,713C 1922.86,710.321 1907.19,709.987 1891.5,712C 1879.68,717.745 1868.01,723.745 1856.5,730C 1842.37,732.359 1828.37,735.359 1814.5,739C 1800.48,744.175 1786.81,750.175 1773.5,757C 1769.08,757.228 1764.75,757.728 1760.5,758.5C 1760.17,758.5 1759.83,758.5 1759.5,758.5C 1761.25,756.777 1763.25,755.277 1765.5,754C 1779.28,748.275 1792.95,742.275 1806.5,736C 1820.6,732.133 1834.6,727.966 1848.5,723.5C 1831.2,720.076 1813.87,716.743 1796.5,713.5C 1789.88,714.661 1783.21,715.328 1776.5,715.5C 1774.7,714.838 1772.7,714.505 1770.5,714.5C 1757.67,715.332 1745,716.332 1732.5,717.5C 1717.16,716.476 1701.83,715.309 1686.5,714C 1674.37,708.6 1662.04,703.766 1649.5,699.5C 1631.54,704.766 1613.54,709.932 1595.5,715C 1552.31,724.239 1508.97,732.573 1465.5,740C 1466.38,740.708 1467.05,741.542 1467.5,742.5C 1466.83,742.5 1466.5,742.833 1466.5,743.5C 1455.48,733.654 1443.15,725.821 1429.5,720C 1417.55,721.481 1405.88,724.315 1394.5,728.5C 1394.17,727.833 1393.83,727.167 1393.5,726.5C 1401.63,723.177 1409.97,720.344 1418.5,718C 1427.78,716.487 1436.45,718.154 1444.5,723C 1451.29,729.562 1459.29,733.729 1468.5,735.5C 1516.42,725.03 1564.42,714.863 1612.5,705C 1620.88,702.822 1629.21,700.489 1637.5,698C 1622.52,696.269 1607.52,694.602 1592.5,693C 1578.35,689.47 1564.02,687.303 1549.5,686.5C 1519.35,688.57 1489.19,690.237 1459,691.5C 1445.88,691.893 1432.88,690.893 1420,688.5C 1408.8,694.016 1397.3,698.849 1385.5,703C 1377.27,705.179 1368.94,706.846 1360.5,708C 1326.4,707.983 1292.4,709.817 1258.5,713.5C 1240.64,711.748 1222.8,709.748 1205,707.5C 1182.96,713.386 1160.79,718.719 1138.5,723.5C 1137.51,723.672 1136.84,723.338 1136.5,722.5C 1139.28,721.067 1142.28,719.9 1145.5,719C 1075.51,709.724 1006.84,694.558 939.5,673.5C 916.027,682.617 891.694,687.784 866.5,689C 829.833,689.333 793.167,689.667 756.5,690C 702.511,694.345 648.511,698.512 594.5,702.5C 580.833,701.786 567.166,701.119 553.5,700.5C 554.209,699.596 555.209,699.263 556.5,699.5C 571.836,699.136 587.169,698.636 602.5,698C 671.225,693.137 739.892,687.637 808.5,681.5C 771.521,677.456 734.521,673.623 697.5,670C 667.106,658.981 636.106,649.981 604.5,643C 585.875,644.323 567.208,644.656 548.5,644C 537.801,642.605 527.134,641.105 516.5,639.5C 517.622,638.844 518.955,638.511 520.5,638.5C 547.527,643.916 574.527,643.749 601.5,638C 618.167,634.667 634.833,631.333 651.5,628C 657.407,625.097 663.073,621.764 668.5,618C 671.14,613.366 674.473,609.366 678.5,606C 682.253,604.011 686.253,603.178 690.5,603.5C 680.286,607.201 674.286,614.535 672.5,625.5C 681.571,627.023 690.237,629.857 698.5,634C 701.482,634.498 704.482,634.665 707.5,634.5C 707.464,628.056 705.464,622.389 701.5,617.5C 700.672,621.796 700.172,626.129 700,630.5C 698.123,621.962 693.289,615.796 685.5,612C 684.304,611.346 684.304,610.846 685.5,610.5C 703.731,615.094 722.064,619.261 740.5,623C 745.833,626.333 751.167,629.667 756.5,633C 758.5,633.667 760.5,633.667 762.5,633C 764.017,631.315 765.684,629.815 767.5,628.5C 768.192,629.025 768.692,629.692 769,630.5C 769.667,633.833 769.667,637.167 769,640.5C 767.426,639.016 766.093,637.349 765,635.5C 764.381,638.032 763.381,640.365 762,642.5C 760.074,635.087 756.908,634.587 752.5,641C 758.628,645.921 764.961,646.421 771.5,642.5C 772.851,640.546 773.518,638.379 773.5,636C 772.756,632.803 772.256,629.636 772,626.5C 775.478,630.09 777.311,634.423 777.5,639.5C 782.706,639.188 787.706,638.022 792.5,636C 783.952,628.554 774.285,622.888 763.5,619C 745.05,610.553 725.716,606.553 705.5,607C 701.616,606.136 697.949,604.97 694.5,603.5C 715.848,602.225 736.514,605.391 756.5,613C 784.327,626.168 813.661,633.501 844.5,635C 872.97,637.615 901.304,636.615 929.5,632C 945.204,627.4 958.371,618.9 969,606.5C 969.667,607.167 969.667,607.833 969,608.5C 962.028,615.81 954.195,621.977 945.5,627C 946,627.167 946.5,627.333 947,627.5C 962.907,620.964 979.074,615.131 995.5,610C 1013.03,605.854 1030.7,602.688 1048.5,600.5C 1050.28,601.72 1051.95,601.72 1053.5,600.5C 1058.83,600.5 1064.17,600.5 1069.5,600.5C 1069.46,597.575 1070.29,594.909 1072,592.5C 1072.34,594.818 1071.84,596.985 1070.5,599C 1074.82,599.499 1079.15,599.666 1083.5,599.5C 1083.83,596.689 1084.66,594.022 1086,591.5C 1085.92,594.119 1085.75,596.786 1085.5,599.5C 1099.08,599.92 1112.58,599.92 1126,599.5C 1127.01,600.658 1128.34,601.325 1130,601.5C 1140.5,603.39 1151,604.89 1161.5,606C 1168.62,593.505 1169.29,580.672 1163.5,567.5C 1170.67,566.467 1177.67,564.8 1184.5,562.5C 1185.49,562.328 1186.16,562.662 1186.5,563.5C 1180.09,566.102 1173.43,567.768 1166.5,568.5C 1172.49,581.693 1171.49,594.359 1163.5,606.5C 1215.86,623.217 1269.52,630.884 1324.5,629.5C 1328.39,607.419 1341.39,597.253 1363.5,599C 1369.87,600.038 1375.87,601.871 1381.5,604.5C 1371.58,602.671 1361.58,602.171 1351.5,603C 1338.53,606.981 1332.2,615.648 1332.5,629C 1345.82,630.664 1359.15,632.164 1372.5,633.5C 1385.91,631.53 1398.91,628.03 1411.5,623C 1415.6,619.351 1415.27,616.018 1410.5,613C 1407.11,611.38 1403.77,609.88 1400.5,608.5C 1416.63,610.417 1431.96,607.917 1446.5,601C 1445.96,600.283 1445.29,599.783 1444.5,599.5C 1444.5,598.833 1444.83,598.5 1445.5,598.5C 1447.04,598.703 1448.38,599.37 1449.5,600.5C 1468.94,591.917 1487.94,582.584 1506.5,572.5C 1496.28,580.195 1485.62,587.362 1474.5,594C 1455.13,602.009 1435.8,610.009 1416.5,618C 1418.33,619.113 1419.16,620.613 1419,622.5C 1409.55,631.307 1398.38,635.14 1385.5,634C 1378.62,636.908 1371.46,638.408 1364,638.5C 1353.9,636.747 1343.73,635.247 1333.5,634C 1329.17,633.333 1324.83,633.333 1320.5,634C 1319.48,635.049 1319.32,636.216 1320,637.5C 1323.4,640.393 1326.23,643.726 1328.5,647.5C 1317.95,651.606 1307.28,655.44 1296.5,659C 1313.66,662.996 1328.16,671.496 1340,684.5C 1343.69,690.403 1348.19,695.569 1353.5,700C 1361.33,702.91 1369.33,703.243 1377.5,701C 1393.56,694.47 1409.23,687.137 1424.5,679C 1444.1,662.734 1462.43,645.067 1479.5,626C 1500.88,613.144 1523.21,602.144 1546.5,593C 1551.12,591.935 1555.79,591.101 1560.5,590.5C 1579.1,592.969 1597.76,594.136 1616.5,594C 1621.63,588.939 1627.29,584.606 1633.5,581C 1650.83,570.667 1668.17,560.333 1685.5,550C 1691.19,546.487 1696.52,542.487 1701.5,538C 1682.02,534.598 1679.35,525.932 1693.5,512C 1707.35,504.97 1722.02,502.637 1737.5,505C 1743.26,506.02 1748.92,507.02 1754.5,508C 1746.14,502.655 1737.14,498.655 1727.5,496C 1716.84,494.419 1706.17,493.085 1695.5,492C 1693.1,487.924 1689.6,485.424 1685,484.5C 1672.73,487.276 1660.56,490.443 1648.5,494C 1653.33,497.5 1658.17,501 1663,504.5C 1662.57,508.452 1662.57,512.452 1663,516.5C 1667.99,522.1 1668.99,528.433 1666,535.5C 1665,541.159 1661.84,544.993 1656.5,547C 1651.5,547.667 1646.5,547.667 1641.5,547C 1629.71,543.737 1618.04,540.07 1606.5,536C 1594.83,531.875 1582.83,530.208 1570.5,531C 1566.33,532.588 1562.33,534.421 1558.5,536.5C 1560.16,534.678 1561.16,532.511 1561.5,530C 1560.35,526.876 1559.35,523.71 1558.5,520.5C 1559.43,516.626 1560.93,512.96 1563,509.5C 1563.72,505.955 1563.55,502.455 1562.5,499C 1563.49,496.013 1565.49,494.013 1568.5,493C 1581.86,489.882 1595.19,486.549 1608.5,483C 1621.81,480.994 1633.97,483.828 1645,491.5C 1657.47,485.592 1670.64,482.925 1684.5,483.5C 1685.12,463.388 1695.12,450.888 1714.5,446C 1725.62,445.602 1736.62,445.436 1747.5,445.5C 1747.83,445.5 1748.17,445.5 1748.5,445.5C 1748.62,446.586 1749.29,447.253 1750.5,447.5C 1757.1,448.731 1763.43,450.398 1769.5,452.5C 1754.98,451.447 1740.48,450.114 1726,448.5C 1718.6,449.854 1711.44,452.021 1704.5,455C 1700.7,461.445 1697.53,468.278 1695,475.5C 1693.6,479.072 1693.26,482.739 1694,486.5C 1695.49,488.004 1697.32,488.837 1699.5,489C 1710.67,488.97 1721.67,490.304 1732.5,493C 1742.71,497.941 1753.05,502.608 1763.5,507C 1771.11,508.262 1778.78,508.762 1786.5,508.5C 1784.97,502.421 1783.97,496.254 1783.5,490C 1784.36,483.455 1785.19,476.955 1786,470.5C 1783.76,466.252 1780.76,462.586 1777,459.5C 1776.19,457.564 1775.69,455.564 1775.5,453.5C 1775,447.439 1776,441.773 1778.5,436.5C 1775.8,447.556 1778.47,457.056 1786.5,465C 1789.62,466.893 1792.95,468.226 1796.5,469C 1803.59,469.48 1810.59,468.813 1817.5,467C 1832.97,461.758 1848.31,456.258 1863.5,450.5C 1863.33,447.15 1863.5,443.817 1864,440.5C 1865.82,436.676 1867.65,432.843 1869.5,429C 1869.18,427.347 1868.18,426.347 1866.5,426C 1849.97,422.355 1833.3,419.355 1816.5,417C 1809.81,416.335 1803.14,416.502 1796.5,417.5C 1799.45,415.539 1802.78,414.373 1806.5,414C 1811,413.833 1815.5,413.667 1820,413.5C 1834.54,414.184 1849.04,415.017 1863.5,416C 1849.84,404.188 1843.17,389.355 1843.5,371.5C 1844.68,390.021 1852.34,405.188 1866.5,417C 1887.65,419.443 1908.65,418.443 1929.5,414C 1936.88,411.985 1943.72,408.818 1950,404.5C 1948.96,400.828 1948.13,396.995 1947.5,393C 1947.83,391.833 1948.17,390.667 1948.5,389.5C 1949.22,393.532 1950.06,397.532 1951,401.5C 1951.56,402.022 1952.23,402.355 1953,402.5C 1957.41,400.047 1961.91,397.713 1966.5,395.5C 1967.32,392.893 1967.82,390.226 1968,387.5C 1968.5,389.473 1968.66,391.473 1968.5,393.5C 1981.24,388.978 1994.24,385.144 2007.5,382C 2006.02,381.338 2004.68,380.504 2003.5,379.5C 2003.5,378.833 2003.83,378.5 2004.5,378.5C 2006.75,379.455 2009.08,380.122 2011.5,380.5C 2014.61,317.514 2017.11,254.514 2019,191.5C 2016.31,190.117 2013.47,189.617 2010.5,190C 1974.25,203.805 1937.91,217.305 1901.5,230.5C 1898.95,229.35 1896.62,229.684 1894.5,231.5C 1665.21,290.781 1436.04,350.781 1207,411.5C 1206.24,411.43 1205.74,411.097 1205.5,410.5C 1233.11,402.63 1260.78,394.963 1288.5,387.5C 1289.17,387.5 1289.5,387.167 1289.5,386.5C 1290.5,386.5 1291.5,386.5 1292.5,386.5C 1293.17,386.5 1293.5,386.167 1293.5,385.5C 1294.17,385.5 1294.83,385.5 1295.5,385.5C 1296.49,385.672 1297.16,385.338 1297.5,384.5C 1298.24,384.631 1298.91,384.464 1299.5,384C 1286.36,374.226 1277.86,361.392 1274,345.5C 1273.17,340.136 1273.34,334.802 1274.5,329.5C 1275.97,330.381 1276.8,331.714 1277,333.5C 1277.56,342.065 1279.22,350.398 1282,358.5C 1288.32,367.313 1295.15,375.647 1302.5,383.5C 1303.49,383.672 1304.16,383.338 1304.5,382.5C 1304.83,382.5 1305.17,382.5 1305.5,382.5C 1306.79,382.737 1307.79,382.404 1308.5,381.5C 1308.83,381.5 1309.17,381.5 1309.5,381.5C 1310.79,381.737 1311.79,381.404 1312.5,380.5C 1313.17,380.5 1313.5,380.167 1313.5,379.5C 1309.86,376.694 1306.7,373.361 1304,369.5C 1302.13,367.431 1301.13,365.098 1301,362.5C 1307.72,366.721 1313.22,372.054 1317.5,378.5C 1317.74,379.097 1318.24,379.43 1319,379.5C 1517.77,327.099 1716.6,274.933 1915.5,223C 1948,210.833 1980.5,198.667 2013,186.5C 2015.77,187.536 2018.61,188.369 2021.5,189C 2022.41,190.699 2022.74,192.533 2022.5,194.5C 2023.5,194.5 2024.5,194.5 2025.5,194.5C 2022.41,256.161 2019.41,317.828 2016.5,379.5C 2025.49,378.002 2034.49,376.502 2043.5,375C 2048.49,366.867 2054.32,359.367 2061,352.5C 2073.93,338.564 2087.76,325.731 2102.5,314C 2106.27,311.781 2110.27,310.115 2114.5,309C 2157.27,308.629 2198.94,315.296 2239.5,329C 2253.49,333.738 2265.99,340.904 2277,350.5C 2279.27,354.93 2279.94,359.597 2279,364.5C 2277.11,369.952 2274.94,375.285 2272.5,380.5C 2272.53,382.029 2273.2,383.196 2274.5,384C 2313.83,383.292 2353.17,383.625 2392.5,385C 2427.18,388.687 2449.34,407.187 2459,440.5C 2460.52,485.019 2460.02,529.519 2457.5,574C 2459.64,591.121 2461.31,608.288 2462.5,625.5C 2462.64,630.989 2461.8,636.323 2460,641.5C 2458.36,644.311 2456.19,646.644 2453.5,648.5C 2457.09,667.497 2459.43,686.664 2460.5,706C 2459.94,717.953 2458.44,729.786 2456,741.5C 2455.63,755.025 2455.46,768.359 2455.5,781.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 2004.5,378.5 C 2001.31,376.31 1998.15,373.976 1995,371.5C 1995.13,368.062 1993.97,365.228 1991.5,363C 1987.78,360.473 1983.78,358.473 1979.5,357C 1976.46,353.74 1974.46,349.907 1973.5,345.5C 1966.04,343.554 1962.88,338.887 1964,331.5C 1967.18,324.975 1969.34,318.142 1970.5,311C 1970.6,307.362 1969.43,304.195 1967,301.5C 1962.95,310.306 1959.28,319.306 1956,328.5C 1952.33,332.167 1948.67,335.833 1945,339.5C 1943.4,342.334 1942.23,345.334 1941.5,348.5C 1932.35,353.805 1928.18,361.805 1929,372.5C 1921.4,377.049 1913.57,381.215 1905.5,385C 1903.83,387.333 1902.17,389.667 1900.5,392C 1897.45,392.857 1894.78,392.19 1892.5,390C 1887.55,384.594 1882.72,379.094 1878,373.5C 1876.78,368.614 1876.11,363.614 1876,358.5C 1875.33,357.167 1874.67,355.833 1874,354.5C 1868.69,349.521 1863.69,344.187 1859,338.5C 1858.67,334.167 1858.33,329.833 1858,325.5C 1856.06,321.952 1854.39,318.286 1853,314.5C 1852.18,311.036 1852.52,307.702 1854,304.5C 1860.18,300.412 1866.18,296.078 1872,291.5C 1874.37,289.151 1874.87,286.485 1873.5,283.5C 1863.83,289.333 1854.17,295.167 1844.5,301C 1839.4,313.496 1831.4,323.829 1820.5,332C 1801.83,344.667 1783.17,357.333 1764.5,370C 1763.55,370.617 1762.72,370.451 1762,369.5C 1760.11,365.91 1759.27,362.077 1759.5,358C 1762.33,345.583 1760.33,334.083 1753.5,323.5C 1764.88,311.858 1767.55,298.692 1761.5,284C 1808.37,266.389 1855.03,248.556 1901.5,230.5C 1937.91,217.305 1974.25,203.805 2010.5,190C 2013.47,189.617 2016.31,190.117 2019,191.5C 2017.11,254.514 2014.61,317.514 2011.5,380.5C 2009.08,380.122 2006.75,379.455 2004.5,378.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.893\n    },\n    fill: \"#060606\",\n    d: \"M 567.5,195.5 C 597.744,190.843 621.577,200.843 639,225.5C 641.112,228.284 643.779,230.284 647,231.5C 664.863,218.211 684.03,216.044 704.5,225C 714.511,231.842 720.345,241.342 722,253.5C 729.045,257.19 735.378,261.857 741,267.5C 744.94,273.582 745.44,279.916 742.5,286.5C 751.809,286.649 758.809,290.649 763.5,298.5C 773.04,300.223 780.207,305.223 785,313.5C 785.752,316.894 785.585,320.227 784.5,323.5C 791.094,324.486 797.427,326.319 803.5,329C 805.67,331.803 806.337,334.803 805.5,338C 672.469,335.192 539.469,331.526 406.5,327C 410.827,323.501 415.494,320.501 420.5,318C 432.1,314.747 443.767,311.747 455.5,309C 460.007,307.494 463.673,304.827 466.5,301C 477.402,299.432 486.402,294.432 493.5,286C 497.349,283.575 501.349,281.408 505.5,279.5C 495.349,273.201 491.182,264.201 493,252.5C 495.365,246.798 499.199,242.298 504.5,239C 510.817,235.672 517.484,233.339 524.5,232C 525.808,221.692 530.808,213.692 539.5,208C 548.185,202.169 557.518,198.003 567.5,195.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.436\n    },\n    fill: \"#fefefe\",\n    d: \"M 1574.5,198.5 C 1575.12,198.611 1575.62,198.944 1576,199.5C 1577.03,202.509 1577.69,205.509 1578,208.5C 1574.88,205.93 1573.72,202.596 1574.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fdfdfd\",\n    d: \"M 570.5,199.5 C 584.717,198.364 598.384,200.531 611.5,206C 621.905,211.807 629.572,220.14 634.5,231C 639.718,233.776 645.051,236.276 650.5,238.5C 663.508,223.86 679.175,220.36 697.5,228C 710.612,234.387 716.945,244.887 716.5,259.5C 732.653,261.126 739.486,269.793 737,285.5C 735.333,286.5 733.667,287.5 732,288.5C 731.383,289.449 731.549,290.282 732.5,291C 738.158,291.74 743.825,292.406 749.5,293C 754.445,293.273 756.279,295.773 755,300.5C 752.5,304.333 749.333,307.5 745.5,310C 751.164,308.351 756.831,306.351 762.5,304C 771.164,304.307 776.664,308.807 779,317.5C 779.922,321.701 779.422,325.701 777.5,329.5C 783.073,329.556 788.74,329.723 794.5,330C 796.332,330.748 797.999,331.748 799.5,333C 674.479,330.572 549.479,327.239 424.5,323C 427.789,320.522 431.456,318.856 435.5,318C 444.408,316.206 453.408,315.206 462.5,315C 463.562,310.912 465.895,307.579 469.5,305C 475.624,302.675 481.957,301.175 488.5,300.5C 494.982,288.755 504.982,282.922 518.5,283C 521.085,290.02 525.252,295.853 531,300.5C 531.667,299.5 531.667,298.5 531,297.5C 528.995,293.351 526.829,289.351 524.5,285.5C 527.414,269.461 536.748,259.628 552.5,256C 568.672,252.787 582.339,257.12 593.5,269C 594.167,269.667 594.833,269.667 595.5,269C 584.486,252.432 569.153,246.432 549.5,251C 535.236,254.789 524.902,263.289 518.5,276.5C 509.921,276.277 503.421,272.277 499,264.5C 497,260.5 497,256.5 499,252.5C 504.544,243.971 512.378,238.804 522.5,237C 525.877,236.548 529.211,235.882 532.5,235C 531.358,225.597 534.691,217.93 542.5,212C 551.071,205.876 560.405,201.709 570.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.998\n    },\n    fill: \"#a58ec7\",\n    d: \"M 1601.5,283.5 C 1602.63,285.129 1603.96,286.629 1605.5,288C 1587.77,294.077 1570.1,300.244 1552.5,306.5C 1551.83,306.5 1551.17,306.5 1550.5,306.5C 1549.83,306.5 1549.5,306.833 1549.5,307.5C 1493.68,325.439 1437.68,342.773 1381.5,359.5C 1377.38,357.929 1373.05,356.763 1368.5,356C 1365.1,354.6 1362.26,352.433 1360,349.5C 1357.69,342.338 1356.03,335.005 1355,327.5C 1354.03,324.221 1352.53,321.221 1350.5,318.5C 1355.95,314.217 1361.29,309.717 1366.5,305C 1379.38,303.063 1390.05,297.229 1398.5,287.5C 1398.17,287.167 1397.83,286.833 1397.5,286.5C 1387.77,293.033 1377.44,298.533 1366.5,303C 1360.12,306.19 1354.46,310.357 1349.5,315.5C 1338.69,306.52 1328.02,297.354 1317.5,288C 1322.87,282.968 1327.87,277.635 1332.5,272C 1337.23,267.277 1342.9,264.277 1349.5,263C 1358.17,262.333 1366.83,262.333 1375.5,263C 1382.21,266.714 1389.21,267.38 1396.5,265C 1407.31,259.198 1417.31,252.198 1426.5,244C 1430.63,241.597 1434.97,239.763 1439.5,238.5C 1439.5,236.167 1439.5,233.833 1439.5,231.5C 1443.39,221.119 1450.72,214.285 1461.5,211C 1466.72,208.452 1471.22,209.285 1475,213.5C 1475.33,221.5 1475.67,229.5 1476,237.5C 1478.93,256.788 1488.6,260.788 1505,249.5C 1505.12,244.718 1505.79,240.051 1507,235.5C 1511.07,229.596 1516.24,224.929 1522.5,221.5C 1525.26,230.194 1529.93,237.694 1536.5,244C 1546.27,250.367 1556.93,254.367 1568.5,256C 1579.16,265.651 1590.16,274.818 1601.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a51ab\",\n    d: \"M 1894.5,231.5 C 1848.78,248.687 1803.11,266.187 1757.5,284C 1765.9,298.887 1763.56,311.887 1750.5,323C 1753.93,327.703 1756.43,332.87 1758,338.5C 1757.82,347.16 1757.82,355.826 1758,364.5C 1758.89,367.284 1760.06,369.95 1761.5,372.5C 1784.99,359.205 1807.66,344.038 1829.5,327C 1837.16,320.018 1842.82,311.685 1846.5,302C 1854.63,297.365 1862.63,292.532 1870.5,287.5C 1871.52,288.002 1871.69,288.668 1871,289.5C 1869.83,290.667 1868.67,291.833 1867.5,293C 1862.07,296.129 1856.91,299.629 1852,303.5C 1850.5,307.039 1850.16,310.705 1851,314.5C 1852.39,318.286 1854.06,321.952 1856,325.5C 1856.33,330.167 1856.67,334.833 1857,339.5C 1863.79,345.286 1869.46,351.952 1874,359.5C 1874.33,363.53 1874.33,367.53 1874,371.5C 1879.82,379.316 1886.32,386.483 1893.5,393C 1896.03,394.422 1898.7,394.755 1901.5,394C 1903.5,391.333 1905.5,388.667 1907.5,386C 1915.49,382.342 1923.15,378.175 1930.5,373.5C 1929.69,362.657 1934.03,354.657 1943.5,349.5C 1944.23,346.788 1945.06,344.121 1946,341.5C 1950.37,337.467 1954.37,333.134 1958,328.5C 1961,320.833 1964,313.167 1967,305.5C 1968.57,308.633 1968.9,311.967 1968,315.5C 1966,320.833 1964,326.167 1962,331.5C 1961.21,339.738 1964.88,345.071 1973,347.5C 1973.27,351.544 1974.77,355.044 1977.5,358C 1982.93,359.911 1987.76,362.744 1992,366.5C 1993.48,372.82 1997.31,377.153 2003.5,379.5C 2004.68,380.504 2006.02,381.338 2007.5,382C 1994.24,385.144 1981.24,388.978 1968.5,393.5C 1968.66,391.473 1968.5,389.473 1968,387.5C 1967.82,390.226 1967.32,392.893 1966.5,395.5C 1961.91,397.713 1957.41,400.047 1953,402.5C 1952.23,402.355 1951.56,402.022 1951,401.5C 1950.06,397.532 1949.22,393.532 1948.5,389.5C 1948.17,390.667 1947.83,391.833 1947.5,393C 1948.13,396.995 1948.96,400.828 1950,404.5C 1943.72,408.818 1936.88,411.985 1929.5,414C 1908.65,418.443 1887.65,419.443 1866.5,417C 1852.34,405.188 1844.68,390.021 1843.5,371.5C 1843.17,389.355 1849.84,404.188 1863.5,416C 1849.04,415.017 1834.54,414.184 1820,413.5C 1815.5,413.667 1811,413.833 1806.5,414C 1802.78,414.373 1799.45,415.539 1796.5,417.5C 1787.77,421.23 1781.77,427.563 1778.5,436.5C 1776,441.773 1775,447.439 1775.5,453.5C 1773.56,452.85 1771.56,452.517 1769.5,452.5C 1763.43,450.398 1757.1,448.731 1750.5,447.5C 1749.29,447.253 1748.62,446.586 1748.5,445.5C 1754.6,441.219 1759.1,435.553 1762,428.5C 1762.67,425.5 1762.67,422.5 1762,419.5C 1756.16,409.359 1758,400.859 1767.5,394C 1776.05,388.225 1785.05,383.225 1794.5,379C 1781.66,382.506 1770.5,389.006 1761,398.5C 1756.7,404.9 1756.36,411.567 1760,418.5C 1761.27,424.595 1760.27,430.262 1757,435.5C 1753.63,438.703 1750.46,442.036 1747.5,445.5C 1736.62,445.436 1725.62,445.602 1714.5,446C 1695.12,450.888 1685.12,463.388 1684.5,483.5C 1670.64,482.925 1657.47,485.592 1645,491.5C 1633.97,483.828 1621.81,480.994 1608.5,483C 1595.19,486.549 1581.86,489.882 1568.5,493C 1565.49,494.013 1563.49,496.013 1562.5,499C 1563.55,502.455 1563.72,505.955 1563,509.5C 1560.93,512.96 1559.43,516.626 1558.5,520.5C 1559.35,523.71 1560.35,526.876 1561.5,530C 1561.16,532.511 1560.16,534.678 1558.5,536.5C 1556.97,536.427 1555.97,537.094 1555.5,538.5C 1553.97,538.427 1552.97,539.094 1552.5,540.5C 1550.97,540.427 1549.97,541.094 1549.5,542.5C 1547.97,542.427 1546.97,543.094 1546.5,544.5C 1539.34,547.669 1533,552.002 1527.5,557.5C 1525.6,557.738 1524.26,558.738 1523.5,560.5C 1521.97,560.427 1520.97,561.094 1520.5,562.5C 1518.6,562.738 1517.26,563.738 1516.5,565.5C 1514.97,565.427 1513.97,566.094 1513.5,567.5C 1511.97,567.427 1510.97,568.094 1510.5,569.5C 1508.6,569.738 1507.26,570.738 1506.5,572.5C 1487.94,582.584 1468.94,591.917 1449.5,600.5C 1448.38,599.37 1447.04,598.703 1445.5,598.5C 1438.19,593.36 1432.03,587.027 1427,579.5C 1404.58,546.326 1381.91,513.326 1359,480.5C 1350.45,478.093 1341.95,475.26 1333.5,472C 1329.54,469.766 1326.04,466.933 1323,463.5C 1320.87,459.411 1318.37,455.577 1315.5,452C 1312.97,450.578 1310.3,450.245 1307.5,451C 1289.05,461.277 1276.71,476.444 1270.5,496.5C 1239.59,497.542 1217.09,511.875 1203,539.5C 1202.28,540.059 1201.44,540.392 1200.5,540.5C 1185.12,534.625 1172.46,525.125 1162.5,512C 1157.52,508.336 1152.19,507.67 1146.5,510C 1134.69,516.45 1127.35,526.283 1124.5,539.5C 1105.44,545.697 1087.77,554.531 1071.5,566C 1060.45,575.274 1052.78,586.774 1048.5,600.5C 1030.7,602.688 1013.03,605.854 995.5,610C 979.074,615.131 962.907,620.964 947,627.5C 946.5,627.333 946,627.167 945.5,627C 954.195,621.977 962.028,615.81 969,608.5C 969.667,607.833 969.667,607.167 969,606.5C 958.371,618.9 945.204,627.4 929.5,632C 901.304,636.615 872.97,637.615 844.5,635C 813.661,633.501 784.327,626.168 756.5,613C 736.514,605.391 715.848,602.225 694.5,603.5C 693.167,603.5 691.833,603.5 690.5,603.5C 686.253,603.178 682.253,604.011 678.5,606C 674.473,609.366 671.14,613.366 668.5,618C 663.073,621.764 657.407,625.097 651.5,628C 634.833,631.333 618.167,634.667 601.5,638C 574.527,643.749 547.527,643.916 520.5,638.5C 518.955,638.511 517.622,638.844 516.5,639.5C 515.292,640.234 513.959,640.567 512.5,640.5C 509.933,640.721 507.599,641.388 505.5,642.5C 504.432,643.434 503.099,643.768 501.5,643.5C 497.521,643.742 493.854,644.742 490.5,646.5C 489.432,647.434 488.099,647.768 486.5,647.5C 483.933,647.721 481.599,648.388 479.5,649.5C 479.167,649.5 478.833,649.5 478.5,649.5C 477.833,649.5 477.167,649.5 476.5,649.5C 471.95,644.549 466.95,640.049 461.5,636C 449.796,634.664 438.129,633.164 426.5,631.5C 428.325,625.866 429.991,620.199 431.5,614.5C 594.935,571.058 758.602,528.391 922.5,486.5C 921.099,489.634 919.432,492.634 917.5,495.5C 914.63,496.433 912.296,498.1 910.5,500.5C 914.853,506.685 920.853,510.351 928.5,511.5C 928.966,505.77 930.633,500.437 933.5,495.5C 945.426,491.302 957.426,487.302 969.5,483.5C 967.523,485.814 965.523,488.147 963.5,490.5C 968.866,490.91 973.366,488.91 977,484.5C 977.49,483.207 977.657,481.873 977.5,480.5C 998.5,473.833 1019.5,467.167 1040.5,460.5C 1038.03,465.447 1035.53,470.447 1033,475.5C 1032.22,476.944 1032.39,478.277 1033.5,479.5C 1039.9,473.36 1044.23,466.027 1046.5,457.5C 1046.56,458.043 1046.89,458.376 1047.5,458.5C 1100.01,441.883 1152.68,425.883 1205.5,410.5C 1205.74,411.097 1206.24,411.43 1207,411.5C 1436.04,350.781 1665.21,290.781 1894.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.239\n    },\n    fill: \"#fefefe\",\n    d: \"M 1151.5,253.5 C 1152.38,253.369 1153.04,253.702 1153.5,254.5C 1149.34,262.525 1148.67,262.191 1151.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 1894.5,257.5 C 1896.2,257.34 1897.87,257.506 1899.5,258C 1900.56,261.843 1899.73,265.343 1897,268.5C 1893.4,274.104 1888.56,278.271 1882.5,281C 1880.83,281.667 1879.17,281.667 1877.5,281C 1883.3,273.226 1888.97,265.392 1894.5,257.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#a58ec7\",\n    d: \"M 1370.5,362.5 C 1353.05,368.203 1335.38,373.536 1317.5,378.5C 1313.22,372.054 1307.72,366.721 1301,362.5C 1301.13,365.098 1302.13,367.431 1304,369.5C 1306.7,373.361 1309.86,376.694 1313.5,379.5C 1312.83,379.5 1312.5,379.833 1312.5,380.5C 1311.21,380.263 1310.21,380.596 1309.5,381.5C 1309.17,381.5 1308.83,381.5 1308.5,381.5C 1307.21,381.263 1306.21,381.596 1305.5,382.5C 1305.17,382.5 1304.83,382.5 1304.5,382.5C 1303.51,382.328 1302.84,382.662 1302.5,383.5C 1295.15,375.647 1288.32,367.313 1282,358.5C 1279.22,350.398 1277.56,342.065 1277,333.5C 1276.8,331.714 1275.97,330.381 1274.5,329.5C 1273.34,334.802 1273.17,340.136 1274,345.5C 1277.86,361.392 1286.36,374.226 1299.5,384C 1298.91,384.464 1298.24,384.631 1297.5,384.5C 1296.51,384.328 1295.84,384.662 1295.5,385.5C 1294.83,385.5 1294.17,385.5 1293.5,385.5C 1292.83,385.5 1292.5,385.833 1292.5,386.5C 1291.5,386.5 1290.5,386.5 1289.5,386.5C 1288.83,386.5 1288.5,386.833 1288.5,387.5C 1260.78,394.963 1233.11,402.63 1205.5,410.5C 1152.68,425.883 1100.01,441.883 1047.5,458.5C 1046.89,458.376 1046.56,458.043 1046.5,457.5C 1047.35,455.506 1047.85,453.506 1048,451.5C 1045.64,454.69 1043.14,457.69 1040.5,460.5C 1019.5,467.167 998.5,473.833 977.5,480.5C 977.44,479.957 977.107,479.624 976.5,479.5C 974.132,480.889 971.799,482.222 969.5,483.5C 957.426,487.302 945.426,491.302 933.5,495.5C 940.007,488.505 947.34,482.339 955.5,477C 969.079,464.948 975.245,449.781 974,431.5C 974.915,430.672 975.581,429.672 976,428.5C 984.382,421.062 993.215,414.229 1002.5,408C 1006,404.5 1009.5,401 1013,397.5C 1015.61,393.671 1017.44,389.504 1018.5,385C 1025.74,384.351 1032.74,382.685 1039.5,380C 1045.19,376.489 1050.86,372.989 1056.5,369.5C 1057.17,369.5 1057.5,369.167 1057.5,368.5C 1057.83,368.5 1058.17,368.5 1058.5,368.5C 1059.17,368.5 1059.5,368.167 1059.5,367.5C 1060.49,367.672 1061.16,367.338 1061.5,366.5C 1062.17,366.5 1062.5,366.167 1062.5,365.5C 1063.49,365.672 1064.16,365.338 1064.5,364.5C 1065.17,364.5 1065.5,364.167 1065.5,363.5C 1066.81,362.524 1068.15,361.524 1069.5,360.5C 1071.05,356.344 1072.88,352.344 1075,348.5C 1076.43,346.561 1078.27,345.228 1080.5,344.5C 1081.17,344.5 1081.5,344.167 1081.5,343.5C 1082.17,343.5 1082.5,343.167 1082.5,342.5C 1082.83,342.5 1083.17,342.5 1083.5,342.5C 1084.17,342.5 1084.5,342.167 1084.5,341.5C 1085.49,341.672 1086.16,341.338 1086.5,340.5C 1087.49,340.672 1088.16,340.338 1088.5,339.5C 1089.49,339.672 1090.16,339.338 1090.5,338.5C 1090.83,338.5 1091.17,338.5 1091.5,338.5C 1092.17,338.5 1092.5,338.167 1092.5,337.5C 1096.33,335.877 1100.33,334.877 1104.5,334.5C 1105.17,334.5 1105.5,334.167 1105.5,333.5C 1106.5,333.5 1107.5,333.5 1108.5,333.5C 1109.17,333.5 1109.5,333.167 1109.5,332.5C 1118.24,330.315 1126.9,327.815 1135.5,325C 1141.13,322.695 1145.8,319.195 1149.5,314.5C 1152.43,312.916 1155.09,310.916 1157.5,308.5C 1165.6,303.583 1173.6,298.416 1181.5,293C 1187.16,289.669 1193.16,287.169 1199.5,285.5C 1200.44,285.608 1201.28,285.941 1202,286.5C 1204.5,294.667 1209,301.5 1215.5,307C 1217.17,307.667 1218.83,307.667 1220.5,307C 1229.6,295.948 1240.94,288.114 1254.5,283.5C 1254.83,282 1255.17,280.5 1255.5,279C 1254.51,271.505 1254.01,264.005 1254,256.5C 1256.22,260.388 1259.39,263.221 1263.5,265C 1272.55,266.757 1281.55,268.757 1290.5,271C 1292.29,271.785 1293.79,272.951 1295,274.5C 1296.18,280.262 1299.18,281.596 1304,278.5C 1305,280.167 1306,281.833 1307,283.5C 1317.33,294.51 1328.83,304.01 1341.5,312C 1345.49,314.989 1348.32,318.822 1350,323.5C 1350.87,332.985 1352.53,342.318 1355,351.5C 1358.7,357.263 1363.86,360.929 1370.5,362.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.978\n    },\n    fill: \"#0d0b0f\",\n    d: \"M 1539.5,258.5 C 1539.56,257.957 1539.89,257.624 1540.5,257.5C 1552.3,266.296 1561.97,276.962 1569.5,289.5C 1569.17,289.833 1568.83,290.167 1568.5,290.5C 1558.81,279.813 1549.14,269.147 1539.5,258.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.99\n    },\n    fill: \"#070508\",\n    d: \"M 1420.5,260.5 C 1421.12,260.917 1421.46,261.584 1421.5,262.5C 1418.48,268.035 1414.48,272.869 1409.5,277C 1407.65,278.128 1405.65,278.628 1403.5,278.5C 1403.61,276.217 1404.44,274.217 1406,272.5C 1410.63,268.123 1415.46,264.123 1420.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.985\n    },\n    fill: \"#070609\",\n    d: \"M 1528.5,271.5 C 1535.54,279.73 1541.21,288.897 1545.5,299C 1545.17,299.5 1544.83,300 1544.5,300.5C 1535.76,292.677 1530.42,283.01 1528.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.982\n    },\n    fill: \"#0b090d\",\n    d: \"M 1262.5,289.5 C 1273.26,299.27 1277.09,311.27 1274,325.5C 1271.87,312.936 1268.03,300.936 1262.5,289.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.458\n    },\n    fill: \"#fefefe\",\n    d: \"M 1550.5,306.5 C 1551.17,306.5 1551.83,306.5 1552.5,306.5C 1555.36,315.387 1554.36,315.72 1549.5,307.5C 1550.17,307.5 1550.5,307.167 1550.5,306.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.999\n    },\n    fill: \"#919191\",\n    d: \"M 2121.5,313.5 C 2165.6,311.793 2207.6,320.293 2247.5,339C 2256.23,343.061 2263.06,349.228 2268,357.5C 2268.07,367.34 2266.74,377.007 2264,386.5C 2253.91,392.46 2243.75,398.293 2233.5,404C 2221.89,402.859 2210.22,401.859 2198.5,401C 2173.96,398.695 2150.46,402.529 2128,412.5C 2109.45,404.478 2090.95,396.311 2072.5,388C 2063.52,385.227 2054.52,382.56 2045.5,380C 2044.29,379.107 2044.29,378.274 2045.5,377.5C 2053.35,373.154 2060.19,367.487 2066,360.5C 2073.57,349.876 2081.73,339.71 2090.5,330C 2099.49,321.841 2109.82,316.341 2121.5,313.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#432d5e\",\n    d: \"M 2021.5,197.5 C 2022.16,200.314 2022.5,203.314 2022.5,206.5C 2019.83,264.508 2017,322.508 2014,380.5C 2015.65,319.47 2018.15,258.47 2021.5,197.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.984\n    },\n    fill: \"#0d0b0f\",\n    d: \"M 1159.5,326.5 C 1161.23,326.843 1161.73,327.843 1161,329.5C 1155.4,339.026 1149.07,348.026 1142,356.5C 1142.76,351.945 1144.43,347.612 1147,343.5C 1151.18,337.804 1155.34,332.137 1159.5,326.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171519\",\n    d: \"M 1901.5,230.5 C 1855.03,248.556 1808.37,266.389 1761.5,284C 1767.55,298.692 1764.88,311.858 1753.5,323.5C 1760.33,334.083 1762.33,345.583 1759.5,358C 1759.27,362.077 1760.11,365.91 1762,369.5C 1762.72,370.451 1763.55,370.617 1764.5,370C 1783.17,357.333 1801.83,344.667 1820.5,332C 1831.4,323.829 1839.4,313.496 1844.5,301C 1854.17,295.167 1863.83,289.333 1873.5,283.5C 1874.87,286.485 1874.37,289.151 1872,291.5C 1866.18,296.078 1860.18,300.412 1854,304.5C 1852.52,307.702 1852.18,311.036 1853,314.5C 1854.39,318.286 1856.06,321.952 1858,325.5C 1858.33,329.833 1858.67,334.167 1859,338.5C 1863.69,344.187 1868.69,349.521 1874,354.5C 1874.67,355.833 1875.33,357.167 1876,358.5C 1876.11,363.614 1876.78,368.614 1878,373.5C 1882.72,379.094 1887.55,384.594 1892.5,390C 1894.78,392.19 1897.45,392.857 1900.5,392C 1902.17,389.667 1903.83,387.333 1905.5,385C 1913.57,381.215 1921.4,377.049 1929,372.5C 1928.18,361.805 1932.35,353.805 1941.5,348.5C 1942.23,345.334 1943.4,342.334 1945,339.5C 1948.67,335.833 1952.33,332.167 1956,328.5C 1959.28,319.306 1962.95,310.306 1967,301.5C 1969.43,304.195 1970.6,307.362 1970.5,311C 1969.34,318.142 1967.18,324.975 1964,331.5C 1962.88,338.887 1966.04,343.554 1973.5,345.5C 1974.46,349.907 1976.46,353.74 1979.5,357C 1983.78,358.473 1987.78,360.473 1991.5,363C 1993.97,365.228 1995.13,368.062 1995,371.5C 1998.15,373.976 2001.31,376.31 2004.5,378.5C 2003.83,378.5 2003.5,378.833 2003.5,379.5C 1997.31,377.153 1993.48,372.82 1992,366.5C 1987.76,362.744 1982.93,359.911 1977.5,358C 1974.77,355.044 1973.27,351.544 1973,347.5C 1964.88,345.071 1961.21,339.738 1962,331.5C 1964,326.167 1966,320.833 1968,315.5C 1968.9,311.967 1968.57,308.633 1967,305.5C 1964,313.167 1961,320.833 1958,328.5C 1954.37,333.134 1950.37,337.467 1946,341.5C 1945.06,344.121 1944.23,346.788 1943.5,349.5C 1934.03,354.657 1929.69,362.657 1930.5,373.5C 1923.15,378.175 1915.49,382.342 1907.5,386C 1905.5,388.667 1903.5,391.333 1901.5,394C 1898.7,394.755 1896.03,394.422 1893.5,393C 1886.32,386.483 1879.82,379.316 1874,371.5C 1874.33,367.53 1874.33,363.53 1874,359.5C 1869.46,351.952 1863.79,345.286 1857,339.5C 1856.67,334.833 1856.33,330.167 1856,325.5C 1854.06,321.952 1852.39,318.286 1851,314.5C 1850.16,310.705 1850.5,307.039 1852,303.5C 1856.91,299.629 1862.07,296.129 1867.5,293C 1868.67,291.833 1869.83,290.667 1871,289.5C 1871.69,288.668 1871.52,288.002 1870.5,287.5C 1862.63,292.532 1854.63,297.365 1846.5,302C 1842.82,311.685 1837.16,320.018 1829.5,327C 1807.66,344.038 1784.99,359.205 1761.5,372.5C 1760.06,369.95 1758.89,367.284 1758,364.5C 1757.82,355.826 1757.82,347.16 1758,338.5C 1756.43,332.87 1753.93,327.703 1750.5,323C 1763.56,311.887 1765.9,298.887 1757.5,284C 1803.11,266.187 1848.78,248.687 1894.5,231.5C 1896.62,229.684 1898.95,229.35 1901.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#160f1b\",\n    d: \"M 1696.5,340.5 C 1698.2,340.34 1699.87,340.506 1701.5,341C 1687.78,344.86 1675.12,350.86 1663.5,359C 1648.58,372.588 1633.08,385.421 1617,397.5C 1616.38,396.551 1616.55,395.718 1617.5,395C 1634.12,382.045 1650.46,368.712 1666.5,355C 1675.97,348.908 1685.97,344.075 1696.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 2208.5,358.5 C 2205.42,359.391 2202.42,360.224 2199.5,361C 2208.38,354.059 2218.04,348.392 2228.5,344C 2230.26,343.202 2231.93,343.369 2233.5,344.5C 2224.94,348.941 2216.61,353.608 2208.5,358.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.992\n    },\n    fill: \"#0b090d\",\n    d: \"M 1244.5,347.5 C 1246.96,349.052 1248.46,351.385 1249,354.5C 1245.59,368.347 1249.93,379.013 1262,386.5C 1263.13,388.345 1263.63,390.345 1263.5,392.5C 1255.15,389.308 1249.65,383.308 1247,374.5C 1244.74,365.663 1243.91,356.663 1244.5,347.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 2250.5,347.5 C 2251.75,347.577 2252.58,348.244 2253,349.5C 2253.14,357.23 2250.47,363.897 2245,369.5C 2245.07,375.142 2243.91,380.475 2241.5,385.5C 2240.91,385.291 2240.41,384.957 2240,384.5C 2239.42,380.112 2239.76,375.779 2241,371.5C 2243.35,363.142 2246.52,355.142 2250.5,347.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 2118.5,352.5 C 2119.27,351.853 2120.27,351.52 2121.5,351.5C 2138.14,353.33 2154.8,354.83 2171.5,356C 2163.59,356.157 2155.76,356.991 2148,358.5C 2144.58,358.25 2141.25,357.584 2138,356.5C 2136.63,356.706 2135.3,357.04 2134,357.5C 2128.85,355.726 2123.68,354.06 2118.5,352.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 2234.5,352.5 C 2236.17,352.5 2237.83,352.5 2239.5,352.5C 2238.65,357.201 2236.48,361.201 2233,364.5C 2232.67,370.167 2232.33,375.833 2232,381.5C 2231.42,383.002 2230.58,384.335 2229.5,385.5C 2228.91,385.291 2228.41,384.957 2228,384.5C 2226.7,373.04 2228.87,362.373 2234.5,352.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 2208.5,358.5 C 2209.5,358.5 2210.5,358.5 2211.5,358.5C 2209.96,363.247 2208.13,367.913 2206,372.5C 2204.97,376.773 2204.3,381.106 2204,385.5C 2202.74,387.607 2200.9,388.607 2198.5,388.5C 2199.24,377.604 2202.58,367.604 2208.5,358.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 2173.5,361.5 C 2178.75,361.817 2183.75,362.983 2188.5,365C 2185,367.167 2182.17,370 2180,373.5C 2176.58,380.653 2173.08,387.653 2169.5,394.5C 2168.37,390.363 2168.87,386.363 2171,382.5C 2173.88,376.577 2177.38,371.077 2181.5,366C 2175.16,365.399 2168.83,364.733 2162.5,364C 2166.24,362.986 2169.91,362.153 2173.5,361.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 2195.5,363.5 C 2196.1,363.735 2196.43,364.235 2196.5,365C 2193.7,375.768 2188.7,385.268 2181.5,393.5C 2180.37,391.926 2180.2,390.259 2181,388.5C 2185.85,380.139 2190.68,371.806 2195.5,363.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.984\n    },\n    fill: \"#0b090d\",\n    d: \"M 1136.5,362.5 C 1129.9,377.053 1120.57,390.22 1108.5,402C 1104.51,405.331 1100.18,408.164 1095.5,410.5C 1094.48,409.998 1094.31,409.332 1095,408.5C 1100.52,404.069 1105.85,399.402 1111,394.5C 1119.71,383.959 1128.21,373.292 1136.5,362.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1425\",\n    d: \"M 1954.5,362.5 C 1955.98,366.904 1958.65,370.737 1962.5,374C 1960.84,374.265 1959.34,373.765 1958,372.5C 1955.74,369.562 1954.58,366.229 1954.5,362.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.984\n    },\n    fill: \"#0f0d11\",\n    d: \"M 1117.5,369.5 C 1117.76,375.806 1115.1,380.972 1109.5,385C 1104.44,389.359 1098.78,392.359 1092.5,394C 1097.54,389.288 1102.88,384.955 1108.5,381C 1112.11,377.59 1115.11,373.756 1117.5,369.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 2031.5,385.5 C 2056.38,387.958 2080.05,394.792 2102.5,406C 2105.64,407.886 2108.31,410.22 2110.5,413C 2107.84,416.649 2105.17,420.316 2102.5,424C 2092.04,423.944 2081.71,424.944 2071.5,427C 2061.38,430.123 2053.21,435.957 2047,444.5C 2043.27,451.517 2040.44,458.85 2038.5,466.5C 2012,452.668 1984.33,442.001 1955.5,434.5C 1957.29,420.408 1963.63,408.908 1974.5,400C 1977.42,398.472 1980.42,397.139 1983.5,396C 1999.74,392.999 2015.74,389.499 2031.5,385.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 2291.5,388.5 C 2322.47,390.101 2353.47,390.934 2384.5,391C 2397.59,391.022 2409.92,394.022 2421.5,400C 2430.09,406 2435.59,414.167 2438,424.5C 2439.78,439.801 2441.28,455.135 2442.5,470.5C 2442.46,473.259 2441.96,475.925 2441,478.5C 2440.26,479.574 2439.26,480.241 2438,480.5C 2433.45,476.955 2428.61,473.789 2423.5,471C 2420.26,469.632 2416.93,469.299 2413.5,470C 2400.83,476 2388.17,482 2375.5,488C 2356.64,494.913 2337.64,495.246 2318.5,489C 2303.1,483.201 2287.43,478.201 2271.5,474C 2263.53,472.719 2255.53,471.719 2247.5,471C 2245.62,469.457 2244.12,467.624 2243,465.5C 2242.07,461.363 2240.73,457.363 2239,453.5C 2237.59,451.586 2235.75,450.253 2233.5,449.5C 2233.17,448.333 2232.83,447.167 2232.5,446C 2233.72,438.508 2234.89,431.008 2236,423.5C 2237.67,411.496 2244.17,403.329 2255.5,399C 2267.43,394.855 2279.43,391.355 2291.5,388.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.989\n    },\n    fill: \"#09070c\",\n    d: \"M 1040.5,395.5 C 1041.24,395.369 1041.91,395.536 1042.5,396C 1034.67,406.5 1026.83,417 1019,427.5C 1013.12,431.115 1007.78,435.448 1003,440.5C 1000.2,446.232 998.201,452.232 997,458.5C 995.139,464.223 991.806,468.89 987,472.5C 990.709,461.056 995.042,449.722 1000,438.5C 1011.13,429.711 1020.46,419.378 1028,407.5C 1032.06,403.269 1036.23,399.269 1040.5,395.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.984\n    },\n    fill: \"#0a080c\",\n    d: \"M 1083.5,398.5 C 1085.35,398.272 1086.19,398.939 1086,400.5C 1070.67,414.5 1055.33,428.5 1040,442.5C 1039.33,441.833 1039.33,441.167 1040,440.5C 1044,435.167 1048,429.833 1052,424.5C 1062.69,415.969 1073.19,407.302 1083.5,398.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#130d19\",\n    d: \"M 1748.5,445.5 C 1748.17,445.5 1747.83,445.5 1747.5,445.5C 1750.46,442.036 1753.63,438.703 1757,435.5C 1760.27,430.262 1761.27,424.595 1760,418.5C 1756.36,411.567 1756.7,404.9 1761,398.5C 1770.5,389.006 1781.66,382.506 1794.5,379C 1785.05,383.225 1776.05,388.225 1767.5,394C 1758,400.859 1756.16,409.359 1762,419.5C 1762.67,422.5 1762.67,425.5 1762,428.5C 1759.1,435.553 1754.6,441.219 1748.5,445.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1954.5,404.5 C 1956.29,404.215 1957.95,404.548 1959.5,405.5C 1955.93,411.962 1952.93,418.629 1950.5,425.5C 1946.73,425.737 1943.06,425.237 1939.5,424C 1934.32,420.48 1934.32,416.813 1939.5,413C 1944.59,410.125 1949.59,407.292 1954.5,404.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 2175.5,406.5 C 2189.02,405.74 2202.35,406.907 2215.5,410C 2218.99,411.217 2222.33,412.717 2225.5,414.5C 2223.98,420.885 2223.32,427.385 2223.5,434C 2224.36,448.162 2224.52,462.329 2224,476.5C 2223.37,485.739 2220.37,494.072 2215,501.5C 2200.75,509.037 2186.92,517.203 2173.5,526C 2167.31,530.687 2161.98,536.187 2157.5,542.5C 2154.29,537.911 2150.96,533.411 2147.5,529C 2145.28,527.725 2142.95,526.725 2140.5,526C 2121.85,526.864 2103.19,527.197 2084.5,527C 2071.78,524.608 2062.94,517.441 2058,505.5C 2055,491.833 2052,478.167 2049,464.5C 2049.96,445.521 2059.79,433.688 2078.5,429C 2083.17,428.333 2087.83,428.333 2092.5,429C 2098.67,430.166 2104.83,431.333 2111,432.5C 2119.2,431.65 2126.37,428.484 2132.5,423C 2136.17,419.333 2139.83,415.667 2143.5,412C 2154.36,410.482 2165.03,408.649 2175.5,406.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 2203.5,412.5 C 2204.5,412.5 2205.5,412.5 2206.5,412.5C 2204.62,423.359 2207.29,432.859 2214.5,441C 2214.17,441.5 2213.83,442 2213.5,442.5C 2210.07,440.819 2207.41,438.319 2205.5,435C 2204.52,434.409 2203.85,434.743 2203.5,436C 2206.27,440.44 2209.44,444.606 2213,448.5C 2213.75,449.635 2213.58,450.635 2212.5,451.5C 2209.83,448.329 2206.83,445.495 2203.5,443C 2201.89,442.28 2200.39,442.446 2199,443.5C 2199.78,433.096 2201.28,422.763 2203.5,412.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.989\n    },\n    fill: \"#09070b\",\n    d: \"M 1090.5,415.5 C 1091.1,415.735 1091.43,416.235 1091.5,417C 1090.52,418.657 1089.52,420.323 1088.5,422C 1075.32,431.89 1061.99,441.224 1048.5,450C 1049.5,447.667 1050.5,445.333 1051.5,443C 1064.92,434.303 1077.92,425.136 1090.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1778.5,436.5 C 1781.77,427.563 1787.77,421.23 1796.5,417.5C 1803.14,416.502 1809.81,416.335 1816.5,417C 1833.3,419.355 1849.97,422.355 1866.5,426C 1868.18,426.347 1869.18,427.347 1869.5,429C 1867.65,432.843 1865.82,436.676 1864,440.5C 1863.5,443.817 1863.33,447.15 1863.5,450.5C 1848.31,456.258 1832.97,461.758 1817.5,467C 1810.59,468.813 1803.59,469.48 1796.5,469C 1792.95,468.226 1789.62,466.893 1786.5,465C 1778.47,457.056 1775.8,447.556 1778.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#17101d\",\n    d: \"M 1590.5,408.5 C 1591.24,408.369 1591.91,408.536 1592.5,409C 1589.17,412.333 1585.83,415.667 1582.5,419C 1580.63,420.602 1578.63,421.602 1576.5,422C 1581.67,417.997 1586.34,413.497 1590.5,408.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 1897.5,423.5 C 1907.51,423.334 1917.51,423.5 1927.5,424C 1929,425.5 1930.5,427 1932,428.5C 1932.69,429.332 1932.52,429.998 1931.5,430.5C 1921.17,431.107 1910.83,431.941 1900.5,433C 1897.5,434 1894.5,435 1891.5,436C 1884.23,440.138 1876.9,443.972 1869.5,447.5C 1868.22,440.165 1870.55,434.331 1876.5,430C 1883.29,426.726 1890.29,424.559 1897.5,423.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a8a8a\",\n    d: \"M 1932.5,424.5 C 1937.15,425.662 1941.81,426.829 1946.5,428C 1947.36,428.689 1948.02,429.522 1948.5,430.5C 1942.97,432.184 1937.97,431.184 1933.5,427.5C 1932.61,426.675 1932.28,425.675 1932.5,424.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090909\",\n    d: \"M 2032.5,427.5 C 2033.5,427.47 2034.16,427.97 2034.5,429C 2032.66,432.838 2030.99,436.671 2029.5,440.5C 2030.5,440.5 2031.5,440.5 2032.5,440.5C 2032.5,441.833 2032.5,443.167 2032.5,444.5C 2033.93,444.579 2035.26,444.246 2036.5,443.5C 2038.11,446.753 2037.11,448.92 2033.5,450C 2028.5,450.333 2023.5,450.667 2018.5,451C 2017.58,451.374 2016.75,451.874 2016,452.5C 2015.83,451.833 2015.67,451.167 2015.5,450.5C 2020.8,442.54 2026.46,434.873 2032.5,427.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1858.5,429.5 C 1859.68,429.281 1860.68,429.614 1861.5,430.5C 1853.05,438.116 1843.88,444.783 1834,450.5C 1820.32,448.038 1806.82,444.872 1793.5,441C 1807.91,442.149 1822.24,443.815 1836.5,446C 1844.08,440.723 1851.41,435.223 1858.5,429.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#150e1a\",\n    d: \"M 1553.5,432.5 C 1555.38,432.393 1555.71,432.893 1554.5,434C 1537.11,439.188 1522.11,448.188 1509.5,461C 1508.83,461.667 1508.17,461.667 1507.5,461C 1520.53,447.66 1535.86,438.16 1553.5,432.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1904.5,435.5 C 1920.46,434.385 1936.12,435.885 1951.5,440C 1982.78,449.476 2012.78,461.976 2041.5,477.5C 2043.54,490.714 2047.37,503.381 2053,515.5C 2056.17,520 2060,523.833 2064.5,527C 2049.88,525.87 2035.38,523.704 2021,520.5C 2006.26,529.119 1991.43,537.619 1976.5,546C 1962.15,549.501 1947.82,553.001 1933.5,556.5C 1928.41,544.582 1919.41,537.749 1906.5,536C 1903.12,535.548 1899.79,534.882 1896.5,534C 1871.82,533.83 1847.15,533.164 1822.5,532C 1811.82,530.913 1801.49,528.413 1791.5,524.5C 1790.39,523.277 1790.22,521.944 1791,520.5C 1802.61,510.893 1814.77,502.059 1827.5,494C 1845.7,475.457 1865.37,458.79 1886.5,444C 1892.47,440.846 1898.47,438.012 1904.5,435.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.992\n    },\n    fill: \"#7c7972\",\n    d: \"M 433.5,611.5 C 432.094,611.973 431.427,612.973 431.5,614.5C 429.991,620.199 428.325,625.866 426.5,631.5C 438.129,633.164 449.796,634.664 461.5,636C 466.95,640.049 471.95,644.549 476.5,649.5C 472.59,649.835 469.59,650.835 467.5,652.5C 467.158,653.338 466.492,653.672 465.5,653.5C 458.904,647.27 451.237,642.604 442.5,639.5C 437.867,640.553 433.201,640.719 428.5,640C 416.326,636.373 403.993,633.539 391.5,631.5C 381.739,631.918 372.072,633.084 362.5,635C 358.311,635.727 354.478,637.227 351,639.5C 350.826,652.463 352.659,665.129 356.5,677.5C 353.219,677.42 350.219,678.087 347.5,679.5C 344.219,679.42 341.219,680.087 338.5,681.5C 313.116,678.996 288.116,674.496 263.5,668C 248.241,665.991 232.908,664.991 217.5,665C 190.271,661.108 163.271,656.108 136.5,650C 123.458,649.123 110.458,649.456 97.5,651C 85.1303,654.399 75.2969,661.232 68,671.5C 65.2763,676.959 64.7763,682.626 66.5,688.5C 55.5,688.5 44.5,688.5 33.5,688.5C 33.825,696.019 33.4916,703.352 32.5,710.5C 28.0865,691.947 25.7531,673.114 25.5,654C 26.8532,630.884 28.8532,607.884 31.5,585C 29.2941,549.073 30.7941,513.24 36,477.5C 37.0975,476.033 38.5975,475.199 40.5,475C 54.8248,474.197 69.1581,473.697 83.5,473.5C 82.5004,483.497 81.5004,493.497 80.5,503.5C 80.6667,506.167 80.8333,508.833 81,511.5C 82.7493,512.553 84.2493,512.22 85.5,510.5C 88.4822,508.526 91.4822,506.526 94.5,504.5C 104.349,509.095 114.016,514.261 123.5,520C 132.55,523.338 141.883,524.338 151.5,523C 163.56,519.535 175.56,515.869 187.5,512C 193.461,511.003 199.461,510.337 205.5,510C 207.572,506.798 209.072,503.298 210,499.5C 211.779,497.381 213.612,495.381 215.5,493.5C 214.114,486.202 212.947,478.869 212,471.5C 209.833,465.333 205.667,461.167 199.5,459C 192.362,456.065 185.029,453.732 177.5,452C 154.33,451.832 131.33,451.332 108.5,450.5C 115.057,448.852 121.723,447.852 128.5,447.5C 150.876,447.931 173.209,449.098 195.5,451C 199.896,451.746 204.23,452.746 208.5,454C 213.733,458.033 219.566,460.866 226,462.5C 236.125,461.029 246.292,460.529 256.5,461C 263.004,463.037 269.67,464.704 276.5,466C 281.789,469.62 286.789,473.62 291.5,478C 294.618,479.893 297.951,481.226 301.5,482C 310.167,482.333 318.833,482.667 327.5,483C 335,487.833 341.167,494 346,501.5C 346.667,505.5 346.667,509.5 346,513.5C 344.308,520.793 342.808,528.127 341.5,535.5C 341.779,541.231 344.446,545.397 349.5,548C 353.899,548.817 358.232,549.817 362.5,551C 369.833,557 377.167,563 384.5,569C 393.719,571.504 402.719,574.504 411.5,578C 418.667,587.167 425.833,596.333 433,605.5C 433.495,607.473 433.662,609.473 433.5,611.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1769.5,452.5 C 1771.56,452.517 1773.56,452.85 1775.5,453.5C 1775.69,455.564 1776.19,457.564 1777,459.5C 1780.76,462.586 1783.76,466.252 1786,470.5C 1785.19,476.955 1784.36,483.455 1783.5,490C 1783.97,496.254 1784.97,502.421 1786.5,508.5C 1778.78,508.762 1771.11,508.262 1763.5,507C 1753.05,502.608 1742.71,497.941 1732.5,493C 1721.67,490.304 1710.67,488.97 1699.5,489C 1697.32,488.837 1695.49,488.004 1694,486.5C 1693.26,482.739 1693.6,479.072 1695,475.5C 1697.53,468.278 1700.7,461.445 1704.5,455C 1711.44,452.021 1718.6,449.854 1726,448.5C 1740.48,450.114 1754.98,451.447 1769.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 0.958\n    },\n    fill: \"#0f0e0e\",\n    d: \"M 108.5,450.5 C 131.33,451.332 154.33,451.832 177.5,452C 185.029,453.732 192.362,456.065 199.5,459C 205.667,461.167 209.833,465.333 212,471.5C 212.947,478.869 214.114,486.202 215.5,493.5C 213.612,495.381 211.779,497.381 210,499.5C 209.072,503.298 207.572,506.798 205.5,510C 199.461,510.337 193.461,511.003 187.5,512C 175.56,515.869 163.56,519.535 151.5,523C 141.883,524.338 132.55,523.338 123.5,520C 114.016,514.261 104.349,509.095 94.5,504.5C 96.8568,504.337 99.1902,504.503 101.5,505C 111.64,511.403 122.307,516.737 133.5,521C 138.833,521.667 144.167,521.667 149.5,521C 161.963,517.734 174.297,514.067 186.5,510C 191.5,509.667 196.5,509.333 201.5,509C 204.282,505.673 206.115,501.839 207,497.5C 208.11,495.963 209.61,495.297 211.5,495.5C 210.423,487.478 209.256,479.478 208,471.5C 205.833,466.667 202.333,463.167 197.5,461C 190.346,458.06 183.013,455.726 175.5,454C 153.167,453.333 130.833,453.333 108.5,454C 98.7034,455.795 91.8701,461.295 88,470.5C 85.2743,483.364 83.9409,496.364 84,509.5C 84.3826,510.056 84.8826,510.389 85.5,510.5C 84.2493,512.22 82.7493,512.553 81,511.5C 80.8333,508.833 80.6667,506.167 80.5,503.5C 81.5004,493.497 82.5004,483.497 83.5,473.5C 86.464,460.157 94.7973,452.491 108.5,450.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 94.5,504.5 C 91.4822,506.526 88.4822,508.526 85.5,510.5C 84.8826,510.389 84.3826,510.056 84,509.5C 83.9409,496.364 85.2743,483.364 88,470.5C 91.8701,461.295 98.7034,455.795 108.5,454C 130.833,453.333 153.167,453.333 175.5,454C 183.013,455.726 190.346,458.06 197.5,461C 202.333,463.167 205.833,466.667 208,471.5C 209.256,479.478 210.423,487.478 211.5,495.5C 209.61,495.297 208.11,495.963 207,497.5C 206.115,501.839 204.282,505.673 201.5,509C 196.5,509.333 191.5,509.667 186.5,510C 174.297,514.067 161.963,517.734 149.5,521C 144.167,521.667 138.833,521.667 133.5,521C 122.307,516.737 111.64,511.403 101.5,505C 99.1902,504.503 96.8568,504.337 94.5,504.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7951aa\",\n    d: \"M 1444.5,599.5 C 1445.29,599.783 1445.96,600.283 1446.5,601C 1431.96,607.917 1416.63,610.417 1400.5,608.5C 1394.29,606.699 1387.96,605.365 1381.5,604.5C 1375.87,601.871 1369.87,600.038 1363.5,599C 1341.39,597.253 1328.39,607.419 1324.5,629.5C 1269.52,630.884 1215.86,623.217 1163.5,606.5C 1171.49,594.359 1172.49,581.693 1166.5,568.5C 1173.43,567.768 1180.09,566.102 1186.5,563.5C 1190.76,561.112 1194.59,558.112 1198,554.5C 1206.47,530.359 1222.31,512.859 1245.5,502C 1253.95,499.335 1262.62,497.835 1271.5,497.5C 1278.49,477.183 1291.49,462.183 1310.5,452.5C 1311.5,452.667 1312.5,452.833 1313.5,453C 1316.95,456.734 1319.79,460.9 1322,465.5C 1324.89,468.361 1328.06,470.861 1331.5,473C 1340.17,476.867 1349,480.034 1358,482.5C 1380.91,515.326 1403.58,548.326 1426,581.5C 1431.37,588.374 1437.54,594.374 1444.5,599.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 2196.5,454.5 C 2197.5,454.5 2198.5,454.5 2199.5,454.5C 2199.16,457.516 2197.99,460.182 2196,462.5C 2189.8,470.21 2182.3,476.21 2173.5,480.5C 2172.3,480.154 2172.3,479.654 2173.5,479C 2183.09,472.577 2190.76,464.41 2196.5,454.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1854.5,455.5 C 1856.43,455.231 1858.1,455.731 1859.5,457C 1842.01,474.498 1823.34,490.498 1803.5,505C 1800.71,506.3 1798.04,507.8 1795.5,509.5C 1789.58,501.147 1786.74,491.813 1787,481.5C 1789.8,476.01 1794.3,472.844 1800.5,472C 1820.22,471.742 1838.22,466.242 1854.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0c12\",\n    d: \"M 1046.5,457.5 C 1044.23,466.027 1039.9,473.36 1033.5,479.5C 1032.39,478.277 1032.22,476.944 1033,475.5C 1035.53,470.447 1038.03,465.447 1040.5,460.5C 1043.14,457.69 1045.64,454.69 1048,451.5C 1047.85,453.506 1047.35,455.506 1046.5,457.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0a0a\",\n    d: \"M 2216.5,460.5 C 2217.45,473.818 2213.62,485.818 2205,496.5C 2203.27,498.451 2201.1,499.451 2198.5,499.5C 2198.34,497.473 2198.5,495.473 2199,493.5C 2204.85,482.473 2210.68,471.473 2216.5,460.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 1728.5,464.5 C 1742.66,464.465 1756.66,465.799 1770.5,468.5C 1766.83,468.833 1763.17,469.167 1759.5,469.5C 1749.15,468.831 1738.82,468.331 1728.5,468C 1724.12,472.099 1719.12,474.766 1713.5,476C 1718.21,471.662 1723.21,467.828 1728.5,464.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7972\",\n    d: \"M 2235.5,466.5 C 2236.85,472.352 2240.51,476.185 2246.5,478C 2258.14,479.115 2269.81,480.115 2281.5,481C 2294.9,485.132 2308.23,489.465 2321.5,494C 2346.08,501.122 2370.08,499.456 2393.5,489C 2401.59,485.208 2409.42,481.041 2417,476.5C 2430.43,481.308 2443.76,486.308 2457,491.5C 2458.06,515.558 2457.39,539.558 2455,563.5C 2453.04,550.561 2446.21,541.394 2434.5,536C 2428.88,533.846 2423.22,531.846 2417.5,530C 2386.41,522.715 2355.07,516.715 2323.5,512C 2311.58,508.687 2299.58,505.687 2287.5,503C 2282.5,502.333 2277.5,502.333 2272.5,503C 2258.81,507.545 2245.14,507.545 2231.5,503C 2227.45,502.566 2223.45,502.566 2219.5,503C 2229.96,493.125 2235.3,480.958 2235.5,466.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0b11\",\n    d: \"M 977.5,480.5 C 977.657,481.873 977.49,483.207 977,484.5C 973.366,488.91 968.866,490.91 963.5,490.5C 965.523,488.147 967.523,485.814 969.5,483.5C 971.799,482.222 974.132,480.889 976.5,479.5C 977.107,479.624 977.44,479.957 977.5,480.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#714b9e\",\n    d: \"M 930.5,489.5 C 928.5,488.167 926.833,486.5 925.5,484.5C 932.531,482.823 939.531,481.323 946.5,480C 942.631,483.534 939.131,487.367 936,491.5C 935,490.167 934,488.833 933,487.5C 932.292,488.381 931.458,489.047 930.5,489.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0a0a\",\n    d: \"M 2186.5,480.5 C 2187.2,483.335 2187.37,486.335 2187,489.5C 2187.88,486.898 2189.38,484.731 2191.5,483C 2192.6,482.568 2193.27,483.068 2193.5,484.5C 2191.79,492.594 2188.45,499.927 2183.5,506.5C 2182.57,504.887 2181.74,503.221 2181,501.5C 2177.71,508.594 2173.54,515.094 2168.5,521C 2165.52,521.86 2164.19,520.693 2164.5,517.5C 2169.53,503.771 2176.86,491.438 2186.5,480.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e86bf\",\n    d: \"M 925.5,484.5 C 926.833,486.5 928.5,488.167 930.5,489.5C 929.942,490.79 928.942,491.623 927.5,492C 924.106,493.075 920.772,494.242 917.5,495.5C 919.432,492.634 921.099,489.634 922.5,486.5C 922.973,485.094 923.973,484.427 925.5,484.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 1506.5,572.5 C 1508.4,572.262 1509.74,571.262 1510.5,569.5C 1512.03,569.573 1513.03,568.906 1513.5,567.5C 1515.03,567.573 1516.03,566.906 1516.5,565.5C 1518.4,565.262 1519.74,564.262 1520.5,562.5C 1522.03,562.573 1523.03,561.906 1523.5,560.5C 1525.4,560.262 1526.74,559.262 1527.5,557.5C 1534.11,553.55 1540.45,549.217 1546.5,544.5C 1548.03,544.573 1549.03,543.906 1549.5,542.5C 1551.03,542.573 1552.03,541.906 1552.5,540.5C 1554.03,540.573 1555.03,539.906 1555.5,538.5C 1557.03,538.573 1558.03,537.906 1558.5,536.5C 1562.33,534.421 1566.33,532.588 1570.5,531C 1582.83,530.208 1594.83,531.875 1606.5,536C 1618.04,540.07 1629.71,543.737 1641.5,547C 1646.5,547.667 1651.5,547.667 1656.5,547C 1661.84,544.993 1665,541.159 1666,535.5C 1668.99,528.433 1667.99,522.1 1663,516.5C 1662.57,512.452 1662.57,508.452 1663,504.5C 1658.17,501 1653.33,497.5 1648.5,494C 1660.56,490.443 1672.73,487.276 1685,484.5C 1689.6,485.424 1693.1,487.924 1695.5,492C 1706.17,493.085 1716.84,494.419 1727.5,496C 1737.14,498.655 1746.14,502.655 1754.5,508C 1748.92,507.02 1743.26,506.02 1737.5,505C 1722.02,502.637 1707.35,504.97 1693.5,512C 1679.35,525.932 1682.02,534.598 1701.5,538C 1696.52,542.487 1691.19,546.487 1685.5,550C 1668.17,560.333 1650.83,570.667 1633.5,581C 1627.29,584.606 1621.63,588.939 1616.5,594C 1597.76,594.136 1579.1,592.969 1560.5,590.5C 1555.79,591.101 1551.12,591.935 1546.5,593C 1523.21,602.144 1500.88,613.144 1479.5,626C 1462.43,645.067 1444.1,662.734 1424.5,679C 1409.23,687.137 1393.56,694.47 1377.5,701C 1369.33,703.243 1361.33,702.91 1353.5,700C 1348.19,695.569 1343.69,690.403 1340,684.5C 1328.16,671.496 1313.66,662.996 1296.5,659C 1307.28,655.44 1317.95,651.606 1328.5,647.5C 1326.23,643.726 1323.4,640.393 1320,637.5C 1319.32,636.216 1319.48,635.049 1320.5,634C 1324.83,633.333 1329.17,633.333 1333.5,634C 1343.73,635.247 1353.9,636.747 1364,638.5C 1371.46,638.408 1378.62,636.908 1385.5,634C 1398.38,635.14 1409.55,631.307 1419,622.5C 1419.16,620.613 1418.33,619.113 1416.5,618C 1435.8,610.009 1455.13,602.009 1474.5,594C 1485.62,587.362 1496.28,580.195 1506.5,572.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 300.5,486.5 C 294.594,488.306 288.927,487.806 283.5,485C 279.833,481.333 276.167,477.667 272.5,474C 260.471,470.051 248.137,468.384 235.5,469C 230.823,469.614 226.489,471.114 222.5,473.5C 222.975,488.458 223.142,503.458 223,518.5C 223.447,524.146 225.613,528.98 229.5,533C 242.136,539.471 252.803,548.304 261.5,559.5C 264.038,556.281 266.704,553.114 269.5,550C 281.187,550.005 292.854,550.338 304.5,551C 313.572,549.934 319.738,545.1 323,536.5C 325,527.833 327,519.167 329,510.5C 328.911,497.248 322.411,489.248 309.5,486.5C 307.031,485.683 304.365,485.183 301.5,485C 316.266,482.757 326.432,488.591 332,502.5C 332.667,505.833 332.667,509.167 332,512.5C 329.758,522.626 327.091,532.626 324,542.5C 320.957,547.877 316.457,551.377 310.5,553C 297.13,553.395 283.796,553.061 270.5,552C 267.021,555.15 263.854,558.65 261,562.5C 258.252,557.748 254.752,553.581 250.5,550C 242.674,544.253 234.674,538.753 226.5,533.5C 221.223,526.068 218.89,517.735 219.5,508.5C 220.872,495.815 221.372,483.148 221,470.5C 227.137,467.508 233.637,466.175 240.5,466.5C 251.742,467.215 262.742,469.215 273.5,472.5C 277.352,477.185 281.685,481.352 286.5,485C 291.257,486.037 295.924,486.537 300.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 300.5,486.5 C 303.5,486.5 306.5,486.5 309.5,486.5C 322.411,489.248 328.911,497.248 329,510.5C 327,519.167 325,527.833 323,536.5C 319.738,545.1 313.572,549.934 304.5,551C 292.854,550.338 281.187,550.005 269.5,550C 266.704,553.114 264.038,556.281 261.5,559.5C 252.803,548.304 242.136,539.471 229.5,533C 225.613,528.98 223.447,524.146 223,518.5C 223.142,503.458 222.975,488.458 222.5,473.5C 226.489,471.114 230.823,469.614 235.5,469C 248.137,468.384 260.471,470.051 272.5,474C 276.167,477.667 279.833,481.333 283.5,485C 288.927,487.806 294.594,488.306 300.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 234.5,472.5 C 235.693,472.97 236.36,473.97 236.5,475.5C 237.542,481.129 238.209,486.796 238.5,492.5C 235.041,493.436 232.207,495.436 230,498.5C 229.833,498 229.667,497.5 229.5,497C 231.68,494.316 233.68,491.483 235.5,488.5C 235.333,488.167 235.167,487.833 235,487.5C 233.316,489.351 231.483,491.018 229.5,492.5C 229.167,492.167 228.833,491.833 228.5,491.5C 233.117,486.043 235.117,479.709 234.5,472.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1603.5,486.5 C 1619.21,487.012 1634.21,490.512 1648.5,497C 1655.87,501.581 1658.37,508.081 1656,516.5C 1663.31,525.755 1663.14,534.921 1655.5,544C 1651.15,544.238 1646.82,543.905 1642.5,543C 1627.77,538.869 1613.11,534.536 1598.5,530C 1586.62,528.513 1574.78,528.013 1563,528.5C 1561.42,523.904 1561.42,519.237 1563,514.5C 1564.67,513.5 1566.33,512.5 1568,511.5C 1567.57,507.548 1567.57,503.548 1568,499.5C 1569.73,497.383 1571.9,495.883 1574.5,495C 1581.07,493.237 1587.74,491.904 1594.5,491C 1597.82,489.96 1600.82,488.46 1603.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1864.5,474.5 C 1864.92,473.876 1865.58,473.543 1866.5,473.5C 1882.38,477.109 1897.38,482.942 1911.5,491C 1915.42,492.102 1919.42,492.769 1923.5,493C 1919.41,495.22 1915.07,495.887 1910.5,495C 1907.44,492.277 1904.11,489.944 1900.5,488C 1888.59,483.209 1876.59,478.709 1864.5,474.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 2164.5,488.5 C 2165.78,489.694 2166.44,491.36 2166.5,493.5C 2165.13,504.361 2160.47,513.527 2152.5,521C 2150.65,522.128 2148.65,522.628 2146.5,522.5C 2145.52,513.48 2148.19,505.813 2154.5,499.5C 2155.09,499.709 2155.59,500.043 2156,500.5C 2156.33,502.5 2156.67,504.5 2157,506.5C 2159.79,500.593 2162.29,494.593 2164.5,488.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 2156.5,486.5 C 2157.04,486.56 2157.38,486.893 2157.5,487.5C 2151.18,494.831 2143.18,499.331 2133.5,501C 2125.54,502.109 2117.54,502.776 2109.5,503C 2105.22,507.289 2100.38,510.789 2095,513.5C 2094.5,513.333 2094,513.167 2093.5,513C 2097.17,508.993 2101.17,505.326 2105.5,502C 2098.23,500.484 2090.9,499.151 2083.5,498C 2079.91,497.439 2076.57,496.272 2073.5,494.5C 2084.31,493.799 2094.98,494.966 2105.5,498C 2124.38,501.859 2141.38,498.026 2156.5,486.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 2023.5,490.5 C 2024.99,491.312 2025.66,492.645 2025.5,494.5C 2024.45,501.716 2022.61,508.716 2020,515.5C 2018.98,516.687 2017.81,517.687 2016.5,518.5C 2015.34,515.216 2015.18,511.882 2016,508.5C 2018.02,502.268 2020.52,496.268 2023.5,490.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#160f1c\",\n    d: \"M 1584.5,434.5 C 1585.98,434.238 1587.31,434.571 1588.5,435.5C 1576.27,437.532 1565.77,442.866 1557,451.5C 1556.33,452.833 1555.67,454.167 1555,455.5C 1556.16,470.686 1550.32,482.186 1537.5,490C 1527.84,500.655 1519.34,512.155 1512,524.5C 1501.47,535.254 1492.13,546.921 1484,559.5C 1484.99,555.123 1486.99,551.123 1490,547.5C 1496.29,539.538 1502.96,531.871 1510,524.5C 1515.33,516.5 1520.67,508.5 1526,500.5C 1533.24,492.386 1540.9,484.719 1549,477.5C 1550.28,475.283 1551.28,472.949 1552,470.5C 1549.82,458.363 1553.99,449.197 1564.5,443C 1570.93,439.276 1577.6,436.443 1584.5,434.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1973.5,495.5 C 1974.5,495.5 1975.5,495.5 1976.5,495.5C 1976.82,503.392 1975.66,511.058 1973,518.5C 1971.64,519.38 1970.14,519.714 1968.5,519.5C 1968.34,516.813 1968.5,514.146 1969,511.5C 1970.61,506.177 1972.11,500.844 1973.5,495.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1969.5,493.5 C 1969.15,502.443 1967.65,511.443 1965,520.5C 1963.5,522.667 1962,524.833 1960.5,527C 1959.21,527.49 1957.87,527.657 1956.5,527.5C 1958.07,515.115 1962.41,503.782 1969.5,493.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 2037.5,494.5 C 2037.42,501.567 2035.09,508.067 2030.5,514C 2029.55,514.483 2028.55,514.649 2027.5,514.5C 2029.24,507.019 2032.57,500.353 2037.5,494.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 237.5,500.5 C 239.017,500.511 240.184,501.177 241,502.5C 244.066,508.9 248.566,514.067 254.5,518C 253.092,518.315 251.759,517.982 250.5,517C 248.627,514.791 246.46,512.958 244,511.5C 240.802,508.437 238.636,504.771 237.5,500.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1920.5,501.5 C 1921.1,501.735 1921.43,502.235 1921.5,503C 1920.1,509.119 1918.93,515.286 1918,521.5C 1917,523.5 1916,525.5 1915,527.5C 1913.99,528.337 1912.82,528.67 1911.5,528.5C 1911.11,518.331 1914.11,509.331 1920.5,501.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 1939.5,502.5 C 1940.5,502.414 1941.33,502.748 1942,503.5C 1942.17,505.333 1942.33,507.167 1942.5,509C 1941.61,514.834 1941.11,520.668 1941,526.5C 1944.92,518.984 1949.59,511.984 1955,505.5C 1955.17,506.333 1955.33,507.167 1955.5,508C 1953.03,515.448 1949.86,522.615 1946,529.5C 1942.99,528.823 1939.83,528.823 1936.5,529.5C 1936.69,527.897 1936.19,526.563 1935,525.5C 1933.9,527.381 1932.56,529.048 1931,530.5C 1929.38,530.275 1928.21,529.442 1927.5,528C 1930.59,518.994 1934.59,510.494 1939.5,502.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 226.5,503.5 C 230.287,511.075 234.121,518.741 238,526.5C 237.768,531.424 236.101,531.758 233,527.5C 228.688,520.068 226.522,512.068 226.5,503.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 2268.5,506.5 C 2316.23,512.343 2363.23,521.843 2409.5,535C 2429.74,539.239 2441.91,551.405 2446,571.5C 2448.43,594.796 2450.26,618.129 2451.5,641.5C 2436.48,642.379 2421.48,643.546 2406.5,645C 2387.7,653.067 2368.7,660.567 2349.5,667.5C 2338.83,665.833 2328.17,664.167 2317.5,662.5C 2308.63,664.734 2299.63,666.234 2290.5,667C 2274.49,667.879 2258.49,668.879 2242.5,670C 2237.12,670.976 2231.78,672.143 2226.5,673.5C 2218.04,670.736 2209.37,668.902 2200.5,668C 2177.51,668.731 2154.51,669.398 2131.5,670C 2106.28,664.022 2099.78,649.522 2112,626.5C 2114.78,622.049 2117.95,617.883 2121.5,614C 2136.23,606.604 2147.73,595.771 2156,581.5C 2159.74,578.049 2163.57,574.715 2167.5,571.5C 2177.86,555.634 2188.03,539.634 2198,523.5C 2204.39,516.553 2212.22,512.053 2221.5,510C 2232.83,510 2244.17,510 2255.5,510C 2260.11,509.386 2264.44,508.22 2268.5,506.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1639.5,497.5 C 1640.38,497.369 1641.04,497.702 1641.5,498.5C 1631.3,511.262 1618.3,515.429 1602.5,511C 1598.12,510.976 1594.12,509.809 1590.5,507.5C 1591.83,507.167 1593.17,506.833 1594.5,506.5C 1604.47,508.045 1614.47,508.878 1624.5,509C 1629.69,505.303 1634.69,501.47 1639.5,497.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1713.5,506.5 C 1730.33,506.479 1746.67,509.312 1762.5,515C 1766.05,516.267 1769.05,518.267 1771.5,521C 1771.36,521.772 1771.02,522.439 1770.5,523C 1755.6,522.844 1740.94,524.178 1726.5,527C 1730.04,523.799 1733.2,520.299 1736,516.5C 1736.49,515.207 1736.66,513.873 1736.5,512.5C 1735.45,512.351 1734.45,512.517 1733.5,513C 1731.53,517.968 1728.2,521.635 1723.5,524C 1716.66,525.99 1709.66,526.99 1702.5,527C 1707.28,528.98 1712.28,529.98 1717.5,530C 1710.14,533.217 1702.48,534.217 1694.5,533C 1691.94,531.938 1690.27,530.104 1689.5,527.5C 1693.92,516.307 1701.92,509.307 1713.5,506.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1929.5,506.5 C 1929.8,512.757 1928.97,519.091 1927,525.5C 1925.55,529.785 1922.72,532.452 1918.5,533.5C 1918.42,530.729 1918.92,528.063 1920,525.5C 1923.18,519.14 1926.35,512.807 1929.5,506.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#100a14\",\n    d: \"M 1445.5,598.5 C 1444.83,598.5 1444.5,598.833 1444.5,599.5C 1437.54,594.374 1431.37,588.374 1426,581.5C 1403.58,548.326 1380.91,515.326 1358,482.5C 1349,480.034 1340.17,476.867 1331.5,473C 1328.06,470.861 1324.89,468.361 1322,465.5C 1319.79,460.9 1316.95,456.734 1313.5,453C 1312.5,452.833 1311.5,452.667 1310.5,452.5C 1291.49,462.183 1278.49,477.183 1271.5,497.5C 1262.62,497.835 1253.95,499.335 1245.5,502C 1222.31,512.859 1206.47,530.359 1198,554.5C 1194.59,558.112 1190.76,561.112 1186.5,563.5C 1186.16,562.662 1185.49,562.328 1184.5,562.5C 1193.17,558.494 1198.51,551.827 1200.5,542.5C 1193.64,540.404 1187.31,537.238 1181.5,533C 1174.2,526.698 1167.2,520.032 1160.5,513C 1154.65,509.546 1148.99,509.88 1143.5,514C 1133.78,520.439 1128.11,529.439 1126.5,541C 1105.16,547.337 1085.82,557.337 1068.5,571C 1060.55,578.884 1054.89,588.217 1051.5,599C 1051.84,600.03 1052.5,600.53 1053.5,600.5C 1051.95,601.72 1050.28,601.72 1048.5,600.5C 1052.78,586.774 1060.45,575.274 1071.5,566C 1087.77,554.531 1105.44,545.697 1124.5,539.5C 1127.35,526.283 1134.69,516.45 1146.5,510C 1152.19,507.67 1157.52,508.336 1162.5,512C 1172.46,525.125 1185.12,534.625 1200.5,540.5C 1201.44,540.392 1202.28,540.059 1203,539.5C 1217.09,511.875 1239.59,497.542 1270.5,496.5C 1276.71,476.444 1289.05,461.277 1307.5,451C 1310.3,450.245 1312.97,450.578 1315.5,452C 1318.37,455.577 1320.87,459.411 1323,463.5C 1326.04,466.933 1329.54,469.766 1333.5,472C 1341.95,475.26 1350.45,478.093 1359,480.5C 1381.91,513.326 1404.58,546.326 1427,579.5C 1432.03,587.027 1438.19,593.36 1445.5,598.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181120\",\n    d: \"M 1285.5,498.5 C 1285.05,503.917 1284.22,509.25 1283,514.5C 1283.15,509.877 1283.48,505.21 1284,500.5C 1284.28,499.584 1284.78,498.918 1285.5,498.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22182f\",\n    d: \"M 1285.5,498.5 C 1285.51,496.314 1286.51,495.481 1288.5,496C 1287.63,497.045 1286.63,497.878 1285.5,498.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21172e\",\n    d: \"M 1292.5,491.5 C 1296.34,491.612 1296.34,492.279 1292.5,493.5C 1291.54,493.03 1291.54,492.363 1292.5,491.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5fb954\",\n    d: \"M 1759.5,510.5 C 1760.1,509.861 1760.93,509.528 1762,509.5C 1771.17,510.214 1780.34,510.881 1789.5,511.5C 1789.7,513.39 1789.04,514.89 1787.5,516C 1784.34,518.416 1781,520.582 1777.5,522.5C 1772.82,516.479 1766.82,512.479 1759.5,510.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7850a9\",\n    d: \"M 1184.5,562.5 C 1177.67,564.8 1170.67,566.467 1163.5,567.5C 1169.29,580.672 1168.62,593.505 1161.5,606C 1151,604.89 1140.5,603.39 1130,601.5C 1128.34,601.325 1127.01,600.658 1126,599.5C 1112.58,599.92 1099.08,599.92 1085.5,599.5C 1085.75,596.786 1085.92,594.119 1086,591.5C 1084.66,594.022 1083.83,596.689 1083.5,599.5C 1079.15,599.666 1074.82,599.499 1070.5,599C 1071.84,596.985 1072.34,594.818 1072,592.5C 1070.29,594.909 1069.46,597.575 1069.5,600.5C 1064.17,600.5 1058.83,600.5 1053.5,600.5C 1052.5,600.53 1051.84,600.03 1051.5,599C 1054.89,588.217 1060.55,578.884 1068.5,571C 1085.82,557.337 1105.16,547.337 1126.5,541C 1128.11,529.439 1133.78,520.439 1143.5,514C 1148.99,509.88 1154.65,509.546 1160.5,513C 1167.2,520.032 1174.2,526.698 1181.5,533C 1187.31,537.238 1193.64,540.404 1200.5,542.5C 1198.51,551.827 1193.17,558.494 1184.5,562.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#080808\",\n    d: \"M 244.5,518.5 C 249.868,524.196 254.034,530.863 257,538.5C 257.497,540.81 257.663,543.143 257.5,545.5C 256.325,545.719 255.325,545.386 254.5,544.5C 252.065,540.628 249.898,536.628 248,532.5C 247.692,533.308 247.192,533.975 246.5,534.5C 242.869,530.109 241.369,525.109 242,519.5C 243.908,522.332 244.741,521.999 244.5,518.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271a37\",\n    d: \"M 1277.5,517.5 C 1278.24,517.369 1278.91,517.536 1279.5,518C 1276.67,520.833 1273.83,523.667 1271,526.5C 1270.33,525.833 1270.33,525.167 1271,524.5C 1273.37,522.297 1275.54,519.963 1277.5,517.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 257.5,523.5 C 259.268,526.606 260.768,529.939 262,533.5C 264.072,530.846 265.739,531.18 267,534.5C 269.045,538.24 269.545,542.073 268.5,546C 266.633,546.711 265.133,546.211 264,544.5C 259.114,538.342 256.947,531.342 257.5,523.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c1f3d\",\n    d: \"M 1347.5,530.5 C 1345.57,527.863 1345.07,524.863 1346,521.5C 1346.95,524.432 1347.45,527.432 1347.5,530.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1762.5,526.5 C 1768.51,526.334 1774.51,526.501 1780.5,527C 1796.72,530.871 1813.06,534.204 1829.5,537C 1852.28,537.272 1874.95,538.939 1897.5,542C 1908.62,543.468 1917.45,548.635 1924,557.5C 1924.67,560.5 1924.67,563.5 1924,566.5C 1918.29,571.877 1912.29,576.877 1906,581.5C 1903.07,585.362 1901.24,589.695 1900.5,594.5C 1890.03,588.289 1878.7,584.789 1866.5,584C 1846.43,583.553 1826.43,584.553 1806.5,587C 1793.17,587.667 1779.83,587.667 1766.5,587C 1756.84,585.002 1747.51,582.002 1738.5,578C 1725.95,573.555 1714.28,575.221 1703.5,583C 1696.83,591 1689.5,598.333 1681.5,605C 1670.42,608.894 1659.08,609.56 1647.5,607C 1639.14,605.248 1631.14,602.581 1623.5,599C 1653.5,579 1683.5,559 1713.5,539C 1718.53,536.211 1723.87,534.211 1729.5,533C 1740.58,530.483 1751.58,528.316 1762.5,526.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 2023.5,527.5 C 2041.04,531.241 2058.71,534.407 2076.5,537C 2097.1,538.5 2117.43,537.167 2137.5,533C 2144.09,541.424 2146.25,550.924 2144,561.5C 2142.21,567.284 2139.54,572.617 2136,577.5C 2122.88,591.294 2108.05,602.794 2091.5,612C 2069.41,623.766 2047.58,635.932 2026,648.5C 2021.63,642.797 2016.13,638.63 2009.5,636C 2000.63,633.465 1991.63,631.465 1982.5,630C 1979.94,629.315 1978.11,627.815 1977,625.5C 1976.25,626.126 1975.42,626.626 1974.5,627C 1964.17,627.352 1953.83,627.185 1943.5,626.5C 1935.94,626.07 1928.61,627.07 1921.5,629.5C 1916.85,618.414 1913.52,606.914 1911.5,595C 1911.46,592.37 1911.96,589.87 1913,587.5C 1918.59,581.904 1924.76,577.07 1931.5,573C 1935.39,569.61 1938.73,565.777 1941.5,561.5C 1965.09,559.471 1986.75,551.971 2006.5,539C 2012.34,535.304 2018.01,531.47 2023.5,527.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 263.5,523.5 C 267.915,527.041 272.915,529.541 278.5,531C 290.187,530.995 301.854,530.662 313.5,530C 306.945,531.76 300.278,533.093 293.5,534C 297.305,535.778 299.472,538.612 300,542.5C 297.022,540.689 294.522,538.356 292.5,535.5C 282.64,535.287 273.64,532.454 265.5,527C 264.177,526.184 263.511,525.017 263.5,523.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0e\",\n    d: \"M 180.5,529.5 C 185.046,529.268 189.379,530.101 193.5,532C 202.56,532.118 211.56,532.785 220.5,534C 226.124,535.956 230.957,539.123 235,543.5C 241.412,555.993 248.079,568.326 255,580.5C 261.635,587.111 267.301,594.444 272,602.5C 275.21,606.187 279.044,609.021 283.5,611C 289.464,617.761 293.131,625.595 294.5,634.5C 294.407,645.099 289.074,651.265 278.5,653C 263.952,653.125 249.452,652.291 235,650.5C 227.474,650.145 220.141,651.145 213,653.5C 197.323,650.256 181.489,648.09 165.5,647C 160.371,645.623 155.204,644.456 150,643.5C 144,644.167 138,644.833 132,645.5C 129.409,645.435 126.909,644.935 124.5,644C 114.5,639 104.5,634 94.5,629C 84.1679,627.417 73.8345,625.917 63.5,624.5C 64.0165,608.124 65.1831,591.791 67,575.5C 68.7012,562.49 75.5345,553.657 87.5,549C 118.041,539.726 149.041,533.226 180.5,529.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 182.5,531.5 C 186.827,532.551 191.16,533.718 195.5,535C 204.227,535.123 212.894,535.79 221.5,537C 225.579,539.075 229.079,541.908 232,545.5C 238.588,557.007 244.921,568.674 251,580.5C 257.182,585.846 262.182,592.179 266,599.5C 271.75,604.852 277.417,610.185 283,615.5C 287.985,622.453 289.652,630.119 288,638.5C 285.293,644.274 280.793,647.774 274.5,649C 260.073,649.859 245.74,649.026 231.5,646.5C 224.503,646.999 217.669,648.333 211,650.5C 206.3,648.783 201.467,647.617 196.5,647C 186.5,646 176.5,645 166.5,644C 162.724,643.408 159.057,642.408 155.5,641C 146.844,641.464 138.177,641.797 129.5,642C 118.378,636.939 107.378,631.606 96.5,626C 87.1324,624.996 77.7991,623.829 68.5,622.5C 69.0814,606.456 70.2481,590.456 72,574.5C 73.2185,566.157 77.0518,559.324 83.5,554C 94.0902,549.137 105.09,545.47 116.5,543C 138.475,538.172 160.475,534.339 182.5,531.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7972\",\n    d: \"M 2178.5,534.5 C 2180.17,534.5 2181.83,534.5 2183.5,534.5C 2183.16,539.192 2181.66,543.526 2179,547.5C 2160.46,573.041 2138.29,594.874 2112.5,613C 2102.86,621.292 2096.86,631.626 2094.5,644C 2094.22,650.236 2096.22,655.569 2100.5,660C 2114.49,670 2130.16,675.667 2147.5,677C 2165.2,677.823 2182.87,677.323 2200.5,675.5C 2209.21,676.626 2217.87,677.96 2226.5,679.5C 2258.63,676.142 2290.8,673.142 2323,670.5C 2330.56,670.839 2338.06,671.673 2345.5,673C 2303.46,680.708 2261.13,686.375 2218.5,690C 2197.83,690.333 2177.17,690.667 2156.5,691C 2140.62,694.624 2124.62,697.624 2108.5,700C 2082.37,701.9 2056.37,704.9 2030.5,709C 2026.72,710.058 2023.38,711.891 2020.5,714.5C 2019.42,713.335 2018.58,712.002 2018,710.5C 2017.17,705.994 2016.33,701.494 2015.5,697C 2019.31,688.245 2021.48,679.079 2022,669.5C 2024.83,660.691 2029.99,653.524 2037.5,648C 2062.03,631.563 2087.69,616.896 2114.5,604C 2126.69,597.98 2136.85,589.48 2145,578.5C 2148,572.49 2150,566.157 2151,559.5C 2157.49,548.178 2166.65,539.845 2178.5,534.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#241931\",\n    d: \"M 1347.5,530.5 C 1349.24,532.64 1350.4,534.973 1351,537.5C 1348.76,535.691 1347.6,533.358 1347.5,530.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271b36\",\n    d: \"M 1283.5,533.5 C 1284.64,534.793 1284.31,535.959 1282.5,537C 1281.24,537.982 1279.91,538.315 1278.5,538C 1280.62,536.951 1282.28,535.451 1283.5,533.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c291c\",\n    d: \"M 1558.5,536.5 C 1558.03,537.906 1557.03,538.573 1555.5,538.5C 1555.97,537.094 1556.97,536.427 1558.5,536.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#213420\",\n    d: \"M 1555.5,538.5 C 1555.03,539.906 1554.03,540.573 1552.5,540.5C 1552.97,539.094 1553.97,538.427 1555.5,538.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21351f\",\n    d: \"M 1552.5,540.5 C 1552.03,541.906 1551.03,542.573 1549.5,542.5C 1549.97,541.094 1550.97,540.427 1552.5,540.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251935\",\n    d: \"M 1232.5,546.5 C 1233.8,543.025 1236.14,540.858 1239.5,540C 1237.3,542.372 1234.96,544.539 1232.5,546.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e331d\",\n    d: \"M 1549.5,542.5 C 1549.03,543.906 1548.03,544.573 1546.5,544.5C 1546.97,543.094 1547.97,542.427 1549.5,542.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141914\",\n    d: \"M 1546.5,544.5 C 1540.45,549.217 1534.11,553.55 1527.5,557.5C 1533,552.002 1539.34,547.669 1546.5,544.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271b36\",\n    d: \"M 1371.5,548.5 C 1366.57,546.242 1361.57,544.075 1356.5,542C 1362.4,542.132 1367.4,544.298 1371.5,548.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a1d3b\",\n    d: \"M 1150.5,550.5 C 1151.47,553.52 1150.97,556.52 1149,559.5C 1149.01,556.464 1149.51,553.464 1150.5,550.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281b36\",\n    d: \"M 1344.5,557.5 C 1345.57,556.308 1346.4,556.641 1347,558.5C 1348.53,561.72 1349.19,565.053 1349,568.5C 1347.94,564.551 1346.44,560.884 1344.5,557.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c291b\",\n    d: \"M 1527.5,557.5 C 1526.74,559.262 1525.4,560.262 1523.5,560.5C 1524.26,558.738 1525.6,557.738 1527.5,557.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1909.5,554.5 C 1910.74,557.74 1910.58,561.074 1909,564.5C 1905.38,569.789 1901.38,574.789 1897,579.5C 1897.68,573.43 1899.02,567.43 1901,561.5C 1902.67,558.833 1904.33,558.833 1906,561.5C 1907.7,559.423 1908.87,557.09 1909.5,554.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1807.5,558.5 C 1818.89,558.899 1830.23,559.899 1841.5,561.5C 1841.9,569.035 1838.9,574.702 1832.5,578.5C 1832.17,578.167 1831.83,577.833 1831.5,577.5C 1833.63,573.535 1835.97,569.702 1838.5,566C 1827.59,563.105 1816.59,562.771 1805.5,565C 1798.47,568.052 1791.97,571.886 1786,576.5C 1783.81,575.941 1783.15,574.607 1784,572.5C 1790.56,565.637 1798.4,560.97 1807.5,558.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e301d\",\n    d: \"M 1523.5,560.5 C 1523.03,561.906 1522.03,562.573 1520.5,562.5C 1520.97,561.094 1521.97,560.427 1523.5,560.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281b37\",\n    d: \"M 1371.5,548.5 C 1373.07,548.937 1374.24,549.937 1375,551.5C 1377.34,556.343 1379.17,561.343 1380.5,566.5C 1377.52,560.534 1374.52,554.534 1371.5,548.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223321\",\n    d: \"M 1520.5,562.5 C 1519.74,564.262 1518.4,565.262 1516.5,565.5C 1517.26,563.738 1518.6,562.738 1520.5,562.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1893.5,561.5 C 1896.12,569.023 1894.62,576.023 1889,582.5C 1887.46,580.045 1887.13,577.379 1888,574.5C 1890.4,570.365 1892.24,566.032 1893.5,561.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281c37\",\n    d: \"M 1145.5,564.5 C 1146.1,564.735 1146.43,565.235 1146.5,566C 1145.8,567.893 1144.97,569.726 1144,571.5C 1143.86,569.078 1144.36,566.745 1145.5,564.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e1f3f\",\n    d: \"M 1232.5,546.5 C 1230.42,550.328 1228.59,554.328 1227,558.5C 1226.5,561.146 1226.34,563.813 1226.5,566.5C 1222.59,566.467 1219.26,567.801 1216.5,570.5C 1216.17,570.333 1215.83,570.167 1215.5,570C 1217.77,567.074 1220.77,565.574 1224.5,565.5C 1224.85,558.083 1227.52,551.749 1232.5,546.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21361f\",\n    d: \"M 1516.5,565.5 C 1516.03,566.906 1515.03,567.573 1513.5,567.5C 1513.97,566.094 1514.97,565.427 1516.5,565.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251933\",\n    d: \"M 1380.5,566.5 C 1382.17,568.179 1383.01,570.179 1383,572.5C 1381.34,570.842 1380.5,568.842 1380.5,566.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2d1e\",\n    d: \"M 1513.5,567.5 C 1513.03,568.906 1512.03,569.573 1510.5,569.5C 1510.97,568.094 1511.97,567.427 1513.5,567.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f2e1f\",\n    d: \"M 1510.5,569.5 C 1509.74,571.262 1508.4,572.262 1506.5,572.5C 1507.26,570.738 1508.6,569.738 1510.5,569.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271b36\",\n    d: \"M 1360.5,576.5 C 1357.48,576.159 1354.82,574.993 1352.5,573C 1355.5,573.329 1358.16,574.496 1360.5,576.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281b37\",\n    d: \"M 1087.5,572.5 C 1085.96,575.611 1083.46,578.611 1080,581.5C 1081.49,577.831 1083.99,574.831 1087.5,572.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281b37\",\n    d: \"M 1360.5,576.5 C 1362.75,576.916 1364.25,578.249 1365,580.5C 1365.88,585.287 1365.55,589.953 1364,594.5C 1364.36,590.199 1364.36,585.866 1364,581.5C 1363,579.677 1361.84,578.01 1360.5,576.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#261a34\",\n    d: \"M 1139.5,577.5 C 1139.97,579.97 1139.14,582.304 1137,584.5C 1137.22,582.037 1138.05,579.704 1139.5,577.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1720.5,580.5 C 1723.52,580.335 1726.52,580.502 1729.5,581C 1744.28,587.927 1759.61,593.26 1775.5,597C 1780.83,597.667 1786.17,597.667 1791.5,597C 1803.23,593.515 1815.23,591.515 1827.5,591C 1844.17,590.333 1860.83,590.333 1877.5,591C 1882.76,591.45 1887.76,592.784 1892.5,595C 1903.23,605.288 1909.56,617.788 1911.5,632.5C 1901.9,634.255 1892.24,634.755 1882.5,634C 1881,630.183 1879.5,626.35 1878,622.5C 1877.67,626.167 1877.33,629.833 1877,633.5C 1875.95,634.517 1874.78,634.684 1873.5,634C 1872.7,629.92 1872.2,625.753 1872,621.5C 1871.71,619.956 1871.04,618.623 1870,617.5C 1868.67,623.149 1867.5,628.816 1866.5,634.5C 1865.17,635.833 1863.83,635.833 1862.5,634.5C 1861.97,630.594 1860.8,626.927 1859,623.5C 1858.67,626.833 1858.33,630.167 1858,633.5C 1856.13,635.751 1854.96,638.417 1854.5,641.5C 1845.1,645.614 1836.27,650.614 1828,656.5C 1829.07,652.695 1830.41,649.029 1832,645.5C 1825.52,653.614 1818.69,661.447 1811.5,669C 1806.79,669.496 1802.13,669.162 1797.5,668C 1779.03,662.065 1760.69,655.732 1742.5,649C 1728.11,646.612 1713.78,643.945 1699.5,641C 1695.93,640.3 1693.1,638.467 1691,635.5C 1691.44,611.945 1701.27,593.612 1720.5,580.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21172e\",\n    d: \"M 1102.5,586.5 C 1102.51,584.314 1103.51,583.481 1105.5,584C 1104.63,585.045 1103.63,585.878 1102.5,586.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 2085.5,582.5 C 2087.54,592.363 2085.38,601.697 2079,610.5C 2077.13,612.219 2074.96,613.219 2072.5,613.5C 2076.55,603.062 2080.88,592.729 2085.5,582.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151515\",\n    d: \"M 2089.5,565.5 C 2092.52,565.335 2095.52,565.502 2098.5,566C 2090.06,569.206 2081.4,571.873 2072.5,574C 2056.28,581.275 2039.95,588.275 2023.5,595C 2011.29,597.449 1998.95,598.115 1986.5,597C 1983.88,596.849 1981.55,596.015 1979.5,594.5C 1989.07,594.55 1998.74,594.384 2008.5,594C 2014.91,593.05 2021.25,591.717 2027.5,590C 2048.18,581.481 2068.84,573.314 2089.5,565.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22182e\",\n    d: \"M 1102.5,586.5 C 1100.48,590.222 1099.31,594.222 1099,598.5C 1097.75,593.695 1098.91,589.695 1102.5,586.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 2070.5,594.5 C 2071.63,596.966 2071.8,599.633 2071,602.5C 2068.52,611.807 2063.36,619.141 2055.5,624.5C 2054.42,623.635 2054.25,622.635 2055,621.5C 2059.67,612.146 2064.84,603.146 2070.5,594.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 2045.5,595.5 C 2047.84,595.506 2049.18,596.673 2049.5,599C 2046.74,610.035 2041.07,619.202 2032.5,626.5C 2031.4,623.81 2031.56,621.143 2033,618.5C 2037.18,610.806 2041.35,603.14 2045.5,595.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b2850\",\n    d: \"M 1218.5,594.5 C 1219.53,594.897 1219.69,595.563 1219,596.5C 1217.89,598.329 1216.39,599.163 1214.5,599C 1216.04,597.629 1217.37,596.129 1218.5,594.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1557.5,599.5 C 1570.25,599.155 1582.91,599.988 1595.5,602C 1618.91,607.687 1642.25,613.687 1665.5,620C 1651.08,628.959 1636.58,637.792 1622,646.5C 1619.82,642.71 1617.82,642.71 1616,646.5C 1614.87,644 1613.03,642.833 1610.5,643C 1607.65,647.883 1605.49,653.05 1604,658.5C 1603.24,654.181 1602.57,649.848 1602,645.5C 1601.42,642.412 1600.09,639.745 1598,637.5C 1598.6,645.755 1598.6,654.089 1598,662.5C 1596.35,670.251 1591.52,674.084 1583.5,674C 1573.48,674.387 1563.48,675.054 1553.5,676C 1529.88,679.439 1506.22,682.439 1482.5,685C 1464.68,685.984 1447.02,685.651 1429.5,684C 1435.17,679.667 1440.83,675.333 1446.5,671C 1458.83,658.667 1471.17,646.333 1483.5,634C 1495.75,623.703 1509.42,615.703 1524.5,610C 1535.67,606.633 1546.67,603.133 1557.5,599.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 2054.5,596.5 C 2055.04,596.56 2055.38,596.893 2055.5,597.5C 2052.93,606.482 2049.93,615.315 2046.5,624C 2045.21,624.49 2043.87,624.657 2042.5,624.5C 2044.3,614.237 2048.3,604.903 2054.5,596.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 2033.5,599.5 C 2034.37,608.306 2031.37,615.806 2024.5,622C 2019.23,625.727 2017.73,624.561 2020,618.5C 2024.33,612.01 2028.83,605.676 2033.5,599.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1381.5,604.5 C 1387.96,605.365 1394.29,606.699 1400.5,608.5C 1403.77,609.88 1407.11,611.38 1410.5,613C 1415.27,616.018 1415.6,619.351 1411.5,623C 1398.91,628.03 1385.91,631.53 1372.5,633.5C 1359.15,632.164 1345.82,630.664 1332.5,629C 1332.2,615.648 1338.53,606.981 1351.5,603C 1361.58,602.171 1371.58,602.671 1381.5,604.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62c057\",\n    d: \"M 1051.5,603.5 C 1110.1,600.801 1167.44,607.968 1223.5,625C 1213.76,625.294 1204.09,626.294 1194.5,628C 1184.34,629.461 1180.84,634.961 1184,644.5C 1187.01,646.941 1190.51,648.107 1194.5,648C 1212.84,649.704 1230.84,648.037 1248.5,643C 1252.39,639.412 1252.39,635.746 1248.5,632C 1255.84,631.778 1263.17,632.111 1270.5,633C 1265.47,633.953 1260.8,635.787 1256.5,638.5C 1253.83,643.167 1251.17,647.833 1248.5,652.5C 1246.5,652.833 1244.5,653.167 1242.5,653.5C 1206.28,650.768 1170.12,651.435 1134,655.5C 1105.47,652.627 1076.97,649.46 1048.5,646C 1032.85,644.748 1017.18,644.414 1001.5,645C 997.347,645.384 993.347,646.384 989.5,648C 968.84,656.942 947.506,663.776 925.5,668.5C 923.943,672.728 920.943,675.061 916.5,675.5C 912.132,674.483 908.132,672.65 904.5,670C 896.015,661.846 886.682,654.846 876.5,649C 854.294,648.385 833.627,653.718 814.5,665C 810.238,667.691 808.238,671.524 808.5,676.5C 775.428,674.126 742.428,670.96 709.5,667C 677.111,658.153 644.778,649.153 612.5,640C 627.104,636.412 641.771,633.079 656.5,630C 659.833,628 662.5,625.333 664.5,622C 665.793,621.51 667.127,621.343 668.5,621.5C 668.232,624.119 668.565,626.619 669.5,629C 679.932,629.589 689.599,632.589 698.5,638C 705.167,638.333 711.833,638.667 718.5,639C 733.596,642.255 748.762,645.089 764,647.5C 769.98,648.4 774.814,646.566 778.5,642C 783.833,641.667 789.167,641.333 794.5,641C 798.179,638.912 798.512,636.245 795.5,633C 797.167,632.833 798.833,632.667 800.5,632.5C 836.02,637.275 871.686,639.109 907.5,638C 924.825,636.835 941.825,633.835 958.5,629C 976.363,622.601 994.363,616.601 1012.5,611C 1025.46,607.507 1038.46,605.007 1051.5,603.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 690.5,603.5 C 691.833,603.5 693.167,603.5 694.5,603.5C 697.949,604.97 701.616,606.136 705.5,607C 725.716,606.553 745.05,610.553 763.5,619C 774.285,622.888 783.952,628.554 792.5,636C 787.706,638.022 782.706,639.188 777.5,639.5C 777.311,634.423 775.478,630.09 772,626.5C 772.256,629.636 772.756,632.803 773.5,636C 773.518,638.379 772.851,640.546 771.5,642.5C 764.961,646.421 758.628,645.921 752.5,641C 756.908,634.587 760.074,635.087 762,642.5C 763.381,640.365 764.381,638.032 765,635.5C 766.093,637.349 767.426,639.016 769,640.5C 769.667,637.167 769.667,633.833 769,630.5C 768.692,629.692 768.192,629.025 767.5,628.5C 765.684,629.815 764.017,631.315 762.5,633C 760.5,633.667 758.5,633.667 756.5,633C 751.167,629.667 745.833,626.333 740.5,623C 722.064,619.261 703.731,615.094 685.5,610.5C 684.304,610.846 684.304,611.346 685.5,612C 693.289,615.796 698.123,621.962 700,630.5C 700.172,626.129 700.672,621.796 701.5,617.5C 705.464,622.389 707.464,628.056 707.5,634.5C 704.482,634.665 701.482,634.498 698.5,634C 690.237,629.857 681.571,627.023 672.5,625.5C 674.286,614.535 680.286,607.201 690.5,603.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1870.5,605.5 C 1878.41,604.171 1879.74,606.004 1874.5,611C 1862.64,617.844 1849.97,621.844 1836.5,623C 1836.04,622.586 1835.71,622.086 1835.5,621.5C 1847.04,615.895 1858.71,610.562 1870.5,605.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 343.5,555.5 C 345.655,555.372 347.655,555.872 349.5,557C 357.984,563.744 366.984,569.744 376.5,575C 383.857,578.227 391.524,580.394 399.5,581.5C 404.147,587.98 409.647,593.647 416,598.5C 418.174,601.546 418.841,604.88 418,608.5C 415.785,615.647 413.285,622.647 410.5,629.5C 407.308,628.134 403.974,627.301 400.5,627C 392.118,626.804 383.785,626.304 375.5,625.5C 374.41,626.727 373.076,627.56 371.5,628C 360.47,627.913 351.137,631.746 343.5,639.5C 327.699,629.53 312.032,619.364 296.5,609C 284.797,601.299 275.964,591.132 270,578.5C 269.333,573.833 269.333,569.167 270,564.5C 271.178,561.467 272.844,558.801 275,556.5C 298.001,561.825 320.834,561.491 343.5,555.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 341.5,557.5 C 343.989,557.298 346.323,557.798 348.5,559C 361.898,571.199 377.565,578.865 395.5,582C 400,587.833 405.167,593 411,597.5C 412.404,599.639 413.237,601.972 413.5,604.5C 411.292,611.788 409.292,619.122 407.5,626.5C 396.001,625.062 384.501,624.062 373,623.5C 372.097,624.701 370.931,625.535 369.5,626C 358.813,625.787 349.979,629.62 343,637.5C 329.927,628.045 316.427,619.211 302.5,611C 295.039,605.207 287.872,599.041 281,592.5C 274.905,585.216 272.238,576.882 273,567.5C 273.848,564.302 275.348,561.469 277.5,559C 298.968,563.811 320.301,563.311 341.5,557.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 338.5,604.5 C 341.807,608.426 344.64,612.76 347,617.5C 347.781,618.944 347.614,620.277 346.5,621.5C 340.891,617.279 338.224,611.612 338.5,604.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 325.5,601.5 C 327.136,602.749 328.303,604.416 329,606.5C 329.333,605.167 329.667,603.833 330,602.5C 330.667,601.167 331.333,601.167 332,602.5C 335.244,608.487 338.077,614.654 340.5,621C 340.167,621.5 339.833,622 339.5,622.5C 337.142,620.976 335.309,618.976 334,616.5C 333.798,618.256 333.298,619.922 332.5,621.5C 331.522,621.023 330.689,620.357 330,619.5C 328.495,613.482 326.995,607.482 325.5,601.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 316.5,600.5 C 320.526,605.886 323.526,611.886 325.5,618.5C 325.167,619.167 324.833,619.833 324.5,620.5C 318.864,614.908 316.197,608.242 316.5,600.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 301.5,582.5 C 304.717,581.405 308.05,581.571 311.5,583C 322.769,589.468 334.435,595.134 346.5,600C 349.167,600.667 351.833,601.333 354.5,602C 360.26,602.277 365.927,602.444 371.5,602.5C 363.947,604.971 356.281,605.137 348.5,603C 337.102,598.468 326.102,593.134 315.5,587C 310.846,585.393 306.18,583.893 301.5,582.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 306.5,592.5 C 310.355,598.39 313.355,604.89 315.5,612C 315.167,612.5 314.833,613 314.5,613.5C 311.744,611.909 309.911,609.576 309,606.5C 307.458,601.955 306.624,597.289 306.5,592.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8d8d\",\n    d: \"M 709.5,619.5 C 710.822,619.33 711.989,619.663 713,620.5C 715.059,623.949 716.559,627.616 717.5,631.5C 718.487,628.232 718.82,624.898 718.5,621.5C 726.792,623.656 735.125,625.656 743.5,627.5C 743.467,631.869 743.8,636.202 744.5,640.5C 734.014,637.668 723.348,635.668 712.5,634.5C 711.115,629.576 710.115,624.576 709.5,619.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 1584.5,618.5 C 1586.31,618.491 1587.98,618.991 1589.5,620C 1583.44,624.696 1576.78,628.363 1569.5,631C 1554.75,635.748 1539.75,639.082 1524.5,641C 1528.22,638.757 1532.22,637.09 1536.5,636C 1547.46,633.177 1558.46,630.51 1569.5,628C 1574.67,624.97 1579.67,621.804 1584.5,618.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1789.5,624.5 C 1790.1,623.861 1790.93,623.528 1792,623.5C 1801.98,625.394 1811.81,627.728 1821.5,630.5C 1810.09,632.218 1799.43,630.218 1789.5,624.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 1198.5,628.5 C 1214.43,628.429 1230.09,630.262 1245.5,634C 1248.73,635.724 1249.06,637.724 1246.5,640C 1241.17,641 1235.83,642 1230.5,643C 1229.03,643.635 1227.7,644.469 1226.5,645.5C 1223.2,643.976 1219.7,643.309 1216,643.5C 1207.18,644.403 1198.34,644.57 1189.5,644C 1188.17,641.123 1188.34,638.289 1190,635.5C 1192.44,632.546 1195.27,630.213 1198.5,628.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141414\",\n    d: \"M 465.5,653.5 C 464.167,653.5 462.833,653.5 461.5,653.5C 461.489,651.983 460.823,650.816 459.5,650C 454.659,647.079 449.659,644.412 444.5,642C 438.167,641.667 431.833,641.333 425.5,641C 416.89,638.464 408.224,636.13 399.5,634C 383.82,632.938 368.653,635.105 354,640.5C 353.364,652.385 354.698,664.052 358,675.5C 358.671,676.252 359.504,676.586 360.5,676.5C 359.432,677.434 358.099,677.768 356.5,677.5C 352.659,665.129 350.826,652.463 351,639.5C 354.478,637.227 358.311,635.727 362.5,635C 372.072,633.084 381.739,631.918 391.5,631.5C 403.993,633.539 416.326,636.373 428.5,640C 433.201,640.719 437.867,640.553 442.5,639.5C 451.237,642.604 458.904,647.27 465.5,653.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 461.5,653.5 C 456.88,653.74 452.547,654.74 448.5,656.5C 443.88,656.74 439.547,657.74 435.5,659.5C 432.219,659.42 429.219,660.087 426.5,661.5C 425.432,662.434 424.099,662.768 422.5,662.5C 415.248,663.595 408.248,665.261 401.5,667.5C 401.167,667.5 400.833,667.5 400.5,667.5C 397.772,667.171 395.438,667.837 393.5,669.5C 392.833,669.5 392.167,669.5 391.5,669.5C 388.772,669.171 386.438,669.837 384.5,671.5C 382.735,672.461 380.735,672.795 378.5,672.5C 375.505,672.294 372.838,672.96 370.5,674.5C 370.167,674.5 369.833,674.5 369.5,674.5C 366.219,674.42 363.219,675.087 360.5,676.5C 359.504,676.586 358.671,676.252 358,675.5C 354.698,664.052 353.364,652.385 354,640.5C 368.653,635.105 383.82,632.938 399.5,634C 408.224,636.13 416.89,638.464 425.5,641C 431.833,641.333 438.167,641.667 444.5,642C 449.659,644.412 454.659,647.079 459.5,650C 460.823,650.816 461.489,651.983 461.5,653.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8e8e\",\n    d: \"M 1298.5,633.5 C 1310.76,631.794 1318.42,636.794 1321.5,648.5C 1308.57,651.815 1295.57,654.981 1282.5,658C 1271.92,659.749 1262.08,657.916 1253,652.5C 1252.52,651.552 1252.35,650.552 1252.5,649.5C 1256.85,649.666 1261.18,649.499 1265.5,649C 1262.7,647.207 1260.2,645.04 1258,642.5C 1257.49,641.004 1257.99,639.837 1259.5,639C 1270.17,638.667 1280.83,638.333 1291.5,638C 1293.9,636.476 1296.23,634.976 1298.5,633.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1940.5,633.5 C 1963.93,634.251 1986.93,637.751 2009.5,644C 2011.59,644.792 2013.42,645.959 2015,647.5C 2014.24,664.553 2011.24,681.219 2006,697.5C 2002.53,702.491 1997.7,705.324 1991.5,706C 1976.53,707.188 1961.53,707.855 1946.5,708C 1944.2,708.658 1941.87,709.158 1939.5,709.5C 1930.46,708.216 1921.46,706.716 1912.5,705C 1898.06,702.815 1885.4,706.482 1874.5,716C 1872.97,716.923 1871.3,717.423 1869.5,717.5C 1854.49,715.416 1839.49,713.416 1824.5,711.5C 1824.12,700.112 1824.62,688.779 1826,677.5C 1828.18,670.308 1832.01,664.141 1837.5,659C 1847.89,651.639 1859.22,646.139 1871.5,642.5C 1879.8,643.607 1888.14,643.774 1896.5,643C 1911.45,640.425 1926.11,637.258 1940.5,633.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1214.5,634.5 C 1220.51,634.334 1226.51,634.501 1232.5,635C 1221.82,638.37 1210.82,639.703 1199.5,639C 1199.04,638.586 1198.71,638.086 1198.5,637.5C 1203.89,636.143 1209.23,635.143 1214.5,634.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7d7d7d\",\n    d: \"M 747.5,634.5 C 748.5,634.5 749.5,634.5 750.5,634.5C 751.014,636.512 751.18,638.512 751,640.5C 748.735,639.084 747.569,637.084 747.5,634.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#919191\",\n    d: \"M 1655.5,636.5 C 1665.73,637.849 1675.73,640.349 1685.5,644C 1704.85,647.574 1724.18,651.241 1743.5,655C 1758.56,660.133 1773.56,665.466 1788.5,671C 1795.44,672.814 1802.44,674.314 1809.5,675.5C 1812.93,685.231 1814.43,695.231 1814,705.5C 1813.5,706 1813,706.5 1812.5,707C 1810.17,707.167 1807.83,707.333 1805.5,707.5C 1792.86,706.359 1780.19,705.692 1767.5,705.5C 1747.53,707.189 1727.53,707.689 1707.5,707C 1687.5,703.837 1667.83,699.17 1648.5,693C 1635.51,690.65 1622.51,688.483 1609.5,686.5C 1616.2,669.644 1626.53,655.477 1640.5,644C 1645.31,640.927 1650.31,638.427 1655.5,636.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 516.5,639.5 C 527.134,641.105 537.801,642.605 548.5,644C 567.208,644.656 585.875,644.323 604.5,643C 636.106,649.981 667.106,658.981 697.5,670C 734.521,673.623 771.521,677.456 808.5,681.5C 739.892,687.637 671.225,693.137 602.5,698C 587.169,698.636 571.836,699.136 556.5,699.5C 532.714,697.1 508.714,696.1 484.5,696.5C 480.785,696.423 477.119,696.756 473.5,697.5C 473.662,695.473 473.495,693.473 473,691.5C 470.628,693.703 468.461,696.037 466.5,698.5C 466.167,698.5 465.833,698.5 465.5,698.5C 394.444,708.287 323.444,718.62 252.5,729.5C 250.577,728.908 248.911,727.908 247.5,726.5C 244.71,722.372 241.043,719.372 236.5,717.5C 234.664,715.412 232.331,714.079 229.5,713.5C 228.486,712.326 227.153,711.66 225.5,711.5C 225.47,710.503 225.97,709.836 227,709.5C 231.027,708.379 234.861,707.045 238.5,705.5C 243.532,704.659 248.532,703.659 253.5,702.5C 254.167,702.5 254.5,702.167 254.5,701.5C 258.197,700.992 261.864,700.326 265.5,699.5C 266.167,699.5 266.5,699.167 266.5,698.5C 286.469,694.577 306.135,689.911 325.5,684.5C 325.833,684.5 326.167,684.5 326.5,684.5C 330.736,683.992 334.736,682.992 338.5,681.5C 341.781,681.58 344.781,680.913 347.5,679.5C 350.781,679.58 353.781,678.913 356.5,677.5C 358.099,677.768 359.432,677.434 360.5,676.5C 363.781,676.58 366.781,675.913 369.5,674.5C 369.833,674.5 370.167,674.5 370.5,674.5C 373.428,674.435 376.095,673.768 378.5,672.5C 380.735,672.795 382.735,672.461 384.5,671.5C 387.067,671.279 389.401,670.612 391.5,669.5C 392.167,669.5 392.833,669.5 393.5,669.5C 396.067,669.279 398.401,668.612 400.5,667.5C 400.833,667.5 401.167,667.5 401.5,667.5C 408.869,666.907 415.869,665.24 422.5,662.5C 424.099,662.768 425.432,662.434 426.5,661.5C 429.781,661.58 432.781,660.913 435.5,659.5C 440.17,659.489 444.503,658.489 448.5,656.5C 453.12,656.26 457.453,655.26 461.5,653.5C 462.833,653.5 464.167,653.5 465.5,653.5C 466.492,653.672 467.158,653.338 467.5,652.5C 471.397,651.945 475.063,650.945 478.5,649.5C 478.833,649.5 479.167,649.5 479.5,649.5C 482.228,649.829 484.562,649.163 486.5,647.5C 488.099,647.768 489.432,647.434 490.5,646.5C 494.479,646.258 498.146,645.258 501.5,643.5C 503.099,643.768 504.432,643.434 505.5,642.5C 508.228,642.829 510.562,642.163 512.5,640.5C 513.959,640.567 515.292,640.234 516.5,639.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1811.5,636.5 C 1812.98,636.238 1814.31,636.571 1815.5,637.5C 1813.31,639.856 1811.31,642.356 1809.5,645C 1809.83,645.167 1810.17,645.333 1810.5,645.5C 1814.1,642.783 1817.93,640.45 1822,638.5C 1822.5,638.833 1823,639.167 1823.5,639.5C 1822.36,641.078 1821.86,642.744 1822,644.5C 1824.6,641.972 1827.43,640.139 1830.5,639C 1825.65,646.692 1819.65,653.359 1812.5,659C 1811.36,659.749 1810.36,659.583 1809.5,658.5C 1810.64,656.201 1811.97,654.034 1813.5,652C 1813.17,651.833 1812.83,651.667 1812.5,651.5C 1808.83,654.667 1805.17,657.833 1801.5,661C 1799.98,662.009 1798.31,662.509 1796.5,662.5C 1796.91,660.891 1796.91,659.557 1796.5,658.5C 1794.34,660.02 1792,661.02 1789.5,661.5C 1789.49,659.692 1789.99,658.025 1791,656.5C 1797.68,649.658 1804.51,642.991 1811.5,636.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090909\",\n    d: \"M 1576.5,636.5 C 1577.93,637.78 1578.6,639.447 1578.5,641.5C 1583.09,640.916 1585.93,642.916 1587,647.5C 1589.02,652.988 1589.85,658.655 1589.5,664.5C 1588.02,664.762 1586.69,664.429 1585.5,663.5C 1584.76,660.557 1584.26,657.557 1584,654.5C 1583.73,657.224 1583.23,659.891 1582.5,662.5C 1581.31,663.429 1579.98,663.762 1578.5,663.5C 1577.79,654.505 1577.13,645.505 1576.5,636.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#070707\",\n    d: \"M 1589.5,637.5 C 1595.15,644.841 1597.32,653.175 1596,662.5C 1595.69,663.308 1595.19,663.975 1594.5,664.5C 1592.58,662.997 1591.41,660.997 1591,658.5C 1589.77,651.555 1589.27,644.555 1589.5,637.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#263926\",\n    d: \"M 512.5,640.5 C 510.562,642.163 508.228,642.829 505.5,642.5C 507.599,641.388 509.933,640.721 512.5,640.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121212\",\n    d: \"M 1309.5,642.5 C 1318.65,641.793 1319.32,642.96 1311.5,646C 1300.31,649.149 1288.97,650.649 1277.5,650.5C 1288.31,647.943 1298.98,645.276 1309.5,642.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#201e28\",\n    d: \"M 501.5,643.5 C 498.146,645.258 494.479,646.258 490.5,646.5C 493.854,644.742 497.521,643.742 501.5,643.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1570.5,644.5 C 1575.25,650.269 1577.09,656.935 1576,664.5C 1574.29,665.925 1572.95,665.592 1572,663.5C 1569.62,657.275 1569.12,650.942 1570.5,644.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a4727\",\n    d: \"M 486.5,647.5 C 484.562,649.163 482.228,649.829 479.5,649.5C 481.599,648.388 483.933,647.721 486.5,647.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7972\",\n    d: \"M 2414.5,648.5 C 2426.83,648.5 2439.17,648.5 2451.5,648.5C 2455.5,669.656 2457.33,690.99 2457,712.5C 2448.89,696.68 2436.39,685.847 2419.5,680C 2399.94,674.222 2379.94,671.555 2359.5,672C 2377.48,663.001 2395.81,655.168 2414.5,648.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 338.5,681.5 C 334.736,682.992 330.736,683.992 326.5,684.5C 326.611,683.883 326.944,683.383 327.5,683C 311.314,679.681 294.98,677.348 278.5,676C 272.763,674.586 267.096,672.919 261.5,671C 235.172,668.601 208.839,666.267 182.5,664C 162.619,658.603 142.452,655.103 122,653.5C 107.668,652.499 94.1682,655.333 81.5,662C 72.4093,668.408 68.4093,677.241 69.5,688.5C 68.5,688.5 67.5,688.5 66.5,688.5C 64.7763,682.626 65.2763,676.959 68,671.5C 75.2969,661.232 85.1303,654.399 97.5,651C 110.458,649.456 123.458,649.123 136.5,650C 163.271,656.108 190.271,661.108 217.5,665C 232.908,664.991 248.241,665.991 263.5,668C 288.116,674.496 313.116,678.996 338.5,681.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1001.5,649.5 C 1019.19,649.24 1036.86,649.74 1054.5,651C 1073.4,654.095 1092.4,656.428 1111.5,658C 1149.16,659.153 1186.82,659.82 1224.5,660C 1236.54,660.649 1248.54,661.649 1260.5,663C 1240.95,665.84 1221.29,667.174 1201.5,667C 1207.25,669.436 1213.25,670.603 1219.5,670.5C 1234.6,669.915 1249.6,668.415 1264.5,666C 1275.87,665.207 1287.2,665.54 1298.5,667C 1305.93,668.42 1312.93,670.92 1319.5,674.5C 1313.69,681.482 1307.69,688.315 1301.5,695C 1300.55,695.483 1299.55,695.649 1298.5,695.5C 1299.93,689.975 1302.43,684.975 1306,680.5C 1306.38,675.584 1305.05,675.251 1302,679.5C 1299.33,685.5 1296.67,691.5 1294,697.5C 1292.64,698.38 1291.14,698.714 1289.5,698.5C 1289.41,694.7 1290.08,691.034 1291.5,687.5C 1290.9,684.754 1289.24,683.92 1286.5,685C 1284.28,688.984 1282.45,693.15 1281,697.5C 1275.85,705.111 1268.68,708.278 1259.5,707C 1254.59,702.148 1254.26,696.981 1258.5,691.5C 1256.99,690.261 1255.83,690.595 1255,692.5C 1253.78,698.166 1251.78,703.499 1249,708.5C 1248.33,703.833 1248.33,699.167 1249,694.5C 1250.02,688.755 1251.02,683.088 1252,677.5C 1250.17,679.156 1248.84,681.156 1248,683.5C 1246.39,690.446 1245.06,697.446 1244,704.5C 1242.65,705.704 1240.98,706.371 1239,706.5C 1229.09,705.64 1219.26,704.307 1209.5,702.5C 1212.74,696.021 1215.91,689.688 1219,683.5C 1213,688.157 1209,694.157 1207,701.5C 1206.22,702.728 1205.22,703.728 1204,704.5C 1189.87,707.793 1175.71,710.959 1161.5,714C 1086.92,707.478 1013.92,692.812 942.5,670C 942.167,669.667 941.833,669.333 941.5,669C 961.408,661.752 981.408,655.252 1001.5,649.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b2119\",\n    d: \"M 476.5,649.5 C 477.167,649.5 477.833,649.5 478.5,649.5C 475.063,650.945 471.397,651.945 467.5,652.5C 469.59,650.835 472.59,649.835 476.5,649.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 853.5,652.5 C 861.668,651.95 869.668,652.783 877.5,655C 888.941,660.728 898.941,668.395 907.5,678C 900.941,681.382 893.941,683.382 886.5,684C 866.167,684.333 845.833,684.667 825.5,685C 816.211,688.594 812.044,685.427 813,675.5C 818.767,667.747 826.267,662.247 835.5,659C 841.571,656.701 847.571,654.535 853.5,652.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929291\",\n    d: \"M 326.5,684.5 C 326.167,684.5 325.833,684.5 325.5,684.5C 316.57,686.489 307.57,688.155 298.5,689.5C 222.166,689.377 145.832,689.044 69.5,688.5C 68.4093,677.241 72.4093,668.408 81.5,662C 94.1682,655.333 107.668,652.499 122,653.5C 142.452,655.103 162.619,658.603 182.5,664C 208.839,666.267 235.172,668.601 261.5,671C 267.096,672.919 272.763,674.586 278.5,676C 294.98,677.348 311.314,679.681 327.5,683C 326.944,683.383 326.611,683.883 326.5,684.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f241e\",\n    d: \"M 461.5,653.5 C 457.453,655.26 453.12,656.26 448.5,656.5C 452.547,654.74 456.88,653.74 461.5,653.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f261e\",\n    d: \"M 448.5,656.5 C 444.503,658.489 440.17,659.489 435.5,659.5C 439.547,657.74 443.88,656.74 448.5,656.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1022.5,658.5 C 1023.5,658.47 1024.16,658.97 1024.5,660C 1020.9,668.73 1022.57,670.23 1029.5,664.5C 1030.48,667.086 1030.81,669.753 1030.5,672.5C 1031.87,672.657 1033.21,672.49 1034.5,672C 1036.71,669.957 1038.71,667.791 1040.5,665.5C 1041.14,668.307 1040.47,670.973 1038.5,673.5C 1039.36,674.583 1040.36,674.749 1041.5,674C 1048.24,667.904 1049.57,668.404 1045.5,675.5C 1045.83,675.833 1046.17,676.167 1046.5,676.5C 1048.83,674.5 1051.17,672.5 1053.5,670.5C 1053.83,670.667 1054.17,670.833 1054.5,671C 1051.98,673.99 1051.98,676.824 1054.5,679.5C 1058.16,677.997 1059.16,675.497 1057.5,672C 1059.13,671.506 1060.8,671.34 1062.5,671.5C 1062.5,674.675 1061.5,677.508 1059.5,680C 1067.26,681.094 1074.92,682.594 1082.5,684.5C 1073.97,685.524 1065.47,685.191 1057,683.5C 1054.75,684.229 1052.59,685.229 1050.5,686.5C 1050.17,686.333 1049.83,686.167 1049.5,686C 1051.95,683.803 1051.78,682.303 1049,681.5C 1046.34,682.077 1043.84,683.077 1041.5,684.5C 1040.7,682.922 1040.2,681.256 1040,679.5C 1034.44,685.257 1032.6,684.59 1034.5,677.5C 1031.91,679.043 1029.41,680.709 1027,682.5C 1028.28,680.001 1029.44,677.334 1030.5,674.5C 1024.55,675.056 1019.39,677.39 1015,681.5C 1014.33,680.833 1014.33,680.167 1015,679.5C 1017.35,677.317 1019.52,674.984 1021.5,672.5C 1020.79,670.954 1019.62,669.954 1018,669.5C 1012.91,672.258 1008.07,675.425 1003.5,679C 1002.5,679.667 1001.5,679.667 1000.5,679C 1004.67,675.5 1008.83,672 1013,668.5C 1013.72,666.888 1013.55,665.388 1012.5,664C 1017.25,664.463 1020.59,662.629 1022.5,658.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f231f\",\n    d: \"M 435.5,659.5 C 432.781,660.913 429.781,661.58 426.5,661.5C 429.219,660.087 432.219,659.42 435.5,659.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131313\",\n    d: \"M 1970.5,660.5 C 1972.6,660.201 1974.6,660.534 1976.5,661.5C 1970.67,663.417 1964.67,664.584 1958.5,665C 1943.17,666.478 1927.84,666.644 1912.5,665.5C 1913.03,664.808 1913.69,664.308 1914.5,664C 1930.17,663.667 1945.83,663.333 1961.5,663C 1964.68,662.34 1967.68,661.507 1970.5,660.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222d20\",\n    d: \"M 422.5,662.5 C 415.869,665.24 408.869,666.907 401.5,667.5C 408.248,665.261 415.248,663.595 422.5,662.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d221c\",\n    d: \"M 400.5,667.5 C 398.401,668.612 396.067,669.279 393.5,669.5C 395.438,667.837 397.772,667.171 400.5,667.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0c0c\",\n    d: \"M 878.5,666.5 C 884.568,667.076 887.068,670.409 886,676.5C 885.632,677.91 884.799,678.91 883.5,679.5C 881.541,678.252 880.041,676.585 879,674.5C 878.092,676.439 876.592,677.439 874.5,677.5C 873.658,672.949 874.992,669.283 878.5,666.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d211c\",\n    d: \"M 391.5,669.5 C 389.401,670.612 387.067,671.279 384.5,671.5C 386.438,669.837 388.772,669.171 391.5,669.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171717\",\n    d: \"M 1667.5,663.5 C 1667.92,662.876 1668.58,662.543 1669.5,662.5C 1688.48,667.729 1707.48,672.896 1726.5,678C 1718.44,678.245 1710.77,680.078 1703.5,683.5C 1703.17,683.167 1702.83,682.833 1702.5,682.5C 1704.83,680.833 1706.83,678.833 1708.5,676.5C 1695.01,671.559 1681.34,667.225 1667.5,663.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c221b\",\n    d: \"M 378.5,672.5 C 376.095,673.768 373.428,674.435 370.5,674.5C 372.838,672.96 375.505,672.294 378.5,672.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1a1a\",\n    d: \"M 1839.5,671.5 C 1854.22,673.209 1868.55,676.375 1882.5,681C 1868.73,679.984 1855.07,677.984 1841.5,675C 1840.03,674.29 1839.36,673.124 1839.5,671.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 1136.5,722.5 C 1109,729.861 1081,734.194 1052.5,735.5C 1051.43,734.566 1050.1,734.232 1048.5,734.5C 1040.82,734.404 1033.15,734.07 1025.5,733.5C 1024.43,732.566 1023.1,732.232 1021.5,732.5C 1001.46,729.659 981.458,726.492 961.5,723C 931.162,719.795 900.829,719.795 870.5,723C 852.45,724.444 834.45,726.277 816.5,728.5C 776.175,732.302 735.842,736.136 695.5,740C 672.169,740.5 648.836,740.667 625.5,740.5C 615.75,740.806 606.084,740.473 596.5,739.5C 596.502,731.984 594.835,731.651 591.5,738.5C 590.711,738.783 590.044,739.283 589.5,740C 559.331,740.168 529.331,740.668 499.5,741.5C 495.833,741.5 492.167,741.5 488.5,741.5C 487.508,741.672 486.842,741.338 486.5,740.5C 490.248,740.306 492.915,738.639 494.5,735.5C 504.74,733.139 515.407,731.639 526.5,731C 521.381,726.776 515.715,723.609 509.5,721.5C 508.4,720.442 507.066,719.608 505.5,719C 507.066,718.392 508.4,717.558 509.5,716.5C 511.017,716.489 512.184,715.823 513,714.5C 514.149,710.516 516.482,707.516 520,705.5C 520.591,704.517 520.257,703.85 519,703.5C 508.611,699.892 498.944,701.225 490,707.5C 486.954,704.894 483.454,703.227 479.5,702.5C 478.035,701.263 476.368,700.263 474.5,699.5C 477.725,698.763 481.059,698.097 484.5,697.5C 507.548,697.461 530.548,698.461 553.5,700.5C 567.166,701.119 580.833,701.786 594.5,702.5C 648.511,698.512 702.511,694.345 756.5,690C 793.167,689.667 829.833,689.333 866.5,689C 891.694,687.784 916.027,682.617 939.5,673.5C 1006.84,694.558 1075.51,709.724 1145.5,719C 1142.28,719.9 1139.28,721.067 1136.5,722.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f231e\",\n    d: \"M 369.5,674.5 C 366.781,675.913 363.781,676.58 360.5,676.5C 363.219,675.087 366.219,674.42 369.5,674.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#898989\",\n    d: \"M 1321.5,676.5 C 1326.71,678.207 1330.04,681.707 1331.5,687C 1331.3,689.406 1330.3,691.406 1328.5,693C 1326.25,694.039 1324.09,695.206 1322,696.5C 1321.67,696.167 1321.33,695.833 1321,695.5C 1323.3,691.538 1325.14,687.204 1326.5,682.5C 1325.45,682.351 1324.45,682.517 1323.5,683C 1319.7,687.801 1315.53,692.301 1311,696.5C 1312.63,688.913 1316.13,682.246 1321.5,676.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191d17\",\n    d: \"M 356.5,677.5 C 353.781,678.913 350.781,679.58 347.5,679.5C 350.219,678.087 353.219,677.42 356.5,677.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1959.5,677.5 C 1960.6,678.601 1960.76,679.934 1960,681.5C 1956.84,689.812 1951.68,696.479 1944.5,701.5C 1943.39,700.277 1943.22,698.944 1944,697.5C 1948.62,690.386 1953.78,683.719 1959.5,677.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929292\",\n    d: \"M 2333.5,773.5 C 2331.11,772.79 2328.61,772.123 2326,771.5C 2322.27,772.46 2318.44,772.793 2314.5,772.5C 2217.15,770.142 2119.81,767.642 2022.5,765C 2021.52,767.137 2020.19,768.971 2018.5,770.5C 2015.45,766.31 2014.29,761.644 2015,756.5C 2017.67,752.5 2020.33,748.5 2023,744.5C 2025.62,739.967 2027.46,735.134 2028.5,730C 2027.08,726.908 2025.24,724.074 2023,721.5C 2022.08,718.692 2022.91,716.525 2025.5,715C 2034.65,712.029 2043.98,709.695 2053.5,708C 2076.84,706.481 2100.17,704.814 2123.5,703C 2133.71,701.558 2143.71,699.225 2153.5,696C 2190.49,694.167 2227.49,692.5 2264.5,691C 2290.94,687.737 2317.27,683.737 2343.5,679C 2371.95,676.256 2399.62,679.59 2426.5,689C 2445.83,697.667 2454,712.501 2451,733.5C 2448.67,741.833 2446.33,750.167 2444,758.5C 2442.84,764.445 2442.34,770.445 2442.5,776.5C 2406.18,775.167 2369.84,774.167 2333.5,773.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1974.5,677.5 C 1975.53,677.897 1975.69,678.563 1975,679.5C 1971,685.5 1967,691.5 1963,697.5C 1960.08,700.6 1956.58,702.6 1952.5,703.5C 1952.35,702.448 1952.52,701.448 1953,700.5C 1959.33,692.007 1966.49,684.341 1974.5,677.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1997.5,678.5 C 1998.62,680.288 1998.79,682.288 1998,684.5C 1995.02,690.291 1991.19,695.457 1986.5,700C 1985.21,700.49 1983.87,700.657 1982.5,700.5C 1982.35,699.448 1982.52,698.448 1983,697.5C 1988.33,691.496 1993.16,685.163 1997.5,678.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1e18\",\n    d: \"M 347.5,679.5 C 344.781,680.913 341.781,681.58 338.5,681.5C 341.219,680.087 344.219,679.42 347.5,679.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1181.5,680.5 C 1184.17,680.066 1185.33,681.066 1185,683.5C 1179.88,690.293 1174.38,696.793 1168.5,703C 1167.83,703.667 1167.17,703.667 1166.5,703C 1171.33,695.346 1176.33,687.846 1181.5,680.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1203.5,678.5 C 1204.04,678.56 1204.38,678.893 1204.5,679.5C 1200.23,687.759 1195.57,695.759 1190.5,703.5C 1188.58,704.641 1186.58,704.808 1184.5,704C 1190.48,695.203 1196.81,686.703 1203.5,678.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0f0f\",\n    d: \"M 1189.5,682.5 C 1191,682.415 1192,683.081 1192.5,684.5C 1188.64,692.188 1183.81,699.188 1178,705.5C 1177.33,704.5 1177.33,703.5 1178,702.5C 1181.6,695.615 1185.44,688.949 1189.5,682.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#101010\",\n    d: \"M 1986.5,679.5 C 1984.19,689.866 1978.19,697.866 1968.5,703.5C 1968.17,702.833 1967.83,702.167 1967.5,701.5C 1968.09,699.734 1968.92,698.067 1970,696.5C 1975.03,690.303 1980.53,684.636 1986.5,679.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161616\",\n    d: \"M 1209.5,682.5 C 1210.04,682.56 1210.38,682.893 1210.5,683.5C 1205.6,690.047 1201.6,697.047 1198.5,704.5C 1196.8,704.66 1195.13,704.494 1193.5,704C 1198.11,699.701 1201.61,694.534 1204,688.5C 1205.7,686.304 1207.53,684.304 1209.5,682.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111111\",\n    d: \"M 1943.5,684.5 C 1944.1,684.735 1944.43,685.235 1944.5,686C 1940.99,692.347 1935.99,697.18 1929.5,700.5C 1928.42,699.635 1928.25,698.635 1929,697.5C 1933.38,692.617 1938.21,688.284 1943.5,684.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#708a33\",\n    d: \"M 66.5,688.5 C 67.5,688.5 68.5,688.5 69.5,688.5C 145.832,689.044 222.166,689.377 298.5,689.5C 287.749,692.188 277.083,695.188 266.5,698.5C 266.5,699.167 266.167,699.5 265.5,699.5C 261.603,698.385 257.937,699.052 254.5,701.5C 254.5,702.167 254.167,702.5 253.5,702.5C 253.083,701.876 252.416,701.543 251.5,701.5C 246.909,702.391 242.575,703.725 238.5,705.5C 232.943,705.798 227.943,707.465 223.5,710.5C 223.957,711.298 224.624,711.631 225.5,711.5C 227.153,711.66 228.486,712.326 229.5,713.5C 231.336,715.588 233.669,716.921 236.5,717.5C 241.043,719.372 244.71,722.372 247.5,726.5C 247.511,728.017 248.177,729.184 249.5,730C 243.512,730.745 237.845,732.245 232.5,734.5C 231.005,734.415 230.005,735.081 229.5,736.5C 231.481,742.425 233.148,748.425 234.5,754.5C 247.332,753.883 260.165,753.217 273,752.5C 343.75,760.327 414.583,767.494 485.5,774C 505.229,776.414 524.896,779.247 544.5,782.5C 546.045,782.489 547.378,782.156 548.5,781.5C 549.492,781.328 550.158,781.662 550.5,782.5C 561.219,785.118 572.219,786.785 583.5,787.5C 603.55,791.508 623.883,794.508 644.5,796.5C 659.291,799.41 674.291,801.91 689.5,804C 693.689,804.812 697.689,804.645 701.5,803.5C 702.609,803.557 703.609,803.89 704.5,804.5C 758.632,810.053 812.965,815.053 867.5,819.5C 868.239,819.369 868.906,819.536 869.5,820C 865.21,825.148 859.877,828.815 853.5,831C 858.456,830.749 863.456,830.582 868.5,830.5C 875.73,830.741 882.73,830.075 889.5,828.5C 890.239,828.369 890.906,828.536 891.5,829C 887.574,832.783 886.574,837.283 888.5,842.5C 895.287,840.108 902.287,838.608 909.5,838C 912.274,837.376 914.274,835.876 915.5,833.5C 918.303,833.408 921.303,833.242 924.5,833C 932.18,830.016 940.18,828.682 948.5,829C 945.433,826.812 942.433,824.645 939.5,822.5C 962.673,822.169 985.673,822.502 1008.5,823.5C 1005.88,827.668 1005.88,831.835 1008.5,836C 1000.76,837.708 994.425,841.708 989.5,848C 986.833,849.333 984.167,850.667 981.5,852C 993.201,852.045 1004.87,851.545 1016.5,850.5C 1016.83,850.833 1017.17,851.167 1017.5,851.5C 1013.44,855.424 1012.78,859.757 1015.5,864.5C 1016.74,864.058 1017.74,863.391 1018.5,862.5C 1025.53,861.567 1032.53,860.4 1039.5,859C 1040.71,857.961 1041.71,856.794 1042.5,855.5C 1045.22,855.451 1047.89,855.118 1050.5,854.5C 1058.92,851.972 1067.59,850.805 1076.5,851C 1070.74,846.396 1064.41,842.896 1057.5,840.5C 1050.61,839.016 1050.28,837.683 1056.5,836.5C 1058.72,835.797 1060.55,834.464 1062,832.5C 1063.74,828.759 1066.24,825.592 1069.5,823C 1058.23,818.851 1047.56,820.017 1037.5,826.5C 1035.55,824.378 1033.22,822.878 1030.5,822C 1031.09,821.536 1031.76,821.369 1032.5,821.5C 1042.23,820.932 1049.9,819.932 1055.5,818.5C 1056.92,817.549 1058.59,817.216 1060.5,817.5C 1062.47,818.163 1064.64,818.496 1067,818.5C 1076.17,817.7 1085.34,816.866 1094.5,816C 1093.21,815.51 1091.87,815.343 1090.5,815.5C 1091.92,814.549 1093.59,814.216 1095.5,814.5C 1097.3,815.162 1099.3,815.495 1101.5,815.5C 1110.82,814.532 1120.15,813.865 1129.5,813.5C 1129.59,815.677 1130.25,817.677 1131.5,819.5C 1124.05,821.06 1118.05,824.893 1113.5,831C 1109.78,833.527 1105.78,835.527 1101.5,837C 1108.8,836.753 1116.14,836.586 1123.5,836.5C 1129.11,836.927 1134.45,836.26 1139.5,834.5C 1139.83,834.5 1140.17,834.5 1140.5,834.5C 1140.94,834.435 1141.27,834.601 1141.5,835C 1138.04,838.823 1136.7,843.323 1137.5,848.5C 1139.1,848.768 1140.43,848.434 1141.5,847.5C 1148.59,846.879 1155.59,845.712 1162.5,844C 1165.08,842.924 1166.75,841.091 1167.5,838.5C 1169.24,839.086 1171.08,839.419 1173,839.5C 1177.27,838.783 1181.44,837.616 1185.5,836C 1190.83,835.667 1196.17,835.333 1201.5,835C 1194.29,829.893 1186.62,825.56 1178.5,822C 1179.42,821.722 1180.08,821.222 1180.5,820.5C 1180.84,819.662 1181.51,819.328 1182.5,819.5C 1184.02,819.489 1185.18,818.823 1186,817.5C 1187.9,811.089 1192.07,807.422 1198.5,806.5C 1198.22,808.415 1198.55,810.081 1199.5,811.5C 1200.51,816.68 1203.51,820.18 1208.5,822C 1228.77,824.386 1249.1,825.053 1269.5,824C 1279.89,821.801 1289.89,818.468 1299.5,814C 1303.47,813.147 1307.47,812.481 1311.5,812C 1323.84,811.695 1336.18,811.695 1348.5,812C 1349.85,808.791 1349.69,805.624 1348,802.5C 1343.6,796.597 1338.43,791.597 1332.5,787.5C 1360.6,782.515 1388.94,779.515 1417.5,778.5C 1428.5,777.795 1439.5,776.961 1450.5,776C 1448.87,775.506 1447.2,775.34 1445.5,775.5C 1447.95,774.527 1450.61,774.194 1453.5,774.5C 1455.98,775.164 1458.64,775.497 1461.5,775.5C 1473.83,774.677 1486.16,774.01 1498.5,773.5C 1550.49,770.627 1599.16,767.961 1644.5,765.5C 1648.3,764.517 1652.3,764.183 1656.5,764.5C 1662.65,765.328 1668.99,765.828 1675.5,766C 1676.17,767 1676.83,768 1677.5,769C 1670.23,770.612 1664.23,774.279 1659.5,780C 1657.26,781.522 1654.93,782.855 1652.5,784C 1663,784.143 1673.34,783.643 1683.5,782.5C 1684.17,782.5 1684.83,782.5 1685.5,782.5C 1685.94,782.435 1686.27,782.601 1686.5,783C 1682.22,786.768 1681.56,790.935 1684.5,795.5C 1690.92,793.883 1697.42,792.55 1704,791.5C 1706.9,790.437 1709.4,788.77 1711.5,786.5C 1712.77,787.046 1714.11,787.379 1715.5,787.5C 1723.8,784.175 1732.47,782.675 1741.5,783C 1734.96,778.227 1727.96,774.227 1720.5,771C 1721.42,770.722 1722.08,770.222 1722.5,769.5C 1725.45,768.213 1727.79,766.213 1729.5,763.5C 1739.3,763.164 1748.97,762.164 1758.5,760.5C 1842.67,760.833 1926.67,760.499 2010.5,759.5C 2010.33,758.508 2010.66,757.842 2011.5,757.5C 2010.39,764.77 2012.72,770.603 2018.5,775C 2027.98,776.127 2037.48,776.961 2047,777.5C 2053.94,791.713 2060.61,806.047 2067,820.5C 2068.23,821.108 2069.56,821.441 2071,821.5C 2178.54,808.914 2286.04,796.08 2393.5,783C 2414.14,781.66 2434.81,781.16 2455.5,781.5C 2456.18,893.176 2457.18,1004.84 2458.5,1116.5C 1650.83,1116.5 843.167,1116.5 35.5,1116.5C 34.8958,981.163 33.8958,845.83 32.5,710.5C 33.4916,703.352 33.825,696.019 33.5,688.5C 44.5,688.5 55.5,688.5 66.5,688.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0e0e\",\n    d: \"M 1911.5,690.5 C 1914.04,690.104 1916.21,690.771 1918,692.5C 1918.67,695.5 1918.67,698.5 1918,701.5C 1916.95,703.107 1915.45,703.773 1913.5,703.5C 1915.09,700.036 1914.59,697.036 1912,694.5C 1911.51,693.207 1911.34,691.873 1911.5,690.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#25351b\",\n    d: \"M 325.5,684.5 C 306.135,689.911 286.469,694.577 266.5,698.5C 277.083,695.188 287.749,692.188 298.5,689.5C 307.57,688.155 316.57,686.489 325.5,684.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa882\",\n    d: \"M 473.5,697.5 C 473.328,698.492 473.662,699.158 474.5,699.5C 476.368,700.263 478.035,701.263 479.5,702.5C 483.595,704.26 486.262,707.26 487.5,711.5C 483.869,711.16 480.536,711.994 477.5,714C 476.177,714.816 475.511,715.983 475.5,717.5C 473.998,721.136 474.665,724.47 477.5,727.5C 473.473,729.065 469.473,730.398 465.5,731.5C 465.167,731.5 464.833,731.5 464.5,731.5C 457.492,731.666 450.492,731.5 443.5,731C 447.167,728 450.833,725 454.5,722C 458.723,720.528 463.057,719.528 467.5,719C 464.262,716.855 462.595,713.855 462.5,710C 463.229,705.929 464.895,702.262 467.5,699C 467.272,698.601 466.938,698.435 466.5,698.5C 468.461,696.037 470.628,693.703 473,691.5C 473.495,693.473 473.662,695.473 473.5,697.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#32582b\",\n    d: \"M 484.5,696.5 C 484.5,696.833 484.5,697.167 484.5,697.5C 481.059,698.097 477.725,698.763 474.5,699.5C 473.662,699.158 473.328,698.492 473.5,697.5C 477.119,696.756 480.785,696.423 484.5,696.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23411f\",\n    d: \"M 484.5,697.5 C 484.5,697.167 484.5,696.833 484.5,696.5C 508.714,696.1 532.714,697.1 556.5,699.5C 555.209,699.263 554.209,699.596 553.5,700.5C 530.548,698.461 507.548,697.461 484.5,697.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c158\",\n    d: \"M 1393.5,726.5 C 1389.23,727.818 1384.9,728.985 1380.5,730C 1365.58,729.643 1351.58,732.976 1338.5,740C 1337.29,741.376 1335.96,742.542 1334.5,743.5C 1324.51,744.166 1314.51,744.499 1304.5,744.5C 1301.61,744.194 1298.95,744.527 1296.5,745.5C 1269.5,746.108 1242.5,746.775 1215.5,747.5C 1201.52,748.318 1187.52,748.651 1173.5,748.5C 1160.49,747.848 1147.49,747.015 1134.5,746C 1122.53,743.838 1110.53,742.004 1098.5,740.5C 1122.94,747.067 1147.94,750.067 1173.5,749.5C 1189.34,749.83 1205.01,749.496 1220.5,748.5C 1247.51,748.305 1274.51,747.638 1301.5,746.5C 1305.04,746.813 1308.38,746.479 1311.5,745.5C 1318.69,745.175 1325.69,745.509 1332.5,746.5C 1327.12,752.799 1327.45,758.965 1333.5,765C 1335.44,766.872 1337.77,767.705 1340.5,767.5C 1355.37,766.125 1370.2,764.459 1385,762.5C 1385.87,762.735 1386.71,763.069 1387.5,763.5C 1395.57,760.232 1403.9,757.732 1412.5,756C 1433.22,753.901 1453.89,751.401 1474.5,748.5C 1472.36,746.265 1470.03,744.265 1467.5,742.5C 1467.05,741.542 1466.38,740.708 1465.5,740C 1508.97,732.573 1552.31,724.239 1595.5,715C 1613.54,709.932 1631.54,704.766 1649.5,699.5C 1662.04,703.766 1674.37,708.6 1686.5,714C 1701.83,715.309 1717.16,716.476 1732.5,717.5C 1747.19,718.611 1761.86,717.944 1776.5,715.5C 1783.21,715.328 1789.88,714.661 1796.5,713.5C 1813.87,716.743 1831.2,720.076 1848.5,723.5C 1834.6,727.966 1820.6,732.133 1806.5,736C 1792.95,742.275 1779.28,748.275 1765.5,754C 1763.25,755.277 1761.25,756.777 1759.5,758.5C 1750.07,761.191 1740.41,762.191 1730.5,761.5C 1731.67,759.496 1733.34,757.996 1735.5,757C 1728.7,754.612 1721.7,753.946 1714.5,755C 1710.84,756.002 1707.67,757.836 1705,760.5C 1702.06,756.781 1698.23,754.781 1693.5,754.5C 1692.77,753.288 1691.77,752.288 1690.5,751.5C 1689.62,742.753 1687.29,742.419 1683.5,750.5C 1678.75,754 1676.08,758.667 1675.5,764.5C 1669.17,764.5 1662.83,764.5 1656.5,764.5C 1652.3,764.183 1648.3,764.517 1644.5,765.5C 1595.29,766.679 1546.29,769.012 1497.5,772.5C 1482.82,772.852 1468.15,773.518 1453.5,774.5C 1450.61,774.194 1447.95,774.527 1445.5,775.5C 1436.1,775.506 1426.76,776.173 1417.5,777.5C 1388.78,778.17 1360.44,781.17 1332.5,786.5C 1324.42,782.217 1315.92,778.883 1307,776.5C 1281.31,781.02 1255.48,783.186 1229.5,783C 1222.09,788.039 1214.09,792.039 1205.5,795C 1202.02,797.297 1200.02,800.464 1199.5,804.5C 1195.44,805.991 1191.44,805.824 1187.5,804C 1183.17,803.333 1178.83,803.333 1174.5,804C 1170.28,805.362 1166.11,806.862 1162,808.5C 1158.44,806.48 1154.61,805.147 1150.5,804.5C 1148.88,803.221 1147.21,801.887 1145.5,800.5C 1144.94,798.146 1144.27,795.813 1143.5,793.5C 1140.73,795.259 1138.73,797.593 1137.5,800.5C 1134.09,803.583 1131.43,807.249 1129.5,811.5C 1118.18,812.602 1106.84,813.602 1095.5,814.5C 1093.59,814.216 1091.92,814.549 1090.5,815.5C 1080.49,816.034 1070.49,816.701 1060.5,817.5C 1058.59,817.216 1056.92,817.549 1055.5,818.5C 1046.97,818.566 1038.64,819.233 1030.5,820.5C 1028.83,820.5 1027.17,820.5 1025.5,820.5C 1023.86,819.527 1022.53,818.194 1021.5,816.5C 1021.81,814.076 1021.47,811.743 1020.5,809.5C 1019.89,809.624 1019.56,809.957 1019.5,810.5C 1017.74,811.262 1016.74,812.596 1016.5,814.5C 1014.14,816.194 1012.14,818.194 1010.5,820.5C 985.5,820.5 960.5,820.5 935.5,820.5C 932.594,819.213 929.594,818.213 926.5,817.5C 926.833,816.833 927.167,816.167 927.5,815.5C 931.719,814.452 934.553,811.785 936,807.5C 937.873,805.291 940.04,803.458 942.5,802C 935.379,799.54 928.045,798.874 920.5,800C 916.806,801.198 913.472,803.032 910.5,805.5C 908.203,802.529 905.203,800.862 901.5,800.5C 899.819,798.992 897.819,797.992 895.5,797.5C 895.019,794.478 894.353,791.478 893.5,788.5C 892.476,789.852 891.476,791.185 890.5,792.5C 886.291,796.562 882.791,801.228 880,806.5C 879.07,809.85 879.903,812.683 882.5,815C 877.496,816.335 872.496,817.502 867.5,818.5C 813.219,813.353 758.886,808.687 704.5,804.5C 703.609,803.89 702.609,803.557 701.5,803.5C 682.489,801.249 663.489,798.915 644.5,796.5C 624.425,792.613 604.092,789.613 583.5,787.5C 572.723,785.197 561.723,783.531 550.5,782.5C 550.158,781.662 549.492,781.328 548.5,781.5C 528.506,778.715 508.506,775.882 488.5,773C 422.5,766.667 356.5,760.333 290.5,754C 294.152,753.501 297.818,753.335 301.5,753.5C 303.099,753.768 304.432,753.434 305.5,752.5C 309.5,752.5 313.5,752.5 317.5,752.5C 320.713,752.81 323.713,752.477 326.5,751.5C 331.167,751.5 335.833,751.5 340.5,751.5C 342.415,751.784 344.081,751.451 345.5,750.5C 386.168,748.539 426.834,746.539 467.5,744.5C 470.385,744.806 473.052,744.473 475.5,743.5C 512.825,742.611 550.158,742.278 587.5,742.5C 585.363,745.11 584.03,748.11 583.5,751.5C 583.486,753.593 584.152,755.426 585.5,757C 578.226,758.612 572.226,762.279 567.5,768C 565.5,769 563.5,770 561.5,771C 564.817,771.498 568.15,771.665 571.5,771.5C 578.686,771.061 585.686,771.061 592.5,771.5C 590.701,774.505 590.034,777.838 590.5,781.5C 592.099,781.768 593.432,781.434 594.5,780.5C 598.804,779.869 603.137,779.369 607.5,779C 611.775,778.187 615.442,776.354 618.5,773.5C 619.833,774.833 621.167,774.833 622.5,773.5C 629.913,771.035 637.58,769.868 645.5,770C 640.194,765.514 634.194,762.347 627.5,760.5C 627.082,759.778 626.416,759.278 625.5,759C 627.066,758.392 628.4,757.558 629.5,756.5C 632.576,752.749 635.909,749.083 639.5,745.5C 637.589,744.523 635.589,743.857 633.5,743.5C 653.5,742.833 673.5,742.167 693.5,741.5C 734.373,738.537 775.04,734.871 815.5,730.5C 859.017,725.282 902.684,723.115 946.5,724C 970.877,726.922 995.21,730.089 1019.5,733.5C 1020.57,734.434 1021.9,734.768 1023.5,734.5C 1031.81,735.24 1040.15,735.573 1048.5,735.5C 1049.57,736.434 1050.9,736.768 1052.5,736.5C 1057.82,736.98 1063.16,737.313 1068.5,737.5C 1072.31,738.645 1076.31,738.812 1080.5,738C 1078.5,737.667 1076.5,737.333 1074.5,737C 1075.74,736.768 1076.74,736.268 1077.5,735.5C 1098.22,732.756 1118.55,728.756 1138.5,723.5C 1160.79,718.719 1182.96,713.386 1205,707.5C 1222.8,709.748 1240.64,711.748 1258.5,713.5C 1292.4,709.817 1326.4,707.983 1360.5,708C 1368.94,706.846 1377.27,705.179 1385.5,703C 1397.3,698.849 1408.8,694.016 1420,688.5C 1432.88,690.893 1445.88,691.893 1459,691.5C 1489.19,690.237 1519.35,688.57 1549.5,686.5C 1564.02,687.303 1578.35,689.47 1592.5,693C 1607.52,694.602 1622.52,696.269 1637.5,698C 1629.21,700.489 1620.88,702.822 1612.5,705C 1564.42,714.863 1516.42,725.03 1468.5,735.5C 1459.29,733.729 1451.29,729.562 1444.5,723C 1436.45,718.154 1427.78,716.487 1418.5,718C 1409.97,720.344 1401.63,723.177 1393.5,726.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202c14\",\n    d: \"M 265.5,699.5 C 261.864,700.326 258.197,700.992 254.5,701.5C 257.937,699.052 261.603,698.385 265.5,699.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63c258\",\n    d: \"M 464.5,700.5 C 463.223,702.95 461.723,705.283 460,707.5C 459.107,710.916 459.607,714.083 461.5,717C 454.249,718.577 448.249,722.243 443.5,728C 440.446,730.194 437.112,731.861 433.5,733C 443.979,732.957 454.313,732.457 464.5,731.5C 464.833,731.5 465.167,731.5 465.5,731.5C 466.978,731.238 468.311,731.571 469.5,732.5C 467.296,735.447 466.296,738.78 466.5,742.5C 463.615,742.194 460.948,742.527 458.5,743.5C 417.495,745.056 376.495,746.722 335.5,748.5C 331.298,748.183 327.298,748.517 323.5,749.5C 319.5,749.5 315.5,749.5 311.5,749.5C 309.265,749.205 307.265,749.539 305.5,750.5C 300.5,750.5 295.5,750.5 290.5,750.5C 286.298,750.183 282.298,750.517 278.5,751.5C 264.172,752.02 249.839,752.353 235.5,752.5C 234.174,747.518 232.841,742.518 231.5,737.5C 231.685,736.416 232.018,735.416 232.5,734.5C 248.427,731.345 264.427,728.512 280.5,726C 341.85,717.385 403.183,708.885 464.5,700.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f9418\",\n    d: \"M 2011.5,757.5 C 2010.66,757.842 2010.33,758.508 2010.5,759.5C 1927,759.833 1843.66,759.499 1760.5,758.5C 1764.75,757.728 1769.08,757.228 1773.5,757C 1786.81,750.175 1800.48,744.175 1814.5,739C 1828.37,735.359 1842.37,732.359 1856.5,730C 1868.01,723.745 1879.68,717.745 1891.5,712C 1907.19,709.987 1922.86,710.321 1938.5,713C 1952.5,713.667 1966.5,713.667 1980.5,713C 1988.34,712.083 1996,710.416 2003.5,708C 2007.58,705.925 2011.08,703.092 2014,699.5C 2014.77,703.147 2015.44,706.814 2016,710.5C 2019.35,716.858 2021.85,723.525 2023.5,730.5C 2023.31,732.577 2022.81,734.577 2022,736.5C 2019,741.5 2016,746.5 2013,751.5C 2012.19,753.436 2011.69,755.436 2011.5,757.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47403a\",\n    d: \"M 509.5,716.5 C 511.219,712.732 513.219,709.065 515.5,705.5C 506.062,702.837 497.729,704.67 490.5,711C 492.584,711.697 494.251,712.864 495.5,714.5C 488.12,711.175 481.453,712.175 475.5,717.5C 475.511,715.983 476.177,714.816 477.5,714C 480.536,711.994 483.869,711.16 487.5,711.5C 486.262,707.26 483.595,704.26 479.5,702.5C 483.454,703.227 486.954,704.894 490,707.5C 498.944,701.225 508.611,699.892 519,703.5C 520.257,703.85 520.591,704.517 520,705.5C 516.482,707.516 514.149,710.516 513,714.5C 512.184,715.823 511.017,716.489 509.5,716.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223417\",\n    d: \"M 253.5,702.5 C 248.532,703.659 243.532,704.659 238.5,705.5C 242.575,703.725 246.909,702.391 251.5,701.5C 252.416,701.543 253.083,701.876 253.5,702.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a982\",\n    d: \"M 509.5,716.5 C 508.4,717.558 507.066,718.392 505.5,719C 507.066,719.608 508.4,720.442 509.5,721.5C 513.101,723.977 516.767,726.477 520.5,729C 513.332,729.612 506.498,731.445 500,734.5C 498.893,734.415 497.893,734.081 497,733.5C 496.495,731.482 495.995,729.482 495.5,727.5C 500.807,723.082 500.807,718.749 495.5,714.5C 494.251,712.864 492.584,711.697 490.5,711C 497.729,704.67 506.062,702.837 515.5,705.5C 513.219,709.065 511.219,712.732 509.5,716.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#264722\",\n    d: \"M 465.5,698.5 C 465.672,699.492 465.338,700.158 464.5,700.5C 403.183,708.885 341.85,717.385 280.5,726C 264.427,728.512 248.427,731.345 232.5,734.5C 237.845,732.245 243.512,730.745 249.5,730C 248.177,729.184 247.511,728.017 247.5,726.5C 248.911,727.908 250.577,728.908 252.5,729.5C 323.444,718.62 394.444,708.287 465.5,698.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#43423a\",\n    d: \"M 465.5,698.5 C 465.833,698.5 466.167,698.5 466.5,698.5C 466.938,698.435 467.272,698.601 467.5,699C 464.895,702.262 463.229,705.929 462.5,710C 462.595,713.855 464.262,716.855 467.5,719C 463.057,719.528 458.723,720.528 454.5,722C 450.833,725 447.167,728 443.5,731C 450.492,731.5 457.492,731.666 464.5,731.5C 454.313,732.457 443.979,732.957 433.5,733C 437.112,731.861 440.446,730.194 443.5,728C 448.249,722.243 454.249,718.577 461.5,717C 459.607,714.083 459.107,710.916 460,707.5C 461.723,705.283 463.223,702.95 464.5,700.5C 465.338,700.158 465.672,699.492 465.5,698.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223417\",\n    d: \"M 238.5,705.5 C 234.861,707.045 231.027,708.379 227,709.5C 225.97,709.836 225.47,710.503 225.5,711.5C 224.624,711.631 223.957,711.298 223.5,710.5C 227.943,707.465 232.943,705.798 238.5,705.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a53231\",\n    d: \"M 495.5,714.5 C 500.807,718.749 500.807,723.082 495.5,727.5C 494.005,727.989 492.671,728.655 491.5,729.5C 488.269,730.782 484.936,730.782 481.5,729.5C 480.486,728.326 479.153,727.66 477.5,727.5C 474.665,724.47 473.998,721.136 475.5,717.5C 481.453,712.175 488.12,711.175 495.5,714.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#233316\",\n    d: \"M 229.5,713.5 C 232.331,714.079 234.664,715.412 236.5,717.5C 233.669,716.921 231.336,715.588 229.5,713.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#284b23\",\n    d: \"M 1776.5,715.5 C 1761.86,717.944 1747.19,718.611 1732.5,717.5C 1745,716.332 1757.67,715.332 1770.5,714.5C 1772.7,714.505 1774.7,714.838 1776.5,715.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8f8f\",\n    d: \"M 1466.5,743.5 C 1467.94,744.429 1469.27,745.595 1470.5,747C 1451.89,749.716 1433.23,751.882 1414.5,753.5C 1414.65,748.965 1412.65,745.631 1408.5,743.5C 1407.34,747.831 1408.67,751.331 1412.5,754C 1410.9,754.273 1409.4,754.773 1408,755.5C 1405.48,748.479 1400.98,743.146 1394.5,739.5C 1395.81,745.907 1399.14,751.407 1404.5,756C 1403.06,756.781 1401.72,756.614 1400.5,755.5C 1397.69,750.856 1394.02,747.023 1389.5,744C 1387.63,743.289 1386.13,743.789 1385,745.5C 1384,744.5 1383,743.5 1382,742.5C 1384.44,747.846 1387.27,753.179 1390.5,758.5C 1390.17,758.833 1389.83,759.167 1389.5,759.5C 1386.17,755.342 1382.34,751.675 1378,748.5C 1378.55,752.954 1380.39,756.954 1383.5,760.5C 1369.32,762.012 1355.16,763.679 1341,765.5C 1331.05,763.264 1328.38,757.598 1333,748.5C 1338.72,741.89 1345.88,737.723 1354.5,736C 1368.09,734.637 1381.43,732.137 1394.5,728.5C 1405.88,724.315 1417.55,721.481 1429.5,720C 1443.15,725.821 1455.48,733.654 1466.5,743.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d150b\",\n    d: \"M 1021.5,732.5 C 1021.16,733.338 1020.49,733.672 1019.5,733.5C 995.21,730.089 970.877,726.922 946.5,724C 902.684,723.115 859.017,725.282 815.5,730.5C 814.761,730.631 814.094,730.464 813.5,730C 814.737,729.768 815.737,729.268 816.5,728.5C 834.45,726.277 852.45,724.444 870.5,723C 900.829,719.795 931.162,719.795 961.5,723C 981.458,726.492 1001.46,729.659 1021.5,732.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b433d\",\n    d: \"M 509.5,721.5 C 515.715,723.609 521.381,726.776 526.5,731C 515.407,731.639 504.74,733.139 494.5,735.5C 494.5,733.5 494.5,731.5 494.5,729.5C 493.5,729.5 492.5,729.5 491.5,729.5C 492.671,728.655 494.005,727.989 495.5,727.5C 495.995,729.482 496.495,731.482 497,733.5C 497.893,734.081 498.893,734.415 500,734.5C 506.498,731.445 513.332,729.612 520.5,729C 516.767,726.477 513.101,723.977 509.5,721.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2a983\",\n    d: \"M 481.5,729.5 C 484.936,730.782 488.269,730.782 491.5,729.5C 492.5,729.5 493.5,729.5 494.5,729.5C 494.5,731.5 494.5,733.5 494.5,735.5C 488.893,738.165 482.893,739.665 476.5,740C 473.898,740.977 471.398,742.144 469,743.5C 468.664,734.995 472.83,730.328 481.5,729.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f180c\",\n    d: \"M 1136.5,722.5 C 1136.84,723.338 1137.51,723.672 1138.5,723.5C 1118.55,728.756 1098.22,732.756 1077.5,735.5C 1074.43,735.873 1071.43,736.539 1068.5,737.5C 1063.16,737.313 1057.82,736.98 1052.5,736.5C 1052.5,736.167 1052.5,735.833 1052.5,735.5C 1081,734.194 1109,729.861 1136.5,722.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141f10\",\n    d: \"M 816.5,728.5 C 815.737,729.268 814.737,729.768 813.5,730C 814.094,730.464 814.761,730.631 815.5,730.5C 775.04,734.871 734.373,738.537 693.5,741.5C 670.661,741.831 647.994,741.497 625.5,740.5C 648.836,740.667 672.169,740.5 695.5,740C 735.842,736.136 776.175,732.302 816.5,728.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a7234\",\n    d: \"M 1021.5,732.5 C 1023.1,732.232 1024.43,732.566 1025.5,733.5C 1024.51,733.328 1023.84,733.662 1023.5,734.5C 1021.9,734.768 1020.57,734.434 1019.5,733.5C 1020.49,733.672 1021.16,733.338 1021.5,732.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#494a3b\",\n    d: \"M 477.5,727.5 C 479.153,727.66 480.486,728.326 481.5,729.5C 472.83,730.328 468.664,734.995 469,743.5C 471.398,742.144 473.898,740.977 476.5,740C 482.893,739.665 488.893,738.165 494.5,735.5C 492.915,738.639 490.248,740.306 486.5,740.5C 482.64,740.808 478.974,741.475 475.5,742.5C 472.833,742.833 472.833,743.167 475.5,743.5C 473.052,744.473 470.385,744.806 467.5,744.5C 464.713,743.523 461.713,743.19 458.5,743.5C 460.948,742.527 463.615,742.194 466.5,742.5C 466.296,738.78 467.296,735.447 469.5,732.5C 468.311,731.571 466.978,731.238 465.5,731.5C 469.473,730.398 473.473,729.065 477.5,727.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#203b1d\",\n    d: \"M 1023.5,734.5 C 1023.84,733.662 1024.51,733.328 1025.5,733.5C 1033.15,734.07 1040.82,734.404 1048.5,734.5C 1048.5,734.833 1048.5,735.167 1048.5,735.5C 1040.15,735.573 1031.81,735.24 1023.5,734.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a982\",\n    d: \"M 596.5,739.5 C 597.129,741.997 598.796,743.33 601.5,743.5C 605.267,744.932 607.6,747.599 608.5,751.5C 602.989,751.097 599.322,753.431 597.5,758.5C 597.338,760.527 597.505,762.527 598,764.5C 598.383,765.056 598.883,765.389 599.5,765.5C 598.341,767.25 596.674,768.25 594.5,768.5C 586.371,769.784 578.371,769.784 570.5,768.5C 575.711,762.396 582.377,759.229 590.5,759C 584.317,753.796 583.983,748.296 589.5,742.5C 589.5,742.167 589.5,741.833 589.5,741.5C 590.906,741.027 591.573,740.027 591.5,738.5C 594.835,731.651 596.502,731.984 596.5,739.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#34662e\",\n    d: \"M 1048.5,734.5 C 1050.1,734.232 1051.43,734.566 1052.5,735.5C 1052.5,735.833 1052.5,736.167 1052.5,736.5C 1050.9,736.768 1049.57,736.434 1048.5,735.5C 1048.5,735.167 1048.5,734.833 1048.5,734.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d5628\",\n    d: \"M 1077.5,735.5 C 1076.74,736.268 1075.74,736.768 1074.5,737C 1076.5,737.333 1078.5,737.667 1080.5,738C 1076.31,738.812 1072.31,738.645 1068.5,737.5C 1071.43,736.539 1074.43,735.873 1077.5,735.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223f1e\",\n    d: \"M 1098.5,740.5 C 1093.45,740.55 1088.45,740.05 1083.5,739C 1088.74,738.306 1093.74,738.806 1098.5,740.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0d0d\",\n    d: \"M 1426.5,738.5 C 1432,740.657 1434.67,744.657 1434.5,750.5C 1432.1,750.607 1430.26,749.607 1429,747.5C 1427.7,744.625 1426.86,741.625 1426.5,738.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#386830\",\n    d: \"M 591.5,738.5 C 591.573,740.027 590.906,741.027 589.5,741.5C 559.5,741.5 529.5,741.5 499.5,741.5C 529.331,740.668 559.331,740.168 589.5,740C 590.044,739.283 590.711,738.783 591.5,738.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20341b\",\n    d: \"M 596.5,739.5 C 606.084,740.473 615.75,740.806 625.5,740.5C 647.994,741.497 670.661,741.831 693.5,741.5C 673.5,742.167 653.5,742.833 633.5,743.5C 629.833,743.5 626.167,743.5 622.5,743.5C 615.5,742.167 608.5,742.167 601.5,743.5C 598.796,743.33 597.129,741.997 596.5,739.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0b0b0b\",\n    d: \"M 1413.5,738.5 C 1414.71,739.23 1415.71,740.23 1416.5,741.5C 1418.1,740.515 1419.76,740.349 1421.5,741C 1425.45,743.436 1427.45,746.936 1427.5,751.5C 1424.27,751.439 1422.44,749.772 1422,746.5C 1421.51,748.134 1421.34,749.801 1421.5,751.5C 1419.86,751.714 1418.36,751.38 1417,750.5C 1415.92,746.441 1414.76,742.441 1413.5,738.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#406f39\",\n    d: \"M 486.5,740.5 C 486.842,741.338 487.508,741.672 488.5,741.5C 484.366,742.485 480.032,742.818 475.5,742.5C 478.974,741.475 482.64,740.808 486.5,740.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c1308\",\n    d: \"M 488.5,741.5 C 492.167,741.5 495.833,741.5 499.5,741.5C 529.5,741.5 559.5,741.5 589.5,741.5C 589.5,741.833 589.5,742.167 589.5,742.5C 588.833,742.5 588.167,742.5 587.5,742.5C 550.158,742.278 512.825,742.611 475.5,743.5C 472.833,743.167 472.833,742.833 475.5,742.5C 480.032,742.818 484.366,742.485 488.5,741.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22401f\",\n    d: \"M 1098.5,740.5 C 1110.53,742.004 1122.53,743.838 1134.5,746C 1147.49,747.015 1160.49,747.848 1173.5,748.5C 1173.5,748.833 1173.5,749.167 1173.5,749.5C 1147.94,750.067 1122.94,747.067 1098.5,740.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62bd57\",\n    d: \"M 601.5,743.5 C 608.5,742.167 615.5,742.167 622.5,743.5C 618.212,743.818 614.545,745.484 611.5,748.5C 608.691,745.762 605.358,744.096 601.5,743.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223f1e\",\n    d: \"M 1334.5,743.5 C 1334.57,745.027 1333.91,746.027 1332.5,746.5C 1325.69,745.509 1318.69,745.175 1311.5,745.5C 1308.94,745.802 1306.61,745.468 1304.5,744.5C 1314.51,744.499 1324.51,744.166 1334.5,743.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#376c31\",\n    d: \"M 1296.5,745.5 C 1298.95,744.527 1301.61,744.194 1304.5,744.5C 1306.61,745.468 1308.94,745.802 1311.5,745.5C 1308.38,746.479 1305.04,746.813 1301.5,746.5C 1300.08,745.549 1298.41,745.216 1296.5,745.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea881\",\n    d: \"M 629.5,756.5 C 628.4,757.558 627.066,758.392 625.5,759C 626.416,759.278 627.082,759.778 627.5,760.5C 631.593,762.741 635.593,765.241 639.5,768C 633.126,767.959 627.46,769.792 622.5,773.5C 621.167,774.833 619.833,774.833 618.5,773.5C 617.681,771.228 617.015,768.894 616.5,766.5C 619.172,764.609 620.172,761.942 619.5,758.5C 618.073,755.236 615.739,752.736 612.5,751C 614.83,748.833 617.497,747.166 620.5,746C 625.5,745.333 630.5,745.333 635.5,746C 632.659,749.024 630.659,752.524 629.5,756.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#162614\",\n    d: \"M 1296.5,745.5 C 1298.41,745.216 1300.08,745.549 1301.5,746.5C 1274.51,747.638 1247.51,748.305 1220.5,748.5C 1218.59,748.784 1216.92,748.451 1215.5,747.5C 1242.5,746.775 1269.5,746.108 1296.5,745.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfa882\",\n    d: \"M 1693.5,754.5 C 1695.27,755.892 1697.27,757.059 1699.5,758C 1701.61,759.264 1702.61,761.097 1702.5,763.5C 1696.61,762.772 1692.61,765.105 1690.5,770.5C 1690.11,773.513 1690.77,776.18 1692.5,778.5C 1690.3,780.1 1687.96,781.433 1685.5,782.5C 1684.83,782.5 1684.17,782.5 1683.5,782.5C 1675.83,782.666 1668.16,782.5 1660.5,782C 1664.22,778.615 1668.22,775.615 1672.5,773C 1676.11,772.055 1679.78,771.388 1683.5,771C 1680.26,768.855 1678.59,765.855 1678.5,762C 1679.75,758 1681.42,754.166 1683.5,750.5C 1687.29,742.419 1689.62,742.753 1690.5,751.5C 1691.77,752.288 1692.77,753.288 1693.5,754.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#413e39\",\n    d: \"M 587.5,742.5 C 588.167,742.5 588.833,742.5 589.5,742.5C 583.983,748.296 584.317,753.796 590.5,759C 582.377,759.229 575.711,762.396 570.5,768.5C 569.711,768.783 569.044,769.283 568.5,770C 569.737,770.232 570.737,770.732 571.5,771.5C 568.15,771.665 564.817,771.498 561.5,771C 563.5,770 565.5,769 567.5,768C 572.226,762.279 578.226,758.612 585.5,757C 584.152,755.426 583.486,753.593 583.5,751.5C 584.03,748.11 585.363,745.11 587.5,742.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e403a\",\n    d: \"M 601.5,743.5 C 605.358,744.096 608.691,745.762 611.5,748.5C 614.545,745.484 618.212,743.818 622.5,743.5C 626.167,743.5 629.833,743.5 633.5,743.5C 635.589,743.857 637.589,744.523 639.5,745.5C 635.909,749.083 632.576,752.749 629.5,756.5C 630.659,752.524 632.659,749.024 635.5,746C 630.5,745.333 625.5,745.333 620.5,746C 617.497,747.166 614.83,748.833 612.5,751C 615.739,752.736 618.073,755.236 619.5,758.5C 612.167,751.833 604.833,751.833 597.5,758.5C 599.322,753.431 602.989,751.097 608.5,751.5C 607.6,747.599 605.267,744.932 601.5,743.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#182814\",\n    d: \"M 1215.5,747.5 C 1216.92,748.451 1218.59,748.784 1220.5,748.5C 1205.01,749.496 1189.34,749.83 1173.5,749.5C 1173.5,749.167 1173.5,748.833 1173.5,748.5C 1187.52,748.651 1201.52,748.318 1215.5,747.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2a13\",\n    d: \"M 458.5,743.5 C 461.713,743.19 464.713,743.523 467.5,744.5C 426.834,746.539 386.168,748.539 345.5,750.5C 341.96,750.247 338.627,749.581 335.5,748.5C 376.495,746.722 417.495,745.056 458.5,743.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b2611\",\n    d: \"M 311.5,749.5 C 315.5,749.5 319.5,749.5 323.5,749.5C 329.349,749.816 335.016,750.482 340.5,751.5C 335.833,751.5 331.167,751.5 326.5,751.5C 321.332,751.066 316.332,750.4 311.5,749.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b5a25\",\n    d: \"M 323.5,749.5 C 327.298,748.517 331.298,748.183 335.5,748.5C 338.627,749.581 341.96,750.247 345.5,750.5C 344.081,751.451 342.415,751.784 340.5,751.5C 335.016,750.482 329.349,749.816 323.5,749.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#405b25\",\n    d: \"M 305.5,750.5 C 307.265,749.539 309.265,749.205 311.5,749.5C 316.332,750.4 321.332,751.066 326.5,751.5C 323.713,752.477 320.713,752.81 317.5,752.5C 313.664,751.622 309.664,750.956 305.5,750.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a6628\",\n    d: \"M 278.5,751.5 C 282.298,750.517 286.298,750.183 290.5,750.5C 295.363,751.266 300.363,751.932 305.5,752.5C 304.432,753.434 303.099,753.768 301.5,753.5C 294.005,752.549 286.339,751.882 278.5,751.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c2410\",\n    d: \"M 290.5,750.5 C 295.5,750.5 300.5,750.5 305.5,750.5C 309.664,750.956 313.664,751.622 317.5,752.5C 313.5,752.5 309.5,752.5 305.5,752.5C 300.363,751.932 295.363,751.266 290.5,750.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#493e39\",\n    d: \"M 1693.5,754.5 C 1698.23,754.781 1702.06,756.781 1705,760.5C 1707.67,757.836 1710.84,756.002 1714.5,755C 1721.7,753.946 1728.7,754.612 1735.5,757C 1733.34,757.996 1731.67,759.496 1730.5,761.5C 1729.66,761.842 1729.33,762.508 1729.5,763.5C 1727.79,766.213 1725.45,768.213 1722.5,769.5C 1725.25,765.769 1727.92,761.935 1730.5,758C 1721.53,754.872 1713.53,756.539 1706.5,763C 1708.62,764.049 1710.28,765.549 1711.5,767.5C 1703.73,764.019 1696.73,765.019 1690.5,770.5C 1692.61,765.105 1696.61,762.772 1702.5,763.5C 1702.61,761.097 1701.61,759.264 1699.5,758C 1697.27,757.059 1695.27,755.892 1693.5,754.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 1722.5,769.5 C 1721.45,769.351 1720.45,769.517 1719.5,770C 1718.17,770.667 1718.17,771.333 1719.5,772C 1724.82,774.327 1729.82,777.16 1734.5,780.5C 1726.73,781.986 1719.06,783.653 1711.5,785.5C 1711.48,783.435 1711.15,781.435 1710.5,779.5C 1715.31,775.802 1715.64,771.802 1711.5,767.5C 1710.28,765.549 1708.62,764.049 1706.5,763C 1713.53,756.539 1721.53,754.872 1730.5,758C 1727.92,761.935 1725.25,765.769 1722.5,769.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433e36\",\n    d: \"M 1683.5,750.5 C 1681.42,754.166 1679.75,758 1678.5,762C 1678.59,765.855 1680.26,768.855 1683.5,771C 1679.78,771.388 1676.11,772.055 1672.5,773C 1668.22,775.615 1664.22,778.615 1660.5,782C 1668.16,782.5 1675.83,782.666 1683.5,782.5C 1673.34,783.643 1663,784.143 1652.5,784C 1654.93,782.855 1657.26,781.522 1659.5,780C 1664.23,774.279 1670.23,770.612 1677.5,769C 1676.83,768 1676.17,767 1675.5,766C 1668.99,765.828 1662.65,765.328 1656.5,764.5C 1662.83,764.5 1669.17,764.5 1675.5,764.5C 1676.08,758.667 1678.75,754 1683.5,750.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa3535\",\n    d: \"M 619.5,758.5 C 620.172,761.942 619.172,764.609 616.5,766.5C 615.005,766.989 613.671,767.655 612.5,768.5C 609.604,769.775 606.604,769.775 603.5,768.5C 602.205,767.512 600.872,766.512 599.5,765.5C 598.883,765.389 598.383,765.056 598,764.5C 597.505,762.527 597.338,760.527 597.5,758.5C 604.833,751.833 612.167,751.833 619.5,758.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c911f\",\n    d: \"M 1759.5,758.5 C 1759.83,758.5 1760.17,758.5 1760.5,758.5C 1843.66,759.499 1927,759.833 2010.5,759.5C 1926.67,760.499 1842.67,760.833 1758.5,760.5C 1758.83,759.833 1759.17,759.167 1759.5,758.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#263818\",\n    d: \"M 1759.5,758.5 C 1759.17,759.167 1758.83,759.833 1758.5,760.5C 1748.97,762.164 1739.3,763.164 1729.5,763.5C 1729.33,762.508 1729.66,761.842 1730.5,761.5C 1740.41,762.191 1750.07,761.191 1759.5,758.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111410\",\n    d: \"M 1393.5,726.5 C 1393.83,727.167 1394.17,727.833 1394.5,728.5C 1381.43,732.137 1368.09,734.637 1354.5,736C 1345.88,737.723 1338.72,741.89 1333,748.5C 1328.38,757.598 1331.05,763.264 1341,765.5C 1355.16,763.679 1369.32,762.012 1383.5,760.5C 1380.39,756.954 1378.55,752.954 1378,748.5C 1382.34,751.675 1386.17,755.342 1389.5,759.5C 1389.83,759.167 1390.17,758.833 1390.5,758.5C 1387.27,753.179 1384.44,747.846 1382,742.5C 1383,743.5 1384,744.5 1385,745.5C 1386.13,743.789 1387.63,743.289 1389.5,744C 1394.02,747.023 1397.69,750.856 1400.5,755.5C 1401.72,756.614 1403.06,756.781 1404.5,756C 1399.14,751.407 1395.81,745.907 1394.5,739.5C 1400.98,743.146 1405.48,748.479 1408,755.5C 1409.4,754.773 1410.9,754.273 1412.5,754C 1408.67,751.331 1407.34,747.831 1408.5,743.5C 1412.65,745.631 1414.65,748.965 1414.5,753.5C 1433.23,751.882 1451.89,749.716 1470.5,747C 1469.27,745.595 1467.94,744.429 1466.5,743.5C 1466.5,742.833 1466.83,742.5 1467.5,742.5C 1470.03,744.265 1472.36,746.265 1474.5,748.5C 1453.89,751.401 1433.22,753.901 1412.5,756C 1403.9,757.732 1395.57,760.232 1387.5,763.5C 1386.71,763.069 1385.87,762.735 1385,762.5C 1370.2,764.459 1355.37,766.125 1340.5,767.5C 1337.77,767.705 1335.44,766.872 1333.5,765C 1327.45,758.965 1327.12,752.799 1332.5,746.5C 1333.91,746.027 1334.57,745.027 1334.5,743.5C 1335.96,742.542 1337.29,741.376 1338.5,740C 1351.58,732.976 1365.58,729.643 1380.5,730C 1384.9,728.985 1389.23,727.818 1393.5,726.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#767676\",\n    d: \"M 1392.5,751.5 C 1394.27,753.508 1395.93,755.674 1397.5,758C 1396.36,758.749 1395.36,758.583 1394.5,757.5C 1393.63,755.55 1392.96,753.55 1392.5,751.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e433d\",\n    d: \"M 599.5,765.5 C 600.872,766.512 602.205,767.512 603.5,768.5C 598.578,768.899 594.745,771.233 592,775.5C 591.506,777.134 591.34,778.801 591.5,780.5C 592.5,780.5 593.5,780.5 594.5,780.5C 593.432,781.434 592.099,781.768 590.5,781.5C 590.034,777.838 590.701,774.505 592.5,771.5C 593.906,771.027 594.573,770.027 594.5,768.5C 596.674,768.25 598.341,767.25 599.5,765.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#44403a\",\n    d: \"M 627.5,760.5 C 634.194,762.347 640.194,765.514 645.5,770C 637.58,769.868 629.913,771.035 622.5,773.5C 627.46,769.792 633.126,767.959 639.5,768C 635.593,765.241 631.593,762.741 627.5,760.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a83534\",\n    d: \"M 1711.5,767.5 C 1715.64,771.802 1715.31,775.802 1710.5,779.5C 1708.6,779.796 1706.93,780.463 1705.5,781.5C 1702.83,782.833 1700.17,782.833 1697.5,781.5C 1696.04,780.263 1694.37,779.263 1692.5,778.5C 1690.77,776.18 1690.11,773.513 1690.5,770.5C 1696.73,765.019 1703.73,764.019 1711.5,767.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273718\",\n    d: \"M 232.5,734.5 C 232.018,735.416 231.685,736.416 231.5,737.5C 232.841,742.518 234.174,747.518 235.5,752.5C 249.839,752.353 264.172,752.02 278.5,751.5C 286.339,751.882 294.005,752.549 301.5,753.5C 297.818,753.335 294.152,753.501 290.5,754C 356.5,760.333 422.5,766.667 488.5,773C 508.506,775.882 528.506,778.715 548.5,781.5C 547.378,782.156 546.045,782.489 544.5,782.5C 524.896,779.247 505.229,776.414 485.5,774C 414.583,767.494 343.75,760.327 273,752.5C 260.165,753.217 247.332,753.883 234.5,754.5C 233.148,748.425 231.481,742.425 229.5,736.5C 230.005,735.081 231.005,734.415 232.5,734.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3ab84\",\n    d: \"M 603.5,768.5 C 606.604,769.775 609.604,769.775 612.5,768.5C 613.5,768.5 614.5,768.5 615.5,768.5C 615.896,771.044 615.229,773.211 613.5,775C 608.988,776.636 604.322,777.636 599.5,778C 597.509,778.374 595.842,779.207 594.5,780.5C 593.5,780.5 592.5,780.5 591.5,780.5C 591.34,778.801 591.506,777.134 592,775.5C 594.745,771.233 598.578,768.899 603.5,768.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#293b19\",\n    d: \"M 1644.5,765.5 C 1599.16,767.961 1550.49,770.627 1498.5,773.5C 1498.5,772.833 1498.17,772.5 1497.5,772.5C 1546.29,769.012 1595.29,766.679 1644.5,765.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#756e52\",\n    d: \"M 570.5,768.5 C 578.371,769.784 586.371,769.784 594.5,768.5C 594.573,770.027 593.906,771.027 592.5,771.5C 585.686,771.061 578.686,771.061 571.5,771.5C 570.737,770.732 569.737,770.232 568.5,770C 569.044,769.283 569.711,768.783 570.5,768.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#545454\",\n    d: \"M 2333.5,773.5 C 2326.98,773.823 2320.64,773.49 2314.5,772.5C 2318.44,772.793 2322.27,772.46 2326,771.5C 2328.61,772.123 2331.11,772.79 2333.5,773.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#243418\",\n    d: \"M 1497.5,772.5 C 1498.17,772.5 1498.5,772.833 1498.5,773.5C 1486.16,774.01 1473.83,774.677 1461.5,775.5C 1458.64,775.497 1455.98,775.164 1453.5,774.5C 1468.15,773.518 1482.82,772.852 1497.5,772.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c3f1b\",\n    d: \"M 1445.5,775.5 C 1447.2,775.34 1448.87,775.506 1450.5,776C 1439.5,776.961 1428.5,777.795 1417.5,778.5C 1417.5,778.167 1417.5,777.833 1417.5,777.5C 1426.76,776.173 1436.1,775.506 1445.5,775.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#524b41\",\n    d: \"M 616.5,766.5 C 617.015,768.894 617.681,771.228 618.5,773.5C 615.442,776.354 611.775,778.187 607.5,779C 603.137,779.369 598.804,779.869 594.5,780.5C 595.842,779.207 597.509,778.374 599.5,778C 604.322,777.636 608.988,776.636 613.5,775C 615.229,773.211 615.896,771.044 615.5,768.5C 614.5,768.5 613.5,768.5 612.5,768.5C 613.671,767.655 615.005,766.989 616.5,766.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7d7a73\",\n    d: \"M 2049.5,777.5 C 2164.83,778.436 2280.17,779.603 2395.5,781C 2287.48,793.65 2179.48,806.484 2071.5,819.5C 2070.5,819.167 2069.5,818.833 2068.5,818.5C 2061.88,804.932 2055.55,791.265 2049.5,777.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a3b1a\",\n    d: \"M 1417.5,777.5 C 1417.5,777.833 1417.5,778.167 1417.5,778.5C 1388.94,779.515 1360.6,782.515 1332.5,787.5C 1332.5,787.167 1332.5,786.833 1332.5,786.5C 1360.44,781.17 1388.78,778.17 1417.5,777.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#263517\",\n    d: \"M 550.5,782.5 C 561.723,783.531 572.723,785.197 583.5,787.5C 572.219,786.785 561.219,785.118 550.5,782.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3ab83\",\n    d: \"M 895.5,797.5 C 896.911,799.539 898.911,800.539 901.5,800.5C 904.655,802.319 906.655,804.985 907.5,808.5C 902.429,808.275 898.762,810.275 896.5,814.5C 895.053,815.134 894.387,816.301 894.5,818C 894.84,820.511 895.84,822.678 897.5,824.5C 895.07,826.381 892.404,827.715 889.5,828.5C 881.316,828.826 873.316,828.492 865.5,827.5C 868.72,824.117 872.386,821.284 876.5,819C 880.442,818.007 884.442,817.34 888.5,817C 885.049,814.722 883.049,811.555 882.5,807.5C 884.411,802.006 887.078,797.006 890.5,792.5C 891.476,791.185 892.476,789.852 893.5,788.5C 894.353,791.478 895.019,794.478 895.5,797.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f473c\",\n    d: \"M 1722.5,769.5 C 1722.08,770.222 1721.42,770.722 1720.5,771C 1727.96,774.227 1734.96,778.227 1741.5,783C 1732.47,782.675 1723.8,784.175 1715.5,787.5C 1714.11,787.379 1712.77,787.046 1711.5,786.5C 1709.4,788.77 1706.9,790.437 1704,791.5C 1697.42,792.55 1690.92,793.883 1684.5,795.5C 1681.56,790.935 1682.22,786.768 1686.5,783C 1686.27,782.601 1685.94,782.435 1685.5,782.5C 1687.96,781.433 1690.3,780.1 1692.5,778.5C 1694.37,779.263 1696.04,780.263 1697.5,781.5C 1689.27,781.405 1684.93,785.405 1684.5,793.5C 1691.69,791.385 1699.02,789.885 1706.5,789C 1709.04,787.152 1710.04,784.652 1709.5,781.5C 1708.17,781.5 1706.83,781.5 1705.5,781.5C 1706.93,780.463 1708.6,779.796 1710.5,779.5C 1711.15,781.435 1711.48,783.435 1711.5,785.5C 1719.06,783.653 1726.73,781.986 1734.5,780.5C 1729.82,777.16 1724.82,774.327 1719.5,772C 1718.17,771.333 1718.17,770.667 1719.5,770C 1720.45,769.517 1721.45,769.351 1722.5,769.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4ab84\",\n    d: \"M 1697.5,781.5 C 1700.17,782.833 1702.83,782.833 1705.5,781.5C 1706.83,781.5 1708.17,781.5 1709.5,781.5C 1710.04,784.652 1709.04,787.152 1706.5,789C 1699.02,789.885 1691.69,791.385 1684.5,793.5C 1684.93,785.405 1689.27,781.405 1697.5,781.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3ab83\",\n    d: \"M 1604.5,798.5 C 1604.86,800.371 1605.86,801.871 1607.5,803C 1612.59,804.958 1617.09,807.792 1621,811.5C 1621.49,812.793 1621.66,814.127 1621.5,815.5C 1610.5,815.162 1605.5,820.162 1606.5,830.5C 1606.74,832.404 1607.74,833.738 1609.5,834.5C 1606.17,837.003 1602.5,838.669 1598.5,839.5C 1596.83,839.5 1595.17,839.5 1593.5,839.5C 1584.98,839.826 1576.65,839.493 1568.5,838.5C 1573.01,834.832 1577.67,831.332 1582.5,828C 1587.08,826.617 1591.75,825.617 1596.5,825C 1593.18,822.023 1591.18,818.356 1590.5,814C 1591.82,808.859 1593.82,804.025 1596.5,799.5C 1598.52,796.633 1600.85,793.967 1603.5,791.5C 1604.47,793.743 1604.81,796.076 1604.5,798.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273618\",\n    d: \"M 583.5,787.5 C 604.092,789.613 624.425,792.613 644.5,796.5C 623.883,794.508 603.55,791.508 583.5,787.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0a982\",\n    d: \"M 1150.5,804.5 C 1152.94,805.899 1155.28,807.566 1157.5,809.5C 1158.25,810.736 1158.58,812.07 1158.5,813.5C 1152.87,813.308 1148.87,815.641 1146.5,820.5C 1144.84,824.224 1145.51,827.557 1148.5,830.5C 1145.83,831.833 1143.17,833.167 1140.5,834.5C 1140.17,834.5 1139.83,834.5 1139.5,834.5C 1130.83,834.5 1122.17,834.5 1113.5,834.5C 1119.63,826.933 1127.63,822.766 1137.5,822C 1134.65,819.46 1132.98,816.293 1132.5,812.5C 1133.63,808.239 1135.3,804.239 1137.5,800.5C 1138.73,797.593 1140.73,795.259 1143.5,793.5C 1144.27,795.813 1144.94,798.146 1145.5,800.5C 1147.21,801.887 1148.88,803.221 1150.5,804.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#263618\",\n    d: \"M 644.5,796.5 C 663.489,798.915 682.489,801.249 701.5,803.5C 697.689,804.645 693.689,804.812 689.5,804C 674.291,801.91 659.291,799.41 644.5,796.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b5c46\",\n    d: \"M 895.5,797.5 C 897.819,797.992 899.819,798.992 901.5,800.5C 898.911,800.539 896.911,799.539 895.5,797.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49403b\",\n    d: \"M 927.5,815.5 C 929.103,814.404 930.603,813.07 932,811.5C 932.726,808.379 934.226,805.713 936.5,803.5C 929.46,800.643 922.46,801.143 915.5,805C 911.591,808.199 912.258,810.532 917.5,812C 918.252,812.671 918.586,813.504 918.5,814.5C 911.167,809.167 903.833,809.167 896.5,814.5C 898.762,810.275 902.429,808.275 907.5,808.5C 906.655,804.985 904.655,802.319 901.5,800.5C 905.203,800.862 908.203,802.529 910.5,805.5C 913.472,803.032 916.806,801.198 920.5,800C 928.045,798.874 935.379,799.54 942.5,802C 940.04,803.458 937.873,805.291 936,807.5C 934.553,811.785 931.719,814.452 927.5,815.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433e38\",\n    d: \"M 890.5,792.5 C 887.078,797.006 884.411,802.006 882.5,807.5C 883.049,811.555 885.049,814.722 888.5,817C 884.442,817.34 880.442,818.007 876.5,819C 872.386,821.284 868.72,824.117 865.5,827.5C 864.711,827.783 864.044,828.283 863.5,829C 865.382,829.198 867.048,829.698 868.5,830.5C 863.456,830.582 858.456,830.749 853.5,831C 859.877,828.815 865.21,825.148 869.5,820C 868.906,819.536 868.239,819.369 867.5,819.5C 867.5,819.167 867.5,818.833 867.5,818.5C 872.496,817.502 877.496,816.335 882.5,815C 879.903,812.683 879.07,809.85 880,806.5C 882.791,801.228 886.291,796.562 890.5,792.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1a982\",\n    d: \"M 927.5,815.5 C 927.167,816.167 926.833,816.833 926.5,817.5C 931.773,820.142 936.773,823.309 941.5,827C 938.5,827.333 935.5,827.667 932.5,828C 928.71,829.646 924.877,831.146 921,832.5C 919.774,832.355 918.607,832.022 917.5,831.5C 916.534,829.604 916.201,827.604 916.5,825.5C 918.596,823.646 919.929,821.313 920.5,818.5C 920.332,816.829 919.665,815.496 918.5,814.5C 918.586,813.504 918.252,812.671 917.5,812C 912.258,810.532 911.591,808.199 915.5,805C 922.46,801.143 929.46,800.643 936.5,803.5C 934.226,805.713 932.726,808.379 932,811.5C 930.603,813.07 929.103,814.404 927.5,815.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#453e37\",\n    d: \"M 1199.5,804.5 C 1199.5,806.833 1199.5,809.167 1199.5,811.5C 1198.55,810.081 1198.22,808.415 1198.5,806.5C 1192.07,807.422 1187.9,811.089 1186,817.5C 1185.18,818.823 1184.02,819.489 1182.5,819.5C 1184.3,815.232 1186.64,811.232 1189.5,807.5C 1181.49,805.644 1173.83,806.477 1166.5,810C 1162.22,812.731 1162.56,814.731 1167.5,816C 1169.14,817.129 1170.14,818.629 1170.5,820.5C 1162.4,813.949 1154.4,813.949 1146.5,820.5C 1148.87,815.641 1152.87,813.308 1158.5,813.5C 1158.58,812.07 1158.25,810.736 1157.5,809.5C 1155.28,807.566 1152.94,805.899 1150.5,804.5C 1154.61,805.147 1158.44,806.48 1162,808.5C 1166.11,806.862 1170.28,805.362 1174.5,804C 1178.83,803.333 1183.17,803.333 1187.5,804C 1191.44,805.824 1195.44,805.991 1199.5,804.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f100e\",\n    d: \"M 1332.5,786.5 C 1332.5,786.833 1332.5,787.167 1332.5,787.5C 1338.43,791.597 1343.6,796.597 1348,802.5C 1349.69,805.624 1349.85,808.791 1348.5,812C 1336.18,811.695 1323.84,811.695 1311.5,812C 1307.47,812.481 1303.47,813.147 1299.5,814C 1289.89,818.468 1279.89,821.801 1269.5,824C 1249.1,825.053 1228.77,824.386 1208.5,822C 1203.51,820.18 1200.51,816.68 1199.5,811.5C 1199.5,809.167 1199.5,806.833 1199.5,804.5C 1200.02,800.464 1202.02,797.297 1205.5,795C 1214.09,792.039 1222.09,788.039 1229.5,783C 1255.48,783.186 1281.31,781.02 1307,776.5C 1315.92,778.883 1324.42,782.217 1332.5,786.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#909090\",\n    d: \"M 1304.5,778.5 C 1320.58,781.624 1334.08,789.291 1345,801.5C 1347.29,804.072 1348.45,807.072 1348.5,810.5C 1339.48,810.599 1330.48,810.266 1321.5,809.5C 1321.66,807.473 1321.5,805.473 1321,803.5C 1318.67,801.5 1316.33,799.5 1314,797.5C 1313.84,801.684 1315.01,805.517 1317.5,809C 1317.17,809.167 1316.83,809.333 1316.5,809.5C 1314.15,804.988 1310.65,801.654 1306,799.5C 1303.99,801.002 1302.33,800.669 1301,798.5C 1302.03,802.426 1303.19,806.426 1304.5,810.5C 1303.68,811.386 1302.68,811.719 1301.5,811.5C 1301.13,807.455 1299.13,804.455 1295.5,802.5C 1294.01,806.372 1295.01,809.539 1298.5,812C 1296.98,813.009 1295.31,813.509 1293.5,813.5C 1293.33,810.821 1292.33,808.487 1290.5,806.5C 1287.48,803.645 1284.31,800.979 1281,798.5C 1282.78,804.659 1285.95,810.159 1290.5,815C 1289.36,815.749 1288.36,815.583 1287.5,814.5C 1284.45,809.113 1280.11,805.113 1274.5,802.5C 1272.41,805.009 1270.58,804.675 1269,801.5C 1271.37,807.762 1274.54,813.762 1278.5,819.5C 1278,819.833 1277.5,820.167 1277,820.5C 1274.38,815.381 1270.55,811.381 1265.5,808.5C 1265.87,813.083 1267.87,817.249 1271.5,821C 1270.5,821.333 1269.5,821.667 1268.5,822C 1248.76,823.124 1229.09,822.458 1209.5,820C 1202.62,817.079 1199.79,811.912 1201,804.5C 1202.06,801.438 1203.89,798.938 1206.5,797C 1214.72,793.936 1222.39,789.936 1229.5,785C 1239.49,785.221 1249.49,785.221 1259.5,785C 1274.72,783.351 1289.72,781.184 1304.5,778.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#483e39\",\n    d: \"M 1604.5,798.5 C 1608.41,802.289 1613.07,804.789 1618.5,806C 1620.98,807.309 1622.98,809.142 1624.5,811.5C 1636.04,802.976 1648.71,801.142 1662.5,806C 1662.83,806.333 1663.17,806.667 1663.5,807C 1658.88,809.618 1655.72,813.451 1654,818.5C 1651,821.738 1647.5,824.071 1643.5,825.5C 1641.62,825.607 1641.29,825.107 1642.5,824C 1645.7,823.152 1648.53,821.652 1651,819.5C 1652.27,815.131 1654.43,811.297 1657.5,808C 1646.67,804.8 1636.67,806.467 1627.5,813C 1626.35,815.557 1627.35,816.89 1630.5,817C 1632.79,818.777 1634.46,820.944 1635.5,823.5C 1629.65,817.811 1622.65,815.978 1614.5,818C 1608.42,819.99 1605.76,824.157 1606.5,830.5C 1605.5,820.162 1610.5,815.162 1621.5,815.5C 1621.66,814.127 1621.49,812.793 1621,811.5C 1617.09,807.792 1612.59,804.958 1607.5,803C 1605.86,801.871 1604.86,800.371 1604.5,798.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#423c37\",\n    d: \"M 1596.5,799.5 C 1593.82,804.025 1591.82,808.859 1590.5,814C 1591.18,818.356 1593.18,822.023 1596.5,825C 1591.75,825.617 1587.08,826.617 1582.5,828C 1577.67,831.332 1573.01,834.832 1568.5,838.5C 1567.96,838.56 1567.62,838.893 1567.5,839.5C 1576.32,840.821 1584.99,840.821 1593.5,839.5C 1595.17,839.5 1596.83,839.5 1598.5,839.5C 1597.39,840.29 1596.06,840.79 1594.5,841C 1581.83,841.723 1569.16,842.056 1556.5,842C 1560.29,840.269 1563.96,838.269 1567.5,836C 1573.15,828.679 1580.48,824.179 1589.5,822.5C 1587.16,819.499 1586.32,816.165 1587,812.5C 1589.26,807.423 1592.42,803.09 1596.5,799.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433d38\",\n    d: \"M 1137.5,800.5 C 1135.3,804.239 1133.63,808.239 1132.5,812.5C 1132.98,816.293 1134.65,819.46 1137.5,822C 1127.63,822.766 1119.63,826.933 1113.5,834.5C 1116.25,835.235 1119.58,835.902 1123.5,836.5C 1116.14,836.586 1108.8,836.753 1101.5,837C 1105.78,835.527 1109.78,833.527 1113.5,831C 1118.05,824.893 1124.05,821.06 1131.5,819.5C 1130.25,817.677 1129.59,815.677 1129.5,813.5C 1129.5,812.833 1129.5,812.167 1129.5,811.5C 1131.43,807.249 1134.09,803.583 1137.5,800.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3aa83\",\n    d: \"M 1182.5,819.5 C 1181.51,819.328 1180.84,819.662 1180.5,820.5C 1179.45,820.351 1178.45,820.517 1177.5,821C 1176.17,821.667 1176.17,822.333 1177.5,823C 1183.66,825.577 1189.33,828.91 1194.5,833C 1191.17,833.333 1187.83,833.667 1184.5,834C 1180.59,835.791 1176.59,837.291 1172.5,838.5C 1171.23,838.43 1170.06,838.097 1169,837.5C 1168.68,835.414 1168.18,833.414 1167.5,831.5C 1171.34,828.551 1172.34,824.884 1170.5,820.5C 1170.14,818.629 1169.14,817.129 1167.5,816C 1162.56,814.731 1162.22,812.731 1166.5,810C 1173.83,806.477 1181.49,805.644 1189.5,807.5C 1186.64,811.232 1184.3,815.232 1182.5,819.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4ab84\",\n    d: \"M 1643.5,825.5 C 1650.1,828.805 1656.44,832.638 1662.5,837C 1658.78,837.388 1655.11,838.055 1651.5,839C 1646.82,841.258 1641.99,843.091 1637,844.5C 1635.77,844.355 1634.61,844.022 1633.5,843.5C 1632.73,841.157 1632.06,838.823 1631.5,836.5C 1633.17,834.66 1634.67,832.66 1636,830.5C 1636.8,827.961 1636.63,825.628 1635.5,823.5C 1634.46,820.944 1632.79,818.777 1630.5,817C 1627.35,816.89 1626.35,815.557 1627.5,813C 1636.67,806.467 1646.67,804.8 1657.5,808C 1654.43,811.297 1652.27,815.131 1651,819.5C 1648.53,821.652 1645.7,823.152 1642.5,824C 1641.29,825.107 1641.62,825.607 1643.5,825.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273718\",\n    d: \"M 704.5,804.5 C 758.886,808.687 813.219,813.353 867.5,818.5C 867.5,818.833 867.5,819.167 867.5,819.5C 812.965,815.053 758.632,810.053 704.5,804.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2aa83\",\n    d: \"M 1019.5,810.5 C 1020.17,812.5 1020.83,814.5 1021.5,816.5C 1022.53,818.194 1023.86,819.527 1025.5,820.5C 1029.77,822.149 1033.1,824.982 1035.5,829C 1032.58,830.105 1029.58,831.105 1026.5,832C 1024.54,833.451 1023.2,835.284 1022.5,837.5C 1020.99,840.618 1021.66,843.285 1024.5,845.5C 1021.93,848.279 1018.6,849.779 1014.5,850C 1006.5,850.667 998.5,850.667 990.5,850C 994.61,845.891 999.277,842.557 1004.5,840C 1007.88,839.548 1011.21,838.882 1014.5,838C 1010.03,834.901 1008.53,830.735 1010,825.5C 1012.19,821.778 1014.36,818.111 1016.5,814.5C 1016.74,812.596 1017.74,811.262 1019.5,810.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a83534\",\n    d: \"M 918.5,814.5 C 919.665,815.496 920.332,816.829 920.5,818.5C 919.929,821.313 918.596,823.646 916.5,825.5C 914.597,825.796 912.93,826.463 911.5,827.5C 908.5,828.833 905.5,828.833 902.5,827.5C 901.101,826.11 899.434,825.11 897.5,824.5C 895.84,822.678 894.84,820.511 894.5,818C 894.387,816.301 895.053,815.134 896.5,814.5C 903.833,809.167 911.167,809.167 918.5,814.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f8554\",\n    d: \"M 1019.5,810.5 C 1019.56,809.957 1019.89,809.624 1020.5,809.5C 1021.47,811.743 1021.81,814.076 1021.5,816.5C 1020.83,814.5 1020.17,812.5 1019.5,810.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c411c\",\n    d: \"M 1129.5,811.5 C 1129.5,812.167 1129.5,812.833 1129.5,813.5C 1120.15,813.865 1110.82,814.532 1101.5,815.5C 1099.3,815.495 1097.3,815.162 1095.5,814.5C 1106.84,813.602 1118.18,812.602 1129.5,811.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#797979\",\n    d: \"M 1280.5,812.5 C 1282.05,813.914 1283.39,815.581 1284.5,817.5C 1283.68,818.386 1282.68,818.719 1281.5,818.5C 1281.17,816.5 1280.83,814.5 1280.5,812.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273517\",\n    d: \"M 1090.5,815.5 C 1091.87,815.343 1093.21,815.51 1094.5,816C 1085.34,816.866 1076.17,817.7 1067,818.5C 1064.64,818.496 1062.47,818.163 1060.5,817.5C 1070.49,816.701 1080.49,816.034 1090.5,815.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a83433\",\n    d: \"M 1170.5,820.5 C 1172.34,824.884 1171.34,828.551 1167.5,831.5C 1165.6,831.796 1163.93,832.463 1162.5,833.5C 1159.5,834.833 1156.5,834.833 1153.5,833.5C 1152.04,832.263 1150.37,831.263 1148.5,830.5C 1145.51,827.557 1144.84,824.224 1146.5,820.5C 1154.4,813.949 1162.4,813.949 1170.5,820.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a3f1b\",\n    d: \"M 1055.5,818.5 C 1049.9,819.932 1042.23,820.932 1032.5,821.5C 1032.16,820.662 1031.49,820.328 1030.5,820.5C 1038.64,819.233 1046.97,818.566 1055.5,818.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#453c37\",\n    d: \"M 1025.5,820.5 C 1027.17,820.5 1028.83,820.5 1030.5,820.5C 1031.49,820.328 1032.16,820.662 1032.5,821.5C 1031.76,821.369 1031.09,821.536 1030.5,822C 1033.22,822.878 1035.55,824.378 1037.5,826.5C 1047.56,820.017 1058.23,818.851 1069.5,823C 1066.24,825.592 1063.74,828.759 1062,832.5C 1060.55,834.464 1058.72,835.797 1056.5,836.5C 1059.44,832.567 1062.1,828.4 1064.5,824C 1054.65,820.963 1045.98,822.963 1038.5,830C 1040.58,830.697 1042.25,831.864 1043.5,833.5C 1035.47,830.003 1028.47,831.337 1022.5,837.5C 1023.2,835.284 1024.54,833.451 1026.5,832C 1029.58,831.105 1032.58,830.105 1035.5,829C 1033.1,824.982 1029.77,822.149 1025.5,820.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#385121\",\n    d: \"M 935.5,820.5 C 960.5,820.5 985.5,820.5 1010.5,820.5C 1010.57,822.027 1009.91,823.027 1008.5,823.5C 985.673,822.502 962.673,822.169 939.5,822.5C 937.847,822.34 936.514,821.674 935.5,820.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1a983\",\n    d: \"M 1056.5,836.5 C 1050.28,837.683 1050.61,839.016 1057.5,840.5C 1061.1,842.977 1064.77,845.477 1068.5,848C 1061.74,848.346 1055.74,850.513 1050.5,854.5C 1045.81,854.669 1043.47,852.335 1043.5,847.5C 1048.77,842.624 1048.77,837.957 1043.5,833.5C 1042.25,831.864 1040.58,830.697 1038.5,830C 1045.98,822.963 1054.65,820.963 1064.5,824C 1062.1,828.4 1059.44,832.567 1056.5,836.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ab3434\",\n    d: \"M 1635.5,823.5 C 1636.63,825.628 1636.8,827.961 1636,830.5C 1634.67,832.66 1633.17,834.66 1631.5,836.5C 1630.21,836.263 1629.21,836.596 1628.5,837.5C 1627.29,838.234 1625.96,838.567 1624.5,838.5C 1618.97,838.869 1613.97,837.536 1609.5,834.5C 1607.74,833.738 1606.74,832.404 1606.5,830.5C 1605.76,824.157 1608.42,819.99 1614.5,818C 1622.65,815.978 1629.65,817.811 1635.5,823.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474039\",\n    d: \"M 1016.5,814.5 C 1014.36,818.111 1012.19,821.778 1010,825.5C 1008.53,830.735 1010.03,834.901 1014.5,838C 1011.21,838.882 1007.88,839.548 1004.5,840C 999.277,842.557 994.61,845.891 990.5,850C 998.5,850.667 1006.5,850.667 1014.5,850C 1018.6,849.779 1021.93,848.279 1024.5,845.5C 1028.29,848.43 1032.63,849.763 1037.5,849.5C 1033.01,850.053 1028.34,850.22 1023.5,850C 1018.14,852.509 1015.48,856.676 1015.5,862.5C 1016.5,862.5 1017.5,862.5 1018.5,862.5C 1017.74,863.391 1016.74,864.058 1015.5,864.5C 1012.78,859.757 1013.44,855.424 1017.5,851.5C 1017.17,851.167 1016.83,850.833 1016.5,850.5C 1004.87,851.545 993.201,852.045 981.5,852C 984.167,850.667 986.833,849.333 989.5,848C 994.425,841.708 1000.76,837.708 1008.5,836C 1005.88,831.835 1005.88,827.668 1008.5,823.5C 1009.91,823.027 1010.57,822.027 1010.5,820.5C 1012.14,818.194 1014.14,816.194 1016.5,814.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48403a\",\n    d: \"M 926.5,817.5 C 929.594,818.213 932.594,819.213 935.5,820.5C 936.514,821.674 937.847,822.34 939.5,822.5C 942.433,824.645 945.433,826.812 948.5,829C 940.18,828.682 932.18,830.016 924.5,833C 921.303,833.242 918.303,833.408 915.5,833.5C 916.401,829.759 915.068,827.759 911.5,827.5C 912.93,826.463 914.597,825.796 916.5,825.5C 916.201,827.604 916.534,829.604 917.5,831.5C 918.607,832.022 919.774,832.355 921,832.5C 924.877,831.146 928.71,829.646 932.5,828C 935.5,827.667 938.5,827.333 941.5,827C 936.773,823.309 931.773,820.142 926.5,817.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4ab84\",\n    d: \"M 902.5,827.5 C 905.5,828.833 908.5,828.833 911.5,827.5C 915.068,827.759 916.401,829.759 915.5,833.5C 906.518,835.753 897.518,838.086 888.5,840.5C 889.343,832.074 894.01,827.741 902.5,827.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#71614b\",\n    d: \"M 865.5,827.5 C 873.316,828.492 881.316,828.826 889.5,828.5C 882.73,830.075 875.73,830.741 868.5,830.5C 867.048,829.698 865.382,829.198 863.5,829C 864.044,828.283 864.711,827.783 865.5,827.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#473d39\",\n    d: \"M 1148.5,830.5 C 1150.37,831.263 1152.04,832.263 1153.5,833.5C 1144.64,834.031 1139.64,838.698 1138.5,847.5C 1139.5,847.5 1140.5,847.5 1141.5,847.5C 1140.43,848.434 1139.1,848.768 1137.5,848.5C 1136.7,843.323 1138.04,838.823 1141.5,835C 1141.27,834.601 1140.94,834.435 1140.5,834.5C 1143.17,833.167 1145.83,831.833 1148.5,830.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b433b\",\n    d: \"M 1180.5,820.5 C 1180.08,821.222 1179.42,821.722 1178.5,822C 1186.62,825.56 1194.29,829.893 1201.5,835C 1196.17,835.333 1190.83,835.667 1185.5,836C 1181.44,837.616 1177.27,838.783 1173,839.5C 1171.08,839.419 1169.24,839.086 1167.5,838.5C 1167.82,834.828 1166.15,833.162 1162.5,833.5C 1163.93,832.463 1165.6,831.796 1167.5,831.5C 1168.18,833.414 1168.68,835.414 1169,837.5C 1170.06,838.097 1171.23,838.43 1172.5,838.5C 1176.59,837.291 1180.59,835.791 1184.5,834C 1187.83,833.667 1191.17,833.333 1194.5,833C 1189.33,828.91 1183.66,825.577 1177.5,823C 1176.17,822.333 1176.17,821.667 1177.5,821C 1178.45,820.517 1179.45,820.351 1180.5,820.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#463e39\",\n    d: \"M 1643.5,825.5 C 1653.81,828.486 1663.14,833.319 1671.5,840C 1665.5,840.333 1659.5,840.667 1653.5,841C 1648.24,842.802 1642.9,844.302 1637.5,845.5C 1635.45,845.328 1633.45,844.995 1631.5,844.5C 1631.83,841.509 1630.83,839.176 1628.5,837.5C 1629.21,836.596 1630.21,836.263 1631.5,836.5C 1632.06,838.823 1632.73,841.157 1633.5,843.5C 1634.61,844.022 1635.77,844.355 1637,844.5C 1641.99,843.091 1646.82,841.258 1651.5,839C 1655.11,838.055 1658.78,837.388 1662.5,837C 1656.44,832.638 1650.1,828.805 1643.5,825.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3aa83\",\n    d: \"M 1153.5,833.5 C 1156.5,834.833 1159.5,834.833 1162.5,833.5C 1166.15,833.162 1167.82,834.828 1167.5,838.5C 1162.22,842.268 1156.22,844.101 1149.5,844C 1146.52,844.705 1143.86,845.871 1141.5,847.5C 1140.5,847.5 1139.5,847.5 1138.5,847.5C 1139.64,838.698 1144.64,834.031 1153.5,833.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a6650\",\n    d: \"M 1113.5,834.5 C 1122.17,834.5 1130.83,834.5 1139.5,834.5C 1134.45,836.26 1129.11,836.927 1123.5,836.5C 1119.58,835.902 1116.25,835.235 1113.5,834.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e443c\",\n    d: \"M 897.5,824.5 C 899.434,825.11 901.101,826.11 902.5,827.5C 894.01,827.741 889.343,832.074 888.5,840.5C 897.518,838.086 906.518,835.753 915.5,833.5C 914.274,835.876 912.274,837.376 909.5,838C 902.287,838.608 895.287,840.108 888.5,842.5C 886.574,837.283 887.574,832.783 891.5,829C 890.906,828.536 890.239,828.369 889.5,828.5C 892.404,827.715 895.07,826.381 897.5,824.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa3534\",\n    d: \"M 1043.5,833.5 C 1048.77,837.957 1048.77,842.624 1043.5,847.5C 1042.51,847.328 1041.84,847.662 1041.5,848.5C 1040.29,849.234 1038.96,849.567 1037.5,849.5C 1032.63,849.763 1028.29,848.43 1024.5,845.5C 1021.66,843.285 1020.99,840.618 1022.5,837.5C 1028.47,831.337 1035.47,830.003 1043.5,833.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3aa83\",\n    d: \"M 1628.5,837.5 C 1630.83,839.176 1631.83,841.509 1631.5,844.5C 1629.32,846.762 1626.65,848.262 1623.5,849C 1618.49,849.585 1613.49,850.251 1608.5,851C 1604.98,852.674 1601.31,853.84 1597.5,854.5C 1597.57,847.869 1600.57,843.036 1606.5,840C 1612.57,839.032 1618.57,838.532 1624.5,838.5C 1625.96,838.567 1627.29,838.234 1628.5,837.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#95745f\",\n    d: \"M 1568.5,838.5 C 1576.65,839.493 1584.98,839.826 1593.5,839.5C 1584.99,840.821 1576.32,840.821 1567.5,839.5C 1567.62,838.893 1567.96,838.56 1568.5,838.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a433a\",\n    d: \"M 1167.5,838.5 C 1166.75,841.091 1165.08,842.924 1162.5,844C 1155.59,845.712 1148.59,846.879 1141.5,847.5C 1143.86,845.871 1146.52,844.705 1149.5,844C 1156.22,844.101 1162.22,842.268 1167.5,838.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a443a\",\n    d: \"M 1057.5,840.5 C 1064.41,842.896 1070.74,846.396 1076.5,851C 1067.59,850.805 1058.92,851.972 1050.5,854.5C 1055.74,850.513 1061.74,848.346 1068.5,848C 1064.77,845.477 1061.1,842.977 1057.5,840.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4ab84\",\n    d: \"M 1041.5,848.5 C 1042.37,850.717 1042.7,853.05 1042.5,855.5C 1036.42,857.727 1030.09,859.227 1023.5,860C 1021.51,860.374 1019.84,861.207 1018.5,862.5C 1017.5,862.5 1016.5,862.5 1015.5,862.5C 1015.48,856.676 1018.14,852.509 1023.5,850C 1028.34,850.22 1033.01,850.053 1037.5,849.5C 1038.96,849.567 1040.29,849.234 1041.5,848.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49403a\",\n    d: \"M 1609.5,834.5 C 1613.97,837.536 1618.97,838.869 1624.5,838.5C 1618.57,838.532 1612.57,839.032 1606.5,840C 1600.57,843.036 1597.57,847.869 1597.5,854.5C 1601.31,853.84 1604.98,852.674 1608.5,851C 1613.49,850.251 1618.49,849.585 1623.5,849C 1626.65,848.262 1629.32,846.762 1631.5,844.5C 1630.34,847.822 1628.01,849.988 1624.5,851C 1615.38,852.363 1606.38,854.196 1597.5,856.5C 1595.35,850.108 1596.68,844.608 1601.5,840C 1600.55,839.517 1599.55,839.351 1598.5,839.5C 1602.5,838.669 1606.17,837.003 1609.5,834.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665747\",\n    d: \"M 1043.5,847.5 C 1043.47,852.335 1045.81,854.669 1050.5,854.5C 1047.89,855.118 1045.22,855.451 1042.5,855.5C 1042.7,853.05 1042.37,850.717 1041.5,848.5C 1041.84,847.662 1042.51,847.328 1043.5,847.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e433d\",\n    d: \"M 1042.5,855.5 C 1041.71,856.794 1040.71,857.961 1039.5,859C 1032.53,860.4 1025.53,861.567 1018.5,862.5C 1019.84,861.207 1021.51,860.374 1023.5,860C 1030.09,859.227 1036.42,857.727 1042.5,855.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgGameBackground2560);\nexport default __webpack_public_path__ + \"static/media/GameBackground2560.0ed394b82402f005fdf179583da9e378.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _path28, _path29, _path30, _path31, _path32, _path33, _path34, _path35, _path36, _path37, _path38, _path39, _path40, _path41, _path42, _path43, _path44, _path45, _path46, _path47, _path48, _path49, _path50, _path51, _path52, _path53, _path54, _path55, _path56, _path57, _path58, _path59, _path60, _path61, _path62, _path63, _path64, _path65, _path66, _path67, _path68, _path69, _path70;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgYellowRulerRotate(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 1228,\n    height: 637,\n    viewBox: \"0 0 1228 637\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.8367 489.065C25.2698 487.819 14.3646 483.965 2.41967 477.617L1205.76 149.279L1222.07 178.8C1219.31 177.186 1215.8 176.064 1211.77 175.539C1206.47 174.848 1200.57 175.259 1195.13 176.694C1184.44 179.524 1176.91 185.852 1176.42 192.294C1173.63 190.848 1170.2 189.834 1166.43 189.342C1161.06 188.642 1155.31 188.997 1149.8 190.358C1139.47 192.903 1131.58 198.745 1129.8 205.04C1126.9 203.034 1122.99 201.667 1118.38 201.066C1112.88 200.349 1106.77 200.818 1101.17 202.382C1090.92 205.259 1083.7 211.434 1083.15 217.665C1080.19 215.735 1076.27 214.411 1071.74 213.82C1065.68 213.031 1059.09 213.629 1053.16 215.515C1043.72 218.507 1037.2 224.411 1036.54 230.412C1033.63 228.457 1029.73 227.113 1025.2 226.523C1020.05 225.852 1014.54 226.196 1009.26 227.513C998.377 230.231 990.657 236.578 990.044 243.164C987.134 241.392 983.389 240.175 979.111 239.618C973.177 238.845 966.672 239.412 960.768 241.204C951.198 244.105 944.403 249.961 943.456 255.969C940.546 254.196 936.775 252.965 932.482 252.406C926.563 251.635 920.045 252.189 914.13 253.959C904.446 256.856 897.522 262.717 896.498 268.767C893.572 266.8 889.674 265.456 885.114 264.862C879.363 264.113 873.035 264.639 867.285 266.354C857.245 269.344 850.407 275.409 849.947 281.619C847.254 280.336 844.009 279.431 840.488 278.972C835.017 278.259 829.155 278.621 823.521 280.009C813.289 282.534 805.504 288.111 803.355 294.348C800.465 292.321 796.53 290.94 791.9 290.337C786.402 289.62 780.296 290.089 774.695 291.653C764.458 294.521 757.247 300.698 756.672 306.915C753.784 304.974 749.927 303.646 745.41 303.057C740.093 302.364 734.182 302.773 728.74 304.218C718.14 307.028 710.662 313.278 710.049 319.661C707.177 317.711 703.32 316.383 698.803 315.794C693.486 315.102 687.559 315.519 682.116 316.975C671.558 319.79 664.138 326.036 663.585 332.395C660.611 330.464 656.71 329.141 652.179 328.551C646.119 327.761 639.508 328.369 633.578 330.254C624.151 333.249 617.635 339.152 616.975 345.154C614.06 343.209 610.16 341.876 605.629 341.285C600.425 340.607 594.863 340.965 589.522 342.305C578.63 345.056 570.907 351.423 570.309 358.012C567.446 356.406 563.86 355.285 559.82 354.759C553.816 353.977 547.211 354.542 541.233 356.356C531.738 359.235 524.99 364.851 523.763 370.822C520.822 369.163 517.141 368.008 513.031 367.472C508.191 366.842 503.002 367.087 498.038 368.177C487.11 370.569 478.634 376.806 477.002 383.539C474.108 381.543 470.197 380.187 465.61 379.589C460.055 378.866 453.876 379.347 448.241 380.949C438.117 383.831 430.966 389.984 430.395 396.169C427.506 394.239 423.649 392.911 419.132 392.322C413.773 391.624 407.788 392.045 402.287 393.514C391.713 396.338 384.22 402.596 383.593 408.977C380.648 407.04 376.748 405.706 372.231 405.118C367.097 404.449 361.61 404.784 356.333 406.069C345.377 408.768 337.542 415.121 336.794 421.754C333.924 419.794 330.053 418.464 325.522 417.874C320.023 417.157 313.917 417.627 308.316 419.19C298.064 422.067 290.839 428.242 290.29 434.473C287.316 432.542 283.413 431.229 278.896 430.641C272.85 429.853 266.241 430.45 260.298 432.323C250.772 435.315 244.181 441.241 243.501 447.283C240.544 445.333 236.63 443.998 232.085 443.405C226.096 442.625 219.544 443.218 213.661 445.067C204.163 448.063 197.633 453.964 197.012 459.993C194.052 458.064 190.137 456.739 185.606 456.149C179.588 455.365 173.023 455.956 167.098 457.799C157.514 460.795 150.894 466.727 150.213 472.78C147.23 470.805 143.29 469.456 138.731 468.862C134.172 468.268 128.842 468.495 123.947 469.604C112.669 472.154 104.327 478.87 103.728 485.769C98.5444 483.808 93.3589 482.478 88.2808 481.817C85.1667 481.411 82.061 481.253 79.0215 481.339C70.6329 481.586 65.166 483.628 59.8805 485.597C56.5964 486.831 53.4937 487.991 49.7658 488.717C45.1864 489.61 40.1591 489.716 34.8426 489.023L34.8367 489.065Z\",\n    fill: \"#FFE54D\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1205.45 149.852L1220.8 177.607C1218.25 176.396 1215.21 175.55 1211.83 175.11C1206.44 174.408 1200.43 174.825 1194.9 176.28C1184.41 179.06 1176.89 185.176 1175.91 191.544C1173.2 190.279 1169.98 189.378 1166.47 188.921C1161.02 188.21 1155.17 188.563 1149.57 189.955C1139.44 192.451 1131.62 198.087 1129.42 204.253C1126.53 202.451 1122.77 201.211 1118.42 200.645C1112.83 199.916 1106.6 200.391 1100.91 201.986C1090.9 204.797 1083.72 210.722 1082.65 216.841C1079.71 215.129 1076.01 213.96 1071.78 213.41C1065.63 212.608 1058.9 213.221 1052.88 215.127C1043.66 218.053 1037.18 223.703 1036.05 229.58C1033.17 227.853 1029.47 226.665 1025.24 226.113C1020.01 225.431 1014.4 225.783 1009.03 227.12C998.352 229.791 990.664 235.906 989.552 242.384C986.698 240.823 983.149 239.739 979.165 239.22C973.133 238.434 966.499 239.006 960.507 240.819C951.145 243.661 944.365 249.305 943.005 255.205C940.124 253.629 936.549 252.531 932.537 252.008C926.519 251.224 919.886 251.785 913.868 253.584C904.407 256.413 897.529 262.045 896.065 267.974C893.151 266.222 889.434 265.02 885.169 264.464C879.32 263.702 872.877 264.234 867.036 265.981C857.175 268.919 850.335 274.791 849.427 280.932C846.826 279.811 843.796 279.009 840.541 278.585C834.972 277.859 829.01 278.218 823.287 279.638C813.245 282.123 805.501 287.513 803.013 293.62C800.111 291.784 796.329 290.53 791.952 289.96C786.355 289.231 780.134 289.706 774.444 291.301C764.444 294.103 757.284 300.019 756.182 306.114C753.319 304.411 749.656 303.227 745.462 302.68C740.061 301.977 734.034 302.392 728.504 303.858C718.156 306.604 710.714 312.59 709.56 318.86C706.698 317.147 703.049 315.964 698.841 315.416C693.426 314.71 687.398 315.136 681.866 316.612C671.546 319.362 664.16 325.356 663.081 331.603C660.146 329.902 656.439 328.723 652.217 328.172C646.044 327.368 639.319 327.982 633.298 329.898C624.095 332.826 617.614 338.476 616.486 344.353C613.584 342.624 609.905 341.448 605.669 340.896C600.38 340.207 594.704 340.561 589.287 341.934C578.588 344.634 570.896 350.781 569.797 357.272C567.008 355.858 563.619 354.86 559.859 354.37C553.743 353.573 547.037 354.146 540.955 355.99C531.638 358.817 524.915 364.254 523.304 370.11C520.426 368.621 516.914 367.584 513.056 367.081C508.132 366.44 502.857 366.685 497.805 367.795C487.068 370.148 478.651 376.168 476.594 382.77C473.7 380.978 469.957 379.751 465.651 379.19C459.983 378.451 453.717 378.942 447.993 380.576C437.943 383.436 430.972 389.216 429.909 395.347C427.046 393.645 423.381 392.471 419.201 391.926C413.744 391.215 407.658 391.644 402.068 393.134C391.732 395.892 384.286 401.91 383.133 408.17C380.214 406.46 376.522 405.272 372.3 404.722C367.082 404.042 361.48 404.373 356.128 405.691C345.41 408.324 337.608 414.435 336.349 420.948C333.488 419.225 329.825 418.04 325.603 417.49C320.006 416.761 313.785 417.236 308.094 418.832C298.079 421.642 290.904 427.567 289.827 433.686C286.893 431.985 283.184 430.816 278.976 430.268C272.818 429.465 266.108 430.07 260.06 431.972C250.772 434.899 244.215 440.583 243.053 446.498C240.121 444.776 236.402 443.584 232.165 443.032C226.063 442.237 219.411 442.839 213.424 444.717C204.151 447.635 197.653 453.305 196.564 459.208C193.631 457.497 189.922 456.327 185.7 455.777C179.584 454.98 172.889 455.577 166.873 457.461C157.528 460.381 150.928 466.07 149.777 472.007C146.82 470.261 143.088 469.057 138.823 468.501C133.956 467.867 128.751 468.121 123.767 469.251C112.623 471.765 104.274 478.319 103.227 485.16C98.2388 483.331 93.2424 482.079 88.3607 481.443C85.2185 481.034 82.0568 480.869 78.9737 480.96C70.4559 481.211 64.944 483.269 59.6121 485.264C56.3589 486.48 53.2717 487.632 49.6014 488.355C45.095 489.236 40.1548 489.332 34.9365 488.652C25.7062 487.449 15.2155 483.799 3.72503 477.779L1158.28 162.72L1205.45 149.852ZM1206.06 148.71C804.436 258.297 402.81 367.883 1.18309 477.469C15.0942 484.984 26.0931 488.368 34.7903 489.501C40.9345 490.301 45.9068 489.974 49.9438 489.182C59.8516 487.246 65.6922 482.198 79.0844 481.81C82.2826 481.713 85.3403 481.907 88.216 482.282C94.6688 483.123 100.192 484.903 104.284 486.498C104.386 479.469 112.804 472.624 124.155 470.062C129.064 468.955 134.106 468.744 138.679 469.34C143.462 469.963 147.723 471.472 150.757 473.796C150.822 467.556 157.509 461.343 167.363 458.254C173.333 456.395 179.802 455.877 185.554 456.626C190.281 457.242 194.518 458.716 197.558 460.999C197.56 454.804 204.146 448.599 213.911 445.53C219.839 443.666 226.294 443.146 232.018 443.892C236.759 444.51 240.995 445.994 244.018 448.296C244.08 442.077 250.723 435.868 260.533 432.784C266.506 430.905 273.033 430.383 278.813 431.136C283.54 431.752 287.777 433.226 290.833 435.5C290.691 429.104 297.928 422.63 308.536 419.661C314.211 418.074 320.179 417.673 325.454 418.36C330.209 418.98 334.4 420.48 337.308 422.788C337.364 415.989 345.378 409.274 356.525 406.535C361.789 405.238 367.241 404.952 372.137 405.59C377.033 406.228 381.113 407.703 384.109 409.99C384.045 403.444 391.596 396.872 402.48 393.97C408.056 392.478 413.875 392.122 419.038 392.794C423.779 393.412 427.971 394.902 430.91 397.192C430.779 390.819 437.953 384.391 448.436 381.395C454.145 379.77 460.172 379.355 465.503 380.049C470.258 380.669 474.449 382.169 477.385 384.481C478.477 377.528 487.053 371.078 498.202 368.64C503.18 367.552 508.292 367.35 512.935 367.955C517.255 368.518 521.165 369.778 524.2 371.685C524.97 365.611 531.781 359.746 541.455 356.816C547.478 354.986 553.973 354.492 559.738 355.244C564.003 355.799 567.872 357.043 570.837 358.94C570.808 352.238 578.659 345.565 589.712 342.783C595.04 341.44 600.58 341.133 605.532 341.779C610.484 342.424 614.508 343.891 617.475 346.186C617.518 339.996 624.087 333.811 633.812 330.726C639.787 328.825 646.301 328.302 652.094 329.057C656.822 329.673 661.073 331.148 664.111 333.441C663.971 326.928 671.465 320.359 682.319 317.465C687.851 315.988 693.612 315.635 698.718 316.3C703.474 316.92 707.664 318.42 710.586 320.73C710.494 314.18 718.062 307.588 728.957 304.71C734.473 303.242 740.233 302.899 745.339 303.565C750.095 304.184 754.285 305.684 757.224 307.975C757.082 301.579 764.32 295.105 774.928 292.136C780.603 290.55 786.571 290.148 791.845 290.835C796.601 291.455 800.791 292.955 803.699 295.263C805.411 288.884 813.316 283.054 823.727 280.477C829.333 279.086 835.175 278.764 840.422 279.448C844.195 279.94 847.654 280.948 850.502 282.455C850.432 276.154 857.349 269.832 867.522 266.806C873.331 265.076 879.535 264.62 885.034 265.336C889.776 265.954 893.996 267.447 896.961 269.752C897.41 263.519 904.354 257.414 914.352 254.419C920.325 252.636 926.719 252.15 932.401 252.891C936.889 253.475 940.929 254.827 943.941 256.902C944.325 250.725 951.149 244.658 961.004 241.666C966.952 239.858 973.36 239.374 979.041 240.115C983.544 240.701 987.597 242.065 990.591 244.16C990.536 237.443 998.417 230.764 1009.47 228.002C1014.75 226.686 1020.22 226.391 1025.11 227.029C1029.88 227.65 1034.09 229.152 1037.05 231.457C1037.1 225.257 1043.66 219.082 1053.4 215.989C1059.36 214.096 1065.89 213.564 1071.67 214.317C1076.4 214.933 1080.65 216.409 1083.69 218.702C1083.55 212.306 1090.78 205.832 1101.39 202.863C1107.07 201.277 1113.04 200.875 1118.31 201.563C1123.07 202.182 1127.26 203.682 1130.16 205.99C1131.46 199.504 1139.4 193.453 1150 190.837C1155.5 189.474 1161.23 189.17 1166.36 189.839C1170.39 190.363 1174.06 191.495 1176.98 193.194C1176.87 186.642 1184.45 180.053 1195.35 177.175C1200.86 175.717 1206.6 175.371 1211.7 176.036C1216.46 176.656 1220.65 178.156 1223.59 180.457L1206.07 148.765L1206.06 148.71Z\",\n    fill: \"black\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.766 415.706L279.398 417.151L279.886 418.371C280.066 418.272 280.219 418.203 280.437 418.105C281.266 417.754 282.2 417.546 283.03 417.663C283.912 417.76 284.676 418.205 285.183 419.064C286 420.446 285.336 422.261 282.989 423.255C281.93 423.704 280.935 423.878 280.324 423.865L279.91 422.413C280.397 422.411 281.302 422.276 282.093 421.934C282.935 421.573 283.621 420.844 283.161 420.061C282.7 419.277 281.721 419.133 279.986 419.875C279.502 420.079 279.181 420.248 278.847 420.448L277.117 416.318L281.901 414.269L282.742 415.695L282.766 415.706Z\",\n    fill: \"black\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M327.178 402.432C326.936 402.519 326.629 402.666 326.32 402.856C324.632 403.908 324.342 405.471 324.864 406.778L324.902 406.758C325.034 406.114 325.53 405.421 326.487 405.011C328.018 404.357 329.667 404.836 330.519 406.283C331.325 407.643 330.977 409.353 329.179 410.124C327.38 410.895 325.379 410.211 324.239 408.285C323.376 406.827 323.309 405.41 323.738 404.32C324.095 403.409 324.846 402.619 325.861 402.041C326.183 401.851 326.464 401.713 326.681 401.615L327.165 402.432L327.178 402.432ZM329.367 406.845C328.746 405.789 327.651 405.449 326.567 405.907C325.866 406.21 325.434 406.864 325.425 407.544C325.417 407.692 325.446 407.864 325.549 408.048C326.301 409.258 327.481 409.878 328.718 409.351C329.739 408.912 329.988 407.911 329.367 406.845Z\",\n    fill: \"black\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M374.069 387.456L374.461 388.12L374.669 396.476L373.457 396.993L373.352 388.832L373.353 388.811L369.092 390.625L368.597 389.797L374.069 387.456Z\",\n    fill: \"black\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M419.398 382.665C418.846 381.729 419.105 380.792 419.946 379.942L419.91 379.909C418.723 379.937 417.934 379.471 417.554 378.829C416.864 377.654 417.553 376.362 419.071 375.708C420.755 374.985 422.126 375.527 422.667 376.452C423.035 377.083 423.081 377.904 422.263 378.798L422.286 378.83C423.589 378.732 424.633 379.091 425.162 379.994C425.922 381.278 425.139 382.705 423.481 383.407C421.669 384.188 420.019 383.731 419.387 382.643L419.398 382.665ZM424.044 380.621C423.515 379.718 422.522 379.605 421.176 379.819C420.305 380.509 420.102 381.309 420.517 382.017C420.928 382.787 421.983 383.158 423.092 382.69C424.202 382.222 424.493 381.393 424.044 380.621ZM418.617 378.296C419.055 379.036 419.948 379.155 421.081 378.954C421.695 378.414 422.005 377.714 421.601 377.049C421.255 376.462 420.479 376.017 419.42 376.465C418.45 376.885 418.237 377.654 418.617 378.296Z\",\n    fill: \"black\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M94.3315 468.262L94.3066 468.261L93.203 469.611L92.5245 468.947L93.9067 467.267L94.9143 466.838L99.2895 474.238L98.1541 474.726L94.332 468.251L94.3315 468.262Z\",\n    fill: \"black\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M139.885 461.651L139.516 461.03L139.986 459.868C141.135 457.115 141.578 455.739 140.922 454.608C140.473 453.857 139.637 453.346 138.348 453.903C137.557 454.244 137.102 454.865 136.88 455.314L136.083 454.773C136.429 454.084 137.088 453.397 138.095 452.968C139.97 452.168 141.406 452.925 142.027 453.98C142.833 455.351 142.329 456.949 141.391 459.231L141.024 460.078L141.023 460.099L144.939 458.432L145.435 459.259L139.898 461.63L139.885 461.651Z\",\n    fill: \"black\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M185.256 447.587C185.703 447.626 186.642 447.577 187.458 447.236C188.963 446.592 188.952 445.571 188.57 444.96C187.948 443.926 186.586 443.948 185.45 444.436L184.8 444.72L184.35 443.968L185.001 443.685C185.855 443.325 186.709 442.485 186.191 441.604C185.846 441.016 185.088 440.679 184.004 441.137C183.316 441.429 182.801 441.984 182.557 442.368L181.826 441.766C182.112 441.287 182.819 440.623 183.763 440.224C185.472 439.492 186.756 440.03 187.286 440.923C187.735 441.685 187.591 442.562 186.716 443.347L186.715 443.368C187.902 443.095 189.172 443.41 189.795 444.444C190.497 445.63 190.023 447.133 187.943 448.02C186.974 448.44 185.957 448.54 185.386 448.486L185.244 447.576L185.256 447.587Z\",\n    fill: \"black\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.405 435.705L236.207 433.692L232.176 435.419L231.784 434.755L232.864 428.373L234.127 427.826L236.857 432.43L238.068 431.913L238.529 432.696L237.317 433.213L238.515 435.227L237.405 435.705ZM235.747 432.898L234.285 430.427C234.055 430.036 233.837 429.644 233.632 429.243L233.594 429.263C233.579 429.805 233.546 430.218 233.524 430.664L232.892 434.085L232.89 434.106L235.748 432.887L235.747 432.898Z\",\n    fill: \"black\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.649 370.69C466.915 370.605 467.197 370.456 467.582 370.247C468.213 369.878 468.712 369.366 468.968 368.748C469.277 368.058 469.306 367.23 468.953 366.291L468.915 366.311C468.73 367.016 468.213 367.613 467.346 367.984C465.79 368.647 464.183 368.075 463.446 366.813C462.618 365.409 463.079 363.672 464.852 362.911C466.625 362.149 468.447 362.911 469.564 364.804C470.531 366.437 470.561 367.842 470.12 368.92C469.779 369.768 469.068 370.496 468.182 370.994C467.783 371.234 467.425 371.401 467.132 371.517L466.648 370.701L466.649 370.69ZM464.561 366.249C465.101 367.174 466.144 367.544 467.165 367.105C467.956 366.763 468.372 366.173 468.413 365.6C468.419 365.483 468.401 365.344 468.309 365.192C467.56 363.929 466.436 363.195 465.211 363.722C464.203 364.151 463.951 365.205 464.561 366.249Z\",\n    fill: \"black\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M508.088 353.618L508.064 353.613L506.646 354.782L505.706 353.45L507.681 351.867L509.436 351.429L512.805 359.488L510.758 359.995L508.09 353.608L508.088 353.618Z\",\n    fill: \"black\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M520.777 353.034C521.826 355.525 521.415 357.518 519.102 358.09C516.789 358.662 514.946 357.057 513.986 354.78C513.011 352.446 513.345 350.317 515.684 349.74C518.104 349.136 519.855 350.83 520.777 353.034ZM516.102 354.243C516.859 356.1 517.726 356.853 518.551 356.644C519.376 356.436 519.434 355.409 518.662 353.571C517.889 351.733 517.091 350.951 516.24 351.165C515.455 351.36 515.299 352.367 516.102 354.243Z\",\n    fill: \"black\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M556.357 338.911L556.332 338.906L555.069 340.063L554.485 339.292L556.065 337.854L557.115 337.595L560.484 345.654L559.3 345.95L556.359 338.9L556.357 338.911Z\",\n    fill: \"black\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M563.496 337.137L563.472 337.132L562.209 338.289L561.624 337.518L563.204 336.08L564.254 335.821L567.623 343.88L566.44 344.177L563.498 337.126L563.496 337.137Z\",\n    fill: \"black\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M602.107 326.209L602.082 326.204L600.819 327.361L600.235 326.591L601.815 325.153L602.865 324.894L606.234 332.953L605.05 333.249L602.108 326.199L602.107 326.209Z\",\n    fill: \"black\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M609.541 332.145L609.257 331.469L609.87 330.394C611.358 327.854 611.972 326.563 611.47 325.333C611.123 324.514 610.364 323.87 609.02 324.209C608.195 324.417 607.666 324.958 607.389 325.366L606.671 324.698C607.102 324.072 607.84 323.5 608.89 323.24C610.844 322.757 612.164 323.744 612.642 324.893C613.261 326.386 612.558 327.886 611.339 329.994L610.868 330.773L610.865 330.794L614.945 329.787L615.328 330.689L609.557 332.126L609.541 332.145Z\",\n    fill: \"black\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M647.857 314.17L647.832 314.165L646.569 315.322L645.985 314.552L647.565 313.114L648.615 312.855L651.984 320.914L650.8 321.21L647.859 314.16L647.857 314.17Z\",\n    fill: \"black\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M655.063 318.778C655.5 318.89 656.433 318.997 657.283 318.793C658.851 318.403 658.971 317.389 658.673 316.721C658.191 315.592 656.844 315.39 655.66 315.686L654.981 315.86L654.634 315.041L655.313 314.867C656.203 314.651 657.153 313.96 656.755 313C656.489 312.361 655.785 311.901 654.656 312.176C653.939 312.353 653.36 312.818 653.069 313.158L652.425 312.44C652.768 312.013 653.552 311.472 654.535 311.231C656.317 310.788 657.515 311.533 657.923 312.506C658.269 313.335 658.014 314.181 657.049 314.815L657.045 314.836C658.252 314.761 659.466 315.282 659.948 316.411C660.489 317.703 659.828 319.114 657.661 319.651C656.65 319.907 655.634 319.838 655.076 319.69L655.053 318.765L655.063 318.778Z\",\n    fill: \"black\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M695.856 300.386L695.832 300.381L694.569 301.538L693.984 300.767L695.565 299.329L696.615 299.07L699.984 307.129L698.8 307.426L695.858 300.375L695.856 300.386Z\",\n    fill: \"black\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M707.07 305.384L706.146 303.19L701.944 304.237L701.643 303.515L703.529 297.365L704.846 297.032L706.949 302.046L708.212 301.734L708.566 302.586L707.303 302.899L708.227 305.093L707.07 305.384ZM705.794 302.327L704.667 299.636C704.491 299.21 704.326 298.786 704.175 298.354L704.135 298.368C704.051 298.902 703.965 299.307 703.886 299.745L702.822 303.033L702.818 303.054L705.796 302.316L705.794 302.327Z\",\n    fill: \"black\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M740.59 289.827L740.566 289.822L739.147 291L738.206 289.669L740.181 288.086L741.936 287.647L745.305 295.706L743.258 296.214L740.59 289.827Z\",\n    fill: \"black\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M751.61 286.952L748.099 287.828L748.425 289.119C748.615 289.05 748.775 289.007 749.002 288.946C749.866 288.735 750.815 288.682 751.62 288.935C752.477 289.178 753.175 289.744 753.565 290.68C754.194 292.185 753.305 293.874 750.86 294.473C749.758 294.743 748.753 294.752 748.152 294.638L747.929 293.13C748.41 293.208 749.321 293.223 750.146 293.015C751.024 292.796 751.794 292.187 751.44 291.334C751.086 290.481 750.138 290.177 748.33 290.626C747.826 290.749 747.488 290.863 747.132 291.006L745.955 286.627L750.941 285.384L751.587 286.936L751.61 286.952Z\",\n    fill: \"black\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M787.357 275.837L787.333 275.832L786.07 276.989L785.485 276.219L787.065 274.781L788.115 274.522L791.484 282.581L790.301 282.877L787.359 275.827L787.357 275.837Z\",\n    fill: \"black\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M796.9 273.2C796.65 273.246 796.328 273.342 795.999 273.479C794.197 274.243 793.71 275.745 794.057 277.127L794.097 277.114C794.31 276.497 794.89 275.892 795.887 275.643C797.482 275.248 799.049 275.994 799.704 277.569C800.325 279.051 799.762 280.689 797.887 281.156C796.013 281.624 794.125 280.616 793.247 278.518C792.582 276.93 792.698 275.514 793.261 274.505C793.731 273.66 794.574 273.001 795.65 272.595C795.992 272.46 796.288 272.37 796.515 272.309L796.887 273.198L796.9 273.2ZM798.495 277.936C798.016 276.787 796.98 276.27 795.851 276.545C795.119 276.729 794.609 277.306 794.513 277.979C794.486 278.125 794.493 278.3 794.571 278.5C795.157 279.823 796.243 280.632 797.532 280.314C798.596 280.047 798.971 279.096 798.495 277.936Z\",\n    fill: \"black\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M834.607 263.307L834.583 263.302L833.32 264.459L832.735 263.688L834.316 262.25L835.365 261.991L838.734 270.05L837.551 270.346L834.609 263.296L834.607 263.307Z\",\n    fill: \"black\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M844.54 259.71L844.841 260.432L843.973 268.752L842.71 269.064L843.655 260.956L843.658 260.935L839.22 262.03L838.837 261.128L844.54 259.71Z\",\n    fill: \"black\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M881.857 249.076L881.833 249.071L880.57 250.228L879.985 249.458L881.566 248.02L882.615 247.761L885.984 255.819L884.801 256.116L881.859 249.066L881.857 249.076Z\",\n    fill: \"black\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M888.325 252.991C887.9 251.972 888.276 251.086 889.216 250.382L889.185 250.343C888.009 250.176 887.29 249.583 886.998 248.884C886.467 247.605 887.313 246.437 888.896 246.039C890.651 245.601 891.935 246.365 892.35 247.371C892.632 248.057 892.573 248.879 891.65 249.63L891.669 249.666C892.968 249.783 893.952 250.311 894.358 251.294C894.944 252.693 893.988 253.978 892.261 254.4C890.372 254.876 888.801 254.151 888.317 252.968L888.325 252.991ZM893.175 251.731C892.768 250.749 891.802 250.473 890.445 250.463C889.497 251.003 889.195 251.763 889.513 252.533C889.819 253.365 890.814 253.906 891.969 253.626C893.124 253.345 893.518 252.571 893.175 251.731ZM888.115 248.53C888.452 249.336 889.318 249.602 890.463 249.59C891.139 249.156 891.534 248.512 891.221 247.787C890.955 247.147 890.246 246.578 889.143 246.848C888.132 247.105 887.823 247.831 888.115 248.53Z\",\n    fill: \"black\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M927.607 236.281L927.583 236.276L926.32 237.433L925.735 236.663L927.315 235.225L928.353 234.963L931.722 243.022L930.538 243.319L927.597 236.268L927.607 236.281Z\",\n    fill: \"black\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M935.443 241.259C935.717 241.218 936.015 241.118 936.421 240.974C937.091 240.712 937.65 240.287 937.982 239.716C938.376 239.083 938.51 238.267 938.283 237.278L938.242 237.291C937.969 237.96 937.382 238.467 936.478 238.691C934.857 239.092 933.344 238.259 932.779 236.887C932.141 235.358 932.82 233.712 934.668 233.25C936.517 232.788 938.218 233.843 939.077 235.905C939.822 237.683 939.671 239.081 939.098 240.077C938.651 240.862 937.856 241.466 936.917 241.813C936.505 241.988 936.118 242.092 935.814 242.159L935.441 241.27L935.443 241.259ZM933.94 236.509C934.355 237.515 935.336 238.054 936.401 237.787C937.225 237.579 937.712 237.062 937.826 236.501C937.847 236.387 937.847 236.246 937.776 236.079C937.199 234.704 936.183 233.79 934.906 234.111C933.868 234.373 933.472 235.373 933.94 236.509Z\",\n    fill: \"black\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M973.173 232.561L972.693 231.423L973.463 230.185C974.776 228.118 975.363 226.973 974.99 226.019C974.714 225.366 974.053 224.948 973.003 225.207C972.219 225.402 971.693 225.922 971.348 226.359L970.181 225.154C970.675 224.531 971.577 223.895 972.801 223.585C974.848 223.077 976.42 223.868 977.032 225.326C977.601 226.678 976.951 228.027 976.081 229.395L975.513 230.22L975.51 230.24L978.937 229.401L979.584 230.953L973.163 232.548L973.173 232.561Z\",\n    fill: \"black\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M985.885 224.9C986.933 227.39 986.522 229.384 984.209 229.955C981.897 230.527 980.053 228.923 979.093 226.645C978.118 224.311 978.452 222.182 980.791 221.605C983.13 221.028 984.962 222.695 985.885 224.9ZM981.207 226.119C981.964 227.975 982.831 228.728 983.656 228.52C984.481 228.312 984.539 227.285 983.767 225.447C982.994 223.609 982.196 222.827 981.345 223.04C980.56 223.235 980.404 224.242 981.207 226.119Z\",\n    fill: \"black\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1022.56 219.265L1022.28 218.589L1022.89 217.514C1024.38 214.974 1024.99 213.683 1024.49 212.453C1024.14 211.634 1023.38 210.99 1022.04 211.329C1021.22 211.538 1020.69 212.078 1020.41 212.486L1019.69 211.818C1020.12 211.192 1020.86 210.62 1021.91 210.36C1023.87 209.877 1025.18 210.864 1025.66 212.013C1026.28 213.506 1025.58 215.006 1024.36 217.114L1023.89 217.893L1023.89 217.914L1027.97 216.907L1028.35 217.809L1022.58 219.246L1022.56 219.265Z\",\n    fill: \"black\"\n  })), _path35 || (_path35 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1029.42 209.786L1029.39 209.781L1028.13 210.938L1027.55 210.168L1029.13 208.73L1030.18 208.471L1033.55 216.529L1032.36 216.826L1029.42 209.776L1029.42 209.786Z\",\n    fill: \"black\"\n  })), _path36 || (_path36 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1069.06 206.571L1068.78 205.895L1069.39 204.82C1070.88 202.28 1071.49 200.989 1070.99 199.759C1070.64 198.94 1069.89 198.296 1068.54 198.635C1067.72 198.844 1067.19 199.384 1066.91 199.792L1066.19 199.124C1066.62 198.498 1067.36 197.926 1068.41 197.667C1070.37 197.183 1071.69 198.171 1072.16 199.32C1072.78 200.812 1072.08 202.312 1070.86 204.42L1070.39 205.2L1070.39 205.221L1074.47 204.213L1074.85 205.115L1069.08 206.552L1069.06 206.571Z\",\n    fill: \"black\"\n  })), _path37 || (_path37 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1076.21 204.79L1075.92 204.114L1076.53 203.039C1078.02 200.5 1078.64 199.208 1078.13 197.979C1077.79 197.16 1077.03 196.515 1075.68 196.855C1074.86 197.063 1074.33 197.603 1074.05 198.011L1073.34 197.343C1073.77 196.718 1074.5 196.145 1075.55 195.886C1077.51 195.402 1078.83 196.39 1079.31 197.539C1079.92 199.031 1079.22 200.531 1078 202.639L1077.53 203.419L1077.53 203.44L1081.61 202.432L1081.99 203.334L1076.22 204.772L1076.21 204.79Z\",\n    fill: \"black\"\n  })), _path38 || (_path38 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1114.06 193.776L1113.78 193.1L1114.39 192.026C1115.88 189.486 1116.49 188.195 1115.99 186.965C1115.64 186.146 1114.88 185.502 1113.54 185.841C1112.72 186.049 1112.19 186.589 1111.91 186.998L1111.19 186.33C1111.62 185.704 1112.36 185.131 1113.41 184.872C1115.36 184.389 1116.68 185.376 1117.16 186.525C1117.78 188.017 1117.08 189.518 1115.86 191.626L1115.39 192.405L1115.39 192.426L1119.47 191.419L1119.85 192.321L1114.08 193.758L1114.06 193.776Z\",\n    fill: \"black\"\n  })), _path39 || (_path39 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1120.97 190.672C1121.41 190.784 1122.34 190.89 1123.19 190.687C1124.76 190.297 1124.88 189.282 1124.58 188.614C1124.1 187.486 1122.75 187.283 1121.57 187.58L1120.89 187.753L1120.54 186.934L1121.22 186.761C1122.11 186.544 1123.06 185.853 1122.66 184.894C1122.4 184.254 1121.69 183.795 1120.56 184.07C1119.85 184.246 1119.27 184.711 1118.98 185.052L1118.33 184.334C1118.68 183.907 1119.46 183.365 1120.44 183.125C1122.22 182.681 1123.42 183.427 1123.83 184.399C1124.18 185.229 1123.92 186.075 1122.96 186.709L1122.95 186.729C1124.16 186.654 1125.37 187.176 1125.86 188.304C1126.4 189.596 1125.74 191.008 1123.57 191.545C1122.56 191.801 1121.54 191.732 1120.98 191.584L1120.96 190.659L1120.97 190.672Z\",\n    fill: \"black\"\n  })), _path40 || (_path40 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1161.31 180.752L1161.03 180.077L1161.64 179.002C1163.13 176.462 1163.74 175.171 1163.24 173.941C1162.89 173.122 1162.14 172.478 1160.79 172.817C1159.97 173.025 1159.44 173.565 1159.16 173.974L1158.44 173.306C1158.87 172.68 1159.61 172.107 1160.66 171.848C1162.62 171.365 1163.94 172.352 1164.41 173.501C1165.03 174.993 1164.33 176.494 1163.11 178.602L1162.64 179.381L1162.64 179.402L1166.72 178.395L1167.1 179.297L1161.33 180.734L1161.31 180.752Z\",\n    fill: \"black\"\n  })), _path41 || (_path41 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1172.24 178.03L1171.32 175.836L1167.12 176.884L1166.82 176.161L1168.7 170.012L1170.02 169.678L1172.12 174.693L1173.39 174.38L1173.74 175.233L1172.48 175.545L1173.4 177.739L1172.24 178.03ZM1170.97 174.984L1169.84 172.293C1169.66 171.867 1169.5 171.443 1169.35 171.011L1169.31 171.025C1169.22 171.559 1169.14 171.964 1169.06 172.402L1167.99 175.69L1167.99 175.711L1170.97 174.973L1170.97 174.984Z\",\n    fill: \"black\"\n  })), _path42 || (_path42 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1198.92 171.023L1198.44 169.884L1199.21 168.647C1200.53 166.58 1201.11 165.435 1200.74 164.48C1200.46 163.828 1199.8 163.41 1198.75 163.669C1197.97 163.864 1197.44 164.383 1197.1 164.821L1195.93 163.616C1196.42 162.992 1197.33 162.356 1198.55 162.046C1200.6 161.539 1202.17 162.329 1202.78 163.788C1203.35 165.139 1202.7 166.488 1201.83 167.857L1201.26 168.681L1201.26 168.702L1204.69 167.863L1205.33 169.415L1198.91 171.01L1198.92 171.023Z\",\n    fill: \"black\"\n  })), _path43 || (_path43 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1209.96 161.082L1206.45 161.959L1206.78 163.249C1206.97 163.18 1207.13 163.138 1207.36 163.076C1208.22 162.865 1209.17 162.812 1209.97 163.066C1210.83 163.308 1211.53 163.874 1211.92 164.81C1212.55 166.315 1211.66 168.005 1209.22 168.603C1208.11 168.873 1207.11 168.882 1206.51 168.768L1206.28 167.261C1206.76 167.339 1207.68 167.354 1208.5 167.146C1209.38 166.926 1210.15 166.317 1209.8 165.464C1209.44 164.612 1208.49 164.307 1206.69 164.756C1206.18 164.879 1205.84 164.993 1205.49 165.136L1204.31 160.757L1209.3 159.515L1209.94 161.067L1209.96 161.082Z\",\n    fill: \"black\"\n  })), _path44 || (_path44 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.6947 480.514C55.743 483.005 55.332 484.998 53.0194 485.57C50.7067 486.142 48.8635 484.537 47.9036 482.26C46.9287 479.926 47.2625 477.797 49.6015 477.22C51.9406 476.643 53.7725 478.31 54.6947 480.514ZM50.0176 481.734C50.7742 483.59 51.6412 484.343 52.4661 484.135C53.2909 483.927 53.3496 482.899 52.577 481.061C51.8044 479.224 51.0061 478.441 50.1548 478.655C49.3705 478.85 49.2139 479.857 50.0176 481.734Z\",\n    fill: \"black\"\n  })), _path45 || (_path45 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1200.82 149.857L1205.78 158.853\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path46 || (_path46 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.0299 466.823L48.009 475.821\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path47 || (_path47 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M86.714 454.882L91.6791 463.878\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path48 || (_path48 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M132.98 442.234L137.945 451.23\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path49 || (_path49 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M179.247 429.579L184.212 438.575\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path50 || (_path50 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M226.805 416.569L231.784 425.566\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path51 || (_path51 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273.073 403.915L278.036 412.921\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path52 || (_path52 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M319.338 391.266L324.302 400.272\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path53 || (_path53 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M365.605 378.612L370.569 387.619\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path54 || (_path54 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M413.162 365.612L418.142 374.609\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path55 || (_path55 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M459.43 352.955L464.395 361.951\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path56 || (_path56 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M506.989 339.944L511.969 348.941\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path57 || (_path57 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M553.257 327.295L558.236 336.292\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path58 || (_path58 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M599.523 314.641L604.502 323.639\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path59 || (_path59 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M645.791 301.984L650.756 310.98\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path60 || (_path60 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M693.349 288.978L698.327 297.986\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path61 || (_path61 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M739.615 276.33L744.593 285.338\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path62 || (_path62 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M785.882 263.666L790.86 272.674\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path63 || (_path63 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M832.15 251.019L837.127 260.027\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path64 || (_path64 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M879.708 238.013L884.687 247.01\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path65 || (_path65 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M925.974 225.366L930.953 234.363\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path66 || (_path66 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M972.242 212.708L977.221 221.706\",\n    stroke: \"black\",\n    strokeWidth: 5.94,\n    strokeMiterlimit: 10\n  })), _path67 || (_path67 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1019.8 199.705L1024.78 208.702\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path68 || (_path68 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1066.07 187.047L1071.05 196.044\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path69 || (_path69 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1112.33 174.398L1117.31 183.406\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })), _path70 || (_path70 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1159.89 161.386L1164.87 170.394\",\n    stroke: \"black\",\n    strokeWidth: 1.49,\n    strokeMiterlimit: 10\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgYellowRulerRotate);\nexport default __webpack_public_path__ + \"static/media/YellowRulerRotate.7eccf2a5813a68e10f0f7944e140ae31.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _g, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _path28, _path29, _path30, _path31, _path32, _path33, _path34, _path35, _path36, _path37, _path38, _path39, _path40;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgYodelyGuy(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 87,\n    height: 181,\n    viewBox: \"0 0 87 181\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.6635 31.3628C67.1192 31.435 68.575 31.5095 70.0329 31.5817C77.5066 33.298 82.4365 35.614 84.5577 43.4992C81.4273 40.3469 76.0202 36.7195 71.7799 35.5177C67.9467 34.4319 65.5847 34.7691 61.9507 36.3934C54.8558 39.561 51.8414 46.6647 51.2482 46.2334C50.4076 44.1888 54.8033 37.7594 56.1627 36.2839C58.0388 34.248 62.949 31.6824 65.6635 31.3628Z\",\n    fill: \"white\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.6246 39.4555C12.4938 45.5018 6.014 50.3879 4.72024 58.0432C7.29025 52.2771 13.3081 44.4663 18.3715 40.8762C16.9377 39.6591 17.6491 39.0592 16.6246 39.4555C17.2069 38.3259 17.7892 37.1963 18.3715 36.0667C19.1027 34.8649 20.8474 33.8535 20.5563 32.3496C20.46 31.8483 17.3711 28.7507 17.9359 22.7285C11.7626 20.8633 17.752 16.3647 20.3396 13.9808C20.0484 12.0478 20.5388 9.80831 21.4319 8.07673C21.3662 5.66214 20.0331 -0.176226 22.4148 2.06324C22.938 0.738822 23.7874 2.79002 24.3807 2.71997C24.7659 2.674 25.0374 0.333837 31.5894 2.50106C37.4978 -2.4135 38.704 7.90817 40.8734 11.5771C39.9321 16.5376 46.379 18.0678 45.024 20.9794C44.0279 23.1181 40.6764 22.1352 40.4378 22.5095C40.2911 23.8208 40.1466 25.1343 40 26.4456C41.5214 30.2087 43.3712 37.4371 36.8323 33.9892C35.4247 37.0146 36.0421 38.6105 32.3534 39.346C35.0745 43.0784 34.7811 48.8117 36.285 50.7163C37.1585 51.4452 38.032 52.1742 38.9054 52.9032C40.348 54.6764 40.6742 58.2993 44.2578 56.7298C44.3672 56.8392 44.4767 56.9487 44.5862 57.0581C43.8484 57.6404 45.0897 59.2538 45.3502 59.3545C51.3571 57.8593 57.364 56.3664 63.3709 54.8712C62.3267 49.8669 64.6012 50.3419 64.6822 50.0595C64.3911 49.6217 64.0999 49.1839 63.8088 48.7482C63.2264 46.1016 65.2076 46.5438 65.3368 46.3424C64.9361 42.9537 64.5355 39.5627 64.1349 36.174C58.1959 37.8136 53.3426 43.2908 50.8098 48.6388C49.4175 42.4086 56.6241 33.3632 62.6047 31.5812C63.7869 27.1855 67.9593 26.5879 69.1568 30.9245C78.7144 32.7984 83.4582 34.9459 85.4306 45.0289C84.9293 45.7667 83.4035 42.6756 80.9517 40.7646C78.1124 38.5514 72.1449 35.7011 68.5 35.2983C67.9462 38.987 68.6401 42.6625 69.0451 46.3424C72.771 44.1533 72.6637 46.9597 72.8673 47.1086C73.3401 47.2181 73.813 47.3275 74.288 47.437C74.4697 47.9842 74.6514 48.5293 74.8331 49.0766C75.3366 49.394 76.7771 48.028 76.0349 51.5919C79.6535 52.2355 77.1908 54.8471 77.1273 55.0901C76.2976 58.2556 76.6632 60.6132 70.4658 62.4149C71.0854 69.8863 71.7027 77.3578 72.3222 84.8292C73.9597 93.8286 74.8463 103.016 75.816 112.165V116.538C76.4706 121.131 77.1273 125.722 77.7819 130.315C78.1453 134.907 78.5108 139.498 78.8742 144.091C79.0209 144.31 79.1654 144.528 79.312 144.747C76.0546 148.309 76.7048 145.03 75.5993 141.904C73.3949 126.948 71.8713 111.941 70.7942 96.8562C69.5048 90.1575 68.8984 83.3318 68.3906 76.5193C66.9348 71.9528 66.9852 67.0339 66.2058 62.3054C57.1757 65.079 53.2594 73.2094 42.397 76.3004C43.8068 78.8332 46.1776 82.5022 43.9251 85.0481C43.7215 87.2876 45.267 90.3042 43.2705 91.39C42.7429 97.4144 45.6523 93.3886 47.0927 98.9336C51.0834 98.9533 54.6189 98.3448 57.0313 102.103C57.3706 106.545 57.2327 111.077 55.5033 115.225C55.477 120.788 53.6863 126.177 53.0996 131.626C52.9529 131.773 52.8085 131.917 52.6618 132.064C53.2441 134.397 53.8264 136.729 54.4087 139.062C54.759 141.799 53.7476 148.386 56.484 148.138C58.3119 147.972 59.3036 141.129 65.6586 142.453C67.8411 142.909 67.5368 146.245 68.0622 146.389C68.4847 146.505 69.0407 145.36 69.0451 147.155C69.0517 149.373 67.4164 148.591 67.2982 149.123C67.2544 149.318 69.1677 151.488 66.2058 151.748C65.6739 154.296 65.05 152.379 64.1306 152.733C63.3293 153.534 62.5281 154.338 61.7269 155.139C59.5334 156.472 55.2603 156.446 56.1578 160.06C49.2774 165.48 51.0572 162.621 49.932 161.919C49.7875 161.829 48.5003 162 46.8738 160.608C42.5984 156.945 46.6811 152.591 44.3629 148.033C45.0524 142.915 41.1646 133.616 43.9251 133.6C43.2683 128.706 44.9102 123.894 44.3629 118.949C44.5621 116.887 47.0423 109.522 45.3458 110.092C44.9999 110.208 44.6584 113.285 41.0858 115.886C39.7329 118.907 38.958 124.08 35.1883 124.415C34.6585 130.573 30.0702 139.377 29.5097 145.19C29.4375 150.001 29.3631 154.811 29.2908 159.622C29.4375 159.914 29.582 160.205 29.7287 160.498C27.6468 163.401 24.477 167.308 27.8723 170.229C28.8837 167.05 31.8915 165.697 34.8621 167.385C37.986 169.16 35.6349 172.753 35.845 173.398C35.9567 173.744 36.9462 173.744 36.7185 174.491C36.5762 174.957 29.3784 178.771 28.7457 180.067C28.4546 179.92 28.1634 179.775 27.8723 179.629C21.9573 179.802 24.7222 179.011 22.5199 175.802C21.3903 174.891 20.2629 173.981 19.1333 173.068C18.0848 172.926 17.6842 174.791 17.3864 174.817C15.6746 173.687 13.9649 172.558 12.253 171.428C13.2337 167.444 9.70922 161.882 16.8392 161.807C17.7126 159.692 18.5861 157.58 19.4595 155.465C19.3282 147.061 19.7945 138.528 21.8632 130.317C22.5177 128.277 23.1745 126.234 23.829 124.194C16.9026 122.418 20.5847 117.773 18.4766 115.993C17.4193 115.1 10.6484 114.428 8.10023 109.104C4.74213 102.086 7.00129 93.3908 4.71367 94.562C3.6016 95.1312 3.51404 97.8478 3.07621 91.6089C5.44921 91.6133 2.67123 87.9377 2.20276 86.1427C1.76493 82.9356 1.3293 79.7286 0.891479 76.5215C1.3293 72.2943 1.76493 68.0672 2.20276 63.8378C3.95843 58.3672 5.56523 52.8069 8.97368 48.0937C11.5218 45.215 14.0699 42.3363 16.6181 39.4555H16.6246ZM21.5392 2.06105C20.5672 2.3719 22.4433 4.46907 22.3032 4.79525L21.3203 4.46688C20.3023 5.03605 22.6928 6.62097 22.741 6.76326C22.949 7.38934 20.5869 7.04565 23.1788 8.07454C23.065 9.1275 25.6766 12.0062 26.3465 10.5898C26.5479 11.5793 27.0163 11.7282 26.8916 10.9182C25.5803 8.87794 24.2712 6.8355 22.9599 4.79525C22.8833 4.65295 22.3907 1.7896 21.5392 2.06105ZM22.8483 2.06105C23.0322 5.51765 25.2432 6.78953 25.797 7.63671C26.3136 8.42698 27.3907 12.363 28.7457 11.4633C28.4174 9.67697 28.0912 7.89065 27.7628 6.10653C26.8412 5.51328 26.9156 7.08506 26.561 7.09163C25.9371 7.10257 26.5304 2.58862 25.4686 6.21598C24.8666 6.19409 25.2913 4.12976 25.1403 3.70069C24.5339 1.97348 24.6236 5.11486 24.3763 5.12142C23.7458 4.4625 24.3872 2.66962 22.8483 2.06105ZM26.7821 16.9317C25.5759 17.2141 27.2944 18.0503 27.3272 18.1335C27.3513 18.1948 26.9244 19.3353 27.4367 19.3353C27.6271 19.3353 27.684 17.6607 28.529 19.9921C29.1661 18.3415 30.5167 20.4058 30.6043 20.7583C30.9918 22.3169 29.6214 24.7797 29.4025 24.8037C29.293 24.8147 28.9231 23.9325 28.0912 24.147C25.9765 28.3961 27.9927 22.8532 26.1254 22.3979C25.6876 22.4701 25.2519 22.5446 24.8141 22.6168C22.4455 24.0572 26.0269 28.7879 24.4857 27.5379C24.35 27.4285 23.8334 25.1255 22.8483 25.2416C22.3382 25.9705 21.8281 26.6995 21.3203 27.4285C21.1167 27.4285 20.2082 24.4973 20.3374 28.1947C17.5769 27.1045 21.4363 32.5729 21.4297 33.0063C21.4232 33.4945 19.2669 33.6893 21.4297 36.9424C24.0151 39.311 26.5982 41.6796 29.1836 44.0482C29.4375 42.4808 29.6936 40.9134 29.9476 39.346C29.1464 38.3981 28.3451 37.4502 27.5439 36.5024C29.0719 36.5221 29.0347 39.3241 32.6774 38.7987C34.3849 38.5535 35.057 37.5575 35.6261 36.0645C35.6086 35.4319 32.6402 34.9087 31.1472 31.5812C29.8841 34.0374 30.6109 30.5151 31.2567 30.1605C32.4169 29.5213 30.5977 31.1412 33.2225 33.6587C36.5981 36.8986 36.2084 33.1815 36.8258 33.1114C41.8432 37.019 41.8498 31.3142 39.3367 26.4412C40.1269 23.3064 39.6519 21.5792 39.1178 18.5691C38.6602 17.7592 30.6634 17.9168 29.3981 17.803C28.5246 17.5118 27.6512 17.2206 26.7777 16.9273L26.7821 16.9317ZM19.7923 34.8627C15.5826 40.318 18.5292 39.4817 19.6828 42.1875C20.2192 43.444 21.2152 49.5648 22.9599 52.4654H23.3977C28.0649 41.0272 31.4799 52.8463 32.2439 52.3559C31.4033 47.6406 28.4261 43.895 25.0352 40.5478C23.4218 38.9542 21.7143 38.9279 19.7923 34.8627ZM30.9305 39.2366C30.7488 39.346 30.5671 39.4555 30.3854 39.5649C30.5671 42.1612 28.3276 45.3639 31.0399 46.7802C31.0859 46.1344 31.5193 41.1148 32.4607 41.6424C32.2067 42.772 31.9506 43.9016 31.6967 45.0311C33.8464 46.2767 34.9935 49.4356 34.7549 46.9991C34.6279 45.6988 32.6971 38.7922 30.9327 39.2366H30.9305ZM19.1355 43.1726C5.33757 55.5695 1.30303 68.0496 3.2995 86.5805C5.10114 89.1811 8.56213 92.583 11.7101 93.2507C16.5568 94.2796 12.5354 91.5191 12.4741 90.5165C12.3734 88.8878 14.221 92.8632 15.6417 93.9053C16.7735 94.7349 21.1276 96.3505 22.4126 96.0922C24.1968 94.5248 25.9809 92.9574 27.765 91.39C28.7851 87.3817 29.8031 83.3712 30.8232 79.363C30.74 78.958 26.2852 75.7225 31.0421 76.7382C30.6634 73.842 32.8262 71.642 32.789 68.8662C34.1725 68.2839 35.5561 67.6994 36.9396 67.1171C33.3341 60.4994 33.4501 64.9915 31.9156 66.4604C31.6967 66.5326 31.4778 66.607 31.261 66.6793C35.4729 59.2779 31.758 64.8141 29.1858 67.0076C26.8916 68.6473 24.5996 70.2869 22.3054 71.9288C20.7949 74.293 23.8509 75.4007 25.0352 75.0986C25.8495 74.8906 28.1481 69.3347 28.4218 71.0531C28.4896 71.4866 25.0615 75.7947 26.1276 76.191C29.1113 77.3008 29.9541 71.9003 30.7138 72.2549C30.3613 74.7812 27.0251 79.028 25.2519 75.5342C23.2117 75.7137 20.8781 74.7396 21.4297 72.3644C21.699 71.1998 29.1048 66.5851 30.7138 65.0396C33.1678 62.6819 31.9506 60.7577 36.0661 64.4923C38.1064 69.0698 37.9181 65.9262 36.285 63.6167C34.0762 60.4972 31.7996 62.0121 31.0421 60.992C30.4992 59.7989 25.6087 50.9658 25.0352 50.8235C23.9866 50.563 23.7918 54.2626 22.9599 53.5577C22.0142 51.1519 21.0663 48.7461 20.1206 46.3424C19.882 45.6222 19.9061 43.1419 19.1377 43.1726H19.1355ZM71.3415 46.0162C69.0998 45.8805 67.9309 50.7907 68.7211 51.0468C69.0473 51.1519 73.8852 46.1717 71.3415 46.0162ZM64.5706 46.8897C63.1739 47.3122 65.2054 50.0639 65.1157 50.2784C61.3526 51.8152 64.9734 56.0993 65.1157 56.6203C65.8906 59.4355 62.7864 58.8641 60.6367 59.5734C56.2454 61.0204 51.8847 62.6097 47.3116 63.5094C40.8997 67.0755 33.9383 66.0094 35.5167 72.476C34.2601 70.6065 36.458 67.0448 33.9887 68.54C33.1305 69.0588 33.4589 70.6306 33.2247 71.2742C32.7868 72.2221 32.3512 73.17 31.9134 74.1179C30.7816 80.5889 37.6204 78.6471 40.7596 75.9764C51.4162 74.1004 56.6482 65.0987 65.2229 61.9814C65.2952 61.8348 65.3696 61.6903 65.4418 61.5436C72.2784 63.7218 67.9155 60.6417 67.736 59.4661C67.8455 58.6277 67.9549 57.7893 68.0644 56.9508C68.8678 56.3707 68.2154 58.6934 68.3928 59.4661C69.0845 60.3046 69.7763 61.143 70.468 61.9814C71.4728 62.1741 77.1164 59.1903 76.475 55.5301C70.2929 57.8681 72.0858 56.5327 71.1226 55.6396C71 55.5257 68.6554 55.3594 70.1397 53.3432C68.9313 53.295 68.3752 51.1256 68.0644 51.0468C67.215 50.8323 68.9138 54.0153 65.5535 50.7184C65.8008 49.8297 65.884 46.4935 64.5706 46.8919V46.8897ZM72.8695 47.5464C72.1142 47.7106 67.0092 53.8839 70.6848 52.577C71.8143 51.5197 72.9417 50.4623 74.0713 49.4072C74.3909 48.5184 73.8174 47.3428 72.8695 47.5486V47.5464ZM34.4265 48.4199C33.7873 48.8227 35.3985 51.0643 35.6283 51.5897C36.5018 53.7044 37.3752 55.8169 38.2487 57.9316C39.711 62.0887 39.3235 66.977 42.2898 65.2563C43.5923 64.5011 45.302 57.2902 43.9272 59.0239C43.3581 59.7442 42.3204 64.1377 41.7425 63.1789C41.3857 62.5856 46.1952 55.5082 42.0709 57.6032C41.4886 58.5511 40.9063 59.499 40.324 60.4469C39.6782 60.0528 41.4711 58.0257 41.3069 57.277C41.2193 56.8764 37.2767 51.165 36.0639 51.1541C35.7159 50.0333 35.289 49.2101 34.4265 48.4199ZM75.492 49.5144C74.2486 49.6436 70.1397 53.4154 70.1397 54.2166C70.1397 54.7245 71.0197 55.4119 71.7771 54.9828C72.0814 54.8099 77.02 50.4733 75.4899 49.5166L75.492 49.5144ZM75.9277 52.1392C74.1961 52.3296 68.3096 59.0809 75.4899 55.1996C78.8501 53.3848 77.1536 52.0035 75.9277 52.1392ZM32.8963 54.1072C32.9335 54.6545 32.9685 55.1996 33.0058 55.7468C32.9576 55.8979 30.0373 57.1895 33.1152 56.7319C33.194 59.8492 34.0697 57.01 34.2076 56.9508C34.2798 56.9202 35.44 57.5901 35.6283 56.8414C35.7597 56.3204 34.2426 56.7363 34.8643 54.545C33.6275 55.1076 33.3735 53.7591 32.8985 54.1072H32.8963ZM63.0404 55.1996C57.1429 56.7297 51.2454 58.2599 45.348 59.7923C44.7197 60.1645 42.9947 64.7266 44.0367 64.604C45.2013 64.0939 46.3659 63.5839 47.5305 63.0738C53.0646 61.5436 58.5987 60.0134 64.1306 58.481C65.617 57.9797 64.286 55.1317 63.0382 55.2017L63.0404 55.1996ZM42.0709 76.6288C41.1624 78.5705 43.3734 81.7863 43.8178 84.2819C45.4136 81.5784 43.2355 79.0631 42.0709 76.6288ZM39.4505 77.5044C34.884 79.028 38.6799 82.6795 37.7036 88.6558C39.3104 88.4412 40.3896 87.3751 41.7447 86.5783C41.6812 85.4224 39.9168 77.5723 39.4505 77.5022V77.5044ZM36.3923 78.8157C34.8446 78.8179 33.7501 79.4812 32.3512 80.0175C32.9335 83.6339 33.1196 87.2 33.1152 90.8427C40.1707 91.1229 36.0836 82.8831 36.9374 78.9252C36.7557 78.8879 36.574 78.8529 36.3923 78.8157ZM41.852 87.1256C40.0941 88.6032 38.1896 88.9206 37.4825 89.3125C37.0447 89.8226 36.609 90.3326 36.1712 90.8427C35.3569 91.2805 32.3096 91.2039 32.5679 92.0445C35.5079 94.2358 38.9492 94.6058 42.5065 94.9976C42.7867 93.9118 42.8393 87.3204 41.852 87.1256ZM5.15587 89.5314C5.70096 91.7555 6.24824 93.9775 6.79333 96.2016C5.96584 100.685 7.27055 104.971 8.75915 109.104C12.358 115.672 27.082 117.561 34.0981 117.414C33.3429 115.367 32.6292 113.213 32.8963 110.963C30.5737 111.188 20.0068 109.419 18.6977 108.995C13.8532 107.419 11.4233 98.2112 11.3795 93.5791C7.04507 92.2547 5.51926 89.3979 5.15368 89.5336L5.15587 89.5314ZM27.4367 92.3751C25.9087 93.7608 24.3785 95.1443 22.8505 96.53C20.3965 97.2612 15.4031 94.1132 14.9872 94.1242C13.503 94.1636 17.0187 98.5527 17.6075 99.1547C22.5812 104.218 27.1214 104.144 33.7719 103.748C35.2189 100.521 38.0539 98.0098 39.9978 95.3282C39.8621 94.956 33.9142 94.3321 32.6796 92.594C32.4826 94.1876 30.937 95.8689 29.4025 96.0922C25.7598 96.6263 28.7457 92.3181 27.4367 92.3751ZM29.6214 92.8107C27.9336 93.0427 26.7186 96.3549 29.8403 95.4354C31.9659 94.8094 32.0404 92.478 29.6214 92.8107ZM41.1974 97.6224C39.109 100.475 36.8104 103.237 35.845 106.698C37.4431 107.729 40.7399 108.712 42.7254 109.214C42.9246 109.264 46.2608 109.222 46.5476 110.199C45.8931 113.478 45.2363 116.76 44.5818 120.039C45.5056 122.71 43.4369 131.899 44.144 133.16C44.3979 133.123 44.654 133.088 44.908 133.051C45.3129 133.268 44.6518 134.102 46.2192 133.051C48.2201 134.089 52.2918 133.625 52.8807 130.536C54.4919 124.275 54.3146 117.605 56.3745 111.51C58.8023 96.6394 52.1933 100.166 47.0905 99.3737C45.1247 98.7914 43.1589 98.2069 41.193 97.6246L41.1974 97.6224ZM19.963 104.082C19.8645 104.325 19.7682 104.571 19.6697 104.814C17.52 104.42 19.2559 105.381 19.3041 105.473L19.523 106.569C19.6697 106.374 19.8164 106.18 19.9608 105.985C20.0769 105.994 20.6767 107.388 20.5453 105.691C22.6119 106.541 20.5607 105.481 20.9109 104.595C19.639 105.247 20.6132 103.894 19.9608 104.082H19.963ZM19.1355 116.21C19.442 119.632 22.1259 117.13 20.8825 116.648C20.3001 116.501 19.7178 116.357 19.1355 116.21ZM40.324 116.21C33.2115 120.133 29.3127 115.847 39.0127 120.146C39.2272 119.146 41.042 116.169 40.324 116.21ZM24.8163 119.708C25.5015 123.793 23.9385 124.586 23.1788 127.252C21.3071 133.819 19.6565 141.433 20.1206 148.246C21.9617 150.82 21.3903 149.454 21.977 149.666C22.1237 149.885 22.2682 150.104 22.4148 150.323C22.614 150.4 23.3255 149.502 23.9428 150.98C24.5251 150.908 25.1074 150.833 25.6897 150.761C26.7821 151.052 27.8745 151.343 28.9668 151.637C29.0041 149.778 29.0391 147.919 29.0763 146.061C29.6849 139.581 32.9598 133.058 34.1003 128.568C34.7527 125.995 35.2518 122.351 33.5552 120.367C30.6437 120.148 27.73 119.929 24.8185 119.711L24.8163 119.708ZM52.3378 132.83C52.1649 133.504 52.502 135.623 51.7927 134.47C51.2542 133.596 51.5979 131.545 51.0287 135.236C50.5208 135.244 50.5734 131.996 49.7174 135.017C49.4263 134.653 49.1351 134.288 48.844 133.924C47.4583 137.922 48.4434 131.656 46.6592 135.236C45.5253 130.86 46.7227 138.587 44.9123 133.924C44.6212 134.362 44.33 134.8 44.0389 135.236C43.8616 135.247 42.9093 132.243 43.2749 136.438C43.4938 137.458 43.7127 138.478 43.9294 139.498C46.7643 138.379 50.2844 137.096 53.2135 136.983C53.4061 136.886 52.8238 133.228 52.34 132.828L52.3378 132.83ZM51.9 137.639C50.372 138.003 48.8418 138.368 47.3138 138.732C43.2158 140.03 43.9557 140.496 44.9102 144.636C46.4053 144.511 53.6381 141.921 53.9753 140.809C54.2883 139.774 54.0256 137.469 51.9 137.639ZM20.2279 149.012C20.0812 150.47 19.9368 151.928 19.7901 153.386C22.7147 154.763 25.8474 155.892 29.0741 156.12C29.2865 154.025 28.6976 149.69 27.4367 153.605C26.6311 153.611 27.6337 151.074 26.6727 151.527C26.6267 154.163 26.5107 153.46 25.9087 151.418C25.2716 151.376 24.9236 155.321 24.5974 151.418C24.234 151.855 23.8684 152.293 23.505 152.729C22.984 147.359 22.7169 154.953 21.7581 150.323C20.3549 152.924 20.8759 150.065 20.2301 149.012H20.2279ZM19.7923 153.821C18.5007 156.963 26.5216 160.776 28.3101 160.163C29.096 159.894 29.0106 156.75 28.7479 156.665C25.97 156.481 22.0952 155.389 19.7923 153.821Z\",\n    fill: \"#A77C50\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_1_2469\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 1,\n    width: 86,\n    height: 180\n  }, _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.6244 39.456C12.4935 45.5023 6.01376 50.3884 4.71999 58.0437C7.29001 52.2776 13.3079 44.4668 18.3713 40.8767C16.9374 39.6595 17.6489 39.0597 16.6244 39.456C17.2067 38.3264 17.789 37.1968 18.3713 36.0672C19.1025 34.8654 20.8472 33.854 20.556 32.3501C20.4597 31.8488 17.3709 28.7512 17.9357 22.7289C11.7624 20.8638 17.7518 16.3652 20.3393 13.9813C20.0482 12.0483 20.5385 9.8088 21.4317 8.07721C21.366 5.66262 20.0328 -0.175738 22.4146 2.06372C22.9378 0.739311 23.7872 2.79051 24.3804 2.72046C24.7657 2.67449 25.0371 0.334325 31.5892 2.50155C37.4976 -2.41301 38.7038 7.90865 40.8732 11.5776C39.9319 16.5381 46.3788 18.0683 45.0237 20.9798C44.0277 23.1186 40.6762 22.1357 40.4375 22.51C40.2909 23.8213 40.1464 25.1348 39.9997 26.4461C41.5212 30.2091 43.371 37.4376 36.8321 33.9897C35.4245 37.0151 36.0418 38.611 32.3532 39.3465C35.0742 43.0789 34.7809 48.8122 36.2848 50.7167C37.1583 51.4457 38.0317 52.1747 38.9052 52.9037C40.3478 54.6769 40.674 58.2998 44.2575 56.7302C44.367 56.8397 44.4765 56.9492 44.5859 57.0586C43.8482 57.6409 45.0894 59.2543 45.3499 59.355C51.3568 57.8598 57.3638 56.3668 63.3707 54.8717C62.3265 49.8674 64.601 50.3424 64.682 50.06C64.3908 49.6222 64.0997 49.1844 63.8085 48.7487C63.2262 46.1021 65.2074 46.5443 65.3365 46.3429C64.9359 42.9542 64.5353 39.5632 64.1347 36.1745C58.1956 37.8141 53.3424 43.2913 50.8096 48.6393C49.4173 42.4091 56.6238 33.3637 62.6045 31.5817C63.7866 27.186 67.9591 26.5883 69.1565 30.925C78.7142 32.7989 83.458 34.9464 85.4304 45.0294C84.9291 45.7672 83.4033 42.6761 80.9514 40.765C78.1122 38.5519 72.1446 35.7016 68.4998 35.2988C67.9459 38.9875 68.6399 42.663 69.0449 46.3429C72.7707 44.1538 72.6635 46.9602 72.8671 47.1091C73.3399 47.2185 73.8128 47.328 74.2878 47.4375C74.4695 47.9847 74.6512 48.5298 74.8329 49.0771C75.3364 49.3945 76.7768 48.0285 76.0347 51.5924C79.6533 52.236 77.1906 54.8476 77.1271 55.0906C76.2974 58.256 76.663 60.6137 70.4656 62.4154C71.0851 69.8868 71.7025 77.3582 72.322 84.8297C73.9594 93.8291 74.846 103.017 75.8158 112.165V116.539C76.4703 121.132 77.1271 125.722 77.7816 130.315C78.145 134.908 78.5106 139.498 78.874 144.091C79.0207 144.31 79.1651 144.529 79.3118 144.748C76.0544 148.31 76.7046 145.03 75.5991 141.904C73.3946 126.948 71.871 111.942 70.794 96.8567C69.5046 90.158 68.8982 83.3323 68.3903 76.5198C66.9346 71.9533 66.9849 67.0344 66.2056 62.3059C57.1755 65.0795 53.2592 73.2099 42.3968 76.3009C43.8066 78.8337 46.1774 82.5027 43.9248 85.0486C43.7212 87.2881 45.2667 90.3047 43.2703 91.3905C42.7427 97.4149 45.652 93.3891 47.0925 98.9341C51.0832 98.9538 54.6186 98.3453 57.031 102.104C57.3703 106.546 57.2324 111.077 55.503 115.226C55.4767 120.788 53.6861 126.178 53.0994 131.626C52.9527 131.773 52.8082 131.917 52.6616 132.064C53.2439 134.398 53.8262 136.729 54.4085 139.063C54.7587 141.799 53.7474 148.386 56.4837 148.139C58.3116 147.972 59.3033 141.129 65.6583 142.454C67.8409 142.909 67.5366 146.245 68.062 146.39C68.4845 146.506 69.0405 145.361 69.0449 147.156C69.0514 149.373 67.4162 148.592 67.298 149.124C67.2542 149.319 69.1675 151.488 66.2056 151.749C65.6736 154.297 65.0497 152.379 64.1303 152.734C63.3291 153.535 62.5279 154.338 61.7267 155.14C59.5332 156.473 55.26 156.446 56.1576 160.061C49.2772 165.481 51.0569 162.622 49.9317 161.919C49.7872 161.83 48.5001 162 46.8735 160.608C42.5982 156.946 46.6809 152.591 44.3626 148.034C45.0522 142.916 41.1643 133.616 43.9248 133.601C43.2681 128.706 44.9099 123.894 44.3626 118.949C44.5618 116.887 47.0421 109.523 45.3455 110.092C44.9997 110.208 44.6582 113.286 41.0855 115.887C39.7327 118.908 38.9577 124.08 35.1881 124.415C34.6583 130.573 30.0699 139.378 29.5095 145.19C29.4373 150.002 29.3628 154.811 29.2906 159.623C29.4373 159.914 29.5817 160.205 29.7284 160.499C27.6466 163.401 24.4767 167.309 27.872 170.229C28.8834 167.051 31.8913 165.698 34.8619 167.385C37.9857 169.161 35.6346 172.753 35.8448 173.399C35.9564 173.745 36.9459 173.745 36.7182 174.491C36.576 174.958 29.3782 178.771 28.7455 180.067C28.4543 179.92 28.1632 179.776 27.872 179.629C21.9571 179.802 24.7219 179.012 22.5197 175.803C21.3901 174.892 20.2627 173.981 19.1331 173.068C18.0845 172.926 17.6839 174.791 17.3862 174.818C15.6743 173.688 13.9646 172.558 12.2527 171.429C13.2335 167.445 9.70898 161.882 16.8389 161.808C17.7124 159.693 18.5858 157.58 19.4593 155.466C19.3279 147.062 19.7942 138.529 21.8629 130.317C22.5175 128.277 23.1742 126.235 23.8288 124.194C16.9024 122.419 20.5845 117.774 18.4764 115.994C17.419 115.101 10.6481 114.429 8.09998 109.105C4.74188 102.086 7.00105 93.3913 4.71342 94.5625C3.60136 95.1316 3.51379 97.8483 3.07597 91.6094C5.44897 91.6137 2.67098 87.9382 2.20251 86.1432C1.76469 82.9361 1.32906 79.729 0.891235 76.522C1.32906 72.2948 1.76469 68.0677 2.20251 63.8383C3.95818 58.3677 5.56499 52.8073 8.97344 48.0942C11.5216 45.2155 14.0697 42.3368 16.6178 39.456H16.6244ZM21.5389 2.06153C20.567 2.37239 22.443 4.46956 22.3029 4.79574L21.32 4.46737C20.3021 5.03654 22.6926 6.62145 22.7408 6.76375C22.9487 7.38983 20.5867 7.04614 23.1786 8.07503C23.0648 9.12799 25.6764 12.0067 26.3462 10.5903C26.5476 11.5798 27.0161 11.7287 26.8913 10.9187C25.58 8.87843 24.271 6.83599 22.9597 4.79574C22.8831 4.65344 22.3905 1.79008 21.5389 2.06153ZM22.848 2.06153C23.0319 5.51814 25.2429 6.79002 25.7968 7.6372C26.3134 8.42747 27.3904 12.3635 28.7455 11.4638C28.4171 9.67746 28.091 7.89114 27.7626 6.10701C26.841 5.51376 26.9154 7.08555 26.5608 7.09211C25.9369 7.10306 26.5301 2.58911 25.4684 6.21647C24.8664 6.19458 25.2911 4.13025 25.14 3.70118C24.5336 1.97397 24.6234 5.11535 24.376 5.12191C23.7456 4.46299 24.387 2.67011 22.848 2.06153ZM26.7819 16.9322C25.5757 17.2146 27.2941 18.0508 27.327 18.134C27.351 18.1953 26.9242 19.3358 27.4364 19.3358C27.6269 19.3358 27.6838 17.6611 28.5288 19.9926C29.1658 18.342 30.5165 20.4063 30.6041 20.7587C30.9915 22.3174 29.6211 24.7801 29.4022 24.8042C29.2928 24.8152 28.9228 23.933 28.091 24.1475C25.9763 28.3966 27.9924 22.8537 26.1251 22.3984C25.6873 22.4706 25.2517 22.5451 24.8139 22.6173C22.4452 24.0577 26.0266 28.7884 24.4855 27.5384C24.3498 27.429 23.8331 25.126 22.848 25.242C22.338 25.971 21.8279 26.7 21.32 27.429C21.1164 27.429 20.208 24.4977 20.3371 28.1952C17.5766 27.105 21.4361 32.5734 21.4295 33.0068C21.4229 33.495 19.2666 33.6898 21.4295 36.9429C24.0148 39.3115 26.598 41.6801 29.1833 44.0487C29.4373 42.4813 29.6934 40.9139 29.9473 39.3465C29.1461 38.3986 28.3449 37.4507 27.5437 36.5028C29.0717 36.5225 29.0345 39.3246 32.6771 38.7992C34.3847 38.554 35.0567 37.558 35.6259 36.065C35.6084 35.4324 32.6399 34.9092 31.147 31.5817C29.8838 34.0379 30.6106 30.5156 31.2564 30.161C32.4166 29.5218 30.5975 31.1417 33.2222 33.6592C36.5978 36.8991 36.2082 33.182 36.8255 33.1119C41.843 37.0195 41.8495 31.3146 39.3364 26.4417C40.1267 23.3069 39.6517 21.5797 39.1175 18.5696C38.66 17.7597 30.6632 17.9173 29.3979 17.8034C28.5244 17.5123 27.6509 17.2211 26.7775 16.9278L26.7819 16.9322ZM19.792 34.8632C15.5824 40.3185 18.5289 39.4822 19.6826 42.188C20.2189 43.4445 21.215 49.5653 22.9597 52.4658H23.3975C28.0647 41.0277 31.4797 52.8468 32.2437 52.3564C31.4031 47.641 28.4259 43.8955 25.035 40.5483C23.4216 38.9546 21.7141 38.9284 19.792 34.8632ZM30.9302 39.237C30.7485 39.3465 30.5668 39.456 30.3851 39.5654C30.5668 42.1617 28.3274 45.3644 31.0397 46.7807C31.0857 46.1349 31.5191 41.1153 32.4604 41.6429C32.2065 42.7725 31.9504 43.902 31.6964 45.0316C33.8461 46.2772 34.9932 49.4361 34.7546 46.9996C34.6276 45.6993 32.6968 38.7927 30.9324 39.237H30.9302ZM19.1353 43.1731C5.33732 55.57 1.30279 68.0501 3.29926 86.581C5.1009 89.1816 8.56188 92.5835 11.7098 93.2512C16.5565 94.2801 12.5351 91.5196 12.4738 90.517C12.3731 88.8883 14.2207 92.8637 15.6415 93.9057C16.7732 94.7354 21.1274 96.351 22.4124 96.0927C24.1965 94.5253 25.9807 92.9579 27.7648 91.3905C28.7849 87.3822 29.8028 83.3717 30.823 79.3635C30.7398 78.9585 26.2849 75.723 31.0419 76.7387C30.6632 73.8425 32.826 71.6425 32.7888 68.8667C34.1723 68.2844 35.5558 67.6999 36.9393 67.1176C33.3339 60.4999 33.4499 64.9919 31.9153 66.4608C31.6964 66.5331 31.4775 66.6075 31.2608 66.6798C35.4726 59.2784 31.7577 64.8146 29.1855 67.0081C26.8913 68.6478 24.5993 70.2874 22.3051 71.9292C20.7946 74.2935 23.8506 75.4012 25.035 75.0991C25.8493 74.8911 28.1479 69.3351 28.4215 71.0536C28.4894 71.487 25.0612 75.7952 26.1273 76.1914C29.1111 77.3013 29.9539 71.9008 30.7135 72.2554C30.3611 74.7817 27.0249 79.0285 25.2517 75.5347C23.2114 75.7142 20.8778 74.7401 21.4295 72.3649C21.6987 71.2003 29.1045 66.5856 30.7135 65.0401C33.1675 62.6824 31.9504 60.7582 36.0659 64.4928C38.1061 69.0703 37.9179 65.9267 36.2848 63.6172C34.076 60.4977 31.7993 62.0126 31.0419 60.9924C30.499 59.7994 25.6085 50.9663 25.035 50.824C23.9864 50.5635 23.7915 54.2631 22.9597 53.5582C22.014 51.1524 21.0661 48.7465 20.1204 46.3429C19.8818 45.6227 19.9059 43.1424 19.1375 43.1731H19.1353ZM71.3412 46.0167C69.0996 45.881 67.9306 50.7912 68.7209 51.0473C69.0471 51.1524 73.885 46.1721 71.3412 46.0167ZM64.5703 46.8902C63.1737 47.3127 65.2052 50.0644 65.1154 50.2789C61.3523 51.8157 64.9731 56.0998 65.1154 56.6208C65.8904 59.436 62.7862 58.8646 60.6365 59.5739C56.2451 61.0209 51.8844 62.6102 47.3114 63.5099C40.8995 67.076 33.9381 66.0099 35.5164 72.4765C34.2599 70.607 36.4577 67.0453 33.9884 68.5405C33.1303 69.0593 33.4587 70.6311 33.2244 71.2747C32.7866 72.2226 32.351 73.1705 31.9131 74.1184C30.7814 80.5894 37.6202 78.6476 40.7593 75.9769C51.4159 74.1008 56.6479 65.0992 65.2227 61.9819C65.2949 61.8352 65.3693 61.6908 65.4416 61.5441C72.2782 63.7223 67.9153 60.6422 67.7358 59.4666C67.8452 58.6282 67.9547 57.7898 68.0641 56.9513C68.8675 56.3712 68.2152 58.6939 68.3925 59.4666C69.0843 60.3051 69.776 61.1435 70.4678 61.9819C71.4726 62.1746 77.1161 59.1908 76.4747 55.5306C70.2927 57.8686 72.0855 56.5332 71.1223 55.6401C70.9997 55.5262 68.6552 55.3599 70.1394 53.3437C68.931 53.2955 68.375 51.1261 68.0641 51.0473C67.2148 50.8328 68.9135 54.0157 65.5532 50.7189C65.8006 49.8302 65.8838 46.4939 64.5703 46.8924V46.8902ZM72.8692 47.5469C72.114 47.7111 67.009 53.8844 70.6845 52.5775C71.8141 51.5202 72.9415 50.4628 74.0711 49.4077C74.3907 48.5189 73.8171 47.3433 72.8692 47.5491V47.5469ZM34.4262 48.4204C33.787 48.8232 35.3982 51.0648 35.6281 51.5902C36.5015 53.7049 37.375 55.8174 38.2484 57.9321C39.7108 62.0892 39.3233 66.9775 42.2895 65.2568C43.5921 64.5016 45.3018 57.2906 43.927 59.0244C43.3578 59.7446 42.3202 64.1382 41.7423 63.1794C41.3854 62.5861 46.1949 55.5087 42.0706 57.6037C41.4883 58.5516 40.906 59.4995 40.3237 60.4473C39.6779 60.0533 41.4708 58.0262 41.3066 57.2775C41.2191 56.8769 37.2765 51.1655 36.0637 51.1546C35.7156 50.0337 35.2888 49.2106 34.4262 48.4204ZM75.4918 49.5149C74.2484 49.6441 70.1394 53.4159 70.1394 54.2171C70.1394 54.725 71.0194 55.4124 71.7769 54.9833C72.0812 54.8104 77.0198 50.4738 75.4896 49.5171L75.4918 49.5149ZM75.9274 52.1397C74.1958 52.3301 68.3093 59.0813 75.4896 55.2C78.8499 53.3853 77.1533 52.0039 75.9274 52.1397ZM32.8961 54.1077C32.9333 54.655 32.9683 55.2 33.0055 55.7473C32.9574 55.8984 30.0371 57.1899 33.115 56.7324C33.1938 59.8497 34.0694 57.0104 34.2073 56.9513C34.2796 56.9207 35.4398 57.5906 35.6281 56.8419C35.7594 56.3209 34.2424 56.7368 34.8641 54.5455C33.6272 55.1081 33.3733 53.7596 32.8982 54.1077H32.8961ZM63.0401 55.2C57.1427 56.7302 51.2452 58.2604 45.3477 59.7928C44.7195 60.165 42.9944 64.7271 44.0364 64.6045C45.2011 64.0944 46.3657 63.5843 47.5303 63.0743C53.0643 61.5441 58.5984 60.0139 64.1303 58.4815C65.6167 57.9802 64.2857 55.1322 63.0379 55.2022L63.0401 55.2ZM42.0706 76.6293C41.1621 78.571 43.3731 81.7868 43.8175 84.2824C45.4134 81.5789 43.2352 79.0636 42.0706 76.6293ZM39.4503 77.5049C34.8838 79.0285 38.6797 82.68 37.7033 88.6563C39.3102 88.4417 40.3894 87.3756 41.7444 86.5788C41.681 85.4229 39.9165 77.5728 39.4503 77.5027V77.5049ZM36.3921 78.8162C34.8444 78.8184 33.7498 79.4817 32.351 80.018C32.9333 83.6344 33.1193 87.2005 33.115 90.8432C40.1705 91.1234 36.0834 82.8836 36.9372 78.9256C36.7555 78.8884 36.5738 78.8534 36.3921 78.8162ZM41.8517 87.1261C40.0939 88.6037 38.1893 88.9211 37.4822 89.313C37.0444 89.8231 36.6088 90.3331 36.171 90.8432C35.3566 91.281 32.3094 91.2044 32.5677 92.045C35.5077 94.2363 38.949 94.6063 42.5063 94.9981C42.7865 93.9123 42.839 87.3209 41.8517 87.1261ZM5.15563 89.5319C5.70072 91.756 6.24799 93.978 6.79308 96.2021C5.9656 100.685 7.27031 104.972 8.7589 109.105C12.3578 115.672 27.0818 117.561 34.0979 117.415C33.3426 115.368 32.629 113.214 32.8961 110.963C30.5734 111.189 20.0066 109.42 18.6975 108.995C13.853 107.419 11.4231 98.2117 11.3793 93.5796C7.04483 92.2552 5.51902 89.3984 5.15344 89.5341L5.15563 89.5319ZM27.4364 92.3756C25.9084 93.7613 24.3782 95.1448 22.8502 96.5305C20.3962 97.2617 15.4029 94.1137 14.9869 94.1247C13.5027 94.1641 17.0184 98.5532 17.6073 99.1552C22.581 104.219 27.1212 104.144 33.7717 103.748C35.2187 100.521 38.0536 98.0103 39.9975 95.3287C39.8618 94.9565 33.914 94.3326 32.6793 92.5945C32.4823 94.1881 30.9368 95.8694 29.4022 96.0927C25.7595 96.6268 28.7455 92.3186 27.4364 92.3756ZM29.6211 92.8112C27.9333 93.0432 26.7184 96.3554 29.8401 95.4359C31.9657 94.8098 32.0401 92.4784 29.6211 92.8112ZM41.1972 97.6229C39.1088 100.475 36.8102 103.238 35.8448 106.699C37.4428 107.73 40.7396 108.713 42.7252 109.214C42.9244 109.265 46.2606 109.223 46.5474 110.199C45.8928 113.479 45.2361 116.76 44.5815 120.039C45.5053 122.71 43.4366 131.9 44.1437 133.161C44.3977 133.124 44.6538 133.089 44.9077 133.051C45.3127 133.268 44.6516 134.102 46.219 133.051C48.2198 134.089 52.2916 133.625 52.8805 130.536C54.4917 124.275 54.3143 117.605 56.3743 111.511C58.802 96.6399 52.1931 100.167 47.0903 99.3741C45.1244 98.7918 43.1586 98.2074 41.1928 97.625L41.1972 97.6229ZM19.9628 104.083C19.8643 104.326 19.768 104.571 19.6694 104.814C17.5197 104.42 19.2557 105.381 19.3039 105.473L19.5228 106.57C19.6694 106.375 19.8161 106.18 19.9606 105.985C20.0766 105.994 20.6764 107.388 20.5451 105.692C22.6116 106.541 20.5604 105.482 20.9107 104.595C19.6388 105.248 20.6129 103.895 19.9606 104.083H19.9628ZM19.1353 116.211C19.4418 119.632 22.1256 117.13 20.8822 116.648C20.2999 116.502 19.7176 116.357 19.1353 116.211ZM40.3237 116.211C33.2113 120.133 29.3125 115.847 39.0124 120.147C39.227 119.146 41.0417 116.169 40.3237 116.211ZM24.816 119.709C25.5012 123.794 23.9382 124.586 23.1786 127.252C21.3069 133.82 19.6563 141.434 20.1204 148.246C21.9614 150.82 21.3901 149.454 21.9768 149.667C22.1234 149.886 22.2679 150.105 22.4146 150.324C22.6138 150.4 23.3253 149.503 23.9426 150.98C24.5249 150.908 25.1072 150.834 25.6895 150.761C26.7819 151.053 27.8742 151.344 28.9666 151.637C29.0038 149.778 29.0388 147.92 29.0761 146.061C29.6846 139.582 32.9595 133.058 34.1001 128.568C34.7524 125.996 35.2515 122.351 33.555 120.368C30.6435 120.149 27.7297 119.93 24.8182 119.711L24.816 119.709ZM52.3376 132.83C52.1646 133.505 52.5017 135.624 51.7925 134.47C51.254 133.597 51.5976 131.545 51.0285 135.236C50.5206 135.245 50.5731 131.996 49.7172 135.017C49.426 134.654 49.1349 134.288 48.8437 133.925C47.458 137.922 48.4431 131.657 46.659 135.236C45.525 130.86 46.7225 138.588 44.9121 133.925C44.6209 134.363 44.3298 134.801 44.0386 135.236C43.8613 135.247 42.9091 132.244 43.2746 136.438C43.4936 137.458 43.7125 138.478 43.9292 139.498C46.7641 138.38 50.2842 137.097 53.2132 136.983C53.4058 136.887 52.8235 133.229 52.3398 132.828L52.3376 132.83ZM51.8997 137.64C50.3717 138.003 48.8415 138.369 47.3135 138.732C43.2155 140.03 43.9555 140.497 44.9099 144.636C46.4051 144.511 53.6379 141.922 53.975 140.81C54.2881 139.774 54.0254 137.469 51.8997 137.64ZM20.2277 149.012C20.081 150.47 19.9365 151.928 19.7898 153.386C22.7145 154.763 25.8471 155.893 29.0739 156.12C29.2862 154.025 28.6973 149.691 27.4364 153.605C26.6308 153.612 27.6334 151.074 26.6724 151.528C26.6264 154.163 26.5104 153.461 25.9084 151.418C25.2714 151.377 24.9233 155.321 24.5971 151.418C24.2337 151.856 23.8682 152.294 23.5048 152.729C22.9838 147.359 22.7167 154.954 21.7579 150.324C20.3546 152.924 20.8756 150.065 20.2299 149.012H20.2277ZM19.792 153.822C18.5005 156.963 26.5214 160.777 28.3099 160.164C29.0958 159.894 29.0104 156.751 28.7477 156.665C25.9697 156.482 22.095 155.389 19.792 153.822Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_1_2469)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.3726 151.635H4.72034V188.208H46.3726V151.635Z\",\n    fill: \"#826E59\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80.6472 134.465H40.9893V169.049H80.6472V134.465Z\",\n    fill: \"#826E59\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.2757 157.711L19.0885 149.757L16.8331 154.346L33.0204 162.301L35.2757 157.711Z\",\n    fill: \"#450000\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.254 132.59L40.1613 139.871L40.9979 142.409L63.0906 135.128L62.254 132.59Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.7208 95.078L11.8357 90.0874L7.59881 111.214L32.4839 116.205L36.7208 95.078Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.0985 47.4132L16.8298 36.9458L-15.4574 74.7894L-3.18871 85.2568L29.0985 47.4132Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.52044 74.6592H-5.10022V95.5959H8.52044V74.6592Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.3239 46.8555H24.9213V60.4455H40.3239V46.8555Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.8543 58.043H28.748V67.3314H41.8543V58.043Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.6173 75.4599L35.9806 78.6357L40.8954 93.5493L50.5322 90.3734L45.6173 75.4599Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.2982 80.3183L29.6079 78.9766L26.3369 95.2869L33.0272 96.6286L36.2982 80.3183Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.9979 99.7856H33.2183V103.472H39.9979V99.7856Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.1243 94.6636H37.5504V101.583H49.1243V94.6636Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.4352 102.197L34.9553 99.6104L27.5649 112.411L32.0447 114.997L39.4352 102.197Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.0639 105.152H30.1664V117.98H36.0639V105.152Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.6437 116.209H14.6239V123.944H40.6437V116.209Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.3481 103.281H32.3513V111.608H45.3481V103.281Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.1175 108.523H32.4193V117.094H43.1175V108.523Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.3477 108.945H40.3237V116.209H45.3477V108.945Z\",\n    fill: \"#803538\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.1564 98.5389L46.9397 96.9956L42.1004 135.303L54.317 136.846L59.1564 98.5389Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.4613 126.293L19.7706 124.185L16.2801 151.815L32.9708 153.923L36.4613 126.293Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.8291 54.2642H41.7445V78.1999H65.8291V54.2642Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.9978 67.1167H33.5071V91.0612H39.9978V67.1167Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.3368 58.043H11.5459V78.7148H29.3368V58.043Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.8376 67.5589L28.2059 63.8877L23.7095 76.9093L34.3412 80.5805L38.8376 67.5589Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.9063 62.0942H29.335V67.6655H34.9063V62.0942Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.8542 64.147H33.6713V67.3299H36.8542V64.147Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.5984 81.1177H0.332886V93.9612H17.5984V81.1177Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M8.46377 91.0605H-0.673584V98.1401H8.46377V91.0605Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.9769 96.9307H3.78125V116.21H10.9769V96.9307Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.1377 108.925H8.46362V116.21H19.1377V108.925Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.125 22.3496H20.6179V46.8567H45.125V22.3496Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.1243 13.4353L14.6239 13.0457L15.5784 11.2134L49.1243 11.6512V13.4353Z\",\n    fill: \"#731D00\",\n    stroke: \"black\",\n    strokeMiterlimit: 10\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.868 23.9837C18.2489 21.8537 18.6889 19.5814 20.7182 18.0665C23.1219 16.2692 26.0772 16.788 26.782 16.9325C29.4112 18.2679 30.2759 19.8659 30.6042 20.7591C32.87 26.893 23.4086 36.1902 19.7922 34.8635C17.2112 33.9179 17.2528 27.4381 17.868 23.9859V23.9837Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.4901 9.66962C17.1176 7.25941 18.9236 3.84002 19.6898 2.38864C21.0864 -0.258001 23.0916 -4.06049 26.8854 -4.80698C32.1152 -5.83586 37.0735 -0.330241 38.9627 3.8444C40.6396 7.55056 40.3747 11.2567 40.1623 11.2961C39.9828 11.3312 39.3918 8.8509 37.6777 5.04184C36.6882 2.83959 36.1869 2.11719 35.3638 1.87201C33.803 1.40791 32.1283 2.97532 31.7671 3.32777C30.8477 2.67979 29.3635 1.88733 27.5706 1.95738C26.9204 1.98365 25.8871 2.02305 25.4931 2.71262C25.1056 3.39344 25.5719 4.3063 25.6857 4.5274C26.0995 5.33518 26.8 5.69639 27.0561 5.81241C27.3517 5.75768 27.8136 5.72266 28.1704 5.98316C28.652 6.3378 28.6651 7.03831 28.6848 7.52429C28.7199 8.40651 28.8227 9.64773 29.1139 11.2939C28.5885 11.4866 27.5137 11.7974 26.2024 11.5501C25.3836 11.3968 24.3175 11.1976 23.7177 10.3504C23.2055 9.62803 23.3149 8.82901 22.6035 8.46561C22.2751 8.29705 22.054 8.3671 21.8438 8.13068C21.4279 7.66221 21.7213 6.74935 21.7453 6.75154C21.776 6.75592 21.7037 8.15914 21.3163 9.49231C21.0667 10.3526 20.8675 11.04 20.4012 11.1648C19.7554 11.3377 18.8864 10.357 18.4901 9.66306V9.66962Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.403 172.984C17.4218 171.684 15.3838 170.487 13.2997 169.361C13.21 169.3 13.1224 169.237 13.0327 169.175C12.8904 169.077 12.7481 169.02 12.6123 168.996C12.4701 168.921 12.3299 168.845 12.1877 168.77C10.9399 168.118 9.83217 170.007 11.0822 170.659C11.4543 170.854 11.8243 171.051 12.192 171.251C14.1644 172.63 16.0033 174.164 17.7217 175.85C18.5864 176.697 19.8474 175.677 19.5518 174.747C19.994 174.289 20.0969 173.44 19.4008 172.984H19.403Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.4955 172.707C34.9369 173.988 33.4089 175.5 31.6773 176.547C29.9939 177.565 28.4834 178.567 26.997 179.874C25.9374 180.807 27.4895 182.35 28.5447 181.422C29.3743 180.693 30.204 179.953 31.1431 179.362C31.8765 178.9 32.6711 178.548 33.3804 178.044C35.0069 176.888 36.5043 175.518 38.0432 174.253C39.1334 173.357 37.577 171.816 36.4955 172.705V172.707Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.8196 144.881C68.4278 144.925 68.0535 145.153 67.8783 145.612C66.7312 148.631 64.9974 151.437 63.4585 154.27C62.7864 155.509 64.6757 156.615 65.3477 155.376C65.4068 155.268 65.4637 155.161 65.5228 155.056C65.7002 155.012 65.8775 154.907 66.0351 154.728C67.1187 153.489 68.0688 152.145 68.8087 150.669C69.1568 149.977 69.4632 149.259 69.7281 148.53C69.9952 147.793 70.1068 146.919 70.5053 146.247C71.1642 145.133 69.6318 144.117 68.8196 144.885V144.881Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.9552 157.805C54.3655 159.112 52.1545 161.047 49.5757 162.362C49.3808 162.435 49.1838 162.505 48.9868 162.57C48.7285 162.656 48.5424 162.807 48.4198 162.989C48.1615 163.26 48.1418 163.63 48.2753 163.96C48.3979 164.409 48.7613 164.777 49.2801 164.74C49.4662 164.76 49.6654 164.731 49.869 164.641C50.0748 164.552 50.2762 164.455 50.4754 164.357C51.559 163.945 52.6142 163.457 53.6146 162.87C54.8755 162.13 56.016 160.929 57.4171 160.473C57.8593 160.329 58.0891 160 58.1548 159.644C59.2559 158.963 58.1767 157.192 56.9552 157.807V157.805Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.3007 107.956C42.9416 107.921 42.5936 107.961 42.2499 108.022C41.7617 107.845 41.175 107.847 40.6584 107.829C40.1615 107.814 39.5157 107.711 38.8984 107.698C38.6006 107.545 38.2963 107.42 37.9592 107.422C37.8804 107.422 37.8016 107.431 37.725 107.446C37.6506 106.378 35.9124 106.032 35.5731 107.251C35.1243 108.869 34.912 110.557 35.0302 112.236C35.1309 113.641 35.2535 115.441 37.0639 115.388C39.7828 115.307 42.39 113.059 43.6312 110.795C43.756 110.568 43.7866 110.327 43.7472 110.099C44.6798 109.777 44.5244 108.072 43.3007 107.956Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.0001 119.966C34.2098 119.705 33.1809 119.749 32.3512 119.67C31.2085 119.559 30.0658 119.458 28.9209 119.386C27.7979 119.316 26.6705 119.333 25.5497 119.259C24.7857 119.208 23.9779 118.81 23.2161 118.97C22.4849 119.123 22.0077 119.81 22.15 120.544C22.3163 121.404 23.2007 121.789 23.91 122.124C24.6521 122.474 25.3286 122.07 25.4862 121.439C25.6394 121.448 25.7927 121.454 25.9459 121.459C26.8675 121.487 27.7869 121.507 28.7064 121.562C29.6367 121.619 30.5649 121.693 31.4931 121.778C31.9222 121.818 32.349 121.859 32.7781 121.903C32.8219 121.908 32.8722 121.91 32.9248 121.912C32.835 122.744 33.6516 123.622 34.4988 123.009C35.0745 122.591 35.7947 122.464 35.9873 121.649C36.1625 120.901 35.7115 120.202 35.0022 119.968L35.0001 119.966Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.8352 78.0432C33.4696 77.8966 33.0997 77.7805 32.7253 77.6842C31.8803 77.3777 31.0682 76.999 30.2801 76.5415C29.0586 75.8344 27.9553 77.7236 29.1746 78.4307C29.4526 78.5927 29.7372 78.7437 30.0218 78.8904C30.1706 79.2472 30.4881 79.5384 30.9719 79.5822C31.3309 79.6128 31.6833 79.6763 32.0292 79.7595C32.432 79.904 32.8392 80.0375 33.2529 80.1535C34.6408 80.5432 35.1137 78.5511 33.8352 78.0432Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.373 94.198C7.23728 93.9726 7.12782 93.7537 7.03807 93.5304C7.11688 93.0028 7.02275 92.4511 6.79727 91.952C6.7907 91.8404 6.78194 91.7309 6.76881 91.6302C6.76224 91.5842 6.75567 91.5383 6.74473 91.4945C7.12125 91.1618 7.33579 90.5729 7.10812 90.0584C6.40323 88.467 5.55166 86.9696 4.54248 85.5532C4.47462 85.4569 4.38705 85.3737 4.29073 85.3037C4.29073 85.1964 4.27541 85.0804 4.24038 84.9578C4.00177 84.1435 3.73908 83.34 3.45449 82.541C3.42603 81.3698 3.32314 80.2074 3.15896 79.0428C3.553 76.3874 3.99301 73.7386 4.48994 71.1007C4.78328 69.5465 5.09195 67.9966 5.42031 66.4489C5.69833 65.1398 5.80779 63.3775 6.83886 62.4121C7.86993 61.4467 6.31785 59.9012 5.29116 60.8644C4.28416 61.8101 3.91858 63.082 3.62962 64.3911C3.24215 66.1446 2.88094 67.9068 2.54163 69.6712C1.86301 73.2001 1.27851 76.7486 0.779395 80.3081C0.713722 80.7788 0.91731 81.1597 1.2216 81.4005C1.22816 81.5121 1.23692 81.6238 1.2413 81.7354C1.16249 81.8755 1.10338 82.0353 1.0793 82.2214C0.982983 82.9526 1.06179 83.6312 1.30041 84.3273C1.35951 84.5025 1.45364 84.6426 1.5631 84.7564C1.61345 84.9556 1.66599 85.157 1.71852 85.3562C1.63972 85.5532 1.62439 85.7853 1.71196 86.0436C1.92649 86.6784 2.14102 87.3111 2.35556 87.9459C1.65723 88.1298 1.12528 89.0909 1.76231 89.8176C1.93087 90.0103 2.10381 90.1942 2.28113 90.3715C2.13227 90.6167 2.025 90.8903 1.96808 91.1749C1.83893 91.8338 1.91117 92.5475 2.14102 93.2042C2.13446 93.7953 2.28769 94.3425 2.75179 94.6621C2.65547 94.9314 2.54163 95.1262 2.43655 94.9927C1.55872 93.8916 0.0197732 95.448 0.888851 96.5404C1.97027 97.8976 3.94923 97.2015 4.64756 95.8443C4.71542 95.7107 4.77891 95.5662 4.83582 95.4218C5.0613 95.4261 5.2824 95.3955 5.49693 95.3364C6.24123 96.49 8.09541 95.3999 7.36644 94.2024L7.373 94.198Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32.8091 103.237C28.9869 103.662 24.9042 103.487 21.4739 101.567C18.5492 99.9295 16.2353 96.9961 16.0318 93.5702C15.9486 92.1691 13.7573 92.1604 13.8426 93.5702C14.0813 97.5587 16.4696 101.02 19.8058 103.123C23.6411 105.54 28.4068 105.917 32.8091 105.429C34.1948 105.275 34.2101 103.084 32.8091 103.239V103.237Z\",\n    fill: \"#AFA730\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.572 109.569C26.6575 109.352 21.2022 109.126 17.2114 105.858C15.4645 104.429 14.313 102.603 13.8293 100.398C13.2951 97.9576 13.2448 95.4992 12.2071 93.1853C11.6314 91.9025 9.74437 93.0146 10.3179 94.2908C11.4387 96.7886 11.1958 99.641 12.0517 102.218C12.7982 104.468 14.2736 106.348 16.141 107.785C20.5454 111.173 26.2306 111.526 31.5742 111.76C32.9818 111.821 32.9796 109.632 31.5742 109.571L31.572 109.569Z\",\n    fill: \"#AFA730\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M82.1422 143.494C82.0437 143.49 81.9474 143.494 81.8511 143.494C81.7963 143.391 81.7197 143.293 81.6125 143.207C81.492 143.111 81.3695 143.024 81.2447 142.94C82.2188 142.605 82.3721 141.274 81.2622 140.859C81.1571 140.819 81.0498 140.784 80.9426 140.747C80.9251 140.517 80.8353 140.294 80.6624 140.114C80.7565 140.075 80.8506 140.038 80.947 139.998C81.8401 139.615 81.5271 138.216 80.6865 137.997C80.6098 137.978 80.5332 137.96 80.4566 137.94C80.3318 137.551 80.0013 137.238 79.4562 137.238C79.2657 137.238 79.0775 137.238 78.887 137.238C78.841 137.095 78.7688 136.962 78.6659 136.852C79.0337 136.524 79.0599 136.003 78.8345 135.587H78.841C79.5656 135.482 79.7867 134.587 79.5087 133.993C80.1326 133.488 79.813 132.255 78.9483 132.069C78.9242 131.949 78.8826 131.831 78.8257 131.719C79.1957 131.393 79.2854 130.872 79.0906 130.454C79.373 130.005 79.1782 129.313 78.7141 128.948C79.0381 128.873 79.3599 128.801 79.6838 128.726C80.9667 128.435 80.5485 126.688 79.3927 126.577L78.8301 126.522C78.9111 126.211 78.8804 125.878 78.7163 125.627C79.2022 125.29 79.4452 124.611 79.2176 124.142C79.3883 123.543 79.0337 122.763 78.2106 122.656C78.1602 122.65 78.1077 122.645 78.0573 122.639C78.1734 122.293 78.1471 121.894 77.9544 121.605C78.4601 121.038 78.4733 120.071 77.5035 119.863L76.444 119.637C76.7723 119.607 77.1007 119.58 77.4312 119.558C78.6659 119.482 78.8257 117.833 77.8603 117.45C78.0486 117.122 78.1033 116.735 77.9698 116.43C78.4142 116.343 78.8564 116.255 79.3007 116.165C80.3406 115.96 80.3493 114.254 79.3007 114.055C78.8016 113.961 78.3025 113.882 77.8012 113.812C77.8406 113.63 77.8384 113.449 77.7903 113.282C78.1646 113.208 78.3791 112.987 78.4623 112.711C79.57 112.409 79.605 110.861 78.4667 110.601C79.6729 110.601 80.8791 110.609 82.0831 110.631C83.5214 110.658 83.4491 108.593 82.0831 108.442C80.3865 108.254 78.6878 108.136 76.989 108.081C77.2189 107.744 77.278 107.282 77.1313 106.921C77.4444 106.562 77.5516 106.034 77.359 105.644C77.8713 105.119 77.7509 104.121 76.9869 103.854C77.5232 103.372 77.6107 102.433 76.9146 102.092C76.9102 101.962 76.8818 101.833 76.8336 101.715C77.5889 101.614 77.8625 100.853 77.6567 100.257C77.8187 99.6485 77.486 98.9086 76.6432 98.867C76.6147 98.867 76.5862 98.8648 76.56 98.8626C76.5884 98.7313 76.5928 98.5912 76.5709 98.4533C76.6541 98.346 76.7132 98.2256 76.7526 98.0986C77.5954 97.7309 77.5516 96.4415 76.6651 96.0934C76.6213 95.7891 76.4483 95.522 76.1156 95.4016C76.1769 95.209 76.1835 95.001 76.1375 94.804C76.2382 94.445 76.155 94.0334 75.8923 93.7379C76.8883 93.6503 77.8844 93.5628 78.8804 93.4774C79.8743 93.3898 80.1523 92.4573 79.7692 91.8334C80.0604 91.1964 79.7495 90.2813 78.8213 90.2507C78.2237 90.231 77.6261 90.2134 77.0284 90.1937C77.0328 90.15 77.0328 90.104 77.0328 90.0602C77.3349 89.421 77.0197 88.4622 76.0871 88.4337C76.0455 88.4337 76.0039 88.4337 75.9624 88.4337C75.8901 87.9149 75.4895 87.3961 74.8963 87.3457C74.7386 87.3326 74.5832 87.3194 74.4256 87.3063C74.4672 86.7743 74.152 86.2117 73.4865 86.1176C73.4865 85.8571 73.4077 85.5922 73.261 85.3821C73.6047 85.3405 73.9484 85.2967 74.2899 85.2551C75.4983 85.1062 75.6887 83.6286 74.7562 83.1864C75.1546 82.6829 75.0451 81.7744 74.4387 81.4833C75.2356 81.3585 76.0324 81.2337 76.8292 81.1089C77.8822 80.9447 77.7859 79.7057 77.1073 79.1847C77.3678 78.5258 77.0591 77.6611 76.144 77.707C74.5526 77.788 72.9742 77.7377 71.4112 77.5582C72.4948 77.2911 73.5981 77.1072 74.7167 77.0175C75.8529 76.9255 76.3104 75.0845 75.0079 74.8678C74.9072 74.8503 74.8065 74.8371 74.708 74.8218C74.7649 74.2614 74.4103 73.6419 73.6616 73.5652C72.9917 73.4952 72.324 73.4251 71.6542 73.3551C71.9453 73.3069 72.2387 73.2631 72.532 73.2194C73.62 73.0596 73.5302 71.3389 72.532 71.1091C71.941 70.9733 71.3499 70.8442 70.7566 70.7238C71.3543 70.6384 71.9563 70.564 72.5583 70.5005C73.7032 70.3801 74.141 68.6594 72.8494 68.3508C72.2912 68.2172 71.7308 68.0925 71.1704 67.9764C71.2908 67.9392 71.4112 67.9042 71.5294 67.867C72.5364 67.5605 72.6064 66.0303 71.5294 65.7567C71.1047 65.6494 70.68 65.5509 70.2531 65.4568C70.61 65.3802 70.969 65.3101 71.328 65.2466C72.2715 65.0802 72.2912 64.0601 71.7855 63.4866C72.1971 63.3903 72.6064 63.2896 73.0158 63.1845C73.8674 62.9656 74.1563 61.5842 73.2763 61.1836C73.1778 61.1377 73.0793 61.0982 72.9808 61.0567C73.1472 60.4371 72.7422 59.6512 71.9475 59.6096L68.55 59.428C68.4296 59.2112 68.2085 59.0492 67.867 59.0033C66.8622 58.8675 66.026 58.977 65.1131 59.4236C64.0755 59.9336 64.66 61.4091 65.6648 61.4638L68.4537 61.6127C68.4887 61.7265 68.5413 61.836 68.6091 61.9367C67.2891 62.1928 65.9603 62.403 64.6249 62.5671C63.2414 62.7357 63.1955 64.638 64.6249 64.7563C64.7125 64.7628 64.8001 64.7716 64.8876 64.7781C63.8412 65.2773 64.058 66.7681 65.2773 66.8797C65.7611 66.9235 66.2427 66.9804 66.7221 67.0439C66.5098 67.1096 66.2974 67.173 66.0873 67.2387C64.9183 67.5955 65.1591 69.0338 66.1551 69.3403C65.5509 69.4716 64.9489 69.6117 64.3491 69.7649C63.0597 70.0933 63.4954 71.7724 64.6403 71.9147C65.2467 71.9913 65.853 72.0745 66.4594 72.1664C65.7939 72.3262 65.1306 72.4948 64.4717 72.6743C63.2108 73.018 63.5895 74.7014 64.7629 74.824C65.1744 74.8678 65.5838 74.9094 65.9953 74.9531C65.7742 75.6011 66.1726 76.514 67.0089 76.4921C67.2519 76.4855 67.4949 76.4833 67.7379 76.479C67.3745 76.6256 67.0111 76.7789 66.6499 76.9452C66.0041 77.2408 65.9888 78.0617 66.3653 78.5652L66.2164 78.5783C64.8942 78.6943 64.7957 80.612 66.0479 80.7543C65.4524 81.3125 65.8968 82.6019 66.8556 82.6654C66.8666 82.6654 66.8775 82.6654 66.8863 82.6676C66.3718 82.9303 66.304 83.541 66.5426 84.0314C65.4437 84.1934 65.2138 85.4806 65.945 85.9994C65.54 86.3781 65.6188 87.1093 66.0194 87.5515C65.9734 88.1382 66.4047 88.8321 67.0921 88.889C67.2978 88.9065 67.5036 88.9241 67.7094 88.9394C67.5168 89.4407 67.7335 90.1259 68.2392 90.4039C67.7597 91.0409 67.994 92.1005 69.0535 92.1333C69.1017 92.1333 69.1476 92.1355 69.1958 92.1377C68.1822 92.2252 67.1687 92.315 66.1551 92.4026C65.216 92.4857 64.9117 93.3548 65.2182 93.9765C64.6972 94.4034 64.6819 95.2966 65.1766 95.7103C65.1262 96.2335 65.413 96.7676 66.0522 96.8508C65.7633 97.3259 65.8487 98.0154 66.3127 98.3482C66.4266 98.7729 66.7637 99.1385 67.3241 99.1691C67.7466 99.191 68.1691 99.2151 68.5916 99.237C68.5675 99.3377 68.5566 99.4449 68.561 99.5522C68.2829 99.5522 68.0027 99.5522 67.7247 99.5522C66.3171 99.5631 66.3127 101.743 67.7247 101.741C68.2238 101.737 68.7208 101.741 69.2177 101.752C69.0929 101.984 69.0535 102.265 69.1017 102.532C69.0272 102.538 68.9528 102.543 68.8806 102.549C68.0071 102.619 67.6744 103.405 67.8889 104.018C67.6043 104.447 67.6415 105.06 68.0071 105.426C68.0181 105.566 68.0531 105.704 68.1144 105.831C67.1577 106.262 67.3022 107.81 68.5456 107.91C68.6135 107.917 68.6814 107.919 68.7492 107.926C68.9047 108.024 69.0995 108.085 69.3337 108.085H70.008C69.9292 108.144 69.8613 108.219 69.8022 108.3C69.5307 108.339 69.3228 108.464 69.1783 108.637C68.9178 108.65 68.6595 108.661 68.399 108.674C66.9914 108.746 66.987 110.795 68.399 110.863C68.7602 110.881 69.1236 110.898 69.4848 110.916C69.4848 110.933 69.4826 110.951 69.4804 110.971C68.5982 111.415 68.7711 112.982 69.9817 113.041C69.9905 113.041 69.997 113.041 70.0036 113.041C70.0167 113.271 70.0933 113.506 70.2269 113.707C69.3797 114.112 69.4454 115.511 70.4283 115.749C69.846 116.047 69.7803 116.844 70.1196 117.356C70.0846 117.363 70.0474 117.369 70.0123 117.376C69.0469 117.564 69.0338 118.768 69.6511 119.287C69.5264 119.83 69.7628 120.456 70.3976 120.592C70.5399 120.622 70.6822 120.653 70.8223 120.682C70.6187 120.708 70.4173 120.736 70.2137 120.763C68.8674 120.942 68.758 122.978 70.2137 122.952C70.2641 122.952 70.3166 122.952 70.367 122.952C70.17 123.576 70.4852 124.34 71.363 124.353C71.4834 124.353 71.6038 124.361 71.7242 124.364C71.7133 124.591 71.768 124.821 71.8753 125.018C71.5535 125.257 71.4221 125.649 71.4637 126.021C70.5574 126.505 70.9821 127.956 72.0438 128.059C72.2168 128.076 72.3919 128.092 72.5648 128.109C72.532 128.116 72.4992 128.124 72.4642 128.131C71.1682 128.427 71.6148 130.149 72.7553 130.281L72.9961 130.309C72.9961 130.368 72.9961 130.43 73.0071 130.489C72.2759 130.778 72.0767 131.693 72.4795 132.218C72.1839 132.575 72.2124 133.149 72.4882 133.56C72.4204 133.796 72.4423 134.064 72.5386 134.311C72.4423 134.324 72.3459 134.339 72.2518 134.353C70.923 134.545 71.4375 136.369 72.543 136.502C72.6612 136.515 72.7772 136.531 72.8954 136.544C72.486 137.109 72.6787 138.039 73.4668 138.262C73.5543 138.286 73.6397 138.308 73.7273 138.33C73.7426 138.455 73.7776 138.573 73.8323 138.683C73.9484 139.096 74.2855 139.438 74.8415 139.44C74.9269 139.44 75.0101 139.442 75.0933 139.444C74.4365 139.83 74.3227 140.762 74.8328 141.215C74.859 141.318 74.8963 141.419 74.9488 141.511C74.7649 141.859 74.7518 142.31 74.94 142.654C74.6204 142.993 74.5723 143.518 74.778 143.925C74.697 144.028 74.616 144.133 74.5416 144.245C74.4475 144.383 74.3993 144.556 74.3928 144.735C74.0753 145.423 74.3752 146.399 75.3166 146.299C75.5858 146.27 75.8485 146.228 76.1068 146.18C76.109 146.18 76.1134 146.18 76.1156 146.182C76.0828 146.213 76.0499 146.242 76.0193 146.272C74.9816 147.268 76.4943 148.685 77.567 147.82C78.2018 147.308 78.8629 146.787 79.5744 146.388C79.7495 146.36 79.9225 146.327 80.0998 146.285C80.3822 146.22 80.5814 146.075 80.7083 145.889C81.1615 145.747 81.6365 145.67 82.1422 145.688C83.552 145.738 83.5498 143.549 82.1422 143.499V143.494Z\",\n    fill: \"#684836\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.006 47.0112C69.7323 47.0068 69.4609 47.0025 69.1873 46.9981C69.1873 46.9959 69.1873 46.9937 69.1894 46.9915C69.6316 46.9193 70.0717 46.8427 70.5095 46.7551C71.523 46.5537 71.4771 45.365 70.8357 44.8527C70.9342 44.5463 70.8991 44.2026 70.7306 43.9268C70.7262 43.8567 70.7153 43.7866 70.6977 43.7166C70.8313 43.2 70.6167 42.598 69.96 42.4009C69.7586 42.3396 69.5572 42.2849 69.3536 42.2302C69.7389 41.6523 69.6667 40.8051 68.7866 40.6234C68.7253 40.6102 68.6641 40.6015 68.6049 40.5884C68.6728 40.1308 68.4889 39.6251 68.0642 39.4106C68.5677 39.1611 68.7232 38.5284 68.5437 38.0293C68.6225 37.8279 68.6465 37.6046 68.6159 37.3923C70.0235 37.3835 70.0257 35.1966 68.6159 35.2031C66.4727 35.2141 64.2639 35.3958 62.6506 36.9654C61.996 37.6024 62.4141 38.4737 63.0643 38.7429C62.5674 39.1961 62.4689 40.0542 63.0183 40.4504C62.8914 40.6803 62.8717 40.9627 62.9417 41.232C61.9895 41.5516 61.9413 42.784 62.7819 43.2153C62.4667 43.8611 62.7622 44.8002 63.6816 44.8068C63.802 44.96 63.9684 45.0782 64.1829 45.1439L63.4868 45.3628C62.8147 45.5752 62.5958 46.2822 62.7841 46.8295C62.6922 46.8624 62.6002 46.8952 62.5105 46.9302C61.4006 47.3527 61.4991 49.0602 62.8016 49.0799C63.0643 49.0843 63.327 49.0887 63.5897 49.0931C63.605 49.2463 63.6466 49.3995 63.7167 49.5418C62.5083 49.8198 62.5367 51.6193 63.8962 51.6981C65.4417 51.7879 66.9697 51.6434 68.4627 51.2778C68.8523 51.2428 69.242 51.2056 69.6316 51.1705C70.7393 51.0676 70.9736 49.6578 70.3103 49.1544C71.5384 48.9136 71.2056 47.0265 70.0082 47.0068L70.006 47.0112Z\",\n    fill: \"#684836\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M69.4236 28.6744C69.3207 28.6679 69.2178 28.6613 69.115 28.6547C69.4083 28.0681 69.2638 27.2668 68.4735 27.1289C66.5537 26.794 64.6864 26.9013 62.8453 27.5624C62.6965 27.6149 62.5695 27.6981 62.4601 27.7988C61.8909 27.7857 61.3239 27.7791 60.7547 27.7791C59.566 27.7791 59.2092 29.7515 60.4636 29.9288C60.4636 29.9288 60.4658 29.9288 60.468 29.9288C60.468 29.9726 60.4702 30.0142 60.4745 30.058C60.1878 30.6928 60.7219 31.6385 61.4968 31.6516C62.3615 31.667 63.2175 31.6144 64.0669 31.5006C64.8133 31.4984 65.5576 31.494 66.3041 31.4918C66.5865 31.4918 66.812 31.4021 66.9828 31.262C67.8978 31.1525 68.8085 31.008 69.717 30.8263C70.9866 30.5724 70.597 28.7511 69.4258 28.6766L69.4236 28.6744Z\",\n    fill: \"#684836\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M86.4903 44.8613C86.8406 44.5439 86.996 43.9988 86.753 43.4844C83.9378 37.5256 78.6949 31.4771 71.5365 31.9697C71.5693 31.3983 71.2212 30.8072 70.4835 30.8226C68.371 30.8598 66.2673 30.9911 64.1657 31.2166C64.0191 31.2319 63.8855 31.2779 63.7629 31.3458C62.4035 31.4596 61.0572 31.6522 59.7262 31.9324C59.1965 31.58 58.4193 31.6303 58.1719 32.3024C57.7385 32.4162 57.3051 32.5344 56.876 32.668C56.0813 32.9132 55.9172 33.9355 56.3397 34.4806C55.6764 34.717 55.0415 35.1242 54.5074 35.5248C52.9597 36.685 51.6528 38.0554 50.5013 39.6053C50.1861 40.03 50.2561 40.4481 50.5101 40.7458C49.3651 41.9104 48.5814 43.596 48.0517 44.9686C47.6861 45.9143 47.1038 47.2672 47.94 48.1275C48.7084 48.9178 49.8117 48.5872 50.6983 48.2129C52.4233 47.4861 53.9119 46.3412 55.0787 44.9336C55.8602 44.3797 56.5761 43.7296 57.189 43.005C58.1107 41.9148 59.4657 39.8154 59.7963 37.8934C60.0064 37.8343 60.1816 37.7248 60.337 37.5869C60.3961 37.5803 60.4574 37.5716 60.5209 37.5541C63.1325 36.8601 65.7879 36.4048 68.487 36.245C70.2799 36.1399 72.1516 36.0961 73.8985 36.5449C73.9139 36.5755 73.927 36.6084 73.9467 36.639C75.4791 39.0646 78.0381 40.2401 80.6279 41.2143C81.3349 41.9082 82.042 42.6 82.7929 43.2392C82.817 43.3027 82.8411 43.3662 82.8651 43.4318C82.6747 43.92 82.7579 44.5111 83.3051 44.765C83.3095 44.7672 83.3139 44.7694 83.3205 44.7716C83.662 45.6801 84.1458 46.455 85.3432 46.6455C86.313 46.7987 87.0026 45.9428 86.5801 45.0365C86.5516 44.9774 86.5188 44.9204 86.4881 44.8613H86.4903ZM54.8204 41.2865C54.8292 41.142 54.8335 40.9954 54.8335 40.8509C54.9518 40.667 55.0765 40.4765 55.2079 40.2905C55.0962 40.6298 54.9671 40.9625 54.8204 41.2865ZM56.6724 36.6806C56.714 36.6609 56.7578 36.6412 56.7994 36.6259C57.3357 36.4245 57.4539 36.3938 57.6115 36.8973C57.6312 36.9565 57.64 37.0221 57.6466 37.0922C57.4211 36.8185 57.0467 36.6762 56.6724 36.6828V36.6806Z\",\n    fill: \"#77767A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.9983 40.4553C71.8516 40.4224 71.705 40.3874 71.5583 40.3546C72.7338 40.1488 72.6178 38.2946 71.3175 38.1852L69.4896 38.0297C69.5553 38.0035 69.6231 37.9838 69.6888 37.9553C70.4265 37.6467 70.93 36.3726 69.9493 35.9545C69.8595 35.9151 69.7676 35.8822 69.6778 35.8494C69.5158 35.5648 69.2137 35.3722 68.7694 35.4094C68.5439 35.4291 68.3206 35.4532 68.0973 35.4794C66.8035 35.3525 65.5163 35.6524 64.4174 36.3857C64.3561 36.4098 64.297 36.4295 64.2357 36.4536C63.9336 36.574 63.7366 36.7841 63.6228 37.0249C63.5855 37.06 63.5461 37.0928 63.5111 37.13C63.4389 37.2023 63.382 37.2789 63.336 37.3555C63.3207 37.3555 63.3075 37.3555 63.2922 37.3555C62.9792 37.3774 62.6683 37.3993 62.3553 37.4234C60.9433 37.5241 60.952 39.4943 62.3553 39.6125C63.0405 39.6716 63.7235 39.7285 64.4086 39.7876C64.2751 40.348 64.5247 40.9916 65.1551 41.1339L66.519 41.4448C66.3854 41.5061 66.2541 41.5717 66.1249 41.6527C65.2843 42.1759 65.512 43.334 66.3854 43.6536L67.307 43.9907C66.6569 44.1089 66.0045 44.2271 65.3543 44.3453C64.4152 44.5161 64.3911 45.615 64.9275 46.1798C64.737 46.263 64.5487 46.3571 64.3627 46.4732C63.7957 46.8278 63.5987 47.7056 64.1416 48.1916C64.3758 48.4018 64.6144 48.601 64.8574 48.798C64.505 48.9403 64.1503 49.0826 63.7979 49.2249C62.7997 49.6277 62.7252 50.9565 63.7979 51.3352C65.0238 51.7686 66.2497 52.2043 67.4734 52.6377C68.8044 53.1084 69.3757 50.9937 68.0557 50.5274L67.1647 50.2122C67.2392 50.1815 67.3114 50.1531 67.3858 50.1224C68.2462 49.7765 68.4957 48.6623 67.6463 48.1216C67.4887 48.023 67.3355 47.9202 67.1844 47.8151C68.3403 47.6772 69.5947 47.8063 70.6892 47.5261C71.8691 47.2262 71.6065 45.777 70.6608 45.4399C71.0876 45.2057 71.4116 44.8532 71.5955 44.2994C71.7925 43.7061 71.3635 43.1479 70.8315 42.9531L70.7593 42.9268C71.2715 42.8327 71.7619 42.686 72.2588 42.4518C73.1104 42.0511 72.8761 40.6523 71.9983 40.4509V40.4553Z\",\n    fill: \"#6F4631\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    opacity: 0.65,\n    d: \"M59.3584 34.5773C59.2621 34.5335 59.2162 34.4481 59.2052 34.4065C59.0388 33.879 61.935 32.4122 64.6867 31.8299C69.3408 30.8448 73.5176 32.4101 75.5579 33.1763C78.4803 34.2708 80.2973 35.6346 80.1857 35.8076C80.155 35.8535 79.877 35.9761 79.877 35.9783C74.6012 33.1587 72.318 32.583 72.318 32.583C71.1008 32.2765 68.0383 31.5016 65.0151 32.2853C62.9486 32.8216 61.9153 33.0887 61.0047 33.7717C60.6522 34.0344 59.7656 34.7677 59.3584 34.5773Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M80.0133 44.3694L69.215 43.707L68.2812 58.93L79.0795 59.5923L80.0133 44.3694Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.4624 54.5498H65.6763V61.96H77.4624V54.5498Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.3736 46.2524H61.7769V54.2646H65.3736V46.2524Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    opacity: 0.65,\n    d: \"M80.7086 36.3968C80.5838 36.4909 80.8268 37.0338 81.0523 37.3666C81.2165 37.6117 81.5449 38.0036 81.6806 37.9379C81.7988 37.8788 81.7484 37.487 81.6237 37.1958C81.396 36.6682 80.84 36.2983 80.7108 36.3968H80.7086Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.0647 36.3607C57.7845 35.8616 57.0577 35.6514 56.5674 35.9689C56.5433 35.9842 56.5258 36.0017 56.5039 36.0192C56.3288 35.947 56.1383 35.9076 55.9501 35.9119C55.3656 35.9229 55.0131 36.2994 54.8051 36.8029C54.7044 37.0459 54.7482 37.3239 54.873 37.5647C54.8402 37.6413 54.8139 37.7267 54.7986 37.823C54.5249 39.4014 53.4764 40.5572 52.419 41.6934C51.4317 42.7529 52.8831 44.0883 53.9667 43.2411C54.7504 42.6303 55.4422 41.9451 56.0617 41.1702C56.3091 40.8593 56.3616 40.5113 56.2894 40.1982C56.4382 39.9093 56.5674 39.6094 56.6747 39.3007C56.8016 39.3576 56.9417 39.3904 57.1015 39.3904C57.4912 39.3904 57.848 39.1803 58.0472 38.8475C58.5047 38.0835 58.5004 37.1357 58.0669 36.3629L58.0647 36.3607Z\",\n    fill: \"#75777A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.6337 29.8381C72.4804 29.7461 72.2943 29.6914 72.0711 29.6914C71.7777 29.6914 71.5457 29.7877 71.3749 29.9388C71.0925 30.1424 70.9502 30.4839 70.9459 30.8254C70.9108 31.3967 71.2633 31.9943 72.001 31.9943C72.0601 31.9943 72.117 31.99 72.1696 31.9812C72.2112 31.9878 72.2528 31.9922 72.2987 31.9922C72.3797 32.0097 72.4651 32.0206 72.557 32.0206C73.9384 32.0206 73.9668 29.9147 72.6337 29.8359V29.8381Z\",\n    fill: \"#75777A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M69.5224 28.9045C69.3801 28.8147 69.2115 28.7534 69.0123 28.7359C68.6052 28.6987 68.2024 28.6877 67.7996 28.6987C67.6179 28.6768 67.434 28.668 67.2545 28.6899C67.1691 28.7009 67.0859 28.7184 67.0049 28.7425C66.8429 28.7556 66.6809 28.7731 66.5189 28.7906C65.9695 28.7994 65.4266 28.8388 64.9012 28.9439C64.7698 28.9701 64.6582 29.0139 64.5597 29.0686C64.54 29.0686 64.5203 29.0643 64.5006 29.0643C63.8832 29.0643 63.2878 29.1256 62.7515 29.362C62.6398 29.3226 62.515 29.3007 62.3771 29.3007C61.2563 29.3007 61.0265 30.6864 61.6898 31.2512C61.7686 31.3453 61.8649 31.4241 61.9809 31.4832C62.1517 31.6255 62.3771 31.7175 62.6617 31.7175C62.7843 31.7175 62.8938 31.6978 62.9945 31.6671C63.0098 31.6649 63.0251 31.6584 63.0404 31.654C63.0492 31.6518 63.0579 31.6496 63.0667 31.6452C63.1214 31.6299 63.1762 31.6102 63.2309 31.5883C64.5553 31.4241 65.814 31.0892 67.1166 30.9491C67.5106 30.96 67.9046 30.9819 68.2921 31.0016C68.5855 31.0345 68.8766 31.0432 69.1765 31.0345C69.7676 31.0191 70.2711 30.5419 70.2711 29.9399C70.2711 29.4758 69.9515 29.0446 69.5202 28.8979L69.5224 28.9045Z\",\n    fill: \"#6E4730\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.4498 35.0944C67.1079 35.1973 65.871 35.3352 64.6386 35.8431C63.3382 35.9525 63.3711 38.0278 64.7458 38.0278C64.8706 38.0278 64.9866 38.0103 65.0895 37.9775C65.1924 37.9599 65.2975 37.9293 65.4048 37.8789C66.3745 37.4214 67.3969 37.3645 68.4498 37.2857C69.8465 37.1784 69.8574 34.9893 68.4498 35.0966V35.0944Z\",\n    fill: \"#6E4730\"\n  }))), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.6246 39.4555C12.4938 45.5018 6.014 50.3879 4.72024 58.0432C7.29025 52.2771 13.3081 44.4663 18.3715 40.8762C16.9377 39.6591 17.6491 39.0592 16.6246 39.4555ZM16.6246 39.4555C17.2069 38.3259 17.7892 37.1963 18.3715 36.0667C19.1027 34.8649 20.8474 33.8535 20.5563 32.3496C20.46 31.8483 17.3711 28.7507 17.9359 22.7285C11.7626 20.8633 17.752 16.3647 20.3396 13.9808C20.0484 12.0478 20.5388 9.80831 21.4319 8.07673C21.3662 5.66214 20.0331 -0.176226 22.4148 2.06324C22.938 0.738822 23.7874 2.79002 24.3807 2.71997C24.7659 2.674 25.0374 0.333837 31.5894 2.50106C37.4978 -2.4135 38.704 7.90817 40.8734 11.5771C39.9321 16.5376 46.379 18.0678 45.024 20.9794C44.0279 23.1181 40.6764 22.1352 40.4378 22.5095C40.2911 23.8208 40.1466 25.1343 40 26.4456C41.5214 30.2087 43.3712 37.4371 36.8323 33.9892C35.4247 37.0146 36.0421 38.6105 32.3534 39.346C35.0745 43.0784 34.7811 48.8117 36.285 50.7163C37.1585 51.4452 38.032 52.1742 38.9054 52.9032C40.348 54.6764 40.6742 58.2993 44.2578 56.7298C44.3672 56.8392 44.4767 56.9487 44.5862 57.0581C43.8484 57.6404 45.0897 59.2538 45.3502 59.3545C51.3571 57.8593 57.364 56.3664 63.3709 54.8712C62.3267 49.8669 64.6012 50.3419 64.6822 50.0595C64.3911 49.6217 64.0999 49.1839 63.8088 48.7482C63.2264 46.1016 65.2076 46.5438 65.3368 46.3424C64.9361 42.9537 64.5355 39.5627 64.1349 36.174C58.1959 37.8136 53.3426 43.2908 50.8098 48.6388C49.4175 42.4086 56.6241 33.3632 62.6047 31.5812C63.7869 27.1855 67.9593 26.5879 69.1568 30.9245C78.7144 32.7984 83.4582 34.9459 85.4306 45.0289C84.9293 45.7667 83.4035 42.6756 80.9517 40.7646C78.1124 38.5514 72.1449 35.7011 68.5 35.2983C67.9462 38.987 68.6401 42.6625 69.0451 46.3424C72.771 44.1533 72.6637 46.9597 72.8673 47.1086C73.3401 47.2181 73.813 47.3275 74.288 47.437C74.4697 47.9842 74.6514 48.5293 74.8331 49.0766C75.3366 49.394 76.7771 48.028 76.0349 51.5919C79.6535 52.2355 77.1908 54.8471 77.1273 55.0901C76.2976 58.2556 76.6632 60.6132 70.4658 62.4149C71.0854 69.8863 71.7027 77.3578 72.3222 84.8292C73.9597 93.8286 74.8463 103.016 75.816 112.165V116.538C76.4706 121.131 77.1273 125.722 77.7819 130.315C78.1453 134.907 78.5108 139.498 78.8742 144.091C79.0209 144.31 79.1654 144.528 79.312 144.747C76.0546 148.309 76.7048 145.03 75.5993 141.904C73.3949 126.948 71.8713 111.941 70.7942 96.8562C69.5048 90.1575 68.8984 83.3318 68.3906 76.5193C66.9348 71.9528 66.9852 67.0339 66.2058 62.3054C57.1757 65.079 53.2594 73.2094 42.397 76.3004C43.8068 78.8332 46.1776 82.5022 43.9251 85.0481C43.7215 87.2876 45.267 90.3042 43.2705 91.39C42.7429 97.4144 45.6523 93.3886 47.0927 98.9336C51.0834 98.9533 54.6189 98.3448 57.0313 102.103C57.3706 106.545 57.2327 111.077 55.5033 115.225C55.477 120.788 53.6863 126.177 53.0996 131.626C52.9529 131.773 52.8085 131.917 52.6618 132.064C53.2441 134.397 53.8264 136.729 54.4087 139.062C54.759 141.799 53.7476 148.386 56.484 148.138C58.3119 147.972 59.3036 141.129 65.6586 142.453C67.8411 142.909 67.5368 146.245 68.0622 146.389C68.4847 146.505 69.0407 145.36 69.0451 147.155C69.0517 149.373 67.4164 148.591 67.2982 149.123C67.2544 149.318 69.1677 151.488 66.2058 151.748C65.6739 154.296 65.05 152.379 64.1306 152.733C63.3293 153.534 62.5281 154.338 61.7269 155.139C59.5334 156.472 55.2603 156.446 56.1578 160.06C49.2774 165.48 51.0572 162.621 49.932 161.919C49.7875 161.829 48.5003 162 46.8738 160.608C42.5984 156.945 46.6811 152.591 44.3629 148.033C45.0524 142.915 41.1646 133.616 43.9251 133.6C43.2683 128.706 44.9102 123.894 44.3629 118.949C44.5621 116.887 47.0423 109.522 45.3458 110.092C44.9999 110.208 44.6584 113.285 41.0858 115.886C39.7329 118.907 38.958 124.08 35.1883 124.415C34.6585 130.573 30.0702 139.377 29.5097 145.19C29.4375 150.001 29.3631 154.811 29.2908 159.622C29.4375 159.914 29.582 160.205 29.7287 160.498C27.6468 163.401 24.477 167.308 27.8723 170.229C28.8837 167.05 31.8915 165.697 34.8621 167.385C37.986 169.16 35.6349 172.753 35.845 173.398C35.9567 173.744 36.9462 173.744 36.7185 174.491C36.5762 174.957 29.3784 178.771 28.7457 180.067C28.4546 179.92 28.1634 179.775 27.8723 179.629C21.9573 179.802 24.7222 179.011 22.5199 175.802C21.3903 174.891 20.2629 173.981 19.1333 173.068C18.0848 172.926 17.6842 174.791 17.3864 174.817C15.6746 173.687 13.9649 172.558 12.253 171.428C13.2337 167.444 9.70922 161.882 16.8392 161.807C17.7126 159.692 18.5861 157.58 19.4595 155.465C19.3282 147.061 19.7945 138.528 21.8632 130.317C22.5177 128.277 23.1745 126.234 23.829 124.194C16.9026 122.418 20.5847 117.773 18.4766 115.993C17.4193 115.1 10.6484 114.428 8.10023 109.104C4.74213 102.086 7.00129 93.3908 4.71367 94.562C3.6016 95.1312 3.51404 97.8478 3.07621 91.6089C5.44921 91.6133 2.67123 87.9377 2.20276 86.1427C1.76493 82.9356 1.3293 79.7286 0.891479 76.5215C1.3293 72.2943 1.76493 68.0672 2.20276 63.8378C3.95843 58.3672 5.56523 52.8069 8.97368 48.0937C11.5218 45.215 14.0699 42.3363 16.6181 39.4555H16.6246ZM21.5392 2.06105C20.5672 2.3719 22.4433 4.46907 22.3032 4.79525L21.3203 4.46688C20.3023 5.03605 22.6928 6.62097 22.741 6.76326C22.949 7.38934 20.5869 7.04565 23.1788 8.07454C23.065 9.1275 25.6766 12.0062 26.3465 10.5898C26.5479 11.5793 27.0163 11.7282 26.8916 10.9182C25.5803 8.87794 24.2712 6.8355 22.9599 4.79525C22.8833 4.65295 22.3907 1.7896 21.5392 2.06105ZM22.8483 2.06105C23.0322 5.51765 25.2432 6.78953 25.797 7.63671C26.3136 8.42698 27.3907 12.363 28.7457 11.4633C28.4174 9.67697 28.0912 7.89065 27.7628 6.10653C26.8412 5.51328 26.9156 7.08506 26.561 7.09163C25.9371 7.10257 26.5304 2.58862 25.4686 6.21598C24.8666 6.19409 25.2913 4.12976 25.1403 3.70069C24.5339 1.97348 24.6236 5.11486 24.3763 5.12142C23.7458 4.4625 24.3872 2.66962 22.8483 2.06105ZM26.7821 16.9317C25.5759 17.2141 27.2944 18.0503 27.3272 18.1335C27.3513 18.1948 26.9244 19.3353 27.4367 19.3353C27.6271 19.3353 27.684 17.6607 28.529 19.9921C29.1661 18.3415 30.5167 20.4058 30.6043 20.7583C30.9918 22.3169 29.6214 24.7797 29.4025 24.8037C29.293 24.8147 28.9231 23.9325 28.0912 24.147C25.9765 28.3961 27.9927 22.8532 26.1254 22.3979C25.6876 22.4701 25.2519 22.5446 24.8141 22.6168C22.4455 24.0572 26.0269 28.7879 24.4857 27.5379C24.35 27.4285 23.8334 25.1255 22.8483 25.2416C22.3382 25.9705 21.8281 26.6995 21.3203 27.4285C21.1167 27.4285 20.2082 24.4973 20.3374 28.1947C17.5769 27.1045 21.4363 32.5729 21.4297 33.0063C21.4232 33.4945 19.2669 33.6893 21.4297 36.9424C24.0151 39.311 26.5982 41.6796 29.1836 44.0482C29.4375 42.4808 29.6936 40.9134 29.9476 39.346C29.1464 38.3981 28.3451 37.4502 27.5439 36.5024C29.0719 36.5221 29.0347 39.3241 32.6774 38.7987C34.3849 38.5535 35.057 37.5575 35.6261 36.0645C35.6086 35.4319 32.6402 34.9087 31.1472 31.5812C29.8841 34.0374 30.6109 30.5151 31.2567 30.1605C32.4169 29.5213 30.5977 31.1412 33.2225 33.6587C36.5981 36.8986 36.2084 33.1815 36.8258 33.1114C41.8432 37.019 41.8498 31.3142 39.3367 26.4412C40.1269 23.3064 39.6519 21.5792 39.1178 18.5691C38.6602 17.7592 30.6634 17.9168 29.3981 17.803C28.5246 17.5118 27.6512 17.2206 26.7777 16.9273L26.7821 16.9317ZM19.7923 34.8627C15.5826 40.318 18.5292 39.4817 19.6828 42.1875C20.2192 43.444 21.2152 49.5648 22.9599 52.4654H23.3977C28.0649 41.0272 31.4799 52.8463 32.2439 52.3559C31.4033 47.6406 28.4261 43.895 25.0352 40.5478C23.4218 38.9542 21.7143 38.9279 19.7923 34.8627ZM30.9305 39.2366C30.7488 39.346 30.5671 39.4555 30.3854 39.5649C30.5671 42.1612 28.3276 45.3639 31.0399 46.7802C31.0859 46.1344 31.5193 41.1148 32.4607 41.6424C32.2067 42.772 31.9506 43.9016 31.6967 45.0311C33.8464 46.2767 34.9935 49.4356 34.7549 46.9991C34.6279 45.6988 32.6971 38.7922 30.9327 39.2366H30.9305ZM19.1355 43.1726C5.33757 55.5695 1.30303 68.0496 3.2995 86.5805C5.10114 89.1811 8.56213 92.583 11.7101 93.2507C16.5568 94.2796 12.5354 91.5191 12.4741 90.5165C12.3734 88.8878 14.221 92.8632 15.6417 93.9053C16.7735 94.7349 21.1276 96.3505 22.4126 96.0922C24.1968 94.5248 25.9809 92.9574 27.765 91.39C28.7851 87.3817 29.8031 83.3712 30.8232 79.363C30.74 78.958 26.2852 75.7225 31.0421 76.7382C30.6634 73.842 32.8262 71.642 32.789 68.8662C34.1725 68.2839 35.5561 67.6994 36.9396 67.1171C33.3341 60.4994 33.4501 64.9915 31.9156 66.4604C31.6967 66.5326 31.4778 66.607 31.261 66.6793C35.4729 59.2779 31.758 64.8141 29.1858 67.0076C26.8916 68.6473 24.5996 70.2869 22.3054 71.9288C20.7949 74.293 23.8509 75.4007 25.0352 75.0986C25.8495 74.8906 28.1481 69.3347 28.4218 71.0531C28.4896 71.4866 25.0615 75.7947 26.1276 76.191C29.1113 77.3008 29.9541 71.9003 30.7138 72.2549C30.3613 74.7812 27.0251 79.028 25.2519 75.5342C23.2117 75.7137 20.8781 74.7396 21.4297 72.3644C21.699 71.1998 29.1048 66.5851 30.7138 65.0396C33.1678 62.6819 31.9506 60.7577 36.0661 64.4923C38.1064 69.0698 37.9181 65.9262 36.285 63.6167C34.0762 60.4972 31.7996 62.0121 31.0421 60.992C30.4992 59.7989 25.6087 50.9658 25.0352 50.8235C23.9866 50.563 23.7918 54.2626 22.9599 53.5577C22.0142 51.1519 21.0663 48.7461 20.1206 46.3424C19.882 45.6222 19.9061 43.1419 19.1377 43.1726H19.1355ZM71.3415 46.0162C69.0998 45.8805 67.9309 50.7907 68.7211 51.0468C69.0473 51.1519 73.8852 46.1717 71.3415 46.0162ZM64.5706 46.8897C63.1739 47.3122 65.2054 50.0639 65.1157 50.2784C61.3526 51.8152 64.9734 56.0993 65.1157 56.6203C65.8906 59.4355 62.7864 58.8641 60.6367 59.5734C56.2454 61.0204 51.8847 62.6097 47.3116 63.5094C40.8997 67.0755 33.9383 66.0094 35.5167 72.476C34.2601 70.6065 36.458 67.0448 33.9887 68.54C33.1305 69.0588 33.4589 70.6306 33.2247 71.2742C32.7868 72.2221 32.3512 73.17 31.9134 74.1179C30.7816 80.5889 37.6204 78.6471 40.7596 75.9764C51.4162 74.1004 56.6482 65.0987 65.2229 61.9814C65.2952 61.8348 65.3696 61.6903 65.4418 61.5436C72.2784 63.7218 67.9155 60.6417 67.736 59.4661C67.8455 58.6277 67.9549 57.7893 68.0644 56.9508C68.8678 56.3707 68.2154 58.6934 68.3928 59.4661C69.0845 60.3046 69.7763 61.143 70.468 61.9814C71.4728 62.1741 77.1164 59.1903 76.475 55.5301C70.2929 57.8681 72.0858 56.5327 71.1226 55.6396C71 55.5257 68.6554 55.3594 70.1397 53.3432C68.9313 53.295 68.3752 51.1256 68.0644 51.0468C67.215 50.8323 68.9138 54.0153 65.5535 50.7184C65.8008 49.8297 65.884 46.4935 64.5706 46.8919V46.8897ZM72.8695 47.5464C72.1142 47.7106 67.0092 53.8839 70.6848 52.577C71.8143 51.5197 72.9417 50.4623 74.0713 49.4072C74.3909 48.5184 73.8174 47.3428 72.8695 47.5486V47.5464ZM34.4265 48.4199C33.7873 48.8227 35.3985 51.0643 35.6283 51.5897C36.5018 53.7044 37.3752 55.8169 38.2487 57.9316C39.711 62.0887 39.3235 66.977 42.2898 65.2563C43.5923 64.5011 45.302 57.2902 43.9272 59.0239C43.3581 59.7442 42.3204 64.1377 41.7425 63.1789C41.3857 62.5856 46.1952 55.5082 42.0709 57.6032C41.4886 58.5511 40.9063 59.499 40.324 60.4469C39.6782 60.0528 41.4711 58.0257 41.3069 57.277C41.2193 56.8764 37.2767 51.165 36.0639 51.1541C35.7159 50.0333 35.289 49.2101 34.4265 48.4199ZM75.492 49.5144C74.2486 49.6436 70.1397 53.4154 70.1397 54.2166C70.1397 54.7245 71.0197 55.4119 71.7771 54.9828C72.0814 54.8099 77.02 50.4733 75.4899 49.5166L75.492 49.5144ZM75.9277 52.1392C74.1961 52.3296 68.3096 59.0809 75.4899 55.1996C78.8501 53.3848 77.1536 52.0035 75.9277 52.1392ZM32.8963 54.1072C32.9335 54.6545 32.9685 55.1996 33.0058 55.7468C32.9576 55.8979 30.0373 57.1895 33.1152 56.7319C33.194 59.8492 34.0697 57.01 34.2076 56.9508C34.2798 56.9202 35.44 57.5901 35.6283 56.8414C35.7597 56.3204 34.2426 56.7363 34.8643 54.545C33.6275 55.1076 33.3735 53.7591 32.8985 54.1072H32.8963ZM63.0404 55.1996C57.1429 56.7297 51.2454 58.2599 45.348 59.7923C44.7197 60.1645 42.9947 64.7266 44.0367 64.604C45.2013 64.0939 46.3659 63.5839 47.5305 63.0738C53.0646 61.5436 58.5987 60.0134 64.1306 58.481C65.617 57.9797 64.286 55.1317 63.0382 55.2017L63.0404 55.1996ZM42.0709 76.6288C41.1624 78.5705 43.3734 81.7863 43.8178 84.2819C45.4136 81.5784 43.2355 79.0631 42.0709 76.6288ZM39.4505 77.5044C34.884 79.028 38.6799 82.6795 37.7036 88.6558C39.3104 88.4412 40.3896 87.3751 41.7447 86.5783C41.6812 85.4224 39.9168 77.5723 39.4505 77.5022V77.5044ZM36.3923 78.8157C34.8446 78.8179 33.7501 79.4812 32.3512 80.0175C32.9335 83.6339 33.1196 87.2 33.1152 90.8427C40.1707 91.1229 36.0836 82.8831 36.9374 78.9252C36.7557 78.8879 36.574 78.8529 36.3923 78.8157ZM41.852 87.1256C40.0941 88.6032 38.1896 88.9206 37.4825 89.3125C37.0447 89.8226 36.609 90.3326 36.1712 90.8427C35.3569 91.2805 32.3096 91.2039 32.5679 92.0445C35.5079 94.2358 38.9492 94.6058 42.5065 94.9976C42.7867 93.9118 42.8393 87.3204 41.852 87.1256ZM5.15587 89.5314C5.70096 91.7555 6.24824 93.9775 6.79333 96.2016C5.96584 100.685 7.27055 104.971 8.75915 109.104C12.358 115.672 27.082 117.561 34.0981 117.414C33.3429 115.367 32.6292 113.213 32.8963 110.963C30.5737 111.188 20.0068 109.419 18.6977 108.995C13.8532 107.419 11.4233 98.2112 11.3795 93.5791C7.04507 92.2547 5.51926 89.3979 5.15368 89.5336L5.15587 89.5314ZM27.4367 92.3751C25.9087 93.7608 24.3785 95.1443 22.8505 96.53C20.3965 97.2612 15.4031 94.1132 14.9872 94.1242C13.503 94.1636 17.0187 98.5527 17.6075 99.1547C22.5812 104.218 27.1214 104.144 33.7719 103.748C35.2189 100.521 38.0539 98.0098 39.9978 95.3282C39.8621 94.956 33.9142 94.3321 32.6796 92.594C32.4826 94.1876 30.937 95.8689 29.4025 96.0922C25.7598 96.6263 28.7457 92.3181 27.4367 92.3751ZM29.6214 92.8107C27.9336 93.0427 26.7186 96.3549 29.8403 95.4354C31.9659 94.8094 32.0404 92.478 29.6214 92.8107ZM41.1974 97.6224C39.109 100.475 36.8104 103.237 35.845 106.698C37.4431 107.729 40.7399 108.712 42.7254 109.214C42.9246 109.264 46.2608 109.222 46.5476 110.199C45.8931 113.478 45.2363 116.76 44.5818 120.039C45.5056 122.71 43.4369 131.899 44.144 133.16C44.3979 133.123 44.654 133.088 44.908 133.051C45.3129 133.268 44.6518 134.102 46.2192 133.051C48.2201 134.089 52.2918 133.625 52.8807 130.536C54.4919 124.275 54.3146 117.605 56.3745 111.51C58.8023 96.6394 52.1933 100.166 47.0905 99.3737C45.1247 98.7914 43.1589 98.2069 41.193 97.6246L41.1974 97.6224ZM19.963 104.082C19.8645 104.325 19.7682 104.571 19.6697 104.814C17.52 104.42 19.2559 105.381 19.3041 105.473L19.523 106.569C19.6697 106.374 19.8164 106.18 19.9608 105.985C20.0769 105.994 20.6767 107.388 20.5453 105.691C22.6119 106.541 20.5607 105.481 20.9109 104.595C19.639 105.247 20.6132 103.894 19.9608 104.082H19.963ZM19.1355 116.21C19.442 119.632 22.1259 117.13 20.8825 116.648C20.3001 116.501 19.7178 116.357 19.1355 116.21ZM40.324 116.21C33.2115 120.133 29.3127 115.847 39.0127 120.146C39.2272 119.146 41.042 116.169 40.324 116.21ZM24.8163 119.708C25.5015 123.793 23.9385 124.586 23.1788 127.252C21.3071 133.819 19.6565 141.433 20.1206 148.246C21.9617 150.82 21.3903 149.454 21.977 149.666C22.1237 149.885 22.2682 150.104 22.4148 150.323C22.614 150.4 23.3255 149.502 23.9428 150.98C24.5251 150.908 25.1074 150.833 25.6897 150.761C26.7821 151.052 27.8745 151.343 28.9668 151.637C29.0041 149.778 29.0391 147.919 29.0763 146.061C29.6849 139.581 32.9598 133.058 34.1003 128.568C34.7527 125.995 35.2518 122.351 33.5552 120.367C30.6437 120.148 27.73 119.929 24.8185 119.711L24.8163 119.708ZM52.3378 132.83C52.1649 133.504 52.502 135.623 51.7927 134.47C51.2542 133.596 51.5979 131.545 51.0287 135.236C50.5208 135.244 50.5734 131.996 49.7174 135.017C49.4263 134.653 49.1351 134.288 48.844 133.924C47.4583 137.922 48.4434 131.656 46.6592 135.236C45.5253 130.86 46.7227 138.587 44.9123 133.924C44.6212 134.362 44.33 134.8 44.0389 135.236C43.8616 135.247 42.9093 132.243 43.2749 136.438C43.4938 137.458 43.7127 138.478 43.9294 139.498C46.7643 138.379 50.2844 137.096 53.2135 136.983C53.4061 136.886 52.8238 133.228 52.34 132.828L52.3378 132.83ZM51.9 137.639C50.372 138.003 48.8418 138.368 47.3138 138.732C43.2158 140.03 43.9557 140.496 44.9102 144.636C46.4053 144.511 53.6381 141.921 53.9753 140.809C54.2883 139.774 54.0256 137.469 51.9 137.639ZM20.2279 149.012C20.0812 150.47 19.9368 151.928 19.7901 153.386C22.7147 154.763 25.8474 155.892 29.0741 156.12C29.2865 154.025 28.6976 149.69 27.4367 153.605C26.6311 153.611 27.6337 151.074 26.6727 151.527C26.6267 154.163 26.5107 153.46 25.9087 151.418C25.2716 151.376 24.9236 155.321 24.5974 151.418C24.234 151.855 23.8684 152.293 23.505 152.729C22.984 147.359 22.7169 154.953 21.7581 150.323C20.3549 152.924 20.8759 150.065 20.2301 149.012H20.2279ZM19.7923 153.821C18.5007 156.963 26.5216 160.776 28.3101 160.163C29.096 159.894 29.0106 156.75 28.7479 156.665C25.97 156.481 22.0952 155.389 19.7923 153.821Z\",\n    stroke: \"black\",\n    strokeWidth: 1.34,\n    strokeMiterlimit: 10\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21.5394 2.0609C22.3909 1.78726 22.8813 4.65062 22.9601 4.7951C24.2714 6.83535 25.5805 8.8778 26.8917 10.918C27.0165 11.728 26.5459 11.5792 26.3466 10.5897C25.6768 12.006 23.0652 9.12954 23.179 8.07439C20.5871 7.04551 22.9513 7.3892 22.7412 6.76311C22.693 6.62082 20.3025 5.0359 21.3204 4.46673L22.3034 4.7951C22.4435 4.46892 20.5674 2.37394 21.5394 2.0609Z\",\n    fill: \"white\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22.8485 2.06006C24.3896 2.67082 23.746 4.4637 24.3765 5.12044C24.6239 5.11168 24.5341 1.97249 25.1405 3.6997C25.2916 4.12658 24.8647 6.1931 25.4689 6.21499C26.5306 2.58763 25.9373 7.09939 26.5612 7.09064C26.9137 7.08407 26.8415 5.51229 27.7631 6.10554C28.0914 7.89185 28.4176 9.67817 28.746 11.4623C27.3887 12.362 26.3139 8.426 25.7972 7.63573C25.2434 6.78635 23.0324 5.51448 22.8485 2.06006Z\",\n    fill: \"white\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.1357 116.21C19.718 116.357 20.3003 116.502 20.8827 116.648C22.1261 117.13 19.4422 119.632 19.1357 116.21Z\",\n    fill: \"white\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.3239 116.211C41.0442 116.169 39.2272 119.146 39.0127 120.147C29.3127 115.847 33.2115 120.134 40.3239 116.211Z\",\n    fill: \"white\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M26.7825 16.9307C27.656 17.2218 28.5294 17.513 29.4029 17.8063C30.6704 17.9201 38.665 17.7603 39.1225 18.5725C39.6567 21.5825 40.1295 23.3097 39.3415 26.4445C41.8546 31.3175 41.8458 37.0223 36.8305 33.1148C36.2132 33.1848 36.6007 36.9019 33.2273 33.662C30.6025 31.1424 32.4217 29.5246 31.2614 30.1638C30.6156 30.5185 29.8889 34.0408 31.152 31.5846C32.645 34.912 35.6134 35.433 35.6309 36.0679C35.0617 37.5587 34.3897 38.5547 32.6822 38.8021C29.0395 39.3275 29.0767 36.5276 27.5487 36.5057C28.3499 37.4536 29.1511 38.4015 29.9523 39.3494C29.6984 40.9168 29.4423 42.4842 29.1883 44.0516C26.603 41.683 24.0199 39.3143 21.4345 36.9457C19.2717 33.6927 21.4279 33.4979 21.4345 33.0097C21.4411 32.5762 17.5817 27.1078 20.3421 28.198C20.213 24.5028 21.1215 27.4318 21.3251 27.4318C21.8351 26.7029 22.3452 25.9739 22.8531 25.2449C23.8382 25.1289 24.357 27.4318 24.4905 27.5413C26.0295 28.7913 22.4503 24.0606 24.8189 22.6202C25.2567 22.5479 25.6923 22.4735 26.1302 22.4013C27.9975 22.8588 25.9813 28.3994 28.096 24.1504C28.9257 23.9336 29.2956 24.818 29.4073 24.8071C29.6262 24.783 30.9966 22.3203 30.6091 20.7616C30.5215 20.4092 29.1708 18.3448 28.5338 19.9954C27.6888 17.664 27.6319 19.3387 27.4414 19.3387C26.9292 19.3387 27.3561 18.1982 27.332 18.1369C27.2991 18.0537 25.5785 17.2174 26.7869 16.935L26.7825 16.9307ZM35.7382 19.991C35.0464 20.8295 34.3547 21.6679 33.6629 22.5063C32.4129 28.001 39.1444 28.8394 38.0324 22.7252C40.6199 20.4639 33.8249 24.494 34.1007 22.5063C34.2649 21.3286 36.465 19.4832 37.8134 20.5383C38.0127 19.9757 36.1038 19.8838 35.7382 19.991ZM25.2523 23.7103C25.0838 24.945 25.2304 27.9747 26.0163 25.35C25.7624 24.8027 25.5063 24.2576 25.2523 23.7103Z\",\n    fill: \"#FAAD81\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.7382 19.9915C36.1038 19.8843 38.0127 19.974 37.8134 20.5388C36.465 19.4836 34.2627 21.3291 34.1007 22.5068C33.8249 24.4945 40.6199 20.4644 38.0324 22.7257C39.1466 28.8399 32.4151 28.0015 33.6629 22.5068C34.3547 21.6684 35.0464 20.83 35.7382 19.9915ZM36.8283 23.0541C36.2088 23.227 36.5065 25.1272 34.3174 25.5694C37.0779 28.9165 39.2517 22.3777 36.8283 23.0541Z\",\n    fill: \"black\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.8278 23.0544C39.2512 22.3779 37.0752 28.9168 34.3169 25.5697C36.506 25.1275 36.2083 23.2273 36.8278 23.0544Z\",\n    fill: \"white\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.2519 23.7104C25.5058 24.2577 25.7619 24.8028 26.0159 25.3501C25.23 27.9748 25.0833 24.9451 25.2519 23.7104Z\",\n    fill: \"#AD8671\",\n    stroke: \"black\",\n    strokeMiterlimit: 10\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.3417 46.0145C73.8855 46.1699 69.0476 51.1501 68.7214 51.0451C67.9311 50.7889 69.1001 45.8788 71.3417 46.0145Z\",\n    fill: \"#FAAD81\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.5709 46.889C65.8844 46.4928 65.8012 49.8268 65.5539 50.7156C68.9163 54.0102 67.2176 50.8294 68.0648 51.0439C68.3756 51.1227 68.9317 53.2922 70.14 53.3403C68.6558 55.3543 71.0004 55.5229 71.123 55.6367C72.0862 56.5299 70.2933 57.8652 76.4753 55.5272C77.1167 59.1852 71.4732 62.1712 70.4684 61.9786C69.7767 61.1401 69.0849 60.3017 68.3931 59.4633C68.218 58.6927 68.8704 56.3701 68.0648 56.948C67.9553 57.7864 67.8459 58.6248 67.7364 59.4633C67.9159 60.6388 72.2788 63.7189 65.4422 61.5407C65.37 61.6874 65.2955 61.8319 65.2233 61.9786C56.6485 65.0958 51.4144 74.0975 40.76 75.9735C37.6208 78.6443 30.782 80.586 31.9138 74.115C32.3516 73.1671 32.7872 72.2192 33.225 71.2713C33.4593 70.6277 33.1309 69.0581 33.989 68.5371C36.4584 67.042 34.2627 70.6037 35.517 72.4732C33.9387 66.0065 40.9001 67.0748 47.312 63.5066C51.885 62.6068 56.2457 61.0175 60.6371 59.5705C62.7868 58.8634 65.891 59.4348 65.116 56.6174C64.9737 56.0964 61.3529 51.8123 65.116 50.2756C65.2058 50.0588 63.1743 47.3071 64.5709 46.8868V46.889Z\",\n    fill: \"#FAAD81\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.8696 47.5448C73.8175 47.3412 74.391 48.5146 74.0714 49.4033C72.9418 50.4607 71.8145 51.518 70.6849 52.5732C67.0094 53.8801 72.1122 47.7068 72.8696 47.5426V47.5448Z\",\n    fill: \"#FAAD81\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.4922 49.5139C77.0223 50.4706 72.0837 54.8072 71.7794 54.9801C71.022 55.4114 70.142 54.7218 70.142 54.2139C70.142 53.4127 74.2509 49.6409 75.4944 49.5117L75.4922 49.5139Z\",\n    fill: \"#FAAD81\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.9279 52.1381C77.156 52.0024 78.8503 53.3837 75.49 55.1985C68.3098 59.0798 74.1963 52.3286 75.9279 52.1381Z\",\n    fill: \"#FAAD81\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.0404 55.199C64.2882 55.1289 65.6192 57.9791 64.1328 58.4783C58.5987 60.0084 53.0647 61.5386 47.5328 63.071C46.3682 63.5811 45.2036 64.0911 44.0389 64.6012C42.9969 64.726 44.7219 60.1617 45.3502 59.7895C51.2477 58.2593 57.1452 56.7292 63.0426 55.1968L63.0404 55.199Z\",\n    fill: \"#FAAD81\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.1975 97.6213C43.1633 98.2036 45.1291 98.7881 47.095 99.3704C52.1978 100.163 58.8045 96.6362 56.379 111.507C54.3168 117.601 54.4942 124.269 52.8852 130.532C52.2963 133.621 48.2245 134.085 46.2237 133.048C44.6563 134.099 45.3174 133.264 44.9124 133.048C44.6585 133.085 44.4024 133.12 44.1484 133.157C43.4391 131.896 45.51 122.706 44.5862 120.036C45.2408 116.756 45.8975 113.475 46.5521 110.196C46.2653 109.221 42.9291 109.261 42.7299 109.21C40.7443 108.709 37.4475 107.726 35.8495 106.695C36.8127 103.236 39.1135 100.474 41.2019 97.6191L41.1975 97.6213Z\",\n    fill: \"#FAAD81\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.8164 119.707C27.7279 119.926 30.6416 120.145 33.5531 120.364C35.2497 122.347 34.7527 125.992 34.0982 128.564C32.9577 133.056 29.6828 139.58 29.0742 146.057C29.037 147.916 29.0019 149.774 28.9647 151.633C27.8724 151.342 26.78 151.05 25.6876 150.757C25.1053 150.829 24.523 150.904 23.9407 150.976C23.3212 149.498 22.6119 150.396 22.4127 150.319C22.266 150.1 22.1216 149.882 21.9749 149.663C21.386 149.45 21.9596 150.816 20.1185 148.242C19.6544 141.432 21.305 133.816 23.1767 127.248C23.9363 124.582 25.4994 123.787 24.8142 119.705L24.8164 119.707Z\",\n    fill: \"#FAAD81\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.3384 132.83C52.8222 133.231 53.4045 136.889 53.2118 136.985C50.2828 137.099 46.7627 138.382 43.9278 139.5C43.7089 138.48 43.49 137.46 43.2733 136.44C42.9077 132.243 43.86 135.247 44.0373 135.238C44.3284 134.8 44.6196 134.362 44.9107 133.927C46.7211 138.592 45.5237 130.864 46.6576 135.238C48.4418 131.659 47.4567 137.924 48.8424 133.927C49.1335 134.29 49.4247 134.656 49.7158 135.019C50.5718 131.998 50.5192 135.247 51.0271 135.238C51.5963 131.549 51.2526 133.598 51.7911 134.472C52.5026 135.626 52.1633 133.507 52.3362 132.832L52.3384 132.83Z\",\n    fill: \"white\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M51.9005 137.639C54.0262 137.469 54.2889 139.776 53.9758 140.809C53.6387 141.921 46.4059 144.513 44.9107 144.636C43.9563 140.496 43.2163 140.03 47.3144 138.732C48.8424 138.368 50.3725 138.003 51.9005 137.639Z\",\n    fill: \"white\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.2283 149.011C20.8763 150.064 20.3553 152.925 21.7563 150.322C22.7174 154.952 22.9822 147.358 23.5033 152.728C23.8666 152.29 24.2322 151.852 24.5956 151.417C24.9196 155.32 25.2699 151.375 25.9069 151.417C26.5089 153.459 26.6271 154.162 26.6709 151.526C27.6319 151.073 26.6315 153.61 27.4349 153.604C28.6958 149.689 29.2847 154.024 29.0724 156.119C25.8456 155.891 22.713 154.764 19.7883 153.385C19.935 151.927 20.0795 150.469 20.2262 149.011H20.2283Z\",\n    fill: \"white\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.7928 153.822C22.0957 155.39 25.9705 156.482 28.7484 156.666C29.0133 156.751 29.0965 159.895 28.3106 160.164C26.5199 160.777 18.5012 156.964 19.7928 153.822Z\",\n    fill: \"white\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.7927 34.8599C21.7148 38.925 23.4223 38.9513 25.0357 40.545C28.4244 43.8943 31.4038 47.6399 32.2444 52.3531C31.4804 52.8434 28.0654 41.0244 23.3982 52.4625H22.9604C21.2157 49.5619 20.2196 43.4412 19.6833 42.1846C18.5274 39.4789 15.5831 40.3129 19.7927 34.8599Z\",\n    fill: \"#AFAFAF\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M16.6255 39.4523C17.65 39.0583 16.9385 39.6581 18.3724 40.8731C13.309 44.4632 7.29109 52.274 4.72107 58.0401C6.01483 50.3848 12.4946 45.4987 16.6255 39.4523Z\",\n    fill: \"#ADAFAD\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M30.931 39.2339C32.6955 38.7895 34.6263 45.6962 34.7532 46.9965C34.994 49.433 33.8448 46.2741 31.695 45.0285C31.949 43.8989 32.2051 42.7693 32.459 41.6397C31.5199 41.1143 31.0865 46.134 31.0383 46.7776C28.326 45.359 30.5633 42.1586 30.3838 39.5623C30.5655 39.4528 30.7472 39.3434 30.9289 39.2339H30.931Z\",\n    fill: \"#AEAEAE\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.136 43.1702C19.9044 43.1396 19.8803 45.6198 20.1189 46.34C21.0646 48.7459 22.0125 51.1517 22.9582 53.5553C23.7901 54.2624 23.9849 50.5606 25.0335 50.8212C25.607 50.9634 30.4975 59.7965 31.0404 60.9896C31.7979 62.0097 34.0745 60.4927 36.2833 63.6143C37.9164 65.9216 38.1047 69.0652 36.0644 64.49C31.9489 60.7553 33.1682 62.6774 30.7121 65.0372C29.1031 66.5828 21.6995 71.1974 21.428 72.362C20.8764 74.7372 23.21 75.7114 25.2502 75.5319C27.0212 79.0257 30.3574 74.7766 30.7121 72.2526C29.9502 71.8979 29.1074 77.2985 26.1259 76.1886C25.0576 75.7924 28.4879 71.4842 28.4201 71.0507C28.1486 69.3323 25.8479 74.8882 25.0335 75.0962C23.847 75.3983 20.7932 74.2884 22.3037 71.9264C24.5979 70.2867 26.8899 68.6471 29.1841 67.0053C31.7563 64.8118 35.469 59.2755 31.2593 66.6769C31.4782 66.6047 31.6972 66.5302 31.9139 66.458C33.4484 64.9869 33.3302 60.497 36.9379 67.1147C35.5544 67.697 34.1709 68.2815 32.7873 68.8638C32.8246 71.6396 30.6595 73.8419 31.0404 76.7359C26.2857 75.7179 30.7405 78.9556 30.8215 79.3606C29.8014 83.3689 28.7835 87.3793 27.7633 91.3876C25.9792 92.955 24.1951 94.5224 22.4109 96.0898C21.1237 96.3481 16.7718 94.7326 15.64 93.9029C14.2193 92.8609 12.3717 88.8854 12.4724 90.5141C12.5337 91.5168 16.5551 94.2772 11.7084 93.2483C8.56262 92.5807 5.09944 89.1788 3.2978 86.5781C1.30352 68.0495 5.33586 55.5693 19.1338 43.1702H19.136ZM15.8611 56.2896C15.8983 57.7847 15.9334 59.2777 15.9706 60.7729C12.0805 58.7851 13.8296 60.6962 16.1895 61.6485C17.4001 65.1073 20.3072 67.824 21.9775 71.1602C22.4547 71.1733 21.7673 69.8708 21.2135 68.8638C19.7577 66.8236 18.302 64.7811 16.844 62.7409C16.5157 60.5912 16.1895 58.4393 15.8611 56.2896Z\",\n    fill: \"#AFAFAF\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.4267 48.4165C35.2914 49.2046 35.7161 50.0299 36.0642 51.1507C37.2748 51.1617 41.2196 56.873 41.3071 57.2737C41.4713 58.0245 39.6784 60.0516 40.3242 60.4435C40.9065 59.4956 41.4888 58.5477 42.0711 57.5998C46.1954 55.5048 41.3859 62.5844 41.7428 63.1755C42.3207 64.1343 43.3561 59.7408 43.9275 59.0206C45.3001 57.2868 43.5926 64.4977 42.29 65.253C39.3238 66.9736 39.7113 62.0853 38.2489 57.9282C37.3755 55.8135 36.502 53.701 35.6286 51.5863C35.3987 51.061 33.7897 48.8193 34.4267 48.4165Z\",\n    fill: \"#ABAFAD\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32.8963 54.1033C33.3713 53.7552 33.6253 55.1015 34.8621 54.5411C34.2404 56.7324 35.7575 56.3165 35.6261 56.8375C35.4379 57.5862 34.2798 56.9163 34.2054 56.9469C34.0675 57.006 33.1918 59.8453 33.113 56.728C30.0351 57.1855 32.9554 55.894 33.0036 55.7429C32.9664 55.1956 32.9313 54.6506 32.8941 54.1033H32.8963Z\",\n    fill: \"#AA993E\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M15.8608 56.2896C16.1892 58.4393 16.5154 60.5912 16.8437 62.7409C18.2995 64.7811 19.7553 66.8236 21.2132 68.8638C21.7692 69.8708 22.4544 71.1711 21.9772 71.1602C20.3069 67.8218 17.3998 65.1073 16.1892 61.6485C13.8293 60.6984 12.0802 58.7851 15.9703 60.7728C15.9331 59.2777 15.898 57.7847 15.8608 56.2896Z\",\n    fill: \"black\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.0712 76.626C43.238 79.0625 45.4139 81.5756 43.8181 84.2791C43.3737 81.7835 41.1627 78.5677 42.0712 76.626Z\",\n    fill: \"#AFAFAF\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.451 77.5015C39.9173 77.5693 41.6817 85.4195 41.7452 86.5775C40.3901 87.3744 39.3131 88.4405 37.7041 88.655C38.6804 82.6765 34.8867 79.0251 39.451 77.5036V77.5015Z\",\n    fill: \"#AFAFAF\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.3932 78.812C36.5748 78.8492 36.7565 78.8843 36.9382 78.9215C36.0845 82.8794 40.1716 91.1192 33.1161 90.839C33.1204 87.1963 32.9322 83.6324 32.3521 80.0138C33.7509 79.4753 34.8455 78.8142 36.3932 78.812Z\",\n    fill: \"#AFAFAF\"\n  })), _path35 || (_path35 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.8518 87.1221C42.8412 87.3169 42.7865 93.9083 42.5063 94.9941C38.949 94.6023 35.5077 94.2345 32.5677 92.041C32.3116 91.2004 35.3588 91.2748 36.171 90.8392C36.6088 90.3291 37.0445 89.8191 37.4823 89.309C38.1872 88.9171 40.0939 88.6019 41.8518 87.1221Z\",\n    fill: \"#777777\"\n  })), _path36 || (_path36 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M5.15649 89.5291C5.51989 89.3934 7.04789 92.2501 11.3823 93.5746C11.4261 98.2067 13.856 107.416 18.7005 108.99C20.0074 109.415 30.5743 111.184 32.8991 110.958C32.6299 113.209 33.3457 115.363 34.1009 117.41C27.087 117.558 12.3631 115.667 8.76196 109.1C7.27337 104.967 5.96865 100.68 6.79614 96.1971C6.25105 93.973 5.70377 91.751 5.15868 89.5269L5.15649 89.5291Z\",\n    fill: \"#777777\"\n  })), _path37 || (_path37 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M27.437 92.3731C28.7461 92.3162 25.7601 96.6244 29.4028 96.0902C30.9352 95.8648 32.4829 94.1857 32.6799 92.592C33.9124 94.3302 39.8624 94.9519 39.9981 95.3262C38.0542 98.0079 35.2193 100.519 33.7723 103.746C27.1218 104.142 22.5815 104.216 17.6079 99.1528C17.0168 98.5508 13.5011 94.1616 14.9875 94.1222C15.4034 94.1113 20.3968 97.2592 22.8508 96.5281C24.3788 95.1423 25.909 93.7588 27.437 92.3731Z\",\n    fill: \"#777777\"\n  })), _path38 || (_path38 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.622 92.8072C32.041 92.4745 31.9665 94.8059 29.8409 95.432C26.7192 96.3514 27.9342 93.0415 29.622 92.8072Z\",\n    fill: \"white\"\n  })), _path39 || (_path39 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.9743 104.281C20.5193 104.123 19.705 105.255 20.7689 104.71C20.4777 105.454 22.194 106.339 20.4624 105.629C20.5719 107.048 20.0706 105.881 19.9743 105.875C19.8517 106.039 19.7291 106.201 19.6065 106.365L19.4226 105.445C19.3832 105.369 17.9296 104.563 19.7291 104.894C19.8101 104.69 19.8911 104.487 19.9743 104.281Z\",\n    fill: \"white\"\n  })), _path40 || (_path40 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.9109 166.48L44.3606 158.988L37.6474 162.345L43.9109 166.48Z\",\n    fill: \"#E80A0D\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgYodelyGuy);\nexport default __webpack_public_path__ + \"static/media/YodelyGuy.a2165e810afc3a3e7ea772959d97c10e.svg\";\nexport { ForwardRef as ReactComponent };","export const START_POSITION_X = 0;\nexport const START_POSITION_Y = 0;\nexport const MAX_MOVES = 25;\n\nexport const stepXCoefficient: Record<number, { x: number, y: number }> = {\n  1000: { x: 0.775, y: 0.212 },\n  1200: { x: 0.885, y: 0.2415 },\n  1300: { x: 0.940, y: 0.2565 },\n  1400: { x: 0.995, y: 0.271 },\n  1500: { x: 1.1, y: 0.30 },\n  1600: { x: 1.14, y: 0.3115 },\n  1700: { x: 1.23, y: 0.336 },\n  1800: { x: 1.28, y: 0.349 },\n  1900: { x: 1.38, y: 0.377 },\n  2000: { x: 1.42, y: 0.3875 },\n  2100: { x: 1.52, y: 0.4148 },\n  2200: { x: 1.59, y: 0.4335 },\n  2300: { x: 1.65, y: 0.45 },\n  2400: { x: 1.70, y: 0.463 },\n  2500: { x: 1.77, y: 0.482 },\n  2600: { x: 1.81, y: 0.493 },\n  2700: { x: 1.85, y: 0.505 },\n  2800: { x: 1.92, y: 0.5235 },\n  2900: { x: 1.99, y: 0.543 },\n  3000: { x: 2.10, y: 0.573 },\n  3100: { x: 2.14, y: 0.584 },\n  3200: { x: 2.21, y: 0.602 },\n  3300: { x: 2.29, y: 0.626 },\n  3400: { x: 2.35, y: 0.641 },\n  3500: { x: 2.41, y: 0.658 },\n  3600: { x: 2.47, y: 0.675 },\n}\n\nexport const getStepXCoefficient = (width: number): { x: number, y: number } => {\n  const keys = Object.keys(stepXCoefficient).map(Number);\n  const validKeys = keys.filter(key => key <= width);\n\n  if (validKeys.length === 0) {\n    return { x: 2, y: 0.94 };\n  }\n\n  const closestKey = Math.max(...validKeys);\n  return stepXCoefficient[closestKey];\n};","import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport {\n  MAX_MOVES,\n  START_POSITION_X,\n  START_POSITION_Y,\n} from '../components/GameScreen/constants';\n\ninterface GameContextProps {\n  remainingMoves: number;\n  setRemainingMoves: React.Dispatch<React.SetStateAction<number>>;\n\n  positionX: number;\n  setPositionX: React.Dispatch<React.SetStateAction<number>>;\n\n  positionY: number;\n  setPositionY: React.Dispatch<React.SetStateAction<number>>;\n\n  savedPositionX: number | null;\n  setSavesPositionX: React.Dispatch<React.SetStateAction<number | null>>;\n\n  savedPositionY: number | null;\n  setSavesPositionY: React.Dispatch<React.SetStateAction<number | null>>;\n\n  startPoint: number | null;\n  setStartPoint: React.Dispatch<React.SetStateAction<number | null>>;\n\n  startPositionY: number;\n  setStartPositionY: React.Dispatch<React.SetStateAction<number>>;\n\n  startPositionX: number;\n  setStartPositionX: React.Dispatch<React.SetStateAction<number>>;\n\n  leftLimit: number;\n  setLeftLimit: React.Dispatch<React.SetStateAction<number>>;\n\n  resetGame: () => void;\n}\n\nconst GameContext = createContext<GameContextProps | undefined>(undefined);\n\nexport const GameProvider: React.FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [remainingMoves, setRemainingMoves] = useState<number>(MAX_MOVES);\n  const [positionX, setPositionX] = useState<number>(START_POSITION_X);\n  const [positionY, setPositionY] = useState<number>(START_POSITION_Y);\n\n  const [savedPositionX, setSavesPositionX] = useState<number | null>(null);\n  const [savedPositionY, setSavesPositionY] = useState<number | null>(null);\n\n  const [startPoint, setStartPoint] = useState<number | null>(null);\n  const [startPositionY, setStartPositionY] = useState<number>(0);\n  const [startPositionX, setStartPositionX] = useState<number>(0);\n  const [leftLimit, setLeftLimit] = useState<number>(0);\n\n  const resetGame = () => {\n    setRemainingMoves(MAX_MOVES);\n    setPositionX(START_POSITION_X);\n    setPositionY(START_POSITION_Y);\n\n    setStartPositionY(START_POSITION_X);\n    setStartPositionX(START_POSITION_Y);\n    setLeftLimit(0);\n\n    setSavesPositionX(null);\n    setSavesPositionY(null);\n\n    setStartPoint(null);\n  };\n\n  return (\n    <GameContext.Provider\n      value={{\n        remainingMoves,\n        setRemainingMoves,\n        positionX,\n        setPositionX,\n        positionY,\n        setPositionY,\n        savedPositionX,\n        setSavesPositionX,\n        savedPositionY,\n        setSavesPositionY,\n        startPoint,\n        setStartPoint,\n        resetGame,\n        startPositionY,\n        setStartPositionY,\n        startPositionX,\n        setStartPositionX,\n        leftLimit,\n        setLeftLimit,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n\nexport const useGame = (): GameContextProps => {\n  const context = useContext(GameContext);\n  if (context === undefined) {\n    throw new Error('useGame must be used within a GameProvider');\n  }\n  return context;\n};\n","import { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './styles.css';\n\nimport OuterRocks1366 from '../../assets/OuterRocks1366.png';\nimport OuterRocks1920 from '../../assets/OuterRocks1920.png';\nimport OuterRocks2560 from '../../assets/OuterRocks2560.png';\nimport Header1366 from '../../assets/Header1366.png';\nimport Header1920 from '../../assets/Header1920.png';\nimport Header2560 from '../../assets/Header2560.png';\nimport GameBackground1366 from '../../assets/GameBackground1366.svg';\nimport GameBackground1920 from '../../assets/GameBackground1920.svg';\nimport GameBackground2560 from '../../assets/GameBackground2560.svg';\nimport YellowRulerRotate from '../../assets/YellowRulerRotate.svg';\nimport YodelyGuy from '../../assets/YodelyGuy.svg';\n\nimport ScreamCrash from '../../assets/audio/ScreamCrash.mp3';\nimport SingleDing from '../../assets/audio/SingleDing.mp3';\nimport ThePriceIsRightYodelling from '../../assets/audio/ThePriceIsRightYodelling.mp3';\nimport WinningDingX10 from '../../assets/audio/WinningDingX10.mp3';\n\nimport { useGame } from '../../context/GameContext';\nimport { getStepXCoefficient } from './constants';\n\nconst GameScreen = () => {\n  const yodelAudioRef = useRef<any>(null);\n  const climberStopsMovingAudioRef = useRef<any>(null);\n  const winningAudioRef = useRef<any>(null);\n  const fallAudioRef = useRef<any>(null);\n\n  const {\n    remainingMoves,\n    setRemainingMoves,\n    positionX,\n    setPositionX,\n    positionY,\n    setPositionY,\n    savedPositionX,\n    setSavesPositionX,\n    savedPositionY,\n    setSavesPositionY,\n    startPoint: startPointContext,\n    setStartPoint: setStartPointContext,\n    startPositionY,\n    setStartPositionY,\n    startPositionX,\n    setStartPositionX,\n    leftLimit,\n    setLeftLimit,\n  } = useGame();\n\n  const MAX_MOVES = 25;\n\n  const [isStartPositionSet, setStartPositionSet] = useState<boolean>(false);\n  const [falling, setFalling] = useState<boolean>(false);\n  const [isYodeling, setIsYodeling] = useState<boolean>(false);\n  const [outerRocksSize, setOuterRocksSize] = useState<null | {\n    width: number;\n    height: number;\n  }>(null);\n  const [headerHeight, setHeaderHeight] = useState<null | number>(null);\n  const [isGameStarted, setIsGmeStarted] = useState<boolean>(false);\n  const [rightLimit, setRightLimit] = useState<number>(0);\n  const [points, setPoints] = useState<{ [key: number]: number }>({});\n\n  const [isRendered, setIsRendered] = useState<boolean>(false);\n  const [isMainBgLoaded, setMainBgLoaded] = useState<boolean>(false);\n  const [isGameContainerLoaded, setGameContainerLoaded] =\n    useState<boolean>(false);\n\n  const [gameBackgroundElement, setGameBackgroundElement] = useState<any>(null);\n  const [yodelyGuyElement, setYodelyGuyElement] = useState<any>(null);\n  const [rulerElement, setRulerElement] = useState<any>(null);\n  const [gameMarginBottom, setGameMarginBottom] = useState<number | null>(null);\n\n  const navigate = useNavigate();\n\n  const handlePlayYodelAudioRef = () => {\n    climberStopsMovingAudioRef.current.pause();\n    winningAudioRef.current.pause();\n    fallAudioRef.current.pause();\n    yodelAudioRef.current.pause();\n    yodelAudioRef.current.currentTime = 0;\n    yodelAudioRef.current.play();\n  };\n\n  const handlePlayClimberStopsAudioRef = () => {\n    yodelAudioRef.current.pause();\n    winningAudioRef.current.pause();\n    fallAudioRef.current.pause();\n    climberStopsMovingAudioRef.current.pause();\n    climberStopsMovingAudioRef.current.currentTime = 0;\n    climberStopsMovingAudioRef.current.play();\n  };\n\n  const handlePlayWinningAudioRef = () => {\n    yodelAudioRef.current.pause();\n    climberStopsMovingAudioRef.current.pause();\n    fallAudioRef.current.pause();\n    winningAudioRef.current.pause();\n    winningAudioRef.current.currentTime = 0;\n    winningAudioRef.current.play();\n  };\n\n  const handlePlayFallAudioRef = () => {\n    yodelAudioRef.current.pause();\n    climberStopsMovingAudioRef.current.pause();\n    winningAudioRef.current.pause();\n    fallAudioRef.current.pause();\n    fallAudioRef.current.currentTime = 0;\n    fallAudioRef.current.play();\n  };\n\n  const getClosestPointKey = (x: number) => {\n    let closestKey = null;\n    for (const [key, value] of Object.entries(points)) {\n      if (value <= x) {\n        closestKey = key;\n      } else {\n        break;\n      }\n    }\n    return closestKey;\n  };\n\n  useEffect(() => {\n    const { x: xCoefficient, y: yCoefficient } = getStepXCoefficient(window.innerWidth);\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === ' ') {\n        handlePlayWinningAudioRef();\n      }\n\n      // Move left\n      if (event.key === 'ArrowLeft' && positionX > leftLimit) {\n        setIsYodeling(true);\n        setIsGmeStarted(true);\n        setPositionX((prevPositionX) => Math.max(prevPositionX - xCoefficient, leftLimit));\n        setPositionY((prevPositionY) => prevPositionY - yCoefficient);\n      }\n\n      // Stop yodeling when reaching the left limit\n      if (event.key === 'ArrowLeft' && positionX <= leftLimit) {\n        yodelAudioRef.current.pause();\n      }\n\n      // Move right\n      if (event.key === 'ArrowRight' && positionX < rightLimit) {\n        setIsYodeling(true);\n        setIsGmeStarted(true);\n        setPositionX((prevPositionX) => Math.min(prevPositionX + xCoefficient, rightLimit));\n        setPositionY((prevPositionY) =>\n          Math.min(prevPositionY + yCoefficient, window.innerHeight - startPositionY)\n        );\n      }\n    };\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key === 'ArrowLeft' || event.key === 'ArrowRight') {\n        setIsYodeling(false);\n        yodelAudioRef.current.pause();\n        if (positionX < rightLimit) handlePlayClimberStopsAudioRef();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [positionX, positionY, leftLimit, rightLimit]);\n\n\n  useEffect(() => {\n    if (positionX === rightLimit) {\n      positionY !== startPositionY && setFalling(true);\n      positionY !== startPositionY && !falling && handlePlayFallAudioRef();\n      setPositionY(startPositionY);\n    }\n  }, [positionX, rightLimit, positionY, startPositionY, falling]);\n\n  useEffect(() => {\n    const centerPosition = yodelyGuyElement ? yodelyGuyElement.width / 2 : 0;\n    const closestKey = getClosestPointKey(positionX + centerPosition);\n    if (closestKey !== null) {\n      setRemainingMoves(MAX_MOVES - +closestKey);\n    }\n  }, [positionX, yodelyGuyElement]);\n\n  useEffect(() => {\n    if (falling) {\n      const timer = setTimeout(() => {\n        setFalling(false);\n      }, 1500);\n      const play = setTimeout(() => {\n        handlePlayFallAudioRef();\n      }, 0);\n\n      return () => {\n        clearTimeout(timer);\n        clearTimeout(play);\n      };\n    }\n  }, [falling]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsRendered(true);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    if (isYodeling) {\n      handlePlayYodelAudioRef();\n    }\n  }, [isYodeling]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (yodelyGuyElement && gameBackgroundElement) {\n        const yodelyGuyRect = yodelyGuyElement.getBoundingClientRect();\n        const gameBackgroundRect =\n          gameBackgroundElement.getBoundingClientRect();\n\n        const relativeX = yodelyGuyRect.left - gameBackgroundRect.left;\n        const relativeY = gameBackgroundRect.bottom - yodelyGuyRect.bottom;\n\n        if (\n          (!savedPositionX || savedPositionX <= startPositionX) &&\n          (!savedPositionY || savedPositionY <= startPositionY) &&\n          !isStartPositionSet\n        ) {\n          setPositionX(relativeX);\n          setPositionY(relativeY);\n          setStartPositionX(relativeX);\n          setStartPositionY(relativeY);\n          setStartPositionSet(true);\n        } else if (savedPositionX && savedPositionY) {\n          setPositionX(savedPositionX);\n          setPositionY(savedPositionY);\n        }\n      }\n    }, 50);\n  }, [\n    isStartPositionSet,\n    yodelyGuyElement,\n    gameBackgroundElement,\n    isRendered,\n    isMainBgLoaded,\n    isGameContainerLoaded,\n    savedPositionX,\n    savedPositionY,\n    startPositionX,\n    startPositionY,\n  ]);\n\n\n\n  useEffect(() => {\n    if (rulerElement && gameBackgroundElement && yodelyGuyElement) {\n      const rulerRect = rulerElement.getBoundingClientRect();\n      const gameBackgroundRect = gameBackgroundElement.getBoundingClientRect();\n      const yodelyGuyRect = yodelyGuyElement.getBoundingClientRect();\n\n      const rulerRight = rulerRect.right;\n      const gameBackgroundLeft = gameBackgroundRect.left;\n\n      const distanceFromLeft = rulerRight - gameBackgroundLeft;\n\n      const yodelyGuyWidth = yodelyGuyRect.width / 1.3;\n      const adjustedDistance = distanceFromLeft - yodelyGuyWidth;\n      const reightLimit =\n        outerRocksSize && outerRocksSize.width > 2000\n          ? adjustedDistance + 9\n          : outerRocksSize && outerRocksSize.width > 1900\n            ? adjustedDistance + 8\n            : outerRocksSize && outerRocksSize.width > 1800\n              ? adjustedDistance + 7\n              : outerRocksSize && outerRocksSize.width > 1700\n                ? adjustedDistance + 6\n                : outerRocksSize && outerRocksSize.width > 1600\n                  ? adjustedDistance + 5\n                  : outerRocksSize && outerRocksSize.width > 1500\n                    ? adjustedDistance + 5\n                    : outerRocksSize && outerRocksSize.width > 1400\n                      ? adjustedDistance + 4\n                      : outerRocksSize && outerRocksSize.width > 1300\n                        ? adjustedDistance + 3\n                        : outerRocksSize && outerRocksSize.width > 1200\n                          ? adjustedDistance + 3\n                          : outerRocksSize && outerRocksSize.width > 1100\n                            ? adjustedDistance + 4\n                            : outerRocksSize && outerRocksSize.width > 1000\n                              ? adjustedDistance + 2\n                              : adjustedDistance + 3;\n\n      setRightLimit(reightLimit);\n\n      const distanceFromLeftLimit =\n        yodelyGuyRect.left - gameBackgroundRect.left;\n\n      if (leftLimit === 0 || !leftLimit) setLeftLimit(distanceFromLeftLimit);\n\n      const koeficient = !outerRocksSize\n        ? 0.97\n        : outerRocksSize.width > 0 && outerRocksSize.width <= 700\n          ? 0.98\n          : outerRocksSize.width > 700 && outerRocksSize.width <= 800\n            ? 0.99\n            : outerRocksSize.width > 800 && outerRocksSize.width <= 1080\n              ? 1\n              : outerRocksSize.width > 1080 && outerRocksSize.width <= 1320\n                ? 1.007\n                : outerRocksSize.width > 1320 && outerRocksSize.width <= 1324\n                  ? 1.014\n                  : outerRocksSize.width > 1324 && outerRocksSize.width <= 1500\n                    ? 1.01\n                    : outerRocksSize.width > 1500 && outerRocksSize.width <= 1600\n                      ? 1.012\n                      : outerRocksSize.width > 1600 && outerRocksSize.width <= 1820\n                        ? 1.015\n                        : outerRocksSize.width > 1820 && outerRocksSize.width <= 1900\n                          ? 1.017\n                          : outerRocksSize.width > 1900 && outerRocksSize.width <= 2000\n                            ? 1.0171\n                            : outerRocksSize.width > 2000 && outerRocksSize.width <= 2400\n                              ? 1.0175\n                              : outerRocksSize.width > 2400 && outerRocksSize.width <= 2560\n                                ? 1.018\n                                : outerRocksSize.width > 2560 && outerRocksSize.width <= 2800\n                                  ? 1.024\n                                  : outerRocksSize.width > 2800 && outerRocksSize.width <= 3000\n                                    ? 1.025\n                                    : outerRocksSize.width > 3000 && outerRocksSize.width <= 3200\n                                      ? 1.026\n                                      : outerRocksSize.width > 3200 && outerRocksSize.width <= 4000\n                                        ? 1.028\n                                        : 1.03;\n\n      const moveForBigScreen = !outerRocksSize ? 0 : 3;\n\n      const numberOfPoints = 25;\n\n      const startPoint = startPointContext\n        ? startPointContext\n        : yodelyGuyRect.left +\n        yodelyGuyRect.width / 2 -\n        gameBackgroundRect.left -\n        moveForBigScreen;\n\n      !startPointContext && setStartPointContext(startPoint);\n\n      const pointDistance =\n        ((adjustedDistance - startPoint) / numberOfPoints) * koeficient;\n      const pointsObject: { [key: number]: number } = {};\n\n      for (let i = 0; i <= numberOfPoints; i++) {\n        pointsObject[i] = startPoint + i * pointDistance + i;\n      }\n\n      setPoints({\n        ...pointsObject,\n        25:\n          outerRocksSize && outerRocksSize.width > 2800\n            ? pointsObject[25] - 6\n            : outerRocksSize && outerRocksSize.width > 2000\n              ? pointsObject[25] - 8\n              : outerRocksSize && outerRocksSize.width > 1600\n                ? pointsObject[25] - 3\n                : pointsObject[25] - 2.5,\n      });\n    }\n  }, [\n    rulerElement,\n    gameBackgroundElement,\n    yodelyGuyElement,\n    isRendered,\n    isMainBgLoaded,\n    isGameContainerLoaded,\n    outerRocksSize,\n    startPointContext,\n    leftLimit,\n  ]);\n\n  const updateDimensions = () => {\n    const element = document.getElementById('outer-rocks');\n    if (element) {\n      const { offsetWidth, offsetHeight } = element;\n      setOuterRocksSize({\n        width: offsetWidth,\n        height: offsetHeight,\n      });\n    }\n  };\n\n  const updateDimensionsBackground = () => {\n    const element = document.getElementById('game-background');\n    if (element) {\n      setGameBackgroundElement(element);\n    }\n  };\n\n  const updateDimensionsHeader = () => {\n    const element = document.getElementById('heaeder');\n    if (element) {\n      const { offsetHeight } = element;\n      setHeaderHeight(offsetHeight);\n    }\n  };\n\n  const updateDimensionsYodelyGuy = () => {\n    const element = document.getElementById('yodely-guy');\n    if (element) {\n      setYodelyGuyElement(element);\n    }\n  };\n\n  const updateDimensionsRuler = () => {\n    const element = document.getElementById('ruler');\n    if (element) {\n      setRulerElement(element);\n    }\n  };\n\n  useEffect(() => {\n    updateDimensions();\n    updateDimensionsBackground();\n    updateDimensionsHeader();\n    updateDimensionsYodelyGuy();\n    updateDimensionsRuler();\n\n    window.addEventListener('resize', () => {\n      updateDimensions();\n      updateDimensionsBackground();\n      updateDimensionsHeader();\n      updateDimensionsYodelyGuy();\n      updateDimensionsRuler();\n    });\n\n    const rerender1 = setTimeout(() => {\n      updateDimensions();\n      updateDimensionsBackground();\n      updateDimensionsHeader();\n      updateDimensionsYodelyGuy();\n      updateDimensionsRuler();\n    }, 100);\n\n    const rerender2 = setTimeout(() => {\n      updateDimensions();\n      updateDimensionsBackground();\n      updateDimensionsHeader();\n      updateDimensionsYodelyGuy();\n      updateDimensionsRuler();\n    }, 500);\n\n    return () => {\n      window.removeEventListener('resize', () => {\n        updateDimensions();\n        updateDimensionsBackground();\n        updateDimensionsHeader();\n        updateDimensionsYodelyGuy();\n        updateDimensionsRuler();\n      });\n      clearTimeout(rerender1);\n      clearTimeout(rerender2);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (\n      outerRocksSize &&\n      gameBackgroundElement &&\n      rulerElement &&\n      rulerElement.y < 0\n    ) {\n      setGameMarginBottom(Math.abs(rulerElement.y));\n    }\n\n    if (\n      outerRocksSize &&\n      gameBackgroundElement &&\n      rulerElement &&\n      rulerElement.y > 0\n    ) {\n      setGameMarginBottom(null);\n    }\n  }, [rulerElement, gameBackgroundElement, outerRocksSize]);\n\n  const fallAnimation = falling\n    ? {\n      animation: `fall ${Math.abs(positionY - startPositionY) / 100\n        }s ease-out forwards, rotate 1.5s linear forwards`,\n      transition: 'bottom 1.5s ease-out',\n      bottom: `${startPositionY}px`,\n      transform: 'rotate(360deg)',\n      zIndex: -999,\n    }\n    : {};\n\n    const [isHidden, setIsHidden] = useState<boolean>(false);\n    const hideYodelyGuy = () => {\n      setIsHidden(true);\n    };\n    useEffect(() => {\n      if (remainingMoves === 0) {\n        const timeout = setTimeout(() => {\n          hideYodelyGuy();\n        }, 1500);\n        return () => clearTimeout(timeout); // Cleanup on unmount\n      }\n    }, [remainingMoves]);\n    \n\n\n\n\n  return (\n    <div className='relative m-auto w-screen h-screen transition-opacity duration-500 animate-fadeIn'>\n      <audio\n        ref={yodelAudioRef}\n        src={ThePriceIsRightYodelling}\n        preload='auto'\n      />\n      <audio ref={climberStopsMovingAudioRef} src={SingleDing} preload='auto' />\n      <audio ref={winningAudioRef} src={WinningDingX10} preload='auto' />\n      <audio ref={fallAudioRef} src={ScreamCrash} preload='auto' />\n\n      <img\n        src={\n          outerRocksSize && outerRocksSize.width >= 2560\n            ? OuterRocks2560\n            : outerRocksSize && outerRocksSize.width >= 1920\n              ? OuterRocks1920\n              : OuterRocks1366\n        }\n        alt='OuterRocks'\n        className='w-full absolute bottom-0 left-0 right-0 m-auto z-[42] max-w-screen max-h-[101vh]'\n        onLoad={() => setMainBgLoaded(true)}\n        id='outer-rocks'\n      />\n      <img\n        src={\n          outerRocksSize && outerRocksSize.width >= 2100\n            ? Header2560\n            : outerRocksSize && outerRocksSize.width >= 1700\n              ? Header1920\n              : Header1366\n        }\n        style={\n          outerRocksSize\n            ? {\n              maxWidth:\n                outerRocksSize && outerRocksSize.width >= 2100\n                  ? 1896\n                  : outerRocksSize && outerRocksSize.width >= 1700\n                    ? 1487\n                    : 1067,\n              bottom:\n                outerRocksSize.height <= 0 ||\n                  outerRocksSize.height === undefined ||\n                  !headerHeight\n                  ? 'auto'\n                  : outerRocksSize.height - headerHeight,\n              opacity:\n                outerRocksSize.height === undefined || !isMainBgLoaded\n                  ? '0'\n                  : '1',\n            }\n            : {}\n        }\n        alt='Header'\n        className='w-full h-auto absolute left-0 right-[20px] m-auto z-50 bottom-[365px] max-w-[1400px] animate-fadeIn'\n        id='heaeder'\n      />\n      <img\n        src={\n          outerRocksSize && outerRocksSize.width >= 2560\n            ? GameBackground2560\n            : outerRocksSize && outerRocksSize.width >= 1920\n              ? GameBackground1920\n              : GameBackground1366\n        }\n        style={{\n          transform: gameMarginBottom\n            ? `translateY(${gameMarginBottom}px)`\n            : `translateY(0)`,\n        }}\n        alt='GameBackground'\n        id='game-background'\n        className='w-[96%] min-[1920px]:w-[96%] min-[2560px]:w-[93%] absolute bottom-0 left-0 right-0 m-auto z-0'\n        onLoad={() => setIsRendered(true)}\n      />\n      <div\n        className={`absolute bottom-0 left-0 right-0 m-auto w-full h-full z-50 ${!falling && positionY === startPositionY ? '!z-0' : ''\n          }`}\n        style={{\n          maxWidth: !!gameBackgroundElement?.offsetWidth\n            ? gameBackgroundElement.offsetWidth\n            : 'auto',\n          maxHeight: !!gameBackgroundElement?.offsetHeight\n            ? gameBackgroundElement.offsetHeight\n            : 'auto',\n          transform: gameMarginBottom\n            ? `translateY(${gameMarginBottom}px)`\n            : `translateY(0)`,\n          zIndex: falling ? 0 : 50,\n        }}\n        onLoad={() => setGameContainerLoaded(true)}\n      >\n        <img\n          src={YellowRulerRotate}\n          id='ruler'\n          alt='Ruler'\n\n          className={`h-full absolute ${outerRocksSize && outerRocksSize.width >= 2560\n            ? ' w-[65%] bottom-[14.1%] left-[17.5%]'\n            : outerRocksSize && outerRocksSize.width >= 1920\n              ? ' w-[65%] bottom-[14%] left-[17.4%]'\n              : ' w-[65%] bottom-[13.7%] left-[17.3%]'\n            } m-auto z-30 object-contain`}\n        />\n        <img\n          src={YodelyGuy}\n          alt='YodelyGuy'\n          id='yodely-guy'\n          className={`absolute yodely-guy z-[100] \n            ${isHidden ? 'opacity-0' : 'opacity-100'}\n            ${falling ? 'fall rotate' : ''\n            }\n          ${outerRocksSize && outerRocksSize.width >= 2560\n              ? 'w-[4.8%] left-[17.4%] bottom-[44.8%]'\n              : outerRocksSize && outerRocksSize.width >= 1920\n                ? 'w-[4.3%] left-[17.5%] bottom-[44.9%]'\n                : 'w-[4.7%] left-[17.3%] bottom-[44.3%]'\n            }`}\n          style={\n            (isGameStarted && positionX !== 0 && positionY !== 0) ||\n              (savedPositionX && savedPositionY)\n              ? {\n                left: `${positionX}px`,\n                bottom: `${positionY}px`,\n                ...fallAnimation,\n              }\n              : {}\n          }\n        />\n      </div>\n\n      <div className='absolute bottom-[27px] min-[2560px]:bottom-[24px] left-[50px] w-[70px] min-[2560px]:w-[140px] h-[40px] min-[2560px]:h-[80px] text-[32px] min-[2560px]:text-[64px] bg-[#e3e3e3] text-[#333] font-bold rounded-[5px] flex items-center justify-center z-[9999]'>\n        {remainingMoves}\n      </div>\n      <div className='absolute bottom-[27px] min-[2560px]:bottom-[24px] right-[50px] flex items-center justify-center z-[9999]'>\n        <button\n          className='w-fit h-[43px] min-[2560px]:h-[86px] text-[28px] min-[2560px]:text-[56px] px-1 min-[800px]:px-[8px] min-[1200px]:px-[12px] bg-[#56639d] hover:bg-[#56639d]/70 active:bg-[#56639d]/50 text-[#fff] font-bold rounded-[5px] uppercase transition'\n          onClick={() => {\n            setSavesPositionX(positionX);\n            setSavesPositionY(positionY);\n            navigate('/products');\n          }}\n        >\n          products\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default GameScreen;\n","import React, { createContext, useContext, useState, ReactNode } from 'react';\n\nexport interface ProductType {\n  imgSrc: string;\n  productPrice: string;\n  productName: string;\n  priceOpened: boolean;\n  nameOpened: boolean;\n}\n\nexport interface ProductsState {\n  product1: ProductType;\n  product2: ProductType;\n  product3: ProductType;\n}\n\ninterface ProductsContextProps {\n  products: ProductsState;\n  setProduct: (key: keyof ProductsState, value: Partial<ProductType>) => void; // Partial allows partial updates\n  resetProducts: () => void;\n}\n\nconst initialProductsValues: ProductsState = {\n  product1: {\n    imgSrc: '',\n    productPrice: '',\n    productName: '',\n    priceOpened: false,\n    nameOpened: false,\n  },\n  product2: {\n    imgSrc: '',\n    productPrice: '',\n    productName: '',\n    priceOpened: false,\n    nameOpened: false,\n  },\n  product3: {\n    imgSrc: '',\n    productPrice: '',\n    productName: '',\n    priceOpened: false,\n    nameOpened: false,\n  },\n};\n\nconst ProductsContext = createContext<ProductsContextProps | undefined>(\n  undefined,\n);\n\nexport const ProductsProvider: React.FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [products, setProducts] = useState<ProductsState>(\n    initialProductsValues,\n  );\n\n  const setProduct = (key: keyof ProductsState, value: Partial<ProductType>) => {\n    setProducts((prev) => ({\n      ...prev,\n      [key]: {\n        ...prev[key], // Merge with existing product\n        ...value, // Allow partial updates\n      },\n    }));\n  };\n\n  const resetProducts = () => {\n    setProducts(initialProductsValues); // Reset to initial values\n  };\n\n  return (\n    <ProductsContext.Provider value={{ products, setProduct, resetProducts }}>\n      {children}\n    </ProductsContext.Provider>\n  );\n};\n\nexport const useProducts = (): ProductsContextProps => {\n  const context = useContext(ProductsContext);\n  if (context === undefined) {\n    throw new Error('useProducts must be used within a ProductsProvider');\n  }\n  return context;\n};\n","var _path, _path2, _g, _path3, _path4, _g2, _path5, _path6, _g3, _path7, _path8, _g4, _g5, _defs;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgProductItem(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 315,\n    height: 454,\n    viewBox: \"0 0 315 454\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter0_d_42_3399)\"\n  }, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.7746 25.5613L16.4636 415.67C16.732 417.441 18.8583 429.361 31.9877 435.658C38.0364 438.56 44.0024 439.118 47.4293 439.2C119.579 440.659 191.709 442.119 263.859 443.578C267.905 442.693 273.479 441.004 279.032 437.675C291.707 430.099 295.443 419.343 296.496 415.67C292.553 286.77 288.59 157.871 284.647 28.972L34.7746 25.5449V25.5613Z\",\n    fill: \"#4C4030\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_42_3399\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 16,\n    y: 25,\n    width: 281,\n    height: 419\n  }, _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.7749 25.5613L16.4639 415.67C16.7322 417.441 18.8585 429.361 31.988 435.658C38.0366 438.56 44.0027 439.118 47.4295 439.2C119.579 440.659 191.709 442.119 263.859 443.578C267.905 442.693 273.479 441.004 279.032 437.675C291.707 430.099 295.444 419.343 296.497 415.67C292.554 286.77 288.59 157.871 284.647 28.972L34.7749 25.5449V25.5613Z\",\n    fill: \"white\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M230.799 19.3613H196.323V452.25H230.799V19.3613Z\",\n    fill: \"#6B594A\",\n    fillOpacity: 0.5\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.79,\n    filter: \"url(#filter1_d_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M196.288 13.8262L193.047 448.962\",\n    stroke: \"black\",\n    strokeWidth: 0.1,\n    strokeMiterlimit: 10\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.34\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.566 297.084C233.566 297.084 233.566 297.166 233.566 297.215C233.608 297.314 233.649 297.413 233.669 297.511L233.566 297.084Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.154 320.055C233.154 320.055 233.154 320.153 233.154 320.203C233.174 320.203 233.194 320.203 233.154 320.055Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.434 112.238C234.434 112.238 234.434 112.304 234.434 112.337C234.434 112.255 234.434 112.172 234.454 112.09V112.238H234.434Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.495 112.712C234.454 113.221 234.433 112.565 234.433 112.352C234.371 112.909 234.371 113.467 234.392 114.04C234.454 114.04 234.454 112.975 234.495 112.712Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.661 47.9591L234.764 48.0911C234.723 47.9756 234.702 47.9426 234.661 47.9591Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.669 297.51L233.71 297.674C233.71 297.674 233.689 297.559 233.669 297.51Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M232.926 341.256C232.926 341.256 232.864 341.305 232.843 341.371C232.843 341.404 232.843 341.421 232.843 341.437L232.926 341.272V341.256Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M232.266 370.364C232.266 370.364 232.287 370.462 232.307 370.462C232.349 369.97 232.37 368.658 232.37 366.969L232.245 366.871V370.364H232.266Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.148 402.174L229.416 399.075C229.458 409.028 229.169 413.684 229.313 422.195L229.272 421.719C229.21 422.965 229.767 423.67 228.983 437.362H228.962C228.962 437.838 229.004 437.838 228.942 438.789L229.107 436.428C229.169 437.854 229.272 439.084 229.272 440.986C229.251 441.38 229.189 441.527 229.148 441.56V446.2L228.983 447.627C229.066 449.053 229.396 448.398 229.189 452.202C229.437 450.775 229.313 454.087 229.437 453.612C229.416 453.809 229.355 454.235 229.313 454.596C229.313 456.859 229.355 461.106 229.478 462.155C229.478 462.155 230.036 453.333 230.304 450.956C230.222 454.137 230.325 451.792 230.407 451.169L230.345 450.956C230.407 449.053 230.573 449.054 230.614 448.102C230.614 448.102 230.593 448.135 230.573 448.152V448.266C230.573 448.348 230.552 448.299 230.531 448.201C230.49 448.217 230.469 448.135 230.49 447.611V447.709C230.49 446.922 230.531 445.544 230.531 444.938H230.655C230.428 443.511 231.089 435.444 231.109 433.542C231.274 431.64 231.109 429.278 231.192 426.901C231.254 423.113 231.378 425.015 231.501 423.113C231.605 420.735 231.357 423.588 231.357 422.637L231.543 419.801C231.543 421.457 231.625 420.555 231.687 420.26C231.729 417.8 231.976 413.93 231.749 413.16C231.894 409.848 231.997 409.831 232.018 408.405C231.976 408.88 231.914 409.831 231.873 409.831C231.997 408.503 231.852 409.192 231.832 409.733C231.749 407.699 232.369 399.222 232.1 398.796H232.141C231.935 398.32 231.749 399.074 231.646 397.664L231.749 396.713L231.667 395.287C231.749 394.336 231.79 394.795 231.811 394.795C231.729 392.483 231.873 389.252 231.914 386.432L231.336 389.4C231.481 387.039 231.77 382.759 231.605 382.284L231.811 380.857C232.203 376.118 231.687 377.545 231.811 375.643L232.038 373.265V375.643C232.141 373.265 232.203 372.314 232.348 370.428V370.412C232.348 370.543 232.348 370.625 232.307 370.642V370.314C232.203 370.018 232.141 368.789 232.162 367.116C232.203 364.739 232.079 362.886 232.307 359.098L232.1 358.147L232.245 355.294H232.41C232.389 358.081 232.41 363.328 232.389 366.919L232.472 366.985C232.472 364.853 232.43 362.443 232.472 361.033C232.513 360.344 232.699 358.59 232.802 359.869L232.658 358.557C232.699 351.457 232.678 351.424 232.926 344.012L232.843 344.652C232.802 343.176 232.761 341.717 232.905 341.307C232.967 336.863 233.112 332.255 233.339 329.37L233.153 328.73C233.153 327.795 233.483 326.385 233.215 325.926L233.153 323.926C233.174 322.647 233.07 321.86 233.194 320.4C233.194 320.318 233.194 320.22 233.215 320.121C233.318 317.219 233.05 320.154 233.174 316.826C233.318 315.76 232.947 315.645 232.988 314.022L233.277 312.398C233.463 309.463 233.174 308.955 233.215 304.708C233.339 302.658 233.566 301.674 233.772 303.035C233.525 301.166 233.607 302.183 233.504 299.723C233.607 299.346 233.628 299.608 233.731 300.149C233.876 297.952 233.648 298.805 233.669 297.149C233.483 296.673 233.174 296.116 233.153 295.575L233.091 296.214C233.008 294.46 232.967 292.558 233.091 290.524L233.194 290.606L233.153 288.442L233.277 288.311V285.212L233.215 285.638C233.215 284.916 233.174 282.522 233.256 281.161L233.318 281.211C233.566 277.374 233.318 274.193 233.318 269.7L233.463 270.29C233.607 268.749 233.236 269.864 233.339 268.044L233.525 267.945C233.297 266.338 233.587 265.863 233.69 264.764L233.463 265.289L233.525 263.206C233.628 260.911 233.834 261.796 233.937 262.141L233.772 260.566L233.979 260.255C233.752 259.107 234.02 259.107 233.917 257.107C233.999 256.943 234.041 257.451 234.082 256.762L233.814 253.45L233.917 255.45L233.628 255.204C233.421 253.122 233.69 252.384 233.628 250.908L233.71 251.925C233.648 249.498 233.793 249.367 233.855 248.006C233.793 248.432 233.71 249.072 233.669 248.104C233.669 247.383 233.772 247.711 233.814 247.039C233.607 246.875 233.525 245.137 233.628 243.562C233.648 243.579 233.69 243.612 233.71 243.726C233.69 243.316 233.628 243.12 233.69 242.415L233.917 242.825L233.71 241.48C233.772 240.578 233.628 239.266 233.772 239.397L233.814 239.906L233.917 233.101L234.103 233.003C233.855 232.33 234.226 229.297 233.917 229.526C234.082 228.247 233.834 224.476 234.165 225.23C234.226 220.77 233.917 218.343 234.123 212.916C234.433 210.981 234.371 205.685 234.433 202.192C234.371 195.371 234.288 190.976 234.247 184.007C234.681 179.826 234.185 173.562 234.454 169.053L234.309 167.823C234.598 164.822 234.309 160.248 234.598 156.05C234.536 155.017 234.515 154.476 234.515 154.246C234.515 154.443 234.474 154.722 234.371 154.82C234.454 153.623 234.371 151.196 234.577 151.36V151.672C234.804 151.852 234.536 148.032 234.722 146.687L234.495 147.425L234.557 145.146L234.598 145.752C234.185 135.881 234.908 131.421 234.536 122.14C234.763 123.37 234.433 120.304 234.681 120.189C235.032 117.844 234.639 115.86 234.577 113.942C234.577 113.942 234.557 113.925 234.536 113.81L234.598 110.465C234.908 112.466 234.35 108.055 234.598 109.891C234.908 101.152 234.743 89.7556 234.928 79.6385L234.846 80.0812C234.887 77.5232 234.804 74.3257 234.949 72.3744C235.093 70.4232 234.763 68.1112 234.763 67.3569C234.639 65.2252 234.928 63.2903 234.908 64.1922C234.887 61.913 234.598 59.7649 234.743 56.6002C235.032 55.518 234.536 47.9589 234.846 47.8769V47.8441C235.073 43.7939 234.722 39.957 234.949 35.5953C234.949 35.5953 234.97 35.6773 234.99 35.8248L234.103 26.9375L233.029 29.4627L232.121 37.153V58.0268L231.687 74.6865L231.501 115.237L231.708 118.139C231.233 126.108 231.646 136.324 231.274 144.9L231.481 145.08C231.481 147.507 231.357 147.343 231.316 147.933C231.192 170.447 231.316 193.616 230.882 213.867C230.738 215.818 230.758 221.754 230.614 223.295C230.82 229.871 230.758 236.839 230.696 243.431V243.185V246.284C230.696 246.416 230.655 246.432 230.634 246.334C230.8 249.826 230.573 255.352 230.469 259.632V259.386C230.222 284.392 230.428 307.594 229.974 332.387C229.561 343.914 229.912 357.327 229.54 370.543C229.313 372.97 229.272 399.73 229.355 402.092L229.148 402.174Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.127 441.56V441.461C229.127 441.461 229.067 441.626 229.127 441.56Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.893 386.3C231.893 386.3 231.893 386.415 231.893 386.48L232.018 385.824L231.893 386.3Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.708 421.702C231.748 420.112 231.708 420.03 231.708 420.259C231.708 420.833 231.708 421.341 231.708 421.702Z\",\n    fill: \"#202020\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.8576 401.473C36.9608 401.965 36.3002 402.375 36.0112 402.178C36.7544 403.195 35.8667 403.195 37.3531 403.359C38.0756 404.015 37.0228 404.671 36.4241 403.933L37.2705 405.786L37.5595 404.687C38.7981 405.015 37.1053 406.442 38.5504 406.802L38.5091 404.818L38.922 404.917C38.4885 404.457 38.7156 403.588 38.922 403.277C39.1284 403.326 39.4587 403.31 39.4794 403.654C39.6652 401.26 37.3118 402.965 36.9815 400.965C37.0021 401.096 36.9815 401.244 36.8576 401.457V401.473Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.997 399.506L38.4694 398.62L38.9235 397.226C38.3868 397.193 37.9946 396.16 37.4785 396.833C37.561 396.964 37.7055 397.243 37.6436 397.456C36.4876 397.259 37.1275 395.57 35.9302 395.947C36.1985 397.079 35.9302 397.243 36.8591 397.948C36.7146 398.964 36.405 399.702 35.9715 400.161C36.1366 400.473 36.8591 400.522 36.983 400.916C36.983 400.834 36.9624 400.752 36.9417 400.653H38.6964C38.3455 400.325 38.5313 400.03 38.5106 399.67L40.4924 401.358C42.1646 400.867 41.2563 399.243 41.9788 398.62C40.4718 399.374 41.2769 397.964 39.997 399.489V399.506Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.6386 276.804C42.6386 276.443 42.267 276.312 42.0605 276.247L41.5444 280.198C42.0192 280.116 42.7418 279.034 42.9276 279.821C43.4849 279.526 43.1959 278.46 42.5973 278.247L43.2579 278.591C42.494 277.607 44.3313 277.132 44.7855 277.771V277.689L41.6889 274.869C41.3586 275.771 42.7831 275.689 42.6592 276.804H42.6386Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.9368 195.752C49.1226 196.26 49.3084 196.309 49.4735 196.244C49.329 196.064 49.1845 195.9 48.9368 195.752Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.9466 274.212L39.9763 273.326C40.224 273.671 40.575 273.982 40.9466 274.212Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.6353 281.135C56.6353 281.135 56.7386 281.152 56.8211 281.135L56.3257 280.725C56.4289 280.873 56.5321 281.004 56.6353 281.119V281.135Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.0664 256.062C39.0664 255.98 39.0256 255.897 39.0256 255.799C39.0256 255.897 39.046 255.98 39.0664 256.062Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.2174 292.498L60.4536 290.628C60.9077 290.907 60.8871 290.038 61.4032 290.464C61.3412 290.317 61.238 289.677 60.9697 289.825V290.186C59.6485 289.12 59.0085 289.628 58.1621 287.988C57.1712 288.874 57.8731 289.366 58.4511 289.923C58.5337 290.104 58.5543 290.251 58.575 290.399L60.3503 292.055L61.2174 292.481V292.498Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.1839 220.447L57.7297 220.365C57.9568 220.464 58.1633 220.842 58.1839 220.447Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.8347 274.574C41.5663 274.525 41.2567 274.394 40.947 274.197L41.6696 274.853C41.6902 274.771 41.7728 274.673 41.8347 274.558V274.574Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.7659 276.18V277.673L45.4265 278.279C45.22 277.689 45.1168 277.017 44.7659 276.164V276.18Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.973 258.324C38.1175 255.274 39.5832 259.193 40.1612 257.815C40.0786 256.963 39.2942 256.602 39.0877 256.061C39.5213 258.52 36.4866 255.552 36.6311 258.012C35.2274 257.569 35.2686 256.159 35.7228 255.356C37.2092 254.519 36.6724 256.241 38.0143 256.536C37.8904 255.552 37.6014 255.7 36.8582 255.241C37.333 253.732 35.4338 251.978 37.4775 251.191C37.2711 250.059 36.5898 250.092 35.9292 249.42C34.4429 249.207 34.9796 251.01 33.7616 251.338C33.9062 251.256 34.1745 251.109 34.381 251.174L33.9681 252.109C34.5874 251.24 35.4544 252.322 35.5164 252.83C35.5164 253.191 35.5164 253.88 35.1035 253.765L34.8351 253.208C34.2984 253.863 35.7847 254.798 34.8971 255.454C34.5667 255.454 34.4222 255.192 34.2158 255.126C35.1654 256.012 35.0209 256.782 35.5989 258.045L34.1952 257.241C35.7228 258.324 35.0003 260.472 33.9474 261.915C34.2158 261.767 34.4429 261.472 34.6906 261.685C34.9383 262.603 33.8442 263.194 33.101 262.718C34.2365 263.685 31.656 265.932 33.1217 267.244C35.4338 269.261 37.7046 271.277 39.9548 273.327C39.7896 273.114 39.6658 272.868 39.6451 272.638C41.0076 272.245 40.9044 271.966 41.9985 272.95C41.4205 272.032 40.3264 272.278 40.4709 270.982C41.0489 271.54 42.5352 271.802 42.8655 270.572C41.9366 267.375 38.4684 265.046 36.9201 262.046C37.9317 262.013 37.9317 259.75 38.3033 258.668C39.3355 259.16 39.5419 259.996 39.6658 260.849C39.7896 260.324 39.9341 259.422 40.058 258.75L37.973 258.324Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.4922 265.704C40.4922 265.704 40.658 265.555 40.6995 265.473C40.6166 265.506 40.5336 265.572 40.4922 265.704Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.5833 261.114C39.5833 261.114 39.645 261.115 39.6862 261.131L39.645 260.852C39.6244 260.934 39.6038 261.049 39.5833 261.098V261.114Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.188 274.049C44.4564 274.262 44.5183 274.393 44.766 274.606C44.6834 274.492 44.6215 274.344 44.5596 274.196C44.4357 274.049 44.3119 273.983 44.188 274.049Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.3489 274.508L41.9566 274.377C41.9566 274.377 41.8741 274.508 41.8328 274.574C42.0598 274.607 42.2456 274.607 42.3489 274.508Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.2339 247.24L48.0481 246.928C48.0481 247.109 48.1307 247.191 48.2339 247.24Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.037 255.061C40.037 256.127 41.5233 255.291 41.3788 256.783L41.5233 256.357C42.0601 257.472 41.5233 259.358 41.4201 260.637C40.8421 260.456 40.5944 261.358 39.686 261.145C39.7893 262.03 39.8925 262.916 40.8008 263.44C40.4292 263.965 41.1724 264.851 40.6769 265.507C41.2756 265.261 42.4523 266.638 41.9775 264.9C42.0394 265.047 42.1839 264.965 42.2459 265.113C43.1542 264.096 41.8743 263.555 41.9775 262.621C42.5968 262.112 42.762 263.604 43.051 263.096C42.6794 261.899 44.1657 259.489 42.0601 259.423C42.0188 258.57 42.4936 258.489 42.9065 258.259C40.8627 256.767 44.3515 253.356 41.5233 253.176C41.5853 253.668 41.4408 254.455 41.9981 255.225L40.037 255.094V255.061Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.2903 272.246C44.2903 272.246 44.3104 272.098 44.3505 272.049C44.3304 272.115 44.3104 272.18 44.2903 272.246Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.1955 284.921L32.4201 284.298C32.3582 281.74 32.9775 280.871 33.2252 278.674C33.4936 278.526 33.6174 278.805 33.6794 278.952C33.6794 277.378 34.4019 275.099 33.6794 273.902C33.7619 273.41 34.5258 272.164 35.0006 272.705C34.8767 272.459 34.7528 272.164 34.8561 271.885C35.5373 271.869 34.9593 272.525 35.496 272.574C35.5786 272.361 35.7025 272.279 35.496 272.213C36.0121 272.623 37.8081 272.016 37.5191 273.738C35.8676 274.263 37.5191 272.525 35.7231 272.771C35.6405 273.344 36.3011 273.328 36.5076 273.394C36.3631 274.115 35.9295 274.066 35.558 273.984C36.0534 274.312 35.1864 275.148 35.9295 275.607C35.8676 277.034 34.6496 275.41 34.5464 276.345L36.2186 277.034L35.6818 278.542C35.9915 280.822 38.7371 278.493 39.3564 281.117C38.4894 280.707 36.8379 281.576 36.3011 282.724C36.3424 282.002 35.3928 280.608 36.0328 279.739C34.4845 280.904 36.1153 277.952 34.4638 278.477C35.1038 279.182 35.0625 280.248 34.5464 281.035L34.4225 280.756C34.1129 281.609 35.847 282.445 34.9799 283.593C34.9386 284.199 34.4638 284.035 34.0716 283.904C34.2574 284.445 34.5258 284.921 34.1335 284.888L34.1955 284.921ZM34.0303 283.576L34.3193 282.789C34.0097 282.953 33.9684 283.248 34.0303 283.576Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.41 388.24C40.41 388.24 40.3063 388.405 40.2441 388.488C40.3271 388.438 40.3685 388.339 40.41 388.24Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.3195 316.584L50.1948 317.043C50.2779 316.863 50.3195 316.715 50.3195 316.584Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.3845 327.668L54.6942 328.389C54.6942 328.111 54.591 327.898 54.3845 327.668Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.9467 382.665C40.9467 382.665 40.8847 382.566 40.864 382.533L40.926 382.665H40.9467Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.1808 348.328C47.0157 348.427 46.8712 348.525 46.7473 348.673C46.9125 348.673 47.057 348.542 47.1808 348.328Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.3446 327.537C54.3446 327.537 54.3239 327.57 54.3032 327.57L54.4066 327.669L54.3446 327.537Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.1203 312.453C56.0787 312.338 56.0579 312.256 55.9956 312.141C55.9956 312.289 56.0579 312.387 56.1203 312.453Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M51.1039 312.617C51.0831 312.502 51.0416 312.387 50.9792 312.305L51.1039 312.617Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.0292 296.662L56.8838 296.006C56.8838 296.317 56.9253 296.514 57.0292 296.662Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.5076 311.059C52.5076 311.059 52.3625 310.976 52.2795 310.943C52.321 311.042 52.4246 311.092 52.5076 311.059Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.8992 392.029V391.996H34.6919L34.8992 392.029Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.3535 393.67C37.3951 393.85 37.4366 394.047 37.4782 394.227C37.4782 394.031 37.4574 393.817 37.3535 393.67Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.1355 357.234C42.8671 357.382 42.5162 357.743 42.2478 357.546C42.5781 357.89 43.4451 357.939 43.1355 357.234Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.2041 388.455C24.4312 388.57 24.5963 388.701 24.7821 388.833C24.555 388.586 24.3486 388.356 24.2041 388.455Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.761 388.846C24.8848 388.977 25.0087 389.109 25.1326 389.207C25.0294 389.076 24.9055 388.961 24.761 388.846Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.2404 351.758C29.3647 351.725 29.4684 351.675 29.5098 351.576C29.2611 351.576 29.1989 351.642 29.2404 351.758Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.1681 394.651C37.581 394.765 38.3861 397.209 38.6751 395.192C39.9757 395.307 39.2118 396.504 39.5215 397.061C39.8518 396.684 40.3472 397.274 40.822 397.176C40.6775 396.897 40.306 396.569 40.4298 396.143C41.0285 395.962 41.4001 396.635 41.173 397.159C41.8749 396.536 42.1639 398.012 42.7213 397.11C42.3497 395.159 41.8955 393.765 40.1202 392.322C40.3266 393.454 40.6982 394.7 40.1202 395.602L39.0054 395.175C40.0376 394.175 39.3151 393.519 39.5008 392.503C39.2325 393.257 39.0054 394.011 38.7783 394.765C37.8081 395.798 37.6223 395.077 37.4365 394.224C37.4158 394.438 37.3333 394.618 37.1475 394.667L37.1681 394.651Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M27.4029 392.75L27.3616 392.783C27.3616 392.783 27.4236 392.865 27.4649 392.882L27.4029 392.75Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.4633 294.578L34.071 294.348C34.2362 294.528 34.3601 294.594 34.4633 294.578Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.6173 299.467C33.6173 299.467 33.5553 299.45 33.5347 299.434C33.576 299.45 33.5967 299.45 33.6173 299.467Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.4399 303.139C57.4399 303.139 57.5436 303.139 57.6058 303.123C57.5643 303.007 57.5021 303.057 57.4399 303.139Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.72 299.465C33.72 299.465 33.658 299.465 33.6167 299.465C33.658 299.465 33.6787 299.481 33.72 299.465Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.0308 323.669C34.0308 323.669 34.2372 323.62 34.4436 323.505C34.3404 323.456 34.2166 323.489 34.0308 323.669Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.4243 319.142C36.4243 319.142 36.5078 319.109 36.5704 319.076L36.4243 319.142Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.3153 356.544C48.3559 356.314 48.3559 356.134 48.3153 355.986C48.2747 356.15 48.2544 356.331 48.3153 356.544Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.5343 299.416C33.4311 299.35 33.3072 299.268 33.1833 299.137C33.3279 299.285 33.4311 299.367 33.5343 299.416Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.5516 331.407L38.4479 331.242L38.3857 331.325L38.5516 331.407Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.3541 333.767C37.2303 333.669 37.1064 333.619 37.0032 333.57C37.3335 334.489 36.5903 336.046 37.7464 336.358C37.7464 336.063 38.696 334.587 39.3566 334.915C39.1501 334.275 40.1204 333.456 39.9759 333.111C39.1708 334.046 38.9643 333.111 38.6547 332.406C39.0882 331.832 39.5836 332.619 39.8933 332.111L39.9759 330.668L39.6249 331.898L38.5515 331.406C38.5515 331.406 38.6134 331.488 38.634 331.537C38.8405 333.685 36.9412 331.537 37.3541 333.767Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.0037 333.572C36.9624 333.441 36.8798 333.31 36.7766 333.211C36.7766 333.408 36.8592 333.507 37.0037 333.572Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.844 341.982C33.8648 342.097 33.9063 342.213 33.9687 342.377C33.9479 342.295 33.8856 342.13 33.844 341.982Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.1154 279.33C44.7645 279.33 43.9181 280.494 44.7851 280.56C44.9296 280.199 45.0741 279.855 45.2186 279.494L45.1154 279.346V279.33Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35.8271 365.808C35.8684 365.677 35.889 365.546 35.9096 365.398C35.8684 365.366 35.8271 365.333 35.7858 365.316C35.6413 365.382 35.7858 365.677 35.8477 365.808H35.8271Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.7074 335.327C39.6042 335.097 39.4803 334.982 39.3564 334.916C39.3977 335.064 39.501 335.212 39.7074 335.327Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.7207 365.725C33.4524 365.872 33.0395 366.102 32.6886 366.118C32.6473 366.479 33.0808 366.758 33.2046 367.135C33.1221 366.708 33.2459 366.249 33.7001 365.725H33.7207Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.5712 278.64C45.5093 278.526 45.468 278.411 45.4267 278.296L45.6331 278.493L46.0253 277.673C45.9841 277.575 45.9428 277.46 45.9428 277.312C45.9634 277.361 46.046 277.427 46.1492 277.46L46.2937 277.197C45.468 276.443 45.0551 274.721 44.5803 274.197C44.2706 273.524 44.1674 272.737 44.3119 272.245C44.2293 272.688 44.3119 273.311 44.8486 273.18C45.4886 272.311 47.0782 271.983 45.9841 270.294L45.8808 271.229L44.188 268.982C45.0964 268.31 45.0344 270.097 45.695 270.458C44.9312 268.753 47.6562 267.605 46.0666 266.72C47.0782 266.687 48.771 266.654 48.8123 265.572C47.5736 266.26 48.1517 264.867 46.8511 265.408C46.3144 264.998 47.3672 264.244 46.6034 264.129L47.0162 264.26C48.8329 262.555 46.4176 261.768 45.6744 260.931C45.5093 258.718 46.3144 257.767 46.3144 255.979C46.9956 255.963 48.8948 255.602 48.8948 254.881C48.0071 254.487 47.7594 252.847 46.6034 252.618C45.9841 253.864 47.4704 253.716 47.6768 254.504C46.3969 255.061 46.4589 254.487 45.6538 255.307C46.1905 254.635 45.3235 252.11 46.5414 251.404L46.6859 251.683C47.5117 250.503 50.4018 250.437 48.8535 248.289L48.2342 247.272C48.3374 247.322 48.482 247.338 48.5852 247.371C48.8535 245.78 50.1541 246.288 49.2664 244.468C49.3283 244.616 49.4729 244.534 49.5348 244.665C50.2986 243.698 49.0187 242.615 48.8123 241.828C49.8238 241.418 49.7619 241.992 50.4431 242.304C50.9386 240.549 49.3903 238.549 48.2755 237.418L48.9155 236.303C49.2664 236.991 50.2367 237.86 50.856 237.68C50.7115 237.04 50.2367 237.139 50.4844 236.27C51.1037 236.45 51.6611 236.844 52.4043 237.286C53.5603 235.483 50.216 236.778 52.2185 235.581C52.2598 235.007 51.3721 234.63 50.6289 234.548L51.6817 233.531C50.7321 233.384 50.7528 232.088 50.6702 231.236C50.2573 231.121 49.5967 231.875 49.9477 232.22C49.2045 232.138 48.8948 231.219 48.9568 230.645C51.0005 230.498 48.7916 226.858 51.145 227.596C50.567 224.972 50.4844 221.315 49.6999 219.594C50.278 219.036 50.3399 217.888 51.2689 218.577C51.3721 216.478 49.2251 215.396 49.7825 213.33C50.0302 213.166 49.8032 214.265 50.4844 214.199C49.6586 212.838 51.3101 211.723 50.7528 209.624C50.7941 209.985 51.2069 210.083 51.4134 210.132C51.0831 210.165 50.7115 209.28 50.3812 208.739C50.5463 208.427 50.6289 209.149 50.8766 208.968C51.3514 206.935 50.8766 205.131 50.3193 203.36C49.6587 201.589 48.8948 199.835 48.8329 197.818C48.8742 198.966 50.2367 199.359 50.7734 199.359L50.7321 198.228C50.0509 197.818 49.9889 196.965 49.4522 196.277C49.6999 196.178 49.9477 195.818 50.278 196.162C51.4959 193.866 47.6356 192.784 48.1723 190.029L51.0418 193.21L51.9295 192.341L53.23 193.751C53.9113 192.833 52.1772 192.161 53.1681 192.013C53.4571 192.177 53.3952 192.636 53.9525 192.62C54.3035 191.751 53.5397 191.735 53.3126 191.112C55.4595 192.686 55.6247 195.965 56.2234 197.72C56.4092 197.998 55.7073 197.49 55.5008 197.457C55.6041 198.179 54.9847 198.621 55.3976 199.523C56.3059 200.064 56.0169 199.081 56.0789 198.621C56.8427 198.654 56.8014 198.884 56.9459 199.376C55.955 199.507 56.7395 202.131 55.5628 202.803C55.955 205.459 58.1845 202.327 57.7923 204.934L56.6569 205.738C57.5652 207.23 58.3703 209.181 58.1432 210.903L58.102 210.542C57.6065 210.313 57.2968 210.706 57.0491 210.887C56.5743 212.182 57.9781 213.346 56.8427 214.133C58.102 215.609 59.0103 218.085 59.547 219.774C57.9987 220.217 58.329 217.56 57.4001 216.855L57.3588 218.397C57.3588 217.446 56.822 217.068 55.9343 216.495C55.6453 217.839 56.9459 218.282 57.2968 219.561C56.884 219.462 56.6362 219.626 56.595 220.217L57.6065 220.397C57.6065 220.397 57.4413 220.463 57.3794 220.659L57.9162 222.939C58.3703 222.463 59.2374 222.463 59.2786 221.873C58.68 222.07 58.5768 221.578 58.618 220.987C59.258 221.512 59.1961 220.43 59.7328 220.446C59.6709 221.627 59.7534 223.086 60.0012 223.857L59.0722 224.086C58.8038 225.202 59.2786 226.399 58.9896 227.153L58.4942 226.907C58.1639 228.251 58.7213 229.596 57.7717 230.76C58.7626 231.99 59.5264 233.531 60.5792 234.548C61.7352 235.122 58.8451 238.008 60.4347 239.434C60.2902 239.516 59.5883 238.467 59.1754 237.975C58.9277 238.86 60.3728 239.648 59.0929 239.877C59.6502 237.877 58.0813 239.943 57.7923 239.008C57.751 239.959 57.9162 240.959 58.329 241.451C58.4322 239.926 60.0425 242.074 59.5883 240.5C60.5586 241.746 60.8889 243.419 60.3728 244.829C59.836 244.78 59.5677 244.944 59.2786 245.469L60.0218 245.944C59.8154 246.6 59.2167 244.6 58.8038 245.944C60.0218 247.403 57.6271 250.06 60.0631 250.814C58.969 251.814 59.258 248.748 57.8955 250.273C57.0904 249.289 58.2465 248.076 57.0285 247.715C57.2968 248.633 55.9344 247.977 55.8724 248.568L56.533 249.617L56.595 249.404C57.6065 251.158 56.7807 253.815 56.7807 255.979C57.8749 257.898 59.5264 259.275 59.1135 261.472C58.4529 260.767 58.1845 263.243 57.0078 261.768C56.244 262.735 56.884 263.784 57.4207 263.85C57.7097 262.965 57.6271 263.555 57.9987 262.817C58.5974 263.374 58.4322 264.539 57.9368 264.998C58.0194 264.785 57.8749 264.85 57.6684 264.785C57.0904 265.818 58.2671 265.342 58.4323 266.129C57.4826 266.31 57.9781 267.818 57.4207 268.474L58.618 269.605C57.8129 268.982 58.1845 270.556 57.3794 270.655C57.8955 271.442 58.8864 272.147 58.4942 273.229C58.1019 272.737 57.7097 274.18 56.822 274.131C55.7279 275.951 58.7626 277.493 57.2556 279.181C57.0491 279.099 56.533 278.69 56.244 279.198C56.4298 279.641 56.244 280.346 56.244 280.805C56.244 281.034 56.3472 281.166 56.5537 281.198C57.2968 282.035 58.1226 282.51 58.6387 284.068C59.6502 284.051 59.4438 282.756 59.1961 282.166L58.2671 281.608C59.836 281.297 58.1845 280.231 58.7419 279.936C60.3934 280.985 59.5883 283.543 60.4553 285.199C61.983 284.379 62.4784 282.33 62.561 280.526L61.8591 281.264L61.9623 280.313L60.765 281.133C61.0746 280.264 60.9095 279.46 61.0747 278.657C60.9714 279.608 59.5264 279.854 59.8154 279.329C60.9508 278.362 59.3199 278.181 59.5057 277.378C59.3612 277.82 59.258 278.394 58.7419 277.968C60.1663 276.492 59.4438 276 60.9301 274.672C59.2374 274.705 61.0127 272.869 59.6709 272.524L59.4438 273.18L58.618 271.688C60.1457 270.491 59.8567 272.967 61.0747 271.048C61.4669 269.212 59.7122 269.13 59.7535 267.671C60.6824 268.228 61.405 269.441 61.2192 270.606L61.7765 269.933C62.2926 270.36 62.0036 271.967 61.8178 272.77C60.8682 271.344 61.3843 273.36 60.4141 273.885C61.3637 274.082 61.3224 273.213 61.9623 274.279C62.0656 273.328 62.0243 273.196 62.5404 272.016C61.7559 274.574 65.5337 274.623 64.4189 276.837C64.1299 275.754 62.9945 277.083 62.4991 277.165C62.5404 277.673 62.6436 278.69 62.8087 279.116L64.2331 278.87C64.646 280.247 61.6527 280.444 62.8707 282.1C63.6758 282.379 63.3455 280.788 63.4693 281.067C64.0474 283.232 61.7146 283.789 60.4141 285.544C60.8063 285.691 61.694 285.74 62.3339 286.462C61.5288 286.183 61.0334 286.626 60.5379 285.839C60.1044 286.429 60.5998 287.216 60.8269 287.79C61.5082 286.56 61.9417 288.43 62.3959 288.708C62.1481 289.364 61.5907 288.43 61.4256 288.003C61.1159 288.512 59.8154 289.036 60.9921 289.463C60.125 289.397 58.9277 287.757 58.8451 286.741L58.5974 287.397C58.2258 286.888 58.3703 286.823 58.5974 286.167C57.8129 286.757 57.0904 286.609 56.4917 286.413C56.6362 286.347 56.6982 286.478 56.822 286.413C57.1317 285.904 56.9459 285.478 56.4711 285.56C55.377 284.97 55.6247 286.232 54.9847 286.527C55.026 286.806 55.0673 287.085 55.088 287.364L58.4323 290.479C58.68 291.709 57.7097 292.152 57.0078 292.988L57.9781 293.332C57.7097 294.349 57.2556 295.284 56.0789 294.513C56.4298 294.513 56.3679 294.365 56.4504 294.152C56.3266 294.103 56.2234 294.054 56.1614 293.972L55.9963 293.906C56.1614 295.038 56.2647 295.743 56.2853 295.808C55.1086 293.791 54.4686 295.546 52.7346 295.054L53.0236 296.989C53.7668 295.907 53.8906 297.055 54.0764 297.481C53.0649 297.481 53.8493 299.006 53.6016 299.645L53.3952 299.58C52.941 300.154 52.8791 301.236 53.0236 302.023C53.3745 302.023 54.8609 303.154 55.7692 303.728C56.3472 302.466 56.6362 303.269 57.2762 303.236C57.1936 303.368 57.1523 303.613 57.2762 303.646C57.5239 303.859 57.6891 303.433 58.04 303.433C57.7923 301.99 57.8955 300.564 56.5743 299.858C55.8724 300.219 57.0698 300.646 56.5743 301.088C55.7486 300.301 56.0789 299.432 56.2646 298.284L57.173 297.989L56.884 296.776C57.2556 297.301 58.1845 297.104 58.1639 298.334C58.9896 298.252 58.1639 297.104 58.5561 296.382L57.5033 295.89C58.1019 296.104 58.4735 294.513 59.1341 295.726L59.7741 297.678L60.6205 297.235V298.825L60.0838 298.399C60.476 300.99 57.751 298.924 58.68 301.58C59.898 302.498 59.9186 303.368 59.3406 304.876C59.2167 303.728 58.4116 304.663 57.6891 304.171C56.9459 305.253 57.9987 305.745 58.4323 306.401C57.6684 306.614 57.0491 306.762 57.3175 305.762C55.8518 305.483 57.3588 307.122 55.8105 307.073C55.315 310.451 60.3521 310.287 57.7923 314.026L57.1936 313.813C57.5652 316.387 56.595 317.748 56.7188 320.109L54.8402 321.765C54.6544 321.339 53.6635 320.126 52.8171 320.552C54.5512 319.83 54.1383 318.83 55.1499 317.961C54.7577 317.83 54.3861 318.174 54.0971 318.322C54.2003 317.748 54.9641 317.535 54.7989 316.748C54.4686 316.748 53.9319 317.535 53.8493 316.895L55.0054 315.961C54.7577 314.534 52.7552 315.042 53.4777 313.468C54.3035 313.862 55.4802 314.6 55.5834 315.256C55.8931 314.534 55.955 316.305 56.595 315.682C55.4596 314.485 56.595 314.075 55.9963 312.566C56.1408 312.747 56.3885 312.829 56.4298 313.19L57.2968 311.173C56.4504 311.615 56.7395 309.369 55.5834 309.451C54.7577 311.615 55.5421 311.041 54.5099 313.485C54.3654 312.747 53.3745 311.714 52.3836 311.173C52.4249 311.156 52.4662 311.123 52.5075 311.041C51.4547 310.55 51.0831 310.91 49.1426 310.697C50.3399 311.993 49.0806 312.632 49.6587 314.075C50.6908 314.436 51.145 313.435 50.9799 312.73L51.4959 313.993L51.0418 313.714L50.1954 316.699C50.2367 316.125 49.638 315.862 49.2251 315.518C49.1219 315.911 48.771 316.256 48.3994 316.649C49.4316 316.649 50.1541 316.797 50.0715 317.174C49.5141 319.093 48.4407 320.076 47.1607 320.683C47.1607 320.765 47.1814 320.847 47.202 320.913C48.2962 320.683 48.8535 322.487 49.8444 323.192C48.771 323.061 49.0393 324.127 48.3994 324.635C49.5967 325.061 51.3721 324.832 52.4868 324.241C51.5579 322.815 51.4547 323.389 49.9477 322.602L49.2045 320.388L50.1128 320.962C50.7115 319.945 49.5761 318.814 50.856 319.011C51.6198 319.65 50.9592 320.519 51.723 321.159L52.3011 320.503C53.3745 321.864 50.9798 321.011 51.6198 322.585C52.7965 322.142 51.6817 322.733 52.3011 323.438C53.1474 322.995 52.4043 320.781 54.2003 321.421C54.8815 322.274 51.5992 323.799 53.292 325.012L53.0855 324.946C52.6107 326.439 53.581 327.062 54.159 327.701C53.4571 328.275 54.159 329.242 54.1383 329.948L53.6016 329.882L53.6842 330.882C52.7759 330.325 53.8906 329.734 53.87 328.882H52.8584C54.2003 328.029 52.4868 327.209 51.7437 326.373C52.4456 327.554 51.0211 329.439 52.941 329.898L51.8262 330.472L52.1359 330.833C51.2895 331.259 50.1747 330.636 50.1128 329.636C50.4018 329.488 50.5257 329.423 50.7321 329.488C50.3605 328.997 49.638 328.505 50.0302 327.422L50.4638 328.062C50.7528 326.701 50.5463 325.422 49.638 324.848C48.8948 326.783 48.5232 328.718 48.2755 330.587C50.4638 331.358 51.6405 332.128 53.7048 332.62C53.9113 333.899 53.9319 335.621 53.0029 336.621L52.6107 336.49C52.3217 336.998 52.3423 337.49 52.5281 337.917C51.8882 338.425 51.4753 337.425 51.1037 337.785L51.5372 339.638C50.5876 339.442 50.8147 337.933 50.8766 337.212C50.9386 337.359 51.0624 337.638 51.1863 337.572C51.7024 336.785 50.3193 335.08 51.7643 334.85C51.5785 334.424 52.652 335.769 52.941 334.408C53.6016 333.539 52.4043 333.129 52.012 332.997C51.4753 332.932 51.0418 334.358 50.4638 333.801C50.4225 334.522 51.0831 334.867 50.4225 335.736C50.4638 335.031 49.5141 333.965 50.4225 333.67C49.638 332.178 47.0575 332.128 46.8098 332.768C47.6356 332.686 47.4085 335.408 48.7297 333.686C49.638 334.604 49.4109 336.113 49.8857 337.244L49.6793 337.179L49.7206 338.54C49.4729 338.327 49.2871 337.9 48.7503 337.835L49.927 339.819C49.1013 338.687 49.1426 340.393 48.6471 340.835C49.4522 341.114 49.9477 341.885 50.5257 341.245C51.2482 340.524 50.1335 340.753 50.1747 340.032L51.3308 341.163L51.1863 341.229L52.1772 341.934C51.9088 343.295 49.7825 341.114 50.567 342.951L52.0533 342.852C51.5579 344.853 49.5348 347.296 50.0096 348.788C49.2458 348.329 47.9246 348.034 47.0575 348.493C47.3878 347.903 47.5117 346.656 47.5117 345.755C47.8007 345.607 49.0806 347.017 48.6265 347.952C51.0831 347.706 47.5323 345.41 49.9683 345.509C51.1656 343.147 47.9039 343.475 49.6174 341.524C48.5439 341.393 49.1632 340.885 48.2342 340.688C46.3763 341.131 47.9039 343.475 47.0782 344.771C47.0162 344.64 46.8924 344.344 46.7066 344.279C46.2524 345.213 46.4382 345.64 46.7479 346.345L46.8924 346.279C47.7801 347.558 45.9841 346.935 45.406 347.591C45.5299 347.87 45.0757 348.804 45.9015 348.722L44.7041 349.887L45.9221 349.936C45.9015 350.657 45.0757 350.739 45.7157 351.444L46.7892 351.576L47.4085 349.854C47.6356 350.772 48.3994 350.198 48.5026 351.198C47.4704 350.001 47.8007 351.92 46.7685 351.936L47.2846 352.707L47.0162 352.494C46.3763 353.019 47.3259 353.199 47.0988 353.855C47.8007 353.133 48.6471 352.691 48.0071 351.625C48.5026 352.395 48.9774 353.888 48.9774 354.232C49.3283 355.019 48.4407 355.478 48.2342 356.183C47.9659 354.789 44.8899 356.38 46.0253 353.724C46.2318 353.789 46.1492 354.002 46.0253 354.084C47.4498 353.838 46.1699 352.445 45.7157 351.805C44.8899 351.887 44.7867 351.248 44.2087 352.264C44.7661 351.969 45.8396 353.297 45.0757 354.248L43.4036 353.92L43.0114 355.363L42.9494 355.216C41.7934 355.675 42.9494 356.79 42.1856 357.725C42.7017 358.495 41.876 361.234 43.7958 360.184C42.6191 361.004 43.8784 361.89 43.9816 362.89L44.828 361.726C45.8602 363.267 45.1377 362.791 46.9337 364.087C46.4589 364.169 46.046 364.398 45.5712 364.12C45.2202 366.054 44.4358 368.776 45.7363 370.006C45.5299 371.367 43.4862 371.433 44.0848 373.4C44.2913 373.81 45.7157 373.187 45.0964 374.417C44.9519 374.499 43.961 373.122 43.9403 374.532C45.1583 375.614 42.9701 376.844 43.9816 378.221C43.4449 378.877 43.4862 380.091 42.4746 379.779C42.8256 378.697 42.7636 377.139 42.2888 376.877C42.9081 377.073 42.9701 376.139 43.3829 376.975C44.3326 375.368 42.8462 375.86 43.5481 374.417C43.1352 374.286 42.3301 375.106 42.6604 375.45C41.236 375.368 42.2682 372.482 40.4309 373.696C40.1419 375.286 43.0526 375.926 41.4218 377.221C40.6167 376.614 41.4218 375.794 40.018 375.007L39.3368 376.106L40.2864 376.991L40.0799 376.926C38.5729 378.844 41.3392 378.861 41.8966 380.681C42.9701 379.697 44.3326 381.058 45.0138 380.32C45.0964 381.517 44.8487 382.37 43.4242 382.304C42.4333 380.009 41.9172 382.091 40.6786 379.959C40.1419 380.271 38.6349 379.353 38.3871 380.566C39.2955 382.009 39.6051 380.222 39.9561 381.632C39.8322 381.714 39.6877 381.779 39.4813 381.73C40.1625 382.403 39.151 382.452 39.9148 383.272L39.6464 383.075C38.7175 383.977 40.5547 384.157 39.5432 384.928C40.6167 384.649 40.369 385.518 40.9883 386.059C41.4424 385.256 42.9907 384.879 43.032 383.255C42.2062 383.009 41.7314 383.108 41.3805 382.419V383.485C41.2773 383.255 41.0708 383.058 40.9263 382.845L41.4424 381.845C41.9379 383.173 42.8875 382.632 43.6926 383.222C43.2384 384.387 43.8577 384.206 43.5274 384.928C42.3095 384.797 41.2773 387.092 40.369 388.42C40.4309 388.207 40.4309 387.928 40.4722 387.797C39.7703 386.764 39.3987 388.437 39.0684 388.453L39.6258 389.207C39.5432 389.076 39.2748 388.863 39.089 389.175C39.2335 390.158 40.4515 390.158 40.6167 391.142C39.9354 391.192 38.9858 390.322 38.5729 390.913C37.9743 391.093 36.3641 391.7 36.8595 393.028C37.1072 393.126 37.2311 393.471 37.3343 393.864C37.293 393.815 37.2724 393.733 37.2311 393.717L36.4673 394.553C35.3319 393.766 37.0866 393.077 35.9925 392.29L34.8984 392.192C34.9396 391.618 34.5268 390.814 33.99 390.421C33.7423 391.29 34.0107 391.487 34.1552 392.487C33.4533 392.602 32.9991 391.88 32.9166 391.782L33.5359 391.946C34.5268 390.814 32.6275 390.142 32.9372 388.683C32.9991 388.47 33.0611 388.601 33.2675 388.666C32.2972 387.437 33.8455 386.338 32.5243 385.108L33.0817 385.518C32.6688 384.715 31.7192 383.124 30.7902 381.517L30.3567 381.484C30.0884 381.648 30.1503 381.058 30.3567 380.763C29.8819 379.959 29.469 379.189 29.18 378.566C28.891 378.746 28.6433 378.976 28.5607 379.254C29.0355 379.517 28.5194 380.927 29.6755 380.796C28.953 381.419 29.8406 382.517 29.3865 382.976C30.1916 382.14 30.4187 383.649 31.0173 383.829C30.2741 384.091 30.976 385.125 30.0264 384.961C29.7581 385.125 30.7077 384.567 30.1503 384.157C29.3245 383.19 29.242 385.797 28.4781 384.616C29.0355 386.108 28.602 388.01 29.3865 389.552L29.8406 388.732C29.6548 389.388 29.7374 390.978 29.2626 391.077C29.18 390.585 29.2626 389.995 29.0975 389.355C28.0033 389.273 28.9942 390.88 28.313 390.929L29.9645 392.848L30.0884 392.044C30.687 392.569 29.82 394.225 29.6135 395.471C28.1685 394.701 29.6135 393.586 29.1387 392.241C28.6433 391.257 27.6524 392.782 27.3634 391.864C26.9918 392.077 26.9918 392.684 27.3634 392.979L27.0744 393.323C25.7738 392.471 26.2073 390.667 25.1339 389.404C25.2784 389.519 25.4229 389.617 25.5674 389.65C26.166 388.748 26.2073 387.797 25.9183 386.863C25.4642 387.322 25.7325 387.535 25.8564 387.814C25.5261 387.83 25.4435 386.961 25.0926 386.633C24.6384 387.453 24.2875 386.748 24.0191 387.273C23.7301 386.699 23.8746 386.256 24.0604 385.6C24.5971 385.272 24.7416 385.928 25.4229 385.879C25.0719 385.174 26.7028 384.928 26.0009 383.878C25.6087 385.207 24.5765 383.452 24.1636 382.96L24.1017 383.19C23.3585 382.714 23.3378 382.353 24.1017 382.091C24.3907 382.665 24.1017 383.19 24.9274 383.075C24.9274 382.714 24.9274 382.337 24.7003 381.911L25.2577 382.321V380.5C24.5352 380.173 23.5856 379.648 22.574 379.336C23.2346 378.943 22.7805 378.303 22.574 377.877L22.8424 378.09C23.5236 377.336 23.214 375.532 22.5947 375.335C23.214 374.811 26.1454 379.599 25.9802 375.548C26.1248 374.024 24.1017 374.466 23.503 373.564C23.503 373.564 23.7094 373.63 23.8333 373.564C24.0397 372.909 23.2966 372.794 23.0282 372.22C22.6772 372.597 22.6153 373.187 22.8837 373.384C22.0786 373.122 23.1108 371.99 22.4915 371.433C23.7094 372.187 23.1108 370.17 23.7094 370.728C24.6797 369.449 23.8127 367.957 22.925 367.186C24.6384 366.399 22.863 365.579 23.792 364.169C23.7094 364.398 23.8952 364.808 23.6888 365.12C24.5971 366.022 24.4113 363.644 25.1751 364.989C25.0513 364.71 24.6384 364.923 24.7623 365.218C24.8242 365.726 25.2164 366.218 25.6912 366.12L26.7234 364.989L26.9092 365.415L28.3749 363.71C28.1685 363.644 27.9001 363.792 27.7556 363.874C28.5607 361.824 28.1685 359.381 28.5814 357.561C25.7532 356.987 27.9208 352.953 26.3518 351.313C27.1157 351.772 28.5401 352.117 29.18 351.92C29.2626 352.264 30.3361 353.035 30.0058 353.756C29.531 353.838 28.891 354.724 28.4369 354.084C28.4988 356.183 29.7374 353.904 30.7283 354.609C30.7283 352.297 29.242 350.821 28.7878 349.313H29.1387L28.6639 348.165C28.3543 349.034 26.7234 348.854 27.4666 347.755L27.5285 347.903C28.313 347.312 27.6937 345.869 27.9414 344.869L27.095 344.098C27.3427 343.082 29.0975 343.197 30.1916 342.967C30.5425 341.376 29.242 340.311 28.5607 339.097C29.3865 338.655 29.9439 336.277 30.6664 337.622C30.2122 336.113 26.0835 336.015 28.7259 333.752L29.3658 334.457C29.5723 332.079 28.6433 328.554 29.5723 327.537C32.0702 328.669 32.7101 324.848 35.3732 324.684C34.7538 324.75 34.7126 323.831 34.4029 323.667C34.7332 323.503 35.0842 323.208 34.6093 322.815C33.9487 323.684 32.0289 321.896 32.7927 323.766C31.1618 322.7 29.9645 321.421 30.3567 319.47L31.4302 319.601L30.8522 321.109C31.6779 321.027 31.4921 321.814 31.8018 322.175C32.8753 319.371 34.279 322.798 34.5887 319.863C33.9281 319.502 34.1965 319.716 34.0313 318.929C34.0107 319.289 34.7538 319.437 34.8571 318.847L34.0932 318.207C36.0544 317.371 35.0016 320.027 36.4053 319.273C37.0659 320.486 37.2105 322.503 38.6555 322.274C39.44 320.47 36.3434 320.355 37.2724 318.486L37.8917 318.338C37.6027 317.617 36.6737 317.42 36.1576 316.977C36.4879 316.977 36.7769 316.83 36.9421 316.403C35.7448 315.108 35.5796 314.321 34.2378 313.108C34.919 316.043 32.7927 315.42 33.3501 318.42C32.9785 317.912 32.9785 315.829 31.4921 315.567L32.5656 315.698C32.1527 314.698 31.7399 313.698 32.2972 312.534L32.7927 313.321C32.2972 311.665 34.8571 310.861 33.2469 309.451C33.0817 309.877 33.0611 310.238 33.1849 310.533C32.834 309.68 33.1023 308.664 33.4326 307.811L31.9463 305.811C32.483 305.876 32.6895 304.728 33.4533 305.368C34.4855 304.138 32.9785 303.368 32.8133 302.58C34.1758 301.351 33.1436 303.794 34.6093 304.073C35.3938 302.269 35.2699 300.268 34.4648 299.137C34.1965 299.498 33.9694 299.662 33.7217 299.613C34.0726 299.596 34.0933 298.842 34.1758 298.416L33.5152 298.055C34.0933 297.415 34.5061 297.546 34.9396 298.186C35.1874 297.53 33.9487 296.612 35.0635 296.038C35.7448 297.251 34.7745 298.612 35.208 299.252C34.8984 296.825 37.7059 297.087 37.2724 294.021C37.6233 294.021 38.1807 294.579 38.2839 294.021C38.222 292.66 36.8802 293.529 36.1783 293.037C36.4673 294.103 35.9512 294.546 34.9809 295.054L34.4442 294.726C34.7538 294.726 34.8571 294.07 35.1667 293.906L34.0313 293.628C35.3112 293.824 36.4466 292.89 36.075 292.037C35.0222 292.758 35.1048 292.545 33.5978 292.627C32.3798 291.348 35.1461 291.479 33.8868 290.053C34.279 290.184 34.4236 291.332 34.8777 290.397C35.0635 289.61 34.0313 289.61 33.8042 289.053C34.7745 289.758 35.6002 289.676 36.7769 290.446C36.6944 291.873 36.6737 291.02 36.9421 292.447L38.0156 291.365C38.0156 292.578 39.1097 292.349 39.5019 292.496C40.9057 290.545 38.1188 290.791 38.5936 289.495C37.9536 288.79 38.2426 290.709 37.6233 289.643C37.9743 288.43 36.9627 289.299 36.715 287.872L37.1692 288.151C37.8711 287.79 37.1692 287.298 37.1072 286.79C36.8595 286.216 33.2881 287.052 33.5565 284.839C33.8455 284.97 34.0313 285.035 34.1552 285.035L42.8256 288.036C43.1559 285.79 43.7752 283.215 44.7454 280.674C46.5827 280.215 45.9428 282.658 46.7479 282.576L46.2318 283.74C45.4886 283.609 46.3556 281.231 44.8693 282.182C45.117 284.33 44.1261 285.199 45.3441 287.331C47.202 286.872 45.4473 284.675 46.975 283.51C46.7892 284.051 46.913 284.527 47.0988 284.986C47.4911 283.789 47.9246 282.51 48.3787 281.149L47.9865 280.805C47.6562 281.723 47.4085 282.363 47.3465 282.428C47.6768 281.198 46.8511 280.067 45.5712 279.87L45.4886 280.083L45.1583 279.608L45.5299 278.755L45.5712 278.64ZM50.7941 198.228C50.9179 198.294 51.0624 198.359 51.2482 198.392C51.0624 198.359 50.9386 198.392 50.7941 198.228ZM46.2731 303.286C46.7272 301.662 47.3465 300.022 47.7388 298.448C44.7454 301.055 42.4953 302.876 43.3004 298.104L43.1559 297.776C42.743 298.366 42.5365 299.449 42.5572 300.465C43.321 301.367 46.2318 304.351 46.5208 304.351C47.2846 304.138 46.5621 303.63 46.8717 303.122L46.2524 303.269L46.2731 303.286ZM41.814 304.023C41.3805 304.925 41.9792 304.778 42.4746 304.974C42.4746 304.646 42.454 304.302 42.4333 303.974C42.2888 304.089 42.103 304.122 41.814 304.023ZM42.9907 304.974C43.0114 304.876 43.0526 304.778 43.1352 304.745L42.9907 304.974ZM46.4382 286.839C46.4382 286.839 46.4382 286.905 46.4382 286.937C46.5208 286.724 46.5827 286.495 46.6653 286.282C46.5621 286.364 46.4795 286.527 46.4176 286.839H46.4382ZM44.8899 288.626L45.7983 288.938C45.8602 288.741 45.9221 288.528 46.0047 288.315C45.5712 288.348 45.1996 288.38 44.9106 288.626H44.8899ZM40.9057 294.431C41.9585 294.923 41.814 296.218 43.0939 296.415C43.4036 296.53 43.5894 296.267 43.7339 295.972C43.8165 295.644 43.899 295.284 44.0023 294.89C43.8165 294.857 43.6513 294.759 43.5068 294.628C43.2797 294.988 42.9288 295.218 42.165 294.988C44.0435 294.185 41.0708 294.005 41.6695 292.988C40.8025 292.562 40.596 294.07 40.9057 294.431ZM32.6895 375.876C32.5656 375.893 32.2766 375.991 31.905 376.106L31.3476 375.319C31.7605 374.007 33.7423 373.056 32.256 371.761C32.7101 371.22 33.5978 370.99 34.3203 370.744C34.2378 371.023 34.1552 371.269 34.0107 371.466C36.0131 374.975 31.3683 373.056 32.6895 375.876ZM36.6737 360.774C36.7357 360.922 36.9421 360.988 36.9421 360.988C34.9396 357.839 34.5681 355.331 34.8571 353.74C33.8868 353.97 32.9785 355.347 32.5037 356.003L31.5128 355.314L32.4005 355.003L31.5541 353.871C30.7902 354.101 30.8315 354.97 30.2122 355.495C30.4187 355.56 31.4302 357.479 32.0289 358.036L32.9578 356.642C32.6069 357.003 32.6069 358.954 32.7927 359.741C33.3294 359.791 34.3203 358.544 33.1849 358.299C34.0107 358.2 33.8249 359.725 34.7951 358.84C35.497 360.037 34.5681 361.791 34.0726 362.595L32.7101 362.627C32.0702 363.513 34.2378 363.365 33.3294 364.398C33.2469 363.037 31.8224 364.513 31.8637 363.447C31.3063 363.759 30.4393 363.349 30.4187 364.431C32.0908 365.448 29.1594 365.481 30.6457 366.448C30.0264 366.973 29.6342 365.759 29.2832 366.858C30.0884 368.202 30.7696 368.17 32.0495 368.35C32.5243 367.186 30.5012 366.891 30.9141 365.94L32.9166 368.039C33.2675 367.711 33.3294 367.448 33.2675 367.219C33.3501 367.612 33.6391 367.973 34.0726 368.284C34.2997 368.465 34.5061 368.629 34.6919 368.776C34.8158 367.678 34.9396 366.71 35.5177 366.579L36.137 366.776C36.7563 366.432 36.3641 365.776 35.9512 365.448C36.0131 364.464 35.2493 363.414 36.0957 363.267L36.6118 363.677C36.5911 362.463 36.5292 362.316 36.6944 360.807L36.6737 360.774ZM43.7958 321.536C41.4011 322.028 39.2335 322.634 39.1097 326.078L38.9858 325.799C37.293 327.373 40.369 329.324 38.4491 331.243C37.7472 330.144 37.8091 330.21 36.0131 328.898L36.4879 330.046C35.2906 329.62 35.7654 330.767 35.5796 331.555L34.1965 330.702C34.6919 330.259 35.0429 329.046 34.6919 329.046C34.8158 329.341 36.8182 327.586 36.5499 326.521C35.5383 326.521 35.6002 328.751 34.1139 327.619C34.6713 328.554 33.6597 328.554 33.8662 329.488C33.3088 328.554 32.5243 329.144 31.905 328.423L32.0082 329.931C31.6779 329.931 31.5954 327.701 30.1709 328.8C30.6044 329.439 29.6961 330.964 30.7696 331.095H30.4393C30.0264 332.178 31.8844 331.735 31.0586 333.03C31.5954 333.096 32.0082 332.883 31.9876 332.374C31.8018 331.932 31.0793 331.8 31.0586 330.948C31.9669 330.653 30.7902 331.964 32.3179 331.505C33.0817 331.276 32.0495 329.21 33.5565 329.98L33.1436 331.063C34.2171 331.194 34.0313 331.997 34.919 332.046C35.208 332.768 33.8868 333.276 34.7332 334.063C35.3938 334.424 36.7769 334.047 36.0338 335.129C34.2997 335.867 34.1965 338.523 34.2997 339.54L34.8571 340.475C35.5383 340.475 35.0016 338.818 35.786 339.458L35.848 340.819L35.4557 340.671C35.2906 341.114 35.6828 341.606 35.8686 342.032C35.1461 341.54 35.6002 340.606 34.4442 340.688C34.1345 341.294 33.701 341.36 33.8249 341.95C33.7629 341.819 33.6597 341.704 33.5152 341.704C32.8546 342.934 34.6093 343.049 34.919 343.41C36.1989 344.82 36.4673 342.246 37.6027 342.508L37.6853 346.312C37.355 345.968 37.0453 345.607 36.5705 345.689C35.9099 346.558 35.6828 345.623 35.559 346.919C37.1072 346.968 36.2815 348.624 37.0453 349.624C36.3434 350.001 36.2196 350.067 36.3228 349.132C35.3112 349.149 35.5177 350.428 35.3525 350.871C35.559 351.149 35.6415 351.608 35.8273 351.904C36.3847 351.576 36.9834 351.789 37.293 352.625L37.4995 352.691C37.9536 351.395 39.3574 349.428 38.4491 348.509L38.9032 348.788C39.9974 347.345 37.582 345.295 39.5639 344.771C40.307 344.902 39.7703 344.476 40.8644 344.607L40.1832 343.41L40.6373 343.689V341.754L40.8644 341.819C39.9974 340.835 39.2955 340.032 38.7381 339.392C38.2633 339.343 38.1188 339.392 37.8091 339.048C37.6233 338.72 37.6233 338.491 37.7059 338.294C37.9123 337.835 38.6349 337.589 39.0065 337.031L38.8413 338.818C39.6258 339.032 40.4722 338.966 41.1741 338.146C41.1534 338.507 41.7521 338.72 41.9172 338.277C41.7108 338.212 41.5869 337.064 40.8851 337.425C40.8438 335.703 43.3829 333.178 42.2475 330.456C42.8875 332.391 43.5481 329.078 43.5687 331.161C45.0757 329.866 42.4953 329.816 42.9288 328.373C43.4036 328.291 42.743 329.16 43.61 329.587C44.4977 327.226 42.165 325.291 42.9288 322.995H43.9403C43.8784 322.536 43.8165 322.028 43.7545 321.503L43.7958 321.536ZM43.2797 316.781C43.2384 316.321 43.1971 315.846 43.1559 315.37C43.1559 315.42 43.1146 315.452 43.1146 315.502L42.5365 314.059C42.0205 314.846 40.8231 315.288 40.5135 314.059C40.9057 314.19 41.4631 313.911 41.6489 314.337C42.3714 313.616 43.2178 311.96 41.6489 312.255C42.8256 313.895 39.6671 312.419 40.5341 313.698C39.6464 312.96 40.2038 312.386 39.8529 311.747C40.5754 312.452 41.7314 311.796 42.2888 310.894C42.103 310.468 42.5159 309.385 42.2269 308.664C41.2566 308.811 40.8231 308.172 40.4309 309.254C40.2451 308.828 40.1625 308.188 40.7405 307.532C40.8644 307.828 40.885 308.32 41.236 308.32C42.165 307.959 42.2063 307.418 42.6191 307.155C42.6191 306.909 42.5985 306.68 42.5778 306.45C42.4953 306.516 42.3714 306.565 42.2269 306.581L41.5457 305.729C41.814 306.811 41.0502 306.155 40.5135 306.089C41.5869 306.221 40.7612 305.434 40.7818 305.089L39.5226 305.745C39.0065 305.319 40.5547 304.515 39.3987 304.597C38.6968 306.171 38.7794 306.827 38.8826 308.32L39.8529 307.811C40.2244 309.533 38.1807 308.68 37.9123 310.55C38.5936 311.402 37.5201 313.353 39.1303 313.55C38.6762 313.272 37.4995 314.567 38.1394 315.272C39.5019 316.125 39.3781 318.273 40.1419 317.699C40.2451 317.125 39.5639 316.272 40.596 315.895L40.7199 317.043L41.6489 316.387C41.2979 316.731 42.103 316.781 43.3004 316.731L43.2797 316.781ZM56.3059 292.611V292.562C56.3059 292.562 56.3059 292.594 56.3059 292.611Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.7104 392.685C35.0407 393.029 34.9582 393.816 35.7633 393.685C34.8756 393.685 35.722 392.259 34.7104 392.685Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.7836 393.603C33.99 393.668 34.3203 393.636 34.341 393.996L34.1552 392.996L33.7629 393.586L33.7836 393.603Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M27.7552 394.387C28.3952 394.929 28.7461 395.256 28.6636 396.06C26.5166 396.29 28.1268 394.715 26.1244 394.289C25.856 395.765 27.7139 396.273 27.8378 397.503C28.7668 396.929 29.3654 394.486 27.7552 394.387Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.0713 393.637L25.5048 394.489L25.6493 394.407L25.1951 393.555L25.0713 393.637Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.0537 376.942C45.7349 376.91 45.1156 376.369 44.9918 376.09C44.9298 376.303 44.7234 376.598 45.0537 376.942Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.12 216.625L64.3975 210.246C64.5833 212.083 64.6865 213.772 65.12 216.625Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.0308 356.249C43.4436 357.955 44.5171 358.774 44.5997 360.48C46.2306 358.381 42.8656 357.381 44.4758 355.643L43.0308 356.249Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.2952 357.265C46.9947 357.429 46.974 355.872 46.0244 356.036C46.1896 357.167 47.1598 356.659 46.9121 357.643L48.2746 357.265H48.2952Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M26.5587 363.151L25.9807 362.594L26.1665 363.02L26.5587 363.151Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.1917 349.657L48.4394 349.87L48.9555 349.066L48.1917 349.657Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.9354 362.299L23.5845 363.037L24.1006 363.447L23.9354 362.299Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.5325 356.168L31.8421 356.873C31.7802 356.741 32.4202 355.856 31.5325 356.168Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.4322 344.655L49.0813 343.803L48.9368 343.868L49.3084 344.721L49.4322 344.655Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.7455 350.592C27.7133 350.969 28.6835 349.231 27.6926 350.116C27.7133 350.985 28.2706 350.673 28.7455 350.592Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.7142 341.312C36.7142 341.197 36.7142 341.082 36.6113 340.967C36.6319 341.098 36.6731 341.213 36.7142 341.312Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.715 341.312C36.6737 341.673 36.2402 341.985 36.4879 342.264C36.9833 341.854 36.8388 341.69 36.715 341.312Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.0855 337.228L36.9617 337.539C36.5282 337.162 36.5901 337.326 36.9204 337.654C36.9204 337.999 37.2094 338.015 37.4158 338.064C37.5191 338.146 37.6429 338.228 37.7668 338.31C37.6636 338.195 37.5603 338.08 37.4571 337.999C37.5397 337.474 37.5397 337.146 37.0855 337.211V337.228Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.6651 323.732C55.1077 324.88 54.9013 325.175 54.1581 325.028C53.7452 326.126 55.0458 326.077 55.2522 326.799C55.3141 325.503 55.7064 325.29 55.6651 323.732Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.2307 326.799C55.2307 326.947 55.2307 327.078 55.2307 327.243C55.2705 327.062 55.2705 326.914 55.2307 326.799Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.2079 341.23L27.155 340.377L27.2789 340.656L28.2079 341.23Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.3046 322.013C56.222 322.226 56.2014 322.587 55.9124 322.734C56.6555 322.865 56.3872 321.799 56.3046 322.013Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.9257 325.127C40.4509 325.209 40.5954 325.996 40.3889 326.275C40.5541 325.832 41.9785 325.619 40.9257 325.127Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M53.7665 318.305C53.6839 318.518 53.1265 318.813 52.5278 318.6C52.8375 318.961 54.0968 319.518 53.7665 318.305Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.4003 322.979L41.1113 323.126L41.4829 323.979L41.4003 322.979Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.9016 324.782C30.6448 325.782 32.2756 323.536 32.7917 325.192C34.051 323.257 31.5118 325.225 31.8834 323.732C31.4499 324.585 30.2526 324.897 29.9016 324.782Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.8835 323.733C31.9459 323.602 32.0082 323.47 32.029 323.322C31.9667 323.487 31.9251 323.618 31.8835 323.733Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.5833 311.436C39.6658 311.583 39.7484 311.682 39.831 311.781C39.769 311.666 39.7071 311.567 39.5833 311.436Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.9038 318.881L33.0186 320.39C32.2754 319.389 32.6883 317.094 31.3464 317.094C30.9542 317.815 31.1606 318.75 31.6767 319.176L31.9038 318.881Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.596 305.563L59.0296 306.202L59.2979 305.481C59.0709 305.678 58.1419 305.186 58.596 305.563Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.3599 305.334L59.3196 305.482C59.3196 305.482 59.38 305.416 59.3599 305.334Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.8097 314.092C39.6445 314.518 39.6239 314.879 39.8097 315.305C40.0987 315.158 40.4909 314.092 39.8097 314.092Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.3176 301.189L57.4007 302.189L57.4631 301.123L57.3176 301.189Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.2904 296.824L60.5794 296.693L60.2078 295.824L59.9395 295.972L60.2904 296.824Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.1023 300.221C32.8546 300.86 33.9693 301.5 34.2583 301.352L34.4028 300.057C33.3087 300.286 34.3822 300.417 33.99 301.139L33.1023 300.221Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.0557 262.421C63.7163 262.766 63.1383 264.16 62.457 264.192C62.1887 263.979 62.0029 263.192 61.5281 263.635L63.1176 264.897C61.8584 266.324 60.9913 263.586 60.4752 262.799C60.0624 264.307 61.1565 264.848 60.95 266.472C61.1565 266.012 61.6313 265.734 62.0235 265.504C63.2415 265.537 62.519 267.013 62.4777 268.111C63.097 267.455 63.4892 267.898 63.9021 268.439C63.9227 268.538 63.9847 268.603 64.0673 268.652L64.2118 268.833V268.702C64.3563 268.718 64.5214 268.702 64.7691 268.636C64.5214 267.701 65.6155 267.078 65.7188 266.488C63.675 266.914 65.5123 264.455 64.9756 263.668L64.893 262.799L64.9343 262.487C65.1614 262.438 65.4297 262.553 65.76 263.061C65.4091 262.618 65.7187 261.29 65.0788 261.356L65.4091 258.257C65.4917 258.158 65.6155 258.076 65.76 258.011C65.6568 257.896 65.5536 257.863 65.4504 257.879L66.6271 244.352C66.4413 245.024 65.9045 245.565 65.6362 246.237C64.4182 245.139 65.2852 247.352 64.0673 246.975C63.6544 246.483 63.8608 245.811 64.2118 245.434C63.5924 245.253 62.9938 245.795 62.2506 245.696C61.301 247.352 64.2737 247.779 63.6544 249.418C62.9112 249.304 62.2919 248.762 62.2919 249.845L62.1474 249.566C62.8286 251.353 60.3101 250.812 62.2712 252.042L61.1978 251.944C61.9409 252.78 61.7964 254.321 61.8584 255.19L61.6519 255.125C62.6428 257.633 61.7964 256.502 62.0235 259.257L60.9088 257.912C60.2894 258.814 61.6313 259.126 61.4042 259.781C61.1978 259.716 60.3927 259.814 60.2688 259.175L61.7964 262.602C62.519 263.454 62.6222 262.503 63.097 262.405L63.0557 262.421Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.9306 266.473C60.8475 266.637 60.8059 266.833 60.8059 267.079C60.8682 266.85 60.889 266.669 60.9306 266.473Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.6472 243.402L66.5854 244.353C66.6678 244.058 66.7089 243.747 66.6472 243.402Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.7258 271.394C63.3451 270.869 63.4484 271.886 63.8612 272.017L64.0883 269.967C63.6754 269.935 63.2213 269.705 62.8497 269.705L62.7258 271.394Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.9548 269.422C64.6658 269.324 64.4387 269.094 64.2323 268.832L64.1084 269.963C64.4181 269.98 64.7277 269.881 64.9754 269.439L64.9548 269.422Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.6603 267.867V267.507L42.4126 266.949L42.6603 267.867Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.1788 262.441C44.4975 262.819 44.8691 263.655 45.0136 263.95C45.0962 263.015 45.3026 263.442 45.1788 262.441Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M38.2424 263.078L37.9947 262.16L37.8708 262.226L38.2424 263.078Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.8476 236.17C62.8476 236.022 62.8273 235.875 62.8069 235.711C62.8069 235.924 62.8069 236.055 62.8476 236.17Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.3446 244.109C64.7071 241.977 64.2736 245.601 65.8632 244.994L65.4297 243.764L65.8425 243.895L65.8012 242.42C65.0581 242.682 64.9961 242.912 64.253 242.797C64.6865 240.862 65.1819 242.223 66.2348 240.846V238.665L66.4618 238.845C66.4618 238.665 66.3586 238.583 66.2554 238.501V231.138C65.7393 229.777 64.8929 231.827 63.8194 230.81C63.7162 232.352 62.7666 234.615 64.253 234.811C64.0465 234.746 63.6336 234.631 63.4479 234.942L64.6245 235.877L65.0787 235.041C66.2554 235.992 65.7806 238.894 64.9755 239.386C64.6658 237.714 63.1175 238.484 64.0878 236.221C63.6956 236.303 62.9937 236.697 62.8285 236.172C63.0763 238.878 62.2299 241.255 63.3446 244.109Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.9431 217.036H64.0892C64.0892 217.036 63.964 216.986 63.9431 217.036Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.7365 217.937L65.1609 219.265L65.099 217.199L64.0668 217.035C64.3145 217.216 64.8306 217.937 64.4177 218.216L63.7158 217.921L63.7365 217.937Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.0081 220.808C65.5952 219.742 64.3772 219.775 63.7992 220.349C63.2625 219.365 65.1204 219.857 63.8611 219.168C62.9735 219.168 63.4689 220.381 63.6134 220.66L66.0081 220.808Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.1207 228.644L64.6252 228.332L64.4807 229.07L65.1207 228.644Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.6252 228.335L64.7903 227.613C64.4188 227.646 64.0472 227.695 63.7788 227.81L64.6252 228.351V228.335Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.2021 225.693C65.3054 225.381 65.3879 225.037 65.4292 224.627L65.2021 225.693Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.873 226.53H65.0382L65.224 225.693C65.1208 225.989 65.0175 226.251 64.8937 226.53H64.873Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.7888 227.613C65.6559 227.515 66.5435 227.4 66.3371 226.334L65.0159 226.514L64.7888 227.613Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.3058 256.686L39.9135 255.85L39.769 255.915L40.1613 256.751L40.3058 256.686Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.5452 252.094C41.4213 251.881 41.2768 251.717 41.1323 251.586C41.2149 251.799 41.3388 251.979 41.5452 252.094Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.0531 248.287C37.0027 247.402 37.0647 249.648 37.6014 247.927C38.4065 247.812 39.3561 248.697 38.8813 249.501C38.1381 249.386 38.4684 248.665 37.6633 249.124C38.4684 249.714 37.8698 249.894 39.0052 249.78C39.6245 250.747 40.4089 250.895 41.0902 251.567C40.698 250.419 42.0811 248.14 40.7805 246.648C39.5006 245.795 37.6014 246.156 35.6402 246.041C35.1654 246.139 34.7526 248.123 36.0531 248.271V248.287Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M33.968 249.65C33.8235 250.077 33.8854 250.224 34.0299 250.487C34.7112 250.454 33.968 249.995 33.968 249.65Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.6163 240.37C49.3479 240.272 49.0589 239.452 48.5635 239.6L48.8318 240.83C48.8938 240.551 49.2447 240.469 49.6163 240.37Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.9354 241.385L48.8108 240.844C48.7692 240.975 48.8107 241.139 48.9354 241.385Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.7828 240.322L49.5962 240.372C49.5962 240.372 49.7206 240.388 49.7828 240.322Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.7806 222.677C66.3173 222.71 66.0077 222.136 65.8632 221.857C65.8012 222.087 65.6154 222.399 65.7806 222.677Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.6135 201.721L64.0058 201.213C63.758 201.393 63.6342 201.492 63.6135 201.721Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.4406 194.735C48.337 194.735 48.254 194.702 48.1504 194.652C48.2126 194.702 48.3162 194.718 48.4406 194.735Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.1715 194.653C47.6967 194.341 48.3367 193.308 47.6348 192.981L47.8412 193.013L47.4077 192.357C47.5109 192.981 47.4903 194.309 48.1715 194.637V194.653Z\",\n    fill: \"#5C4F47\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.2\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M209.277 202.229C209.339 202.803 210.536 203.033 211.156 203.131L211.465 196.654C210.082 196.802 208.286 198.606 207.543 197.31C205.995 197.802 207.171 199.557 209.009 199.868L206.965 199.311C209.525 200.918 204.24 201.721 202.733 200.672V200.803L212.725 205.345C213.426 203.853 209.277 204.033 209.277 202.197V202.229Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M186.464 335.77C186.299 334.835 185.866 334.622 185.35 334.605C185.618 334.983 185.928 335.36 186.464 335.77Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M215.078 206.426L218.195 207.852C217.369 207.295 216.234 206.803 215.078 206.426Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.935 195.489C166.77 195.489 166.626 195.456 166.378 195.489L167.988 196.145C167.637 195.916 167.286 195.702 166.935 195.522V195.489Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M225.234 236.287C225.317 236.435 225.337 236.55 225.441 236.714C225.441 236.567 225.358 236.419 225.234 236.287Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M149.74 177.207L152.63 180.208C151.206 179.765 151.536 181.175 149.884 180.503C150.112 180.732 150.607 181.782 151.391 181.536L151.33 180.946C155.479 182.635 157.172 181.782 160.248 184.438C162.869 182.979 160.599 182.208 158.72 181.29C158.452 180.995 158.328 180.749 158.183 180.519L152.403 177.879L149.74 177.223V177.207Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.428 292.923L172.098 292.857C172.201 292.89 172.325 292.907 172.428 292.923Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.776 292.611L172.118 292.873C171.478 292.66 170.9 292.021 170.776 292.611Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M212.351 205.851C213.136 205.916 214.085 206.129 215.076 206.441L212.744 205.375C212.682 205.506 212.516 205.687 212.351 205.851Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M203.229 203.279L202.774 200.835L200.627 199.852C201.391 200.819 201.907 201.918 203.229 203.279Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M227.98 232.565C228.31 237.615 223.066 231.122 221.704 233.385C222.199 234.795 224.553 235.385 225.234 236.287C223.459 232.22 233.017 237.139 232.026 233.073C236.278 233.811 236.526 236.156 235.267 237.484C231.035 238.861 232.315 236.008 228.289 235.5C228.867 237.139 229.631 236.894 231.902 237.664C230.787 240.157 236.65 243.108 230.808 244.387C231.592 246.273 233.595 246.224 235.7 247.371C240.118 247.765 238.198 244.731 241.728 244.19C241.336 244.322 240.572 244.567 239.953 244.453L240.985 242.895C239.334 244.338 236.567 242.501 236.278 241.682C236.216 241.091 236.093 239.927 237.311 240.14L238.198 241.058C239.664 239.976 235.122 238.418 237.6 237.303C238.59 237.287 239.045 237.763 239.643 237.845C236.712 236.369 236.96 235.073 234.957 232.991L239.272 234.319C234.503 232.532 236.134 228.974 238.859 226.563C238.095 226.809 237.538 227.285 236.712 226.957C235.762 225.448 238.838 224.448 241.109 225.235C237.558 223.644 244.536 219.89 239.912 217.725L218.153 207.805C218.69 208.165 219.123 208.543 219.289 208.92C215.387 209.576 215.82 210.035 212.27 208.461C214.21 209.953 217.348 209.543 217.369 211.658C215.469 210.756 211.072 210.363 210.474 212.363C214.004 217.594 224.759 221.398 230.044 226.35C227.071 226.399 227.649 230.154 226.844 231.925C223.706 231.105 222.881 229.728 222.323 228.318C222.075 229.187 221.89 230.679 221.663 231.794L227.897 232.499L227.98 232.565Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M218.733 220.398C218.464 220.513 218.299 220.645 218.155 220.776C218.403 220.711 218.609 220.612 218.733 220.398Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M222.509 227.957C222.406 227.94 222.303 227.94 222.179 227.924L222.385 228.368C222.427 228.22 222.468 228.055 222.509 227.94V227.957Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M205.582 206.753C204.756 206.425 204.529 206.18 203.682 205.852C203.951 206.048 204.178 206.294 204.405 206.524C204.797 206.753 205.189 206.868 205.561 206.753H205.582Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M210.866 205.967L212.084 206.181C212.228 206.05 212.269 205.967 212.373 205.852C211.712 205.787 211.155 205.803 210.886 205.967H210.866Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M199.842 250.666L200.461 251.174C200.441 250.879 200.172 250.748 199.842 250.666Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M222.571 237.959C222.406 236.205 218.154 237.566 218.277 235.106L217.968 235.828C216.192 233.975 217.266 230.892 217.245 228.793C219 229.105 219.475 227.596 222.2 227.957C221.642 226.498 221.126 225.038 218.339 224.186C219.33 223.333 216.915 221.874 218.154 220.791C216.461 221.201 212.642 218.955 214.5 221.792C214.293 221.562 213.901 221.677 213.674 221.447C211.259 223.136 215.119 224.005 215.078 225.53C213.385 226.383 212.538 223.923 211.816 224.759C213.22 226.727 209.463 230.679 215.635 230.81C215.986 232.22 214.603 232.351 213.447 232.729C219.867 235.205 210.102 240.78 218.504 241.108C218.215 240.288 218.504 238.992 216.77 237.73L222.551 237.976L222.571 237.959Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M205.808 209.705C205.767 209.804 205.787 209.952 205.705 210.05C205.746 209.952 205.787 209.82 205.808 209.705Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.572 188.67L237.022 189.621C238.054 193.835 236.423 195.278 236.403 198.918C235.639 199.164 235.185 198.705 234.958 198.475C235.433 201.05 234.029 204.837 236.423 206.805C236.32 207.625 234.442 209.675 232.893 208.806C233.348 209.216 233.802 209.691 233.595 210.134C231.614 210.167 233.1 209.101 231.49 209.002C231.324 209.363 230.932 209.478 231.552 209.593C229.9 208.92 224.822 209.953 225.131 207.117C229.817 206.215 225.544 209.101 230.664 208.658C230.767 207.723 228.785 207.756 228.166 207.641C228.352 206.444 229.632 206.526 230.788 206.641C229.239 206.116 231.531 204.706 229.178 203.968C228.93 201.624 232.997 204.247 233.038 202.722L227.939 201.64L229.074 199.148C227.505 195.409 220.136 199.312 217.493 195.015C220.156 195.671 224.78 194.179 225.978 192.277C226.102 193.458 229.301 195.737 227.691 197.18C231.861 195.229 227.98 200.115 232.666 199.197C230.54 198.065 230.375 196.294 231.634 194.983L232.088 195.442C232.728 194.015 227.423 192.703 229.59 190.785C229.487 189.785 230.932 190.031 232.13 190.26C231.407 189.391 230.457 188.588 231.593 188.637L231.572 188.67ZM232.501 190.867L231.903 192.179C232.77 191.9 232.77 191.408 232.501 190.867Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M173.171 137.573L173.398 136.803C173.212 137.098 173.171 137.344 173.171 137.573Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.275 119.62L156.14 118.439C156.181 118.882 156.635 119.259 157.275 119.62Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M181.799 28.8926L181.758 28.9256C181.758 28.9256 181.944 29.0411 182.027 29.1236L181.799 28.8926Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M171.56 85.4626C172.014 85.315 172.406 85.1346 172.736 84.8887C172.22 84.8887 171.849 85.1182 171.56 85.4626Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.482 119.836C157.482 119.836 157.544 119.786 157.585 119.77C157.482 119.72 157.378 119.671 157.274 119.621L157.482 119.836Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.668 144.574C157.833 144.738 157.936 144.902 158.143 145.083C158.06 144.853 157.874 144.689 157.668 144.574Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.324 144.086C172.448 144.266 172.593 144.447 172.799 144.578L172.324 144.086Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M160.598 170.287L161.28 171.353C161.238 170.845 160.97 170.533 160.598 170.287Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.772 146.693C169 146.758 169.227 146.824 169.454 146.89C169.309 146.742 169 146.66 168.772 146.693Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M180.809 70.7368C181.573 70.4909 182.502 69.8842 183.328 70.2285C182.296 69.6546 179.674 69.589 180.809 70.7368Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M223.107 79.4629C222.756 79.5122 222.446 79.6108 222.343 79.7587C223.045 79.7587 223.21 79.6437 223.107 79.4629Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M227.504 172.828L228.742 173.206C228.206 172.91 227.813 172.811 227.504 172.828Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M228.29 164.812C228.29 164.812 228.455 164.846 228.58 164.862C228.476 164.829 228.372 164.829 228.29 164.812Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.151 159.777C157.006 159.777 156.862 159.777 156.697 159.81C156.862 159.991 157.027 159.909 157.151 159.777Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M227.979 164.792C227.979 164.792 228.187 164.792 228.29 164.808C228.187 164.808 228.083 164.775 227.979 164.792Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M218.361 125.309C218.361 125.309 217.782 125.407 217.225 125.588C217.535 125.67 217.886 125.621 218.361 125.309Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M212.971 132.801C212.847 132.85 212.744 132.867 212.599 132.932L212.971 132.801Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.801 71.9707C165.718 72.3478 165.801 72.643 165.924 72.8889C166.028 72.6102 166.028 72.315 165.801 71.9707Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M228.557 164.875C228.908 164.974 229.259 165.105 229.693 165.302C229.238 165.072 228.867 164.957 228.557 164.875Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M202.403 112.896C202.527 112.979 202.63 113.061 202.754 113.143C202.816 113.094 202.857 113.044 202.94 113.012L202.424 112.896H202.403Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M205.107 108.977C205.478 109.125 205.85 109.207 206.201 109.305C204.921 107.813 206.573 105.238 203.084 104.779C203.146 105.271 200.916 107.714 198.872 107.19C199.698 108.223 197.118 109.6 197.675 110.158C199.698 108.6 200.648 110.108 201.763 111.256C200.668 112.224 198.955 110.945 198.232 111.797L198.48 114.142L199.079 112.125L202.423 112.88C202.32 112.798 202.237 112.748 202.114 112.666C200.772 109.174 207.089 112.568 205.107 108.961V108.977Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M206.18 109.305C206.386 109.534 206.634 109.731 206.985 109.895C206.944 109.567 206.613 109.436 206.18 109.305Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M212.661 95.4981C212.558 95.3177 212.414 95.121 212.166 94.875C212.29 94.9898 212.434 95.2685 212.661 95.4981Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M201.287 198.147C202.278 198.131 204.466 196.212 201.865 196.146C201.555 196.737 201.245 197.311 200.936 197.901L201.287 198.147Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M200.028 56.6543C199.925 56.8675 199.883 57.097 199.925 57.3266C200.049 57.3758 200.193 57.425 200.317 57.4742C200.709 57.3594 200.255 56.9003 200.028 56.6543Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M197.674 106.533C198.046 106.91 198.459 107.091 198.851 107.205C198.665 106.96 198.335 106.73 197.674 106.533Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M206.221 56.7683C206.984 56.5223 208.14 56.1452 209.131 56.1288C209.193 55.5549 207.851 55.0794 207.397 54.4727C207.728 55.1613 207.418 55.9156 206.2 56.7683H206.221Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M207.357 54.4238C207.357 54.4238 207.397 54.456 207.397 54.472C207.397 54.456 207.377 54.4399 207.357 54.4238Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M200.111 199.293C200.297 199.474 200.462 199.654 200.627 199.851L199.946 199.539L199.058 200.884C199.223 201.064 199.368 201.245 199.429 201.474C199.347 201.376 199.079 201.294 198.79 201.245L198.459 201.671C201.081 202.884 202.877 205.688 204.405 206.541C205.499 207.623 206.056 208.935 205.808 209.722C205.912 208.984 205.437 207.984 203.93 208.214C202.278 209.657 197.778 210.198 201.432 212.952L201.473 211.427L207.026 215.084C204.549 216.183 204.26 213.264 202.196 212.69C204.879 215.461 197.117 217.38 202.051 218.806C199.079 218.855 194.103 218.954 194.289 220.708C197.757 219.593 196.395 221.84 200.09 220.954C201.742 221.627 198.893 222.856 201.102 223.053L199.884 222.84C194.991 225.628 202.299 226.907 204.632 228.284C205.602 231.908 203.579 233.465 203.889 236.401C201.886 236.433 196.374 237.007 196.498 238.188C199.161 238.844 200.235 241.533 203.661 241.943C205.23 239.91 200.875 240.123 200.152 238.827C203.827 237.926 203.723 238.877 205.974 237.548C204.487 238.647 207.522 242.812 204.054 243.927L203.6 243.468C201.411 245.403 192.865 245.419 197.799 248.994L199.801 250.683C199.471 250.584 199.058 250.568 198.748 250.519C198.211 253.126 194.351 252.24 197.241 255.258C197.014 255.028 196.622 255.143 196.415 254.913C194.372 256.471 198.129 258.307 198.851 259.603C195.92 260.226 196.044 259.291 194 258.717C192.7 261.554 197.344 264.932 200.689 266.932L198.831 268.72C197.757 267.539 194.826 266.014 193.071 266.26C193.567 267.31 194.95 267.195 194.248 268.621C192.431 268.277 190.78 267.572 188.53 266.768C185.206 269.589 194.97 267.801 189.149 269.572C189.025 270.507 191.667 271.212 193.856 271.442L190.8 272.983C193.608 273.344 193.546 275.475 193.835 276.886C195.032 277.132 196.952 275.967 195.92 275.361C198.129 275.607 199.017 277.164 198.872 278.115C192.947 278.05 199.017 284.428 192.184 282.789C193.608 287.199 193.36 293.234 195.342 296.316C193.567 297.087 193.174 298.973 190.594 297.546C190.016 300.94 195.652 303.433 193.422 306.679C192.638 306.876 193.67 305.122 191.688 305.007C193.629 307.549 188.364 308.729 189.211 312.386C189.211 311.795 188.055 311.451 187.477 311.287C188.468 311.369 189.19 312.976 189.892 314.009C189.273 314.435 189.355 313.238 188.55 313.402C186.341 316.501 186.899 319.601 187.642 322.798C188.468 325.996 189.376 329.291 188.199 332.587C188.881 330.702 185.288 329.226 183.74 328.898L183.1 330.702C184.793 331.8 184.277 333.161 185.309 334.621C184.545 334.621 183.575 334.998 182.894 334.227C177.857 336.916 187.724 341.458 183.988 345.459C182.192 343 180.375 340.606 178.517 338.244L175.359 338.884L172.799 335.801C170.198 336.637 174.533 338.966 171.622 338.441C170.92 337.966 171.457 337.342 169.93 336.949C168.319 337.949 170.404 338.572 170.569 339.671C165.863 335.686 167.679 330.849 167.143 327.898C166.812 327.389 168.443 328.553 169.001 328.75C169.166 327.619 171.189 327.34 170.611 325.75C168.402 324.405 168.588 326.045 168.113 326.651C165.987 326.127 166.214 325.815 166.131 324.995C169.062 325.405 168.443 321.109 172.221 320.748C172.427 316.518 164.542 320.06 166.874 316.37L170.528 315.747C168.484 313.009 166.998 309.762 168.237 307.253V307.811C169.579 308.368 170.59 307.893 171.375 307.729C173.233 305.925 169.558 303.63 173.129 302.843C169.991 300.121 168.051 296.07 166.585 293.316C171.127 293.07 169.826 297.087 172.386 298.464L172.778 296.087C172.613 297.563 174.182 298.317 176.536 299.497C177.774 297.497 173.955 296.366 173.15 294.283C174.327 294.562 175.132 294.365 175.297 293.463L172.386 292.906C172.634 292.906 172.861 292.84 173.109 292.578L171.829 288.888C170.446 289.528 167.886 289.315 167.721 290.217C169.475 290.053 169.723 290.856 169.537 291.758C167.741 290.79 167.762 292.479 166.172 292.299C166.565 290.528 166.441 288.249 165.821 287.003L168.608 286.855C169.558 285.183 168.257 283.231 169.186 282.116L170.59 282.608C171.684 280.575 170.177 278.394 173.026 276.705C170.095 274.606 167.762 272.098 164.624 270.359C161.177 269.343 169.558 265.112 164.748 262.702C165.14 262.571 167.287 264.292 168.567 265.096C169.228 263.702 164.934 262.358 168.691 262.095C167.184 265.211 171.664 262.079 172.613 263.571C172.675 262.062 172.138 260.455 170.859 259.668C170.693 262.095 165.801 258.57 167.205 261.079C164.232 259.045 163.158 256.389 164.542 254.175C166.152 254.274 166.916 254.028 167.638 253.208L165.367 252.421C165.863 251.371 167.989 254.602 168.959 252.486C165.14 250.109 171.664 245.911 164.376 244.632C167.39 243.058 167.101 247.977 170.838 245.567C173.398 247.174 170.219 249.076 173.852 249.732C172.902 248.239 176.99 249.338 177.093 248.403L174.925 246.682L174.76 247.042C171.478 244.173 173.418 239.91 173.047 236.384C169.537 233.269 164.314 231.022 164.954 227.48C167.06 228.612 167.225 224.611 171.065 227.021C173.088 225.464 170.92 223.742 169.331 223.643C168.691 225.07 168.773 224.135 167.906 225.316C166.007 224.414 166.214 222.528 167.535 221.791C167.37 222.151 167.762 222.02 168.361 222.135C169.785 220.462 166.482 221.233 165.739 219.954C168.484 219.675 166.647 217.232 168.134 216.15L164.356 214.346C166.854 215.363 165.388 212.805 167.762 212.641C166.049 211.378 162.952 210.263 163.736 208.492C165.016 209.296 165.759 206.918 168.361 207C171.044 204.016 161.631 201.589 165.532 198.818C166.131 198.933 167.803 199.589 168.505 198.769C167.824 198.064 168.195 196.899 167.968 196.162L168.03 196.194C168.03 196.194 167.989 196.162 167.968 196.162C167.845 195.801 167.535 195.571 166.916 195.538C164.459 194.21 161.899 193.456 159.917 190.947C156.945 190.996 157.956 193.095 158.864 194.03L161.734 194.915C157.213 195.473 162.374 197.129 160.826 197.637C155.685 195.965 157.234 191.833 154.178 189.176C149.946 190.537 149.079 193.85 149.41 196.785L151.268 195.571L151.226 197.096L154.467 195.752C153.827 197.178 154.55 198.457 154.282 199.753C154.323 198.228 158.452 197.801 157.75 198.638C154.736 200.228 159.525 200.49 159.277 201.786C159.587 201.064 159.711 200.13 161.362 200.802C157.646 203.229 159.917 204.016 155.954 206.18C160.929 206.098 156.263 209.115 160.289 209.624L160.764 208.558L163.613 210.968C159.442 212.92 159.628 208.919 156.573 212.034C155.892 214.986 161.073 215.117 161.321 217.478C158.452 216.593 156.057 214.625 156.263 212.756L154.777 213.838C153.126 213.166 153.642 210.575 153.91 209.279C157.13 211.575 155.004 208.312 157.708 207.443C154.88 207.148 155.231 208.542 153.064 206.82C153.022 208.345 153.249 208.591 152.052 210.493C153.6 206.344 142.453 206.312 145.074 202.737C146.251 204.475 149.203 202.311 150.586 202.163C150.297 201.36 149.719 199.703 149.059 199.015L144.93 199.457C143.299 197.244 152.011 196.85 147.944 194.227C145.508 193.8 146.974 196.358 146.54 195.899C144.187 192.423 150.855 191.472 154.137 188.602C152.919 188.389 150.318 188.307 148.233 187.176C150.669 187.602 151.969 186.881 153.704 188.127C154.798 187.159 153.084 185.913 152.176 184.979C150.607 187.012 148.708 183.978 147.263 183.536C147.758 182.47 149.699 183.962 150.359 184.651C151.082 183.814 154.756 182.929 151.102 182.289C153.683 182.355 157.75 184.995 158.328 186.635L158.823 185.569C160.103 186.372 159.711 186.487 159.236 187.553C161.3 186.586 163.509 186.782 165.347 187.094C164.954 187.225 164.748 186.995 164.356 187.094C163.633 187.93 164.314 188.635 165.698 188.488C169.124 189.406 167.948 187.373 169.723 186.864C169.517 186.405 169.31 185.962 169.104 185.52L158.225 180.568C157.048 178.584 159.773 177.829 161.548 176.452L158.596 175.927C159.009 174.271 160.062 172.73 163.778 173.943C162.766 173.96 162.993 174.189 162.828 174.55C163.22 174.616 163.509 174.714 163.736 174.829C163.922 174.861 164.087 174.894 164.253 174.927C163.406 173.091 162.849 171.943 162.746 171.844C166.874 175.058 168.154 172.222 173.418 172.943L171.891 169.795C170.095 171.582 169.31 169.729 168.629 169.04C171.622 168.975 168.753 166.564 169.248 165.499L169.847 165.597C170.941 164.646 170.776 162.875 170.033 161.596C169.021 161.596 164.273 159.825 161.383 158.923C160.124 161.006 159.009 159.694 157.151 159.792C157.337 159.579 157.399 159.186 157.027 159.12C156.201 158.776 155.871 159.497 154.88 159.514C156.119 161.842 156.367 164.187 160.454 165.285C162.374 164.662 158.741 164.023 160.041 163.301C162.766 164.548 162.126 165.974 161.92 167.843L159.381 168.368L160.619 170.319C159.36 169.467 156.718 169.844 156.346 167.827C153.972 167.991 156.759 169.827 155.892 171.008L159.153 171.762C157.316 171.451 156.8 174.042 154.405 172.09L151.887 168.958L149.575 169.713L149.1 167.138L150.772 167.811C148.749 163.613 157.44 166.876 153.786 162.58C149.864 161.121 149.513 159.727 150.669 157.234C151.453 159.104 153.476 157.53 155.747 158.317C157.543 156.513 154.282 155.759 152.775 154.726C154.922 154.332 156.676 154.07 156.263 155.726C160.681 156.119 155.644 153.496 160.206 153.529C160.433 148.003 145.756 148.511 151.866 142.28L153.683 142.592C151.66 138.394 154.013 136.131 152.795 132.278L157.667 129.474C158.348 130.179 161.734 132.114 164.025 131.359C159.195 132.622 160.743 134.229 158.121 135.688C159.339 135.901 160.268 135.295 161.053 135.049C160.949 136 158.803 136.377 159.546 137.656C160.516 137.64 161.796 136.328 162.291 137.377L159.257 138.951C160.495 141.28 166.152 140.362 164.645 142.969C162.085 142.362 158.369 141.198 157.812 140.148C157.172 141.345 156.346 138.459 154.715 139.509C158.452 141.427 155.355 142.149 157.605 144.576C157.089 144.28 156.346 144.182 156.14 143.592L154.302 146.92C156.614 146.166 156.594 149.823 159.959 149.642C161.569 146.084 159.484 147.068 161.651 143.034C162.333 144.231 165.636 145.871 168.732 146.707C168.588 146.74 168.484 146.789 168.423 146.92C171.684 147.691 172.634 147.084 178.414 147.33C174.409 145.281 177.877 144.166 175.669 141.854C172.531 141.313 171.54 142.969 172.283 144.117L170.301 142.083L171.726 142.526L173.109 137.607C173.212 138.558 175.029 138.951 176.391 139.492C176.556 138.853 177.444 138.263 178.393 137.623C175.359 137.64 173.233 137.459 173.315 136.836C174.244 133.671 177.072 132.015 180.602 130.982C180.54 130.851 180.478 130.72 180.417 130.605C177.279 131.015 174.987 128.113 171.891 126.998C175.09 127.178 173.914 125.44 175.627 124.587C171.973 123.948 166.854 124.391 163.778 125.391C166.998 127.686 167.081 126.735 171.808 127.949L174.76 131.54L171.87 130.654C170.466 132.327 174.223 134.147 170.425 133.868C167.948 132.852 169.579 131.409 167.081 130.408L165.615 131.491C161.982 129.326 169.29 130.605 166.833 128.064C163.53 128.834 166.606 127.834 164.5 126.703C162.188 127.457 165.161 131.031 159.69 130.08C157.357 128.719 166.441 126.079 161.053 124.177L161.672 124.292C162.539 121.849 159.443 120.849 157.523 119.832C159.381 118.848 156.965 117.29 156.821 116.143L158.431 116.241L157.853 114.601C160.722 115.487 157.646 116.487 157.997 117.881L160.991 117.832C157.357 119.291 162.663 120.57 165.14 121.915C162.684 120.012 166.193 116.864 160.392 116.192L163.468 115.208L162.415 114.634C164.727 113.896 168.216 114.88 168.794 116.52C168.03 116.766 167.638 116.897 167.019 116.782C168.299 117.586 170.569 118.356 169.764 120.144L168.237 119.111C167.886 121.357 168.897 123.439 171.787 124.341C173.233 121.144 173.707 117.963 173.769 114.896C167.081 113.716 163.385 112.502 157.151 111.781C156.119 109.682 155.438 106.878 157.853 105.189L159.071 105.402C159.773 104.566 159.484 103.746 158.823 103.058C160.516 102.205 162.085 103.812 163.014 103.222L161.094 100.204C163.922 100.5 163.778 102.976 163.902 104.14C163.674 103.91 163.241 103.451 162.849 103.566C161.589 104.878 166.255 107.616 162.126 108.042C162.787 108.731 159.195 106.567 158.823 108.813C157.192 110.256 160.826 110.896 162.044 111.109C163.654 111.207 164.397 108.829 166.276 109.748C166.152 108.567 164.108 108.01 165.759 106.583C165.883 107.747 169.042 109.469 166.503 109.977C169.352 112.388 176.907 112.371 177.403 111.305C175.029 111.469 174.76 106.993 171.478 109.879C168.526 108.403 168.67 105.927 166.874 104.091L167.473 104.189L166.854 101.959C167.679 102.303 168.34 102.992 169.95 103.09L165.842 99.8765C168.629 101.713 167.927 98.8927 169.248 98.1712C166.812 97.7449 165.099 96.4823 163.613 97.5645C161.755 98.7779 164.892 98.368 165.016 99.5322L161.239 97.7285L161.631 97.5973L158.514 96.4823C158.885 94.2359 165.821 97.7613 162.911 94.7606L158.575 94.9574C159.422 91.6451 164.562 87.5622 162.725 85.119C165.14 85.8732 169.083 86.316 171.478 85.5125C170.673 86.4963 170.693 88.546 171.003 90.0218C170.219 90.2677 166.007 87.9885 167.039 86.4471C159.917 86.9227 171.065 90.5957 163.881 90.4973C161.115 94.4326 170.59 93.7931 166.172 97.0398C169.372 97.2202 167.679 98.0728 170.487 98.368C175.772 97.5645 170.611 93.7768 172.572 91.6451C172.799 91.8747 173.233 92.3338 173.852 92.4322C174.905 90.8744 174.223 90.2021 173.109 89.0379L172.716 89.1691C169.723 87.103 175.194 88.0705 176.659 86.9883C176.205 86.5291 177.237 84.9714 174.863 85.1354L178.043 83.2005L174.451 83.1513C174.327 81.9707 176.701 81.8231 174.595 80.6753L171.395 80.4949L170.095 83.3481C169.145 81.8395 167.06 82.8069 166.482 81.1836C169.868 83.1185 168.34 79.9866 171.313 79.921L169.579 78.6584L170.404 79.0028C172.118 78.1337 169.29 77.8386 169.764 76.7727C167.906 77.9861 165.594 78.724 167.762 80.4457C166.049 79.1831 164.191 76.7399 164.129 76.166C162.869 74.8706 165.367 74.1 165.801 72.9358C166.936 75.2314 175.565 72.5422 172.964 76.9367C172.365 76.8219 172.51 76.4776 172.902 76.3464C168.773 76.7727 172.985 79.052 174.492 80.085C176.866 79.9374 177.382 80.9704 178.786 79.2979C177.237 79.8062 173.625 77.6254 175.669 76.0677L180.685 76.5596L181.428 74.1983L181.655 74.4279C184.958 73.6572 181.201 71.8535 183.203 70.2794C181.49 69.0168 183.203 64.5239 177.815 66.2621C181.057 64.9175 177.134 63.4581 176.556 61.8184L174.368 63.7369C170.92 61.2117 173.191 61.9988 167.597 59.8671C168.98 59.7359 170.136 59.3588 171.581 59.8015C172.056 56.6204 173.769 52.1276 169.764 50.0779C170.136 47.8315 176.081 47.7331 173.955 44.47C173.294 43.7813 169.207 44.798 170.797 42.7647C171.189 42.6335 174.409 44.9292 174.162 42.5843C170.384 40.7642 176.556 38.7802 173.336 36.4845C174.801 35.4023 174.409 33.4018 177.444 33.943C176.639 35.7139 177.093 38.2882 178.559 38.7474C176.721 38.4194 176.68 39.9608 175.338 38.567C172.84 41.1906 177.134 40.4199 175.379 42.7975C176.597 43.0107 178.848 41.6825 177.795 41.1086C181.985 41.2725 179.508 46.0114 184.669 44.0437C185.206 41.4529 176.515 40.3215 181.077 38.2227C183.575 39.2393 181.325 40.5675 185.639 41.8956L187.435 40.1083L184.504 38.6326L185.123 38.731C189.17 35.5991 181.015 35.5171 179.095 32.4836C176.081 34.0741 171.849 31.7949 169.991 33.0083C169.579 31.0242 170.239 29.5977 174.43 29.7616C177.609 33.5822 178.848 30.1552 182.811 33.7298C184.339 33.2379 188.901 34.7956 189.479 32.7787C186.63 30.3683 185.949 33.3198 184.71 30.9914C185.103 30.8766 185.474 30.7455 186.094 30.8603C183.988 29.7288 186.961 29.6632 184.628 28.3023L185.454 28.6302C188.096 27.1709 182.687 26.8101 185.536 25.5639C182.398 25.9739 183.038 24.5637 181.16 23.6454C179.9 24.9572 175.379 25.5147 175.462 28.2203C177.898 28.6466 179.281 28.499 180.396 29.6633L180.21 27.9087C180.582 28.3023 181.201 28.6138 181.676 28.9746L180.293 30.5979C178.682 28.4007 175.978 29.2697 173.48 28.2531C174.678 26.351 172.902 26.6133 173.79 25.4163C177.382 25.6787 180.189 21.9073 182.667 19.7593C182.502 20.1036 182.564 20.5627 182.46 20.7923C184.628 22.514 185.536 19.7921 186.548 19.7757L184.814 18.5131C185.041 18.7426 185.867 19.087 186.403 18.6115C185.846 16.9717 182.254 16.9225 181.676 15.2992C183.678 15.2664 186.61 16.7422 187.704 15.7911C189.459 15.5124 194.145 14.6105 192.534 12.3969C191.791 12.2165 191.399 11.6426 191.11 10.9867C191.213 11.0851 191.275 11.1999 191.42 11.2491L193.67 9.92088C196.994 11.2655 191.915 12.2985 195.239 13.6431L198.459 13.8726C198.418 14.8237 199.718 16.1519 201.349 16.8078C201.989 15.3976 201.164 15.0532 200.606 13.4135C202.65 13.2659 204.095 14.4629 204.301 14.6433L202.485 14.3318C199.698 16.1355 205.396 17.3325 204.632 19.6937C204.467 20.0544 204.26 19.8249 203.641 19.7101C206.634 21.7761 202.237 23.4979 206.242 25.5475L204.59 24.8588C205.87 26.187 208.884 28.827 211.795 31.4506L213.054 31.5161C213.818 31.2702 213.715 32.2048 213.178 32.6968C214.623 34.0085 215.965 35.2711 216.956 36.3042C217.74 36.0254 218.422 35.6483 218.628 35.1891C217.183 34.73 218.525 32.4836 215.181 32.664C217.266 31.6801 214.479 29.86 215.8 29.1221C213.55 30.4503 212.703 28.0071 210.887 27.6792C213.034 27.2856 210.866 25.5639 213.694 25.8755C214.458 25.6295 211.774 26.4986 213.426 27.1709C215.986 28.7614 215.924 24.5473 218.319 26.4986C216.481 24.0554 217.534 20.9891 215.077 18.4475L213.839 19.7593C214.334 18.6934 213.839 16.1027 215.243 15.9715C215.532 16.7914 215.428 17.726 215.924 18.7754C219.124 18.9558 216.068 16.2994 218.05 16.2666L212.931 13.0692L212.662 14.3646C210.763 13.4627 213.302 10.8227 213.88 8.82227C218.195 10.1668 213.798 11.8886 215.428 14.0858C216.997 15.7091 219.722 13.2987 220.672 14.8073C221.725 14.4629 221.663 13.5119 220.589 12.9872L221.415 12.4461C225.317 13.9218 224.243 16.8078 227.546 18.9066C227.133 18.7098 226.679 18.5459 226.225 18.4803C224.574 19.9232 224.553 21.4482 225.503 22.9567C226.803 22.2353 225.977 21.8909 225.544 21.4318C226.535 21.4318 226.865 22.8092 227.918 23.3831C229.177 22.0713 230.292 23.2191 230.994 22.3828C231.881 23.3011 231.551 24.0226 231.076 25.0884C229.528 25.5803 229.033 24.5473 227.051 24.5801C228.166 25.7443 223.397 26.0558 225.585 27.7776C226.555 25.6459 229.838 28.5154 231.118 29.3189L231.283 28.9582C233.554 29.7452 233.616 30.3191 231.469 30.7127C230.581 29.7944 231.283 28.9582 228.929 29.1057C228.991 29.696 229.053 30.2863 229.714 30.975L228.062 30.3027L228.372 33.2379C230.416 33.779 233.306 34.6808 236.341 35.2055C234.421 35.8286 235.907 36.8617 236.588 37.5504L235.742 37.206C233.884 38.4194 235.184 41.3381 237.001 41.6497C235.308 42.5023 225.73 34.6808 227.01 41.2398C226.865 43.7157 232.769 43.0107 234.71 44.5028C234.71 44.5028 234.111 44.4044 233.719 44.5192C233.223 45.585 235.453 45.7818 236.341 46.7001C237.269 46.0934 237.373 45.1587 236.547 44.8144C238.983 45.2407 236.175 47.0608 238.075 47.9627C234.359 46.7329 236.506 49.9959 234.606 49.0777C232.026 51.1273 234.875 53.5377 237.6 54.7839C232.769 56.0465 238.075 57.3583 235.721 59.6375C235.886 59.2768 235.226 58.5881 235.763 58.0962C232.831 56.6204 234.028 60.4902 231.407 58.293C231.84 58.7521 232.996 58.3913 232.563 57.9158C232.274 57.1123 230.994 56.3089 229.611 56.4401L226.824 58.2602L226.143 57.5551L222.261 60.3262C222.86 60.4246 223.624 60.1787 224.016 60.0639C222.179 63.3925 223.975 67.3443 223.294 70.3122C231.758 71.214 226.452 77.773 231.51 80.3965C229.115 79.6587 224.842 79.1339 223.046 79.4455C222.716 78.888 219.371 77.6582 220.156 76.4776C221.539 76.3464 223.17 74.9034 224.677 75.9365C223.913 72.5422 220.92 76.2316 217.823 75.1166C218.401 78.8716 223.232 81.2492 225.09 83.676H224.078L225.854 85.5453C226.514 84.1187 231.324 84.3811 229.507 86.1848L229.28 85.9552C227.195 86.9391 229.425 89.2511 229.012 90.9072L231.716 92.1534C231.283 93.8095 226.101 93.662 222.963 94.0883C222.427 96.6791 226.576 98.368 228.991 100.319C226.679 101.074 225.895 104.96 223.273 102.779C225.11 105.222 237.249 105.238 230.292 108.993L228.186 107.862C228.393 111.748 232.377 117.422 229.962 119.111C222.22 117.372 221.683 123.603 213.963 123.981C215.738 123.866 216.213 125.342 217.142 125.588C216.213 125.866 215.305 126.358 216.853 126.981C218.484 125.538 224.759 128.359 221.849 125.358C227.01 127.031 231.014 129.08 230.54 132.261L227.34 132.081L228.475 129.588C226.101 129.752 226.349 128.457 225.296 127.883C223.19 132.507 217.844 126.965 217.947 131.786C219.991 132.327 219.165 131.999 219.908 133.278C219.846 132.688 217.637 132.491 217.534 133.442L220.032 134.458C214.582 135.918 216.729 131.54 212.889 132.819C210.495 130.867 209.359 127.588 205.23 128.031C203.558 130.999 212.703 131.064 210.66 134.163L208.905 134.426C210.02 135.59 212.827 135.885 214.479 136.557C213.488 136.557 212.724 136.82 212.394 137.525C216.399 139.574 217.121 140.853 221.498 142.772C218.422 138.017 224.883 138.951 222.179 134.065C223.459 134.868 224.223 138.263 228.62 138.64L225.42 138.459C226.989 140.083 228.537 141.69 227.361 143.592L225.626 142.329C227.691 145.002 220.486 146.412 225.688 148.675C226.019 147.97 225.957 147.38 225.503 146.92C226.844 148.314 226.411 149.954 225.771 151.381L230.87 154.578C229.28 154.48 229.053 156.382 226.576 155.365C223.996 157.415 228.702 158.628 229.425 159.891C225.874 161.957 228.042 157.923 223.624 157.529C221.952 160.497 223.087 163.777 225.854 165.597C226.535 165.007 227.113 164.728 227.897 164.794C226.886 164.843 227.071 166.073 226.989 166.761L229.033 167.319C227.546 168.401 226.328 168.188 224.821 167.155C224.347 168.221 228.269 169.68 225.193 170.68C222.798 168.729 225.152 166.45 223.645 165.433C225.441 169.385 217.059 169.073 219.371 174.091C218.38 174.107 216.481 173.205 216.399 174.14C217.018 176.354 220.651 174.894 222.922 175.665C221.745 173.927 223.067 173.189 225.75 172.32L227.422 172.845C226.535 172.877 226.432 173.927 225.564 174.206L228.991 174.615C225.193 174.337 222.179 175.911 223.521 177.305C226.37 176.075 226.204 176.436 230.56 176.239C234.565 178.272 226.39 178.19 230.602 180.469C229.384 180.256 228.599 178.387 227.546 179.945C227.299 181.24 230.271 181.191 231.159 182.109C228.042 180.994 225.668 181.142 221.972 179.928C221.725 177.583 222.076 178.994 220.837 176.665L218.03 178.485C217.637 176.485 214.479 176.911 213.281 176.698C209.834 179.928 217.947 179.436 216.977 181.568C219.082 182.699 217.575 179.551 219.743 181.289C219.144 183.29 221.787 181.83 223.025 184.159L221.601 183.716C219.66 184.339 221.952 185.11 222.22 185.93C223.129 186.848 233.327 185.372 233.306 189.029C232.439 188.816 231.881 188.734 231.51 188.717L205.065 184.077C204.9 187.766 203.868 191.98 201.824 196.178C196.539 196.965 197.716 192.964 195.363 193.128L196.56 191.226C198.769 191.423 196.973 195.325 200.998 193.735C199.636 190.226 202.278 188.783 197.922 185.323C192.638 186.126 198.583 189.652 194.392 191.62C194.785 190.734 194.269 189.963 193.567 189.209C192.762 191.177 191.874 193.276 190.966 195.506L192.204 196.063C192.885 194.555 193.401 193.522 193.608 193.39C193.03 195.391 195.796 197.227 199.615 197.506L199.78 197.145L200.916 197.932L200.09 199.326L200.111 199.293ZM183.018 330.603C182.708 330.406 182.316 330.226 181.82 330.046C182.336 330.226 182.708 330.226 183.018 330.603ZM189.851 159.087C189.108 161.76 187.91 164.449 187.27 167.024C195.136 162.645 201.06 159.579 200.4 167.401L200.916 167.942C201.907 166.958 202.134 165.203 201.7 163.515C199.099 162.072 189.541 157.333 188.674 157.349C186.527 157.743 188.798 158.53 188.096 159.366L189.851 159.104V159.087ZM202.629 157.677C203.579 156.185 201.865 156.464 200.379 156.169C200.544 156.71 200.689 157.267 200.854 157.808C201.246 157.628 201.783 157.546 202.629 157.693V157.677ZM198.872 156.201C198.831 156.365 198.748 156.513 198.542 156.578L198.872 156.201ZM195.032 185.913C195.032 185.913 194.97 185.815 194.95 185.749C194.805 186.11 194.681 186.471 194.516 186.832C194.764 186.7 194.97 186.422 195.032 185.897V185.913ZM198.934 182.945L196.188 182.47C196.065 182.798 195.941 183.142 195.796 183.486C197.055 183.421 198.15 183.339 198.913 182.945H198.934ZM208.657 173.32C205.396 172.549 205.375 170.434 201.556 170.155C200.586 169.975 200.173 170.401 199.842 170.893C199.698 171.451 199.553 172.041 199.409 172.664C199.966 172.713 200.482 172.861 200.957 173.091C201.473 172.484 202.443 172.107 204.776 172.451C199.553 173.845 208.327 174.025 206.903 175.698C209.566 176.354 209.689 173.878 208.657 173.32ZM207.253 40.2231C207.584 40.1903 208.451 40.0591 209.545 39.8624L211.362 41.1578C210.391 43.2894 204.776 44.8144 209.38 46.946C208.141 47.8151 205.602 48.1922 203.496 48.5858C203.682 48.143 203.909 47.7331 204.239 47.4051C197.675 41.6497 211.713 44.8472 207.253 40.2395V40.2231ZM198.893 64.9011C198.666 64.6715 198.046 64.5567 198.046 64.5567C204.756 69.6891 206.531 73.7556 206.077 76.3628C208.884 75.9693 211.196 73.7064 212.414 72.6406L215.511 73.7556L212.972 74.2639L215.738 76.1004C217.906 75.7069 217.555 74.3131 219.247 73.4441C218.649 73.3457 215.139 70.2302 213.24 69.3284L210.887 71.6076C211.816 71.0009 211.279 67.8362 210.556 66.5572C208.967 66.4752 206.386 68.5085 209.813 68.9184C207.439 69.0824 207.584 66.6064 204.941 68.0658C202.547 66.1145 204.838 63.245 206.097 61.9332L210.082 61.8676C211.713 60.4246 205.375 60.6542 207.77 58.9653C208.41 61.1953 212.146 58.7685 212.332 60.523C213.859 60.0311 216.523 60.687 216.337 58.9161C211.196 57.2435 219.743 57.2107 215.201 55.653C216.894 54.8003 218.298 56.768 219.103 54.9971C216.481 52.8163 214.499 52.8491 210.68 52.5703C209.483 54.456 215.511 54.9479 214.479 56.4893L208.141 53.0786C207.171 53.6197 207.047 54.0461 207.295 54.4232C206.964 53.7673 206.015 53.1934 204.714 52.6851C203.992 52.3899 203.352 52.1276 202.815 51.8816C202.671 53.6689 202.464 55.2431 200.833 55.4562L198.996 55.1283C197.262 55.6858 198.521 56.7844 199.842 57.3091C199.946 58.9161 202.423 60.6214 199.987 60.8673L198.335 60.1951C198.748 62.1791 198.955 62.4087 198.831 64.8847L198.893 64.9011ZM190.532 129.195C197.386 128.277 203.476 127.211 202.65 121.603L203.083 122.062C207.522 119.439 197.799 116.372 202.753 113.158C205.21 114.913 204.983 114.815 210.701 116.881L208.905 115.028C212.559 115.667 210.763 113.814 211.031 112.519L215.346 113.847C214.025 114.585 213.447 116.585 214.458 116.569C214.004 116.11 208.74 119.012 209.917 120.767C212.91 120.718 211.919 117.094 216.688 118.881C214.747 117.389 217.72 117.34 216.77 115.815C218.711 117.307 220.816 116.323 222.901 117.471L222.055 115.011C223.046 114.995 224.037 118.619 227.815 116.782C226.308 115.749 228.434 113.24 225.234 113.076H226.225C227.03 111.273 221.745 112.076 223.707 109.928C222.096 109.83 220.961 110.207 221.229 111.027C221.911 111.732 224.099 111.929 224.45 113.322C221.911 113.847 224.863 111.666 220.569 112.453C218.422 112.847 222.158 116.192 217.451 114.978L218.257 113.208C215.057 113.027 215.325 111.732 212.724 111.666C211.609 110.518 215.305 109.617 212.58 108.37C210.536 107.813 206.634 108.485 208.43 106.681C213.281 105.419 212.621 101.09 212.043 99.4502L210.082 97.9581C208.1 97.9909 210.185 100.664 207.687 99.647L207.047 97.417L208.265 97.6301C208.575 96.9086 207.315 96.1216 206.655 95.4165C208.926 96.1872 207.893 97.7449 211.258 97.5645C211.981 96.5643 213.24 96.4495 212.662 95.4821C212.889 95.6952 213.199 95.892 213.674 95.892C215.243 93.8587 210.061 93.7276 209.008 93.1537C204.797 90.8744 204.838 95.1049 201.411 94.695L199.966 88.4968C201.019 89.0707 202.072 89.6282 203.455 89.497C205.107 88.0541 206.056 89.5626 206.035 87.4474C201.453 87.4146 203.352 84.6762 200.813 83.0693C202.732 82.4462 203.104 82.315 203.063 83.84C206.035 83.7908 205.024 81.6919 205.354 80.9868C204.652 80.5441 204.26 79.8062 203.62 79.3143C202.093 79.8554 200.255 79.5275 199.079 78.1501L198.459 78.0517C197.51 80.1834 194.041 83.4136 196.994 84.8894L195.548 84.4467C192.823 86.8407 200.524 90.1201 194.847 91.0384C192.638 90.8416 194.31 91.5139 191.11 91.35L193.505 93.3012L192.08 92.8585L192.596 96.0232L191.998 95.9084C194.805 97.5153 197.097 98.7779 198.975 99.7946C200.379 99.8601 200.813 99.7782 201.804 100.319C202.464 100.844 202.547 101.221 202.34 101.565C201.886 102.32 199.842 102.746 198.955 103.664L198.79 100.729C196.436 100.401 193.959 100.549 192.204 101.91C192.142 101.32 190.305 101.008 189.995 101.713C190.615 101.811 191.378 103.681 193.319 103.058C194 105.862 187.477 110.092 191.729 114.487C189.211 111.355 188.385 116.782 187.642 113.388C183.699 115.569 191.255 115.552 190.511 117.914C189.128 118.061 190.78 116.618 188.117 115.962C186.341 119.865 193.814 122.915 192.411 126.703L189.438 126.752C189.768 127.49 190.14 128.326 190.511 129.179L190.532 129.195ZM193.732 136.934C194.021 137.689 194.31 138.443 194.599 139.23C194.64 139.165 194.661 139.083 194.702 139.017L196.952 141.329C198.191 140.017 201.514 139.246 202.898 141.214C201.68 141.001 200.152 141.493 199.471 140.804C197.613 142.018 195.714 144.756 200.235 144.198C196.168 141.575 205.974 143.854 202.96 141.804C205.808 142.952 204.425 143.936 205.664 144.969C203.29 143.854 200.111 144.969 198.851 146.461C199.533 147.15 198.728 148.937 199.842 150.085C202.609 149.806 204.116 150.823 204.921 149.052C205.602 149.741 206.097 150.79 204.611 151.889C204.178 151.413 203.889 150.61 202.898 150.626C200.338 151.266 200.379 152.135 199.285 152.578C199.409 152.971 199.533 153.365 199.657 153.742C199.904 153.643 200.214 153.561 200.606 153.496L202.939 154.857C201.762 153.119 204.26 154.119 205.85 154.217C202.65 154.037 205.354 155.283 205.437 155.873L208.905 154.758C210.556 155.431 206.325 156.808 209.689 156.628C211.196 154.02 210.701 152.971 209.834 150.511L207.15 151.381C205.457 148.577 211.774 149.888 211.836 146.822C209.524 145.461 211.96 142.231 207.15 141.968C208.595 142.411 211.547 140.247 209.442 139.115C205.127 137.787 204.756 134.262 202.671 135.246C202.547 136.18 204.9 137.558 201.969 138.197L201.164 136.328L198.686 137.426C199.595 136.836 197.241 136.803 193.691 136.951L193.732 136.934ZM164.108 176.846L164.046 176.911C164.046 176.911 164.046 176.862 164.046 176.829H164.087L164.108 176.846Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.632 38.2559C168.65 38.2887 170.529 39.2069 170.983 39.666C171.128 39.3053 171.685 38.8298 170.632 38.2559Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M149.822 296.301L149.905 300.974V305.614C149.946 302.942 150.235 300.515 149.822 296.301Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M181.367 72.3783C179.675 69.5907 176.351 68.2297 175.67 65.4258C171.458 68.902 181.574 70.4925 177.301 73.3785L181.367 72.3619V72.3783Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.677 70.7895C169.434 70.4943 169.889 73.0687 172.655 72.7736C171.87 70.9043 169.166 71.7733 169.6 70.1172L165.677 70.7731V70.7895Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M227.938 60.9648L229.816 61.8667L229.155 61.178L227.938 60.9648Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.196 83.317L167.37 82.9727L166.111 84.3008L168.196 83.317Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.844 62.3419L236.711 61.1449L235.06 60.4727L235.844 62.3419Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M215.201 72.347L214.086 71.1992C214.313 71.4288 212.682 72.8717 215.201 72.347Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.07 91.5796L167.411 92.9734L167.783 92.8422L166.441 91.4648L166.07 91.5796Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M224.903 81.3474C227.813 80.7079 225.543 83.5611 228.164 82.1181C227.813 80.7079 226.286 81.2163 224.903 81.3474Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M204.487 96.6621C204.487 96.8425 204.57 97.0392 204.879 97.236C204.776 97.0065 204.632 96.8261 204.487 96.6621Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M204.487 96.6644C204.528 96.0905 205.664 95.5494 204.858 95.123C203.517 95.7953 203.991 96.0741 204.487 96.6644Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M204.714 103.337L204.941 102.813C206.325 103.403 206.118 103.141 205.024 102.616C204.962 102.058 204.054 102.042 203.434 101.96C203.084 101.829 202.733 101.714 202.34 101.566C202.712 101.747 203.063 101.927 203.352 102.058C203.269 102.927 203.373 103.452 204.694 103.321L204.714 103.337Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.963 126.113C156.161 124.211 156.697 123.736 158.906 123.932C159.732 122.112 155.892 122.244 155.087 121.096C155.376 123.211 154.323 123.588 154.963 126.113Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M155.086 121.08C155.066 120.85 155.024 120.621 154.962 120.342C154.88 120.637 154.962 120.867 155.086 121.08Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.466 96.5469L232.789 97.8915L232.356 97.4323L229.466 96.5469Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.662 128.949C153.827 128.588 153.765 128.014 154.55 127.752C152.32 127.555 153.497 129.293 153.662 128.949Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M197.634 123.211C199.017 123.063 198.274 121.784 198.831 121.309C198.501 122.03 194.372 122.456 197.634 123.211Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M162.457 134.902C162.622 134.541 164.15 134.049 165.967 134.36C164.914 133.787 161.053 132.918 162.457 134.902Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M197.014 126.751L197.778 126.505L196.436 125.111L197.014 126.751Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M230.086 123.341C227.527 121.734 223.542 125.456 221.478 122.783C218.485 125.997 225.235 122.685 224.657 125.112C225.648 123.718 229.034 123.144 230.086 123.324V123.341Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M224.636 125.111C224.492 125.308 224.388 125.538 224.368 125.784C224.512 125.521 224.595 125.308 224.636 125.111Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M206.53 145.51C206.262 145.28 205.973 145.116 205.663 144.969C205.87 145.149 206.138 145.329 206.53 145.51Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M226.329 133.049L222.49 130.639C225.029 132.246 224.636 136.017 228.6 135.935C229.488 134.754 228.517 133.229 226.866 132.557L226.329 133.033V133.049Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.898 155.89L151.391 154.857L150.854 156.054C151.474 155.726 154.343 156.481 152.898 155.89Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.752 156.27L150.856 156.039C150.856 156.039 150.71 156.155 150.752 156.27Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M204.879 141.181C205.209 140.46 205.127 139.886 204.466 139.197C203.702 139.443 202.897 141.214 204.879 141.181Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M158.204 162.94L157.626 161.316L157.812 163.071L158.204 162.94Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.999 170.141L150.235 170.387L151.577 171.78L152.341 171.518L150.999 170.141Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.508 163.547C230.004 162.481 226.494 161.481 225.73 161.744V163.859C228.889 163.449 225.689 163.268 226.556 162.088L229.508 163.564V163.547Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.249 225.809C151.206 225.251 152.547 223.005 154.529 222.956C155.355 223.3 156.098 224.579 157.419 223.841L152.444 221.808C155.789 219.512 159.03 223.923 160.764 225.186C161.589 222.742 158.266 221.873 158.472 219.25C157.956 220.004 156.656 220.447 155.541 220.808C151.949 220.758 153.683 218.364 153.518 216.61C151.887 217.659 150.607 216.954 149.244 216.101C149.141 215.954 148.935 215.839 148.708 215.774C148.543 215.675 148.377 215.577 148.212 215.478V215.692C147.799 215.659 147.304 215.692 146.643 215.806C147.593 217.315 144.517 218.315 144.414 219.25C150.318 218.561 145.549 222.513 147.283 223.775L147.779 225.169V225.678C147.098 225.76 146.313 225.579 145.219 224.743C146.334 225.448 145.776 227.596 147.676 227.481L147.448 232.45C147.201 232.597 146.891 232.745 146.458 232.827C146.808 233.007 147.118 233.056 147.407 233.04L146.354 254.471C146.891 253.455 148.295 252.618 148.997 251.569C152.754 253.356 149.822 249.831 153.456 250.454C154.736 251.241 154.24 252.29 153.311 252.897C155.149 253.225 156.841 252.389 159.05 252.586C161.569 249.995 152.733 249.208 154.261 246.633C156.47 246.83 158.369 247.732 158.183 245.977L158.637 246.437C156.346 243.551 163.798 244.469 157.832 242.468L161.032 242.649C158.699 241.288 158.844 238.828 158.493 237.418L159.112 237.533C155.706 233.483 158.472 235.319 157.213 230.875L160.826 233.04C162.477 231.597 158.431 231.089 158.906 230.023C159.525 230.121 161.878 229.974 162.395 231.023L157.048 225.481C154.715 224.12 154.674 225.645 153.311 225.792L153.249 225.809Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M158.451 219.28C158.637 219.001 158.74 218.69 158.637 218.312C158.513 218.673 158.472 218.985 158.451 219.28Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M146.252 255.995L146.334 254.52C146.107 254.962 146.004 255.438 146.252 255.995Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.928 211.377C150.214 212.23 149.657 210.59 148.439 210.377L148.274 213.673C149.513 213.706 150.875 214.099 152.01 214.066L151.928 211.361V211.377Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M145.9 214.544C146.746 214.691 147.489 215.069 148.191 215.495L148.274 213.691C147.345 213.658 146.498 213.839 145.879 214.56L145.9 214.544Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M211.795 216.873L211.877 217.463L212.765 218.382L211.795 216.873Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M205.788 225.792C207.708 225.169 206.366 223.791 205.932 223.332C205.891 224.857 205.23 224.168 205.788 225.792Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M225.958 224.727L226.928 226.235L227.299 226.12L225.958 224.727Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.956 267.473C157.997 267.702 158.059 267.932 158.1 268.178C158.141 267.866 158.079 267.653 157.956 267.473Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M155.892 255.093C152.052 258.34 153.064 252.716 148.378 253.585L149.761 255.503L148.543 255.29L148.77 257.569C150.917 257.208 151.082 256.864 153.291 257.061C152.197 260.045 150.587 257.897 147.614 259.963L147.738 263.325L147.098 263.013C147.119 263.292 147.387 263.439 147.738 263.554C147.882 267.309 148.006 271.048 148.068 274.721C149.616 276.852 152.176 273.885 155.273 275.59C155.521 273.261 158.225 269.9 153.807 269.424C154.406 269.539 155.624 269.769 156.181 269.326L152.672 267.752L151.392 268.982C147.903 267.408 149.1 263.046 151.392 262.341C152.424 264.932 156.924 263.931 154.22 267.309C155.355 267.211 157.399 266.686 157.936 267.506C157.028 263.292 159.34 259.652 155.872 255.11L155.892 255.093Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.394 296.086L153.001 296.004C153.208 296.103 153.352 296.135 153.394 296.086Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.157 294.825L150.153 292.447L150.008 295.464L152.981 296.022C152.279 295.678 150.916 294.464 152.155 294.185L154.137 294.841L154.157 294.825Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M147.903 289.973C148.935 291.629 152.507 291.924 154.282 291.235C155.706 292.826 150.339 291.596 153.931 292.957C156.512 293.187 155.294 291.268 154.881 290.825L147.903 289.973Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.35 278.624L152.775 279.181L153.291 278.115L151.35 278.624Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.775 279.182L152.238 280.231C153.353 280.231 154.426 280.247 155.21 280.133L152.775 279.182Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.875 283.002C150.545 283.445 150.276 283.92 150.091 284.527L150.875 283.002Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.928 281.84H151.453L150.854 283.004C151.185 282.578 151.535 282.217 151.907 281.84H151.928Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.238 280.248C149.719 280.248 147.056 280.248 147.572 281.839H151.453L152.238 280.248Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M221.477 235.27L222.819 236.647L223.211 236.532L221.869 235.139L221.477 235.27Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M218.69 242.846C219.103 243.19 219.557 243.469 220.011 243.715C219.763 243.354 219.35 243.059 218.69 242.846Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.473 249.273C232.851 250.732 232.273 246.961 230.973 249.831C228.599 249.995 225.667 248.502 226.926 247.174C229.135 247.371 228.268 248.568 230.58 247.814C228.082 246.797 229.837 246.518 226.493 246.699C224.511 245.075 222.158 244.813 220.052 243.682C221.394 245.6 217.719 249.322 221.848 251.88C225.77 253.356 231.303 252.799 237.083 253.044C238.466 252.913 239.333 249.519 235.514 249.257L235.473 249.273Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.419 247.041C241.75 246.32 241.543 246.09 241.089 245.631C239.107 245.664 241.378 246.451 241.419 247.041Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M196.642 261.915C197.447 262.095 198.355 263.456 199.8 263.243L198.933 261.193C198.768 261.652 197.736 261.767 196.642 261.915Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M198.562 260.291L198.954 261.193C199.037 260.98 198.954 260.701 198.562 260.291Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M196.127 261.98C196.292 261.963 196.478 261.931 196.643 261.914C196.478 261.881 196.292 261.881 196.127 261.98Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.811 287.315C147.242 287.151 148.068 288.036 148.481 288.496C148.667 288.184 149.245 287.758 148.811 287.315Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.729 317.832L147.305 318.276C148.11 318.177 148.523 318.128 148.729 317.832Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M187.105 337.736C187.394 337.835 187.621 337.95 187.828 338.081C187.662 337.966 187.435 337.851 187.105 337.736Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M187.827 338.081C188.921 338.917 186.32 340.098 188.012 341.147L187.455 340.934L188.157 342.311C188.405 341.229 189.499 339.097 187.827 338.064V338.081Z\",\n    fill: \"#5C4F47\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M276.306 114.549C276.306 114.893 276.74 115.008 276.946 115.074L277.111 111.188C276.636 111.302 276.017 112.401 275.769 111.647C275.233 111.958 275.625 112.991 276.244 113.172L275.563 112.86C276.43 113.778 274.613 114.336 274.118 113.745V113.827L277.462 116.418C277.71 115.516 276.306 115.68 276.306 114.582V114.549Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M271.002 194.454C270.857 193.946 270.692 193.88 270.527 193.93C270.651 194.11 270.795 194.29 271.002 194.454Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M278.247 116.994L279.3 117.814C279.032 117.486 278.639 117.207 278.247 116.994Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.98 111.057C261.98 111.057 261.877 111.057 261.794 111.057L262.331 111.419C262.207 111.271 262.104 111.156 261.98 111.041V111.057Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M281.468 134.768C281.488 134.85 281.508 134.915 281.528 135.031C281.528 134.932 281.508 134.85 281.468 134.768Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.325 100.285L257.274 102.056C256.799 101.81 256.903 102.646 256.345 102.269C256.407 102.4 256.572 103.024 256.841 102.876V102.515C258.224 103.483 258.802 102.942 259.814 104.499C260.722 103.581 259.958 103.155 259.318 102.63C259.235 102.466 259.194 102.318 259.153 102.171L257.212 100.662L256.325 100.302V100.285Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.198 170.005L263.653 170.087C263.426 169.988 263.219 169.627 263.198 170.005Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M277.32 116.664C277.588 116.697 277.918 116.812 278.249 116.976L277.464 116.369C277.464 116.369 277.382 116.566 277.34 116.664H277.32Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M274.243 115.255L274.119 113.796L273.396 113.238C273.644 113.812 273.809 114.468 274.243 115.272V115.255Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.417 132.49C282.499 135.508 280.765 131.703 280.27 133.064C280.435 133.917 281.219 134.229 281.447 134.753C280.869 132.343 284.089 135.163 283.779 132.736C285.224 133.13 285.286 134.524 284.853 135.327C283.408 136.213 283.862 134.491 282.499 134.229C282.685 135.196 282.954 135.048 283.717 135.475C283.325 136.983 285.307 138.672 283.304 139.525C283.573 140.64 284.233 140.591 284.956 141.23C286.463 141.394 285.823 139.623 287.02 139.246C286.897 139.328 286.628 139.492 286.422 139.426L286.793 138.492C286.236 139.377 285.286 138.328 285.204 137.836C285.204 137.492 285.162 136.787 285.575 136.885L285.885 137.426C286.401 136.754 284.853 135.885 285.699 135.18C286.029 135.147 286.195 135.426 286.401 135.475C285.41 134.638 285.513 133.851 284.832 132.638L286.298 133.376C284.688 132.376 285.266 130.211 286.215 128.735C285.947 128.899 285.761 129.195 285.493 128.998C285.183 128.096 286.236 127.473 287 127.899C285.802 126.997 288.197 124.636 286.649 123.423L279.341 117.766C279.527 117.979 279.671 118.192 279.712 118.422C278.371 118.864 278.515 119.143 277.338 118.241C277.978 119.11 279.052 118.815 279.052 120.094C278.412 119.569 276.926 119.405 276.698 120.619C277.855 123.701 281.488 125.85 283.243 128.752C282.231 128.834 282.396 131.064 282.107 132.146C281.054 131.703 280.765 130.883 280.6 130.047C280.497 130.572 280.435 131.474 280.352 132.146L282.458 132.49H282.417Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M279.384 125.324C279.384 125.324 279.239 125.473 279.177 125.555C279.26 125.522 279.322 125.44 279.384 125.324Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M280.601 129.816C280.601 129.816 280.539 129.816 280.498 129.816L280.56 130.079C280.56 129.997 280.601 129.882 280.601 129.833V129.816Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.006 117.323C274.717 117.126 274.655 116.995 274.366 116.814C274.449 116.929 274.532 117.077 274.614 117.208C274.738 117.339 274.883 117.405 275.006 117.323Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M276.823 116.765L277.236 116.88C277.236 116.88 277.298 116.748 277.34 116.683C277.112 116.65 276.927 116.683 276.823 116.765Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M272.757 143.754L272.963 144.05C272.963 143.869 272.86 143.803 272.757 143.754Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M280.539 135.8C280.498 134.75 279.032 135.636 279.094 134.144L278.991 134.57C278.392 133.488 278.785 131.619 278.785 130.356C279.383 130.52 279.548 129.618 280.477 129.782C280.292 128.913 280.126 128.044 279.197 127.568C279.548 127.044 278.723 126.207 279.156 125.535C278.578 125.814 277.298 124.502 277.897 126.191C277.835 126.06 277.69 126.142 277.628 125.994C276.782 127.044 278.103 127.503 278.083 128.438C277.505 128.979 277.236 127.503 276.989 128.028C277.443 129.192 276.142 131.619 278.248 131.602C278.351 132.438 277.897 132.537 277.484 132.783C279.652 134.177 276.307 137.669 279.156 137.735C279.074 137.243 279.156 136.456 278.578 135.734L280.539 135.8Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.068 119.076C275.068 119.076 275.068 119.224 275.027 119.273C275.027 119.208 275.068 119.142 275.068 119.076Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.007 106.104L285.845 106.612C286.154 109.121 285.597 110.006 285.556 112.204C285.287 112.368 285.143 112.089 285.06 111.958C285.205 113.499 284.689 115.778 285.494 116.926C285.452 117.418 284.792 118.681 284.276 118.172C284.42 118.418 284.565 118.697 284.503 118.959C283.821 119.009 284.338 118.336 283.801 118.304C283.739 118.517 283.615 118.599 283.801 118.648C283.243 118.271 281.509 118.959 281.633 117.254C283.223 116.647 281.757 118.435 283.491 118.107C283.532 117.549 282.851 117.582 282.645 117.533C282.727 116.811 283.161 116.844 283.553 116.893C283.037 116.598 283.822 115.713 283.037 115.319C282.975 113.909 284.338 115.434 284.358 114.516L282.645 113.925L283.058 112.417C282.562 110.203 280.023 112.63 279.156 110.088C280.044 110.449 281.633 109.498 282.067 108.334C282.087 109.039 283.161 110.367 282.604 111.253C284.028 110.023 282.686 113.007 284.276 112.4C283.574 111.745 283.512 110.695 283.966 109.892L284.11 110.17C284.338 109.301 282.542 108.58 283.305 107.416C283.285 106.809 283.76 106.94 284.172 107.071C283.945 106.563 283.615 106.088 284.007 106.104ZM284.296 107.416L284.09 108.203C284.379 108.022 284.4 107.727 284.296 107.416Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M264.726 76.1642L264.808 75.7051C264.747 75.8854 264.726 76.033 264.726 76.1642Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.566 65.5383L259.195 64.8496C259.195 65.112 259.36 65.3251 259.566 65.5383Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M264.932 44.8303C265.077 44.7317 265.221 44.6167 265.345 44.4688C265.18 44.4688 265.035 44.6167 264.932 44.8303Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.628 65.6722C259.628 65.6722 259.648 65.6392 259.669 65.6392L259.566 65.5566L259.628 65.6887V65.6722Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.38 80.5586C259.421 80.6572 259.462 80.7558 259.545 80.8708C259.524 80.7229 259.462 80.6408 259.38 80.5586Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M264.355 80.084C264.396 80.199 264.437 80.2976 264.52 80.3798L264.355 80.084Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.081 95.9883L260.308 96.6278C260.308 96.3162 260.205 96.1359 260.081 95.9883Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.136 81.69C263.136 81.69 263.281 81.7725 263.364 81.789C263.323 81.7065 263.219 81.657 263.136 81.69Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.319 35.8936C268.588 35.746 268.918 35.3689 269.186 35.5493C268.835 35.2213 267.948 35.2049 268.319 35.8936Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.543 40.6641C282.419 40.6971 282.315 40.7631 282.274 40.8456C282.523 40.8456 282.564 40.7631 282.543 40.6641Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.789 96.645L283.202 96.8587C283.016 96.6943 282.892 96.6286 282.789 96.645Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M283.141 91.8398C283.141 91.8398 283.203 91.8564 283.244 91.8729C283.203 91.8564 283.182 91.8563 283.141 91.8398Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.009 89.709C259.009 89.709 258.905 89.709 258.863 89.742C258.926 89.841 258.968 89.7915 259.009 89.709Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M280.25 68.2441C280.25 68.2441 280.043 68.3099 279.858 68.4249C279.961 68.4742 280.085 68.4249 280.25 68.2441Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M278.331 72.8027C278.331 72.8027 278.247 72.8522 278.205 72.8852L278.331 72.8027Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.199 36.7793C263.158 37.0089 263.199 37.1892 263.219 37.3204C263.26 37.1564 263.26 36.9761 263.199 36.7793Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M283.222 91.8555C283.346 91.9048 283.449 91.9869 283.594 92.102C283.449 91.9705 283.325 91.9048 283.222 91.8555Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.006 60.9805L275.109 61.129L275.171 61.0465L275.006 60.9805Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.978 58.5861C276.101 58.6681 276.225 58.7173 276.349 58.7665C275.936 57.8811 276.535 56.3233 275.358 56.0938C275.358 56.3889 274.574 57.8811 273.893 57.5859C274.161 58.1926 273.273 59.0617 273.438 59.3896C274.14 58.4222 274.45 59.324 274.822 59.9963C274.429 60.5866 273.872 59.8487 273.624 60.357L273.665 61.7672L273.893 60.5538L275.028 60.9637C275.028 60.9637 274.966 60.8818 274.925 60.8326C274.512 58.7501 276.618 60.7178 275.998 58.5697L275.978 58.5861Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M276.348 58.7676C276.41 58.8991 276.493 59.0141 276.617 59.1127C276.617 58.9155 276.493 58.8333 276.348 58.7676Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M278.744 50.4053C278.702 50.2903 278.661 50.1753 278.579 50.0273C278.62 50.0931 278.682 50.2574 278.744 50.4053Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273.623 112.188C273.953 112.155 274.717 110.975 273.83 110.975C273.726 111.335 273.602 111.68 273.499 112.04L273.623 112.188Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.089 27.2168C275.048 27.348 275.027 27.4792 275.048 27.6267C275.089 27.6595 275.131 27.6923 275.172 27.7087C275.317 27.6267 275.172 27.3644 275.089 27.2168Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273.499 57.209C273.623 57.4391 273.747 57.5377 273.892 57.6034C273.83 57.4555 273.726 57.324 273.499 57.209Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M277.195 27.216C277.463 27.0521 277.855 26.8225 278.206 26.8061C278.227 26.4618 277.793 26.1994 277.649 25.8223C277.752 26.2322 277.649 26.6913 277.195 27.216Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273.211 112.894C273.273 112.992 273.335 113.107 273.376 113.222L273.149 113.041L272.839 113.861C272.881 113.96 272.942 114.074 272.963 114.206C272.942 114.156 272.839 114.107 272.757 114.074L272.633 114.337C273.52 115.025 274.099 116.682 274.615 117.173C274.966 117.813 275.151 118.584 275.069 119.059C275.11 118.616 274.966 118.01 274.449 118.174C273.871 119.059 272.344 119.453 273.562 121.06V120.141L275.44 122.257C274.594 122.945 274.511 121.191 273.81 120.896C274.697 122.535 272.055 123.782 273.706 124.569C272.695 124.634 271.002 124.765 271.064 125.815C272.241 125.093 271.766 126.471 273.025 125.88C273.582 126.258 272.612 127.045 273.355 127.127L272.942 127.012C271.27 128.75 273.727 129.422 274.511 130.209C274.821 132.374 274.119 133.341 274.202 135.096C273.52 135.145 271.642 135.571 271.683 136.276C272.571 136.637 272.922 138.228 274.099 138.424C274.656 137.178 273.17 137.359 272.922 136.604C274.181 136.014 274.14 136.588 274.904 135.752C274.388 136.424 275.399 138.883 274.202 139.605L274.057 139.326C273.293 140.507 270.403 140.654 272.055 142.72L272.736 143.704C272.612 143.655 272.488 143.639 272.385 143.622C272.199 145.196 270.878 144.721 271.848 146.492C271.766 146.361 271.642 146.443 271.559 146.295C270.857 147.262 272.137 148.296 272.385 149.05C271.394 149.476 271.435 148.919 270.734 148.607C270.279 150.329 271.869 152.264 273.004 153.379L272.385 154.477C272.013 153.805 271.023 152.952 270.424 153.149C270.589 153.772 271.064 153.657 270.837 154.527C270.217 154.363 269.66 153.985 268.896 153.543C267.782 155.314 271.085 154.002 269.123 155.215C269.082 155.789 269.99 156.133 270.734 156.215L269.701 157.216C270.651 157.363 270.651 158.626 270.754 159.462C271.167 159.577 271.807 158.823 271.456 158.495C272.199 158.577 272.53 159.478 272.488 160.036C270.465 160.184 272.612 163.758 270.279 163.02C270.837 165.595 270.878 169.186 271.642 170.891C271.064 171.432 270.981 172.564 270.073 171.858C269.97 173.908 272.013 175.023 271.374 177.056C271.105 177.22 271.374 176.138 270.713 176.187C271.477 177.548 269.763 178.598 270.217 180.68C270.197 180.336 269.784 180.221 269.578 180.172C269.908 180.139 270.238 181.041 270.548 181.582C270.362 181.877 270.321 181.172 270.052 181.336C268.917 185.304 271.539 188.42 271.291 192.388C271.353 191.256 270.052 190.797 269.495 190.765L269.433 191.88C270.073 192.322 270.052 193.159 270.527 193.864C270.279 193.946 269.99 194.274 269.681 193.929C268.256 196.094 271.993 197.422 271.188 200.095L268.628 196.766L267.658 197.553L266.481 196.094C265.717 196.93 267.389 197.717 266.378 197.799C266.089 197.619 266.213 197.176 265.655 197.143C265.222 197.963 265.985 198.045 266.151 198.668C264.148 196.996 264.313 193.798 263.859 192.076C263.715 191.798 264.355 192.322 264.561 192.371C264.52 191.666 265.18 191.256 264.85 190.371C264.004 189.797 264.189 190.781 264.086 191.207C263.343 191.125 263.384 190.912 263.302 190.42C264.313 190.338 263.756 187.764 265.015 187.174C264.809 184.583 262.393 187.518 262.93 185.009L264.107 184.288C263.281 182.795 262.559 180.877 262.868 179.221V179.565C263.384 179.811 263.694 179.434 263.962 179.27C264.499 178.024 263.157 176.86 264.334 176.138C263.157 174.679 262.352 172.268 261.795 170.612C263.343 170.202 262.992 172.777 263.921 173.482L263.983 171.99C263.983 172.908 264.52 173.285 265.366 173.859C265.697 172.564 264.396 172.104 264.066 170.858C264.479 170.957 264.747 170.809 264.768 170.235L263.756 170.055C263.756 170.055 263.921 169.989 263.983 169.809L263.467 167.595C263.013 168.054 262.146 168.054 262.104 168.612C262.703 168.431 262.806 168.907 262.765 169.481C262.125 168.973 262.187 170.022 261.65 169.989C261.733 168.841 261.65 167.448 261.403 166.693L262.332 166.48C262.621 165.398 262.146 164.234 262.435 163.512L262.91 163.758C263.24 162.463 262.703 161.167 263.653 160.02C262.641 158.823 261.815 157.33 260.763 156.363C259.586 155.822 262.414 152.985 260.783 151.624C260.907 151.542 261.65 152.559 262.084 153.018C262.311 152.149 260.845 151.411 262.125 151.181C261.609 153.133 263.137 151.099 263.446 152.001C263.446 151.083 263.281 150.116 262.848 149.64C262.786 151.132 261.134 149.066 261.609 150.575C260.597 149.378 260.247 147.771 260.721 146.41C261.258 146.443 261.526 146.279 261.774 145.77L261.01 145.328C261.176 144.688 261.877 146.607 262.228 145.311C260.948 143.934 263.178 141.277 260.721 140.622C261.754 139.621 261.63 142.606 262.91 141.097C263.777 142.015 262.682 143.229 263.921 143.557C263.611 142.671 264.995 143.262 265.036 142.704L264.313 141.704L264.251 141.917C263.157 140.228 263.839 137.637 263.735 135.522C262.559 133.702 260.804 132.423 261.052 130.291C261.754 130.947 261.857 128.537 263.137 129.931C263.839 128.963 263.116 127.963 262.579 127.93C262.352 128.799 262.393 128.225 262.084 128.963C261.444 128.455 261.526 127.307 261.981 126.848C261.919 127.061 262.043 126.979 262.249 127.045C262.744 126.012 261.609 126.52 261.382 125.766C262.311 125.552 261.712 124.11 262.228 123.437L260.969 122.404C261.815 122.978 261.341 121.453 262.146 121.322C261.568 120.584 260.536 119.961 260.825 118.879C261.258 119.338 261.526 117.911 262.414 117.911C263.343 116.075 260.185 114.747 261.526 113.025C261.733 113.09 262.29 113.468 262.538 112.959C262.311 112.549 262.455 111.844 262.373 111.402C262.332 111.188 262.228 111.057 262.022 111.041C261.196 110.27 260.329 109.86 259.689 108.368C258.678 108.45 259.008 109.696 259.297 110.237L260.267 110.729C258.719 111.123 260.453 112.057 259.937 112.369C258.203 111.434 258.76 108.926 257.749 107.368C256.304 108.253 255.973 110.254 256.056 112.008L256.696 111.254V112.172L257.79 111.32C257.563 112.189 257.79 112.943 257.687 113.73C257.707 112.812 259.111 112.5 258.884 113.009C257.852 114.009 259.483 114.091 259.379 114.878C259.503 114.451 259.545 113.878 260.102 114.255C258.822 115.763 259.586 116.206 258.223 117.567C259.916 117.452 258.306 119.321 259.669 119.584L259.834 118.944L260.783 120.355C259.359 121.584 259.441 119.174 258.389 121.092C258.141 122.88 259.896 122.896 259.958 124.306C258.987 123.814 258.182 122.667 258.265 121.535L257.749 122.207C257.191 121.83 257.398 120.256 257.48 119.469C258.554 120.797 257.852 118.879 258.781 118.305C257.831 118.174 257.934 119.01 257.212 117.993C257.191 118.912 257.253 119.059 256.84 120.207C257.398 117.682 253.62 117.829 254.549 115.632C254.941 116.665 255.953 115.321 256.427 115.206C256.345 114.73 256.159 113.746 255.932 113.336L254.528 113.648C253.991 112.336 256.964 111.992 255.602 110.451C254.776 110.237 255.251 111.746 255.106 111.484C254.342 109.418 256.613 108.762 257.749 106.991C257.336 106.876 256.448 106.86 255.746 106.204C256.572 106.433 257.026 105.974 257.604 106.712C257.996 106.122 257.418 105.384 257.109 104.843C256.551 106.089 255.932 104.285 255.457 104.039C255.643 103.4 256.283 104.269 256.489 104.679C256.737 104.17 257.996 103.58 256.778 103.252C257.666 103.252 259.008 104.793 259.194 105.761L259.379 105.105C259.813 105.564 259.669 105.646 259.503 106.302C260.226 105.695 260.969 105.777 261.588 105.941C261.465 106.023 261.382 105.892 261.258 105.958C261.01 106.466 261.217 106.876 261.692 106.778C262.848 107.286 262.476 106.072 263.075 105.745C263.013 105.482 262.951 105.203 262.889 104.941L259.256 102.104C258.884 100.924 259.813 100.432 260.432 99.5955L259.441 99.3168C259.607 98.3165 259.978 97.3655 261.217 98.0542C260.886 98.087 260.948 98.2181 260.886 98.4313C261.031 98.4641 261.114 98.5133 261.196 98.5789L261.361 98.6281C261.093 97.5295 260.907 96.8572 260.886 96.7916C262.249 98.6773 262.724 96.9392 264.499 97.3163L264.004 95.447C263.364 96.5456 263.116 95.447 262.91 95.0371C263.921 94.9551 262.972 93.5449 263.157 92.9054L263.364 92.9546C263.756 92.3643 263.715 91.3149 263.467 90.5442C263.116 90.5606 261.526 89.544 260.556 89.052C260.102 90.331 259.751 89.544 259.111 89.626C259.173 89.4948 259.194 89.2488 259.07 89.216C258.801 89.0192 258.678 89.4456 258.327 89.4784C258.719 90.8557 258.781 92.2823 260.164 92.889C260.825 92.4955 259.586 92.1511 260.04 91.692C260.948 92.3971 260.721 93.2661 260.618 94.3976L259.751 94.7419L260.143 95.9061C259.73 95.4142 258.822 95.6766 258.719 94.4632C257.914 94.5943 258.843 95.6602 258.533 96.3816L259.627 96.7916C259.008 96.6276 258.801 98.2017 258.017 97.0539L257.191 95.201L256.407 95.6766L256.262 94.1352L256.82 94.5124C256.18 92.02 259.091 93.8565 257.914 91.3313C256.593 90.5114 256.489 89.6587 256.923 88.1502C257.171 89.2652 257.873 88.2978 258.636 88.7405C259.276 87.6419 258.162 87.2155 257.666 86.6088C258.409 86.3465 259.008 86.1661 258.843 87.1664C260.35 87.3467 258.657 85.8382 260.205 85.8054C260.35 82.4767 255.354 82.9686 257.501 79.1481L258.12 79.312C257.48 76.8196 258.306 75.4095 257.955 73.1139L259.648 71.3757C259.875 71.7857 260.99 72.9171 261.795 72.4416C260.143 73.2614 260.639 74.2125 259.73 75.1143C260.143 75.2291 260.474 74.852 260.742 74.688C260.701 75.2619 259.958 75.5243 260.185 76.2785C260.515 76.2457 260.969 75.4423 261.134 76.0818L260.081 77.0656C260.474 78.4594 262.414 77.8199 261.857 79.4104C260.99 79.0825 259.751 78.4266 259.565 77.7871C259.338 78.5086 259.09 76.7869 258.512 77.4427C259.751 78.5414 258.698 79.0169 259.441 80.4598C259.276 80.2959 259.008 80.2303 258.946 79.8859L258.285 81.9028C259.07 81.4273 259.029 83.6245 260.185 83.477C260.783 81.3125 260.061 81.9356 260.845 79.476C261.072 80.1811 262.166 81.1321 263.219 81.5913C263.178 81.6077 263.137 81.6405 263.116 81.7224C264.21 82.1488 264.54 81.7716 266.502 81.8372C265.16 80.6566 266.357 79.9351 265.635 78.5742C264.582 78.279 264.21 79.2956 264.458 79.9679L263.818 78.7709L264.293 79.0169L264.829 76.049C264.85 76.6229 265.469 76.836 265.924 77.1476C265.985 76.7705 266.295 76.3933 266.625 75.9998C265.593 76.049 264.871 75.967 264.912 75.5899C265.263 73.6714 266.254 72.6383 267.472 71.9824C267.472 71.9005 267.431 71.8185 267.41 71.7529C266.336 72.0316 265.593 70.3263 264.561 69.6868C265.655 69.7524 265.263 68.7194 265.862 68.1947C264.623 67.8503 262.889 68.1947 261.815 68.8178C262.889 70.1623 262.93 69.5884 264.499 70.2607L265.449 72.376L264.479 71.8677C263.983 72.8843 265.242 73.9337 263.942 73.8189C263.116 73.245 263.694 72.3432 262.848 71.7693L262.332 72.4416C261.134 71.179 263.591 71.8677 262.786 70.3591C261.65 70.851 262.724 70.2279 262.001 69.572C261.196 70.0476 262.166 72.1628 260.329 71.6545C259.545 70.8674 262.683 69.1621 260.866 68.0799L261.072 68.1455C261.403 66.6697 260.37 66.0958 259.73 65.5219C260.37 64.9152 259.565 63.9969 259.545 63.3083L260.081 63.3411L259.916 62.3572C260.887 62.8491 259.813 63.4886 259.916 64.3249L260.928 64.2593C259.669 65.1776 261.444 65.8826 262.29 66.6533C261.485 65.5383 262.724 63.6034 260.763 63.2755L261.815 62.636L261.465 62.308C262.27 61.8325 263.426 62.39 263.611 63.3739C263.343 63.5378 263.219 63.6198 263.013 63.5542C263.446 64.0133 264.189 64.4561 263.9 65.5383L263.405 64.9316C263.24 66.2762 263.57 67.5224 264.54 68.0307C265.077 66.0958 265.284 64.1773 265.346 62.3244C263.095 61.7013 261.857 61.0126 259.73 60.6519C259.421 59.4057 259.214 57.7168 260.061 56.6837L260.474 56.7985C260.721 56.2902 260.639 55.7983 260.412 55.3884C261.01 54.8637 261.506 55.8147 261.836 55.4376L261.237 53.6502C262.187 53.7978 262.104 55.29 262.125 55.9951C262.043 55.8639 261.898 55.5851 261.774 55.6671C261.32 56.4706 262.868 58.0611 261.465 58.3727C261.692 58.7826 260.494 57.52 260.329 58.8646C259.751 59.75 260.99 60.0944 261.403 60.2092C261.939 60.242 262.228 58.8154 262.868 59.3401C262.848 58.635 262.166 58.3235 262.744 57.438C262.765 58.1431 263.818 59.127 262.951 59.4713C263.88 60.8979 266.46 60.7831 266.625 60.1436C265.82 60.2748 265.8 57.5856 264.644 59.3565C263.653 58.5039 263.735 57.0117 263.157 55.9295L263.364 55.9787L263.178 54.6505C263.446 54.8472 263.673 55.2572 264.21 55.29L262.868 53.4043C263.797 54.4701 263.591 52.7976 264.045 52.3385C263.219 52.1089 262.662 51.371 262.146 52.0433C261.485 52.7976 262.559 52.5024 262.579 53.2075L261.32 52.1581L261.444 52.0761L260.412 51.4366C260.577 50.092 262.868 52.1253 261.939 50.3544L260.453 50.5184C260.804 48.5179 262.6 46.0091 262.022 44.5661C262.827 44.9925 264.169 45.222 264.995 44.7137C264.706 45.3204 264.685 46.5502 264.768 47.4357C264.499 47.5996 263.095 46.2715 263.488 45.3368C261.052 45.6975 264.788 47.7964 262.352 47.8128C261.341 50.2068 264.582 49.7149 263.033 51.7154C264.128 51.781 263.529 52.3221 264.479 52.4696C266.295 51.9285 264.582 49.7149 265.304 48.4031C265.366 48.5343 265.511 48.813 265.717 48.8622C266.089 47.9112 265.882 47.5177 265.511 46.829L265.387 46.911C264.396 45.6976 266.233 46.2223 266.77 45.55C266.625 45.2712 266.997 44.3366 266.192 44.4514L267.307 43.2544H266.089C266.068 42.5657 266.873 42.4345 266.171 41.7786L265.098 41.713L264.602 43.4347C264.293 42.5329 263.57 43.1396 263.405 42.1721C264.52 43.3035 264.045 41.4343 265.077 41.3687L264.52 40.6308L264.788 40.8275C265.387 40.2864 264.417 40.1389 264.602 39.4994C263.942 40.2536 263.157 40.7292 263.859 41.7294C263.302 40.9915 262.703 39.5486 262.703 39.1878C262.29 38.4171 263.157 37.9252 263.322 37.2365C263.673 38.5975 266.646 36.8922 265.696 39.565C265.49 39.4994 265.552 39.2862 265.696 39.2042C264.293 39.5158 265.697 40.8276 266.171 41.4343C266.976 41.3195 267.142 41.9426 267.637 40.9095C267.1 41.2375 265.903 39.9585 266.625 39.0075L268.318 39.2534L268.607 37.8268L268.669 37.958C269.805 37.4661 268.566 36.4167 269.268 35.4492C268.71 34.7114 269.371 31.9894 267.513 33.088C268.649 32.2354 267.327 31.3991 267.162 30.4317L266.378 31.6123C265.242 30.1365 266.006 30.5792 264.148 29.3494C264.623 29.251 265.015 29.0051 265.511 29.2674C265.717 27.349 266.398 24.627 265.077 23.4464C265.242 22.1018 267.265 21.9706 266.605 20.0358C266.398 19.6258 264.995 20.2817 265.552 19.0355C265.676 18.9535 266.729 20.2981 266.687 18.8879C265.449 17.8385 267.575 16.5759 266.522 15.2313C267.038 14.5591 266.935 13.3621 267.967 13.6572C267.658 14.7394 267.761 16.2808 268.256 16.5267C267.637 16.3464 267.596 17.281 267.162 16.4611C266.275 18.0681 267.74 17.5598 267.1 19.0027C267.513 19.1175 268.298 18.2976 267.947 17.9697C269.371 18.0189 268.442 20.9048 270.238 19.6586C270.465 18.0845 267.534 17.4942 269.123 16.1988C269.949 16.7891 269.165 17.609 270.61 18.3632L271.25 17.2646L270.279 16.412L270.486 16.4775C271.91 14.5591 269.144 14.5919 268.545 12.7881C267.493 13.772 266.089 12.4438 265.449 13.1981C265.346 12.0011 265.593 11.1484 267.018 11.1976C268.029 13.4604 268.504 11.3944 269.784 13.4932C270.321 13.1817 271.828 14.0671 272.075 12.8537C271.146 11.4436 270.857 13.2145 270.486 11.8207C270.61 11.7387 270.754 11.6731 270.961 11.7223C270.259 11.0664 271.27 11.0008 270.506 10.1974L270.775 10.3941C271.704 9.49229 269.867 9.32832 270.857 8.55764C269.784 8.8364 270.032 7.98374 269.412 7.44263C268.958 8.24609 267.41 8.62323 267.389 10.2466C268.215 10.4761 268.69 10.3777 269.041 11.0664V10.017C269.123 10.2466 269.33 10.4269 269.495 10.6401L268.999 11.6239C268.483 10.3122 267.554 10.8697 266.729 10.2794C267.183 9.11515 266.564 9.29552 266.894 8.57404C268.112 8.70522 269.144 6.40959 270.032 5.08141C269.97 5.29457 269.99 5.55693 269.949 5.70451C270.651 6.72114 271.023 5.08141 271.353 5.04861L270.795 4.31074C270.878 4.44192 271.146 4.65508 271.332 4.34353C271.167 3.35969 269.949 3.37609 269.784 2.39225C270.465 2.34306 271.435 3.21212 271.828 2.62181C272.426 2.44144 274.037 1.85114 273.541 0.539353C273.293 0.440969 273.17 0.0966281 273.087 -0.296907C273.128 -0.247715 273.149 -0.165729 273.19 -0.149331L273.995 -0.969197C275.089 -0.198523 273.355 0.473768 274.449 1.26084L275.544 1.37562C275.502 1.94953 275.936 2.73659 276.473 3.11373C276.72 2.26107 276.452 2.06431 276.287 1.08047C276.989 0.982083 277.443 1.68717 277.525 1.78555L276.906 1.62158C275.915 2.73659 277.835 3.39249 277.525 4.81905C277.463 5.03222 277.402 4.90104 277.195 4.83545C278.165 6.04885 276.638 7.13107 277.959 8.31168L277.401 7.91814C277.814 8.70521 278.785 10.263 279.714 11.8043L280.147 11.8371C280.415 11.6731 280.354 12.247 280.147 12.5422C280.622 13.3129 281.035 14.0671 281.365 14.6738C281.633 14.4935 281.881 14.2639 281.964 13.9851C281.489 13.7228 281.984 12.3618 280.849 12.5094C281.572 11.9027 280.663 10.8369 281.138 10.3777C280.354 11.1976 280.106 9.73824 279.487 9.55787C280.23 9.29552 279.528 8.29528 280.477 8.44286C280.746 8.27888 279.817 8.8364 280.354 9.22993C281.179 10.1646 281.262 7.62299 282.026 8.7708C281.448 7.32784 281.881 5.47494 281.076 3.96639L280.622 4.76986C280.808 4.13037 280.705 2.57262 281.179 2.49064C281.262 2.98256 281.2 3.54007 281.365 4.16316C282.459 4.24515 281.468 2.67101 282.129 2.63821L280.457 0.76892L280.333 1.55599C279.714 1.03128 280.622 -0.575661 280.87 -1.78906C282.315 -1.01839 280.766 0.0474334 281.283 1.35922C281.778 2.31026 282.769 0.850904 283.058 1.75276C283.429 1.53959 283.429 0.965686 283.058 0.670534L283.347 0.342587C284.647 1.19525 284.214 2.93337 285.308 4.16316C285.164 4.04838 285.019 3.95 284.875 3.9172C284.297 4.80266 284.255 5.7209 284.544 6.60636C284.998 6.16363 284.73 5.96687 284.586 5.68811C284.916 5.67172 284.998 6.50797 285.349 6.83592C285.804 6.03245 286.154 6.72114 286.423 6.21283C286.712 6.75394 286.588 7.18027 286.402 7.83616C285.865 8.14771 285.721 7.52461 285.04 7.5738C285.391 8.26249 283.78 8.49205 284.482 9.50868C284.854 8.2133 285.907 9.91862 286.34 10.3777L286.402 10.1646C287.166 10.6073 287.166 10.968 286.423 11.214C286.134 10.6729 286.402 10.1646 285.597 10.2794C285.597 10.6401 285.597 10.9844 285.824 11.3944L285.267 11.0008L285.308 12.7554C285.989 13.0669 286.96 13.5752 287.971 13.854C287.311 14.2475 287.806 14.8542 288.012 15.2641L287.723 15.0674C287.063 15.8216 287.455 17.5598 288.074 17.7237C287.476 18.2485 284.358 13.6572 284.689 17.5762C284.586 19.0519 286.609 18.5764 287.249 19.4619C287.249 19.4619 287.042 19.4127 286.918 19.4783C286.732 20.1177 287.476 20.2161 287.765 20.7572C288.095 20.3801 288.136 19.8226 287.868 19.6258C288.694 19.8554 287.703 20.9704 288.322 21.4951C287.083 20.79 287.744 22.7249 287.125 22.2002C286.216 23.4628 287.125 24.873 288.033 25.5944C286.361 26.3979 288.136 27.1358 287.311 28.5296C287.372 28.3164 287.166 27.9065 287.352 27.6113C286.382 26.7587 286.712 29.0543 285.865 27.7753C286.01 28.054 286.402 27.8081 286.258 27.5293C286.175 27.0538 285.762 26.5783 285.287 26.6767L284.317 27.7917L284.09 27.3818L282.728 29.0871C282.934 29.1363 283.202 28.9887 283.326 28.9067C282.645 30.9236 283.182 33.2848 282.913 35.0557C285.783 35.5148 283.863 39.4994 285.535 41.0079C284.73 40.5816 283.285 40.3192 282.666 40.5324C282.562 40.2045 281.448 39.4994 281.737 38.7779C282.212 38.6795 282.79 37.794 283.285 38.4007C283.079 36.3675 282.005 38.6303 280.973 37.9908C281.097 40.2372 282.707 41.6146 283.306 43.0576H282.955L283.533 44.1726C283.78 43.3035 285.411 43.4183 284.771 44.5169L284.709 44.3858C283.987 44.9925 284.709 46.3534 284.544 47.3537L285.453 48.0752C285.287 49.0754 283.512 49.0426 282.439 49.3378C282.211 50.8955 283.595 51.8629 284.379 53.0108C283.574 53.4863 283.264 55.8311 282.397 54.5521C282.996 55.9951 287.104 55.8639 284.689 58.2087L283.987 57.5528C283.987 59.8812 285.267 63.2427 284.42 64.2757C281.819 63.3247 281.53 67.0797 278.909 67.3912C279.507 67.2928 279.652 68.1783 279.961 68.3094C279.652 68.4898 279.321 68.8014 279.837 69.1621C280.416 68.2766 282.501 69.9 281.551 68.1291C283.285 69.0637 284.627 70.2443 284.42 72.1628L283.326 72.0972L283.739 70.5887C282.934 70.7198 283.037 69.9328 282.686 69.6048C281.902 72.4088 280.168 69.1457 280.147 72.0316C280.828 72.3432 280.56 72.1464 280.787 72.9007C280.787 72.54 280.023 72.458 279.982 73.0155L280.808 73.5894C278.929 74.524 279.734 71.8841 278.392 72.6875C277.608 71.5397 277.257 69.5884 275.853 69.9C275.255 71.7037 278.351 71.6381 277.608 73.5238L277.009 73.7042C277.381 74.3928 278.33 74.524 278.888 74.9176C278.558 74.934 278.289 75.0979 278.165 75.5243C279.507 76.7049 279.734 77.4591 281.2 78.5578C280.209 75.7374 282.397 76.2293 281.551 73.327C281.984 73.7861 282.191 75.8194 283.677 75.9998L282.583 75.9342C283.099 76.8852 283.595 77.8363 283.182 79.0005L282.604 78.2626C283.264 79.8368 280.808 80.7878 282.542 82.0668C282.666 81.6405 282.645 81.2797 282.501 81.0174C282.934 81.8372 282.769 82.8375 282.542 83.6901L284.235 85.543C283.698 85.5102 283.595 86.6416 282.769 86.0677C281.861 87.3303 283.45 88.0026 283.677 88.7569C282.459 90.0359 283.223 87.5927 281.737 87.4123C281.138 89.216 281.489 91.1673 282.397 92.2331C282.645 91.8724 282.831 91.692 283.099 91.7248C282.748 91.774 282.81 92.5119 282.769 92.9218L283.45 93.2334C282.934 93.9056 282.521 93.7909 282.026 93.1842C281.861 93.8237 283.161 94.6599 282.108 95.2994C281.324 94.1516 282.129 92.7578 281.633 92.1675C282.191 94.5124 279.363 94.4304 280.085 97.4147C279.755 97.4475 279.115 96.9228 279.074 97.4803C279.259 98.8084 280.519 97.8738 281.283 98.3165C280.89 97.2835 281.344 96.8244 282.273 96.2669L282.831 96.562C282.521 96.5948 282.48 97.2343 282.191 97.3983L283.347 97.595C282.067 97.4803 281.014 98.4641 281.448 99.284C282.439 98.5133 282.377 98.7265 283.863 98.5625C285.205 99.7267 282.418 99.7923 283.842 101.088C283.429 100.973 283.182 99.8743 282.81 100.809C282.707 101.596 283.719 101.53 284.028 102.055C282.975 101.432 282.17 101.547 280.932 100.858C280.87 99.4479 280.973 100.301 280.581 98.9068L279.61 100.038C279.507 98.8412 278.413 99.1364 278.021 99.0216C276.823 101.006 279.569 100.596 279.218 101.891C279.92 102.547 279.445 100.678 280.168 101.678C279.941 102.891 280.849 101.973 281.262 103.367L280.787 103.121C280.126 103.514 280.89 103.957 280.973 104.449C281.262 104.99 284.751 103.974 284.709 106.154C284.42 106.04 284.235 105.99 284.09 105.99L275.151 103.547C275.048 105.761 274.677 108.319 273.933 110.86C272.137 111.402 272.571 108.975 271.766 109.106L272.179 107.942C272.922 108.04 272.282 110.401 273.665 109.385C273.231 107.302 274.14 106.384 272.695 104.367C270.878 104.925 272.881 106.958 271.435 108.188C271.58 107.663 271.415 107.204 271.167 106.745C270.878 107.942 270.568 109.204 270.217 110.565L270.63 110.893C270.878 109.975 271.064 109.352 271.126 109.27C270.899 110.483 271.828 111.549 273.128 111.664L273.19 111.451L273.562 111.91L273.273 112.763L273.211 112.894ZM269.392 191.912C269.268 191.83 269.123 191.781 268.958 191.732C269.144 191.781 269.268 191.732 269.392 191.912ZM270.135 88.8881C269.846 90.5114 269.412 92.1347 269.165 93.6925C271.89 90.9541 273.933 89.052 273.624 93.7581L273.789 94.0696C274.14 93.4629 274.243 92.4135 274.099 91.3969C273.231 90.5606 270.032 87.8386 269.743 87.855C269 88.1174 269.763 88.5601 269.516 89.0684L270.114 88.8881H270.135ZM274.511 87.8714C274.842 86.9532 274.264 87.15 273.768 86.986C273.809 87.3139 273.871 87.6419 273.913 87.9534C274.057 87.8386 274.222 87.7894 274.511 87.855V87.8714ZM273.231 87.0352C273.231 87.1336 273.19 87.2319 273.108 87.2647L273.231 87.0352ZM271.621 104.925C271.621 104.925 271.621 104.859 271.601 104.826C271.559 105.039 271.497 105.253 271.435 105.482C271.518 105.4 271.601 105.236 271.621 104.925ZM272.963 103.105L272.034 102.859C271.993 103.055 271.952 103.269 271.89 103.482C272.323 103.432 272.695 103.367 272.963 103.121V103.105ZM276.369 97.2015C275.275 96.7916 275.275 95.5126 273.995 95.3978C273.665 95.2994 273.52 95.5618 273.397 95.8569C273.355 96.1849 273.293 96.5456 273.231 96.9227C273.417 96.9391 273.582 97.0211 273.748 97.1523C273.933 96.7916 274.264 96.5456 275.048 96.726C273.252 97.6278 276.245 97.6278 275.729 98.6445C276.617 99.0052 276.7 97.5131 276.349 97.1851L276.369 97.2015ZM277.856 17.281C277.98 17.2482 278.269 17.1662 278.64 17.0351L279.239 17.7893C278.867 19.0847 276.927 20.0522 278.454 21.282C278.021 21.8067 277.133 22.069 276.431 22.3314C276.493 22.069 276.576 21.8231 276.7 21.6099C274.573 18.2157 279.28 20.003 277.856 17.2646V17.281ZM274.573 32.1862C274.511 32.055 274.284 31.9894 274.284 31.9894C276.473 35.0065 277.009 37.4333 276.823 38.991C277.794 38.7287 278.599 37.3513 279.053 36.6954L280.085 37.3349L279.218 37.6629L280.126 38.7287C280.87 38.4663 280.766 37.6301 281.365 37.1054C281.159 37.0562 280.023 35.2197 279.404 34.695L278.558 36.0887C278.888 35.7116 278.764 33.8259 278.537 33.0552C278 33.0224 277.092 34.2686 278.248 34.4818C277.443 34.5966 277.525 33.1208 276.617 34.0227C275.833 32.8749 276.658 31.1367 277.112 30.3333L278.475 30.2513C279.053 29.3658 276.885 29.579 277.732 28.5296C277.918 29.8577 279.218 28.3656 279.259 29.415C279.796 29.1035 280.684 29.4642 280.643 28.4148C278.929 27.4637 281.819 27.349 280.312 26.4635C280.911 25.9388 281.344 27.103 281.654 26.0208C280.808 24.7418 280.126 24.7746 278.847 24.6434C278.413 25.7912 280.436 26.0208 280.065 26.9554L277.98 24.9713C277.649 25.3157 277.587 25.5617 277.67 25.7912C277.567 25.3977 277.257 25.0697 276.823 24.7746C276.576 24.6106 276.369 24.4466 276.204 24.3155C276.122 25.3813 276.018 26.3487 275.461 26.4799L274.842 26.2995C274.243 26.6603 274.656 27.2998 275.089 27.5949C275.089 28.5624 275.915 29.5626 275.089 29.7266L274.532 29.333C274.635 30.53 274.697 30.6612 274.615 32.1534L274.573 32.1862ZM270.734 70.9002C273.087 70.2607 275.151 69.5556 274.945 66.1942L275.089 66.4566C276.638 64.8332 273.376 63.0951 275.089 61.111C275.895 62.1441 275.812 62.0785 277.732 63.2591L277.154 62.1605C278.392 62.5048 277.814 61.4226 277.918 60.6355L279.363 61.3898C278.909 61.8489 278.681 63.0623 279.012 63.0295C278.867 62.7508 277.03 64.5709 277.401 65.6039C278.413 65.5383 278.145 63.3739 279.734 64.3905C279.094 63.5214 280.106 63.4558 279.796 62.554C280.436 63.423 281.159 62.8164 281.861 63.4722L281.613 62.0129C281.943 61.9801 282.232 64.1609 283.553 63.0131C283.058 62.4064 283.822 60.8815 282.728 60.8159H283.058C283.368 59.7173 281.551 60.2584 282.253 58.9466C281.716 58.9138 281.303 59.1433 281.406 59.6353C281.633 60.0452 282.377 60.1436 282.48 60.9798C281.613 61.3242 282.645 59.9796 281.179 60.5043C280.436 60.7667 281.675 62.718 280.085 62.0621L280.395 60.9798C279.301 60.9143 279.425 60.1272 278.537 60.1108C278.186 59.4385 279.445 58.8482 278.537 58.1431C277.856 57.8316 276.514 58.2743 277.154 57.1757C278.826 56.3558 278.661 53.765 278.496 52.7976L277.856 51.9285C277.174 51.9777 277.856 53.5519 277.009 52.978L276.823 51.6498L277.236 51.7646C277.36 51.3382 276.927 50.8627 276.72 50.4528C277.484 50.8955 277.112 51.8301 278.248 51.6826C278.516 51.0759 278.929 50.9939 278.764 50.42C278.847 50.5512 278.95 50.6659 279.094 50.6495C279.672 49.4197 277.897 49.3869 277.546 49.059C276.142 47.7308 276.101 50.2724 274.945 50.0756L274.553 46.3698C274.904 46.6978 275.255 47.0257 275.729 46.9273C276.307 46.0419 276.617 46.9273 276.638 45.6648C275.089 45.6975 275.771 44.025 274.924 43.0904C275.585 42.6968 275.709 42.6149 275.688 43.5331C276.7 43.4675 276.39 42.2213 276.514 41.795C276.287 41.5326 276.163 41.0899 275.956 40.8112C275.44 41.1555 274.821 40.9751 274.429 40.1717L274.222 40.1225C273.871 41.4179 272.633 43.3855 273.624 44.2546L273.149 44.0086C272.179 45.4844 274.759 47.3537 272.798 47.9768C272.055 47.8784 272.612 48.2719 271.518 48.2063L272.303 49.3542L271.828 49.1082L271.952 51.0103L271.745 50.9447C272.674 51.8793 273.438 52.6172 274.057 53.2075C274.532 53.2239 274.677 53.1747 275.007 53.4863C275.213 53.7978 275.255 54.0274 275.172 54.2241C275.007 54.6833 274.305 54.962 273.995 55.5195V53.765C273.19 53.5847 272.344 53.6994 271.724 54.5521C271.724 54.2078 271.105 54.0274 270.981 54.4537C271.188 54.5029 271.435 55.6179 272.096 55.2244C272.282 56.8969 270.011 59.5205 271.394 62.1113C270.589 60.2584 270.217 63.5214 270.011 61.4882C268.628 62.8491 271.208 62.7508 270.919 64.1773C270.445 64.2757 271.023 63.3902 270.135 63.0295C269.474 65.4071 271.972 67.1452 271.456 69.4409L270.445 69.5065C270.548 69.9492 270.651 70.4411 270.775 70.9494L270.734 70.9002ZM271.724 75.5243C271.807 75.967 271.91 76.4261 271.993 76.8852C271.993 76.8361 272.013 76.8033 272.034 76.7541L272.757 78.115C273.19 77.3116 274.326 76.8033 274.78 77.9675C274.367 77.8527 273.851 78.1806 273.624 77.7707C272.984 78.525 272.302 80.1811 273.83 79.804C272.488 78.279 275.791 79.5252 274.78 78.3282C275.729 78.9841 275.255 79.5908 275.667 80.1975C274.883 79.558 273.789 80.2795 273.335 81.1813C273.562 81.5913 273.252 82.6735 273.624 83.3458C274.573 83.149 275.069 83.7393 275.358 82.6571C275.585 83.067 275.729 83.6901 275.213 84.3624C275.069 84.0837 274.986 83.6081 274.635 83.6245C273.748 84.0345 273.768 84.5592 273.376 84.8379C273.417 85.0675 273.459 85.2971 273.479 85.5266C273.562 85.461 273.665 85.4118 273.81 85.3627L274.594 86.1497C274.222 85.1167 275.048 85.6906 275.585 85.7234C274.491 85.6578 275.399 86.3793 275.42 86.7236L276.617 86.0021C277.174 86.3957 275.709 87.2647 276.865 87.1172C277.402 85.5266 277.257 84.9035 276.989 83.4442L276.06 84.0017C275.523 82.3455 277.649 83.0506 277.711 81.2141C276.947 80.4271 277.814 78.4594 276.184 78.361C276.658 78.607 277.711 77.2788 276.989 76.6229C275.544 75.8686 275.461 73.7697 274.738 74.3764C274.697 74.9504 275.461 75.7374 274.47 76.1638L274.222 75.0487L273.376 75.7374C273.686 75.3767 272.901 75.3767 271.683 75.5079L271.724 75.5243ZM261.196 99.8907V99.9399C261.196 99.9399 261.196 99.9071 261.196 99.8907Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.2 173.582L256.613 179.698C256.509 177.944 256.489 176.32 256.2 173.582Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.482 36.8599C267.966 35.2037 266.851 34.4167 266.665 32.7441C265.179 34.8758 268.585 35.7285 267.078 37.5158L268.482 36.8599Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.177 36.0728C264.457 35.8597 264.581 37.401 265.51 37.2042C265.283 36.0892 264.334 36.6467 264.519 35.6465L263.177 36.0892V36.0728Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.502 29.5137L285.122 30.0384L284.915 29.6285L284.502 29.5137Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.817 43.5835L263.549 43.3867L263.095 44.1902L263.817 43.5835Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M287.166 30.2654L287.496 29.5275L286.939 29.1504L287.166 30.2654Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M279.981 36.4828L279.63 35.8105C279.692 35.9417 279.114 36.8272 279.981 36.4828Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M262.972 48.5675L263.405 49.4038L263.529 49.3218L263.096 48.502L262.972 48.5675Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M283.12 41.7793C284.111 41.3694 283.306 43.1075 284.214 42.2056C284.111 41.3694 283.595 41.6809 283.12 41.7793Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.956 51.207C275.956 51.3221 275.977 51.4371 276.081 51.5521C276.039 51.4207 275.998 51.3056 275.956 51.207Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.956 51.2061C275.977 50.8618 276.369 50.5174 276.101 50.2715C275.626 50.6978 275.791 50.8618 275.956 51.2061Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.937 55.208L276.019 54.8965C276.473 55.2408 276.412 55.0769 276.04 54.7817C276.04 54.4374 275.71 54.4538 275.503 54.4046C275.379 54.339 275.276 54.257 275.132 54.1914C275.255 54.2898 275.359 54.3882 275.462 54.4866C275.421 55.0113 275.462 55.3228 275.895 55.2244L275.937 55.208Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.699 69.4722C259.133 68.308 259.318 68.0128 260.062 68.1112C260.371 67.0126 259.05 67.1274 258.802 66.4551C258.864 67.7177 258.513 67.9636 258.699 69.4722Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.801 66.4574C258.801 66.3095 258.781 66.178 258.76 66.0137C258.72 66.1944 258.76 66.3259 258.801 66.4574Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.441 50.8457L285.556 51.6164L285.412 51.354L284.441 50.8457Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.203 71.1949C258.265 70.9817 258.244 70.6374 258.513 70.4734C257.77 70.375 258.141 71.4081 258.203 71.1949Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M273.231 67.2267C273.705 67.1283 273.458 66.374 273.664 66.0625C273.54 66.4888 272.137 66.8004 273.231 67.2267Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.113 74.6704C261.175 74.4573 261.691 74.1457 262.311 74.3097C261.96 73.9817 260.659 73.5062 261.113 74.6704Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M272.985 69.36L273.253 69.2124L272.799 68.3926L272.985 69.36Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.254 66.9171C283.408 65.9825 282.004 68.2617 281.343 66.6876C280.29 68.6553 282.623 66.5892 282.396 68.0486C282.747 67.1959 283.903 66.8188 284.275 66.9171H284.254Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.398 68.0469C282.336 68.1783 282.315 68.3098 282.295 68.4577C282.356 68.2934 282.377 68.1619 282.398 68.0469Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.977 80.5095C275.894 80.378 275.791 80.2794 275.688 80.1973C275.75 80.2959 275.853 80.4109 275.977 80.5095Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M282.851 72.7864L281.571 71.3926C282.418 72.3272 282.232 74.5901 283.574 74.4917C283.883 73.7702 283.574 72.8683 283.016 72.4912L282.831 72.7864H282.851Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.624 87.4133L257.129 86.8066L256.922 87.5281C257.129 87.3314 258.099 87.7413 257.624 87.4133Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.881 87.6752L256.922 87.5273C256.922 87.5273 256.881 87.593 256.881 87.6752Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M275.46 77.9353C275.584 77.509 275.564 77.1482 275.357 76.7383C275.089 76.8859 274.8 77.9681 275.46 77.9353Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.339 91.5944L259.174 90.627L259.215 91.6928L259.339 91.5944Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.82 96.0215L256.552 96.1855L256.985 96.9889L257.253 96.8414L256.82 96.0215Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M283.573 91.0522C283.759 90.4127 282.582 89.8552 282.314 90.0192V91.2818C283.367 91.003 282.293 90.9375 282.603 90.1996L283.594 91.0522H283.573Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.088 129.488C256.386 129.176 256.881 127.815 257.542 127.75C257.831 127.947 258.058 128.701 258.512 128.242L256.84 127.094C257.996 125.667 259.07 128.275 259.648 129.012C259.937 127.537 258.822 127.061 258.904 125.471C258.719 125.93 258.285 126.209 257.893 126.454C256.675 126.454 257.274 125.012 257.232 123.962C256.675 124.618 256.241 124.208 255.787 123.716C255.746 123.634 255.684 123.569 255.601 123.519L255.436 123.355V123.487C255.292 123.487 255.127 123.487 254.899 123.585C255.209 124.487 254.156 125.126 254.115 125.7C256.117 125.192 254.487 127.652 255.044 128.389L255.188 129.226V129.537C254.961 129.586 254.693 129.504 254.321 129.012C254.693 129.422 254.487 130.718 255.127 130.619L255.003 133.62C254.92 133.719 254.817 133.801 254.672 133.866C254.796 133.981 254.899 133.997 255.003 133.981L254.528 147.033C254.714 146.394 255.188 145.853 255.436 145.197C256.716 146.23 255.725 144.114 256.964 144.442C257.397 144.901 257.232 145.557 256.902 145.935C257.521 146.098 258.099 145.557 258.863 145.639C259.73 144.016 256.737 143.672 257.273 142.081C258.017 142.163 258.657 142.688 258.615 141.622L258.76 141.901C257.996 140.195 260.515 140.638 258.512 139.523L259.606 139.589C258.822 138.802 258.884 137.31 258.781 136.473L258.987 136.522C257.852 134.128 258.78 135.194 258.388 132.538L259.606 133.784C260.164 132.882 258.801 132.636 258.987 131.997C259.193 132.046 259.998 131.915 260.164 132.538L258.388 129.275C257.604 128.488 257.583 129.406 257.108 129.504L257.088 129.488Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.885 125.487C258.946 125.323 258.987 125.126 258.946 124.896C258.905 125.11 258.885 125.306 258.885 125.487Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M254.528 147.918L254.569 147C254.488 147.279 254.467 147.574 254.528 147.918Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.737 120.813C256.138 121.354 255.973 120.371 255.56 120.256L255.478 122.24C255.891 122.24 256.365 122.453 256.737 122.42V120.797V120.813Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M254.672 122.817C254.961 122.899 255.208 123.112 255.456 123.358L255.497 122.26C255.188 122.26 254.899 122.375 254.672 122.817Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M277.051 123.305L277.071 123.649L277.36 124.19L277.051 123.305Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M274.924 128.734C275.584 128.34 275.13 127.52 274.986 127.258C274.965 128.176 274.738 127.766 274.924 128.734Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M281.799 127.816L282.109 128.718L282.232 128.636L281.799 127.816Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.492 154.805C258.492 154.953 258.533 155.1 258.553 155.248C258.553 155.051 258.553 154.92 258.492 154.805Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.79 147.163C256.469 149.246 256.84 145.753 255.251 146.376L255.726 147.541L255.313 147.426L255.395 148.836C256.118 148.574 256.18 148.361 256.923 148.442C256.551 150.312 255.994 149 254.982 150.361L255.024 152.46L254.797 152.279C254.797 152.46 254.9 152.542 255.024 152.607L255.189 159.675C255.726 160.97 256.572 159.002 257.645 159.986C257.707 158.494 258.616 156.313 257.109 156.149C257.315 156.198 257.728 156.313 257.914 156.018L256.717 155.116L256.283 155.92C255.086 155.018 255.478 152.23 256.283 151.755C256.634 153.362 258.162 152.607 257.253 154.788C257.645 154.706 258.327 154.313 258.513 154.821C258.182 152.214 258.987 149.902 257.811 147.18L257.79 147.163Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.398 173.203H257.252C257.252 173.203 257.377 173.253 257.398 173.203Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M257.624 172.35L256.2 171.055L256.241 173.022L257.273 173.186C257.025 173.006 256.53 172.301 256.943 172.039L257.645 172.334L257.624 172.35Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M255.374 169.547C255.766 170.58 256.984 170.547 257.562 170.006C258.078 170.957 256.241 170.465 257.5 171.137C258.388 171.137 257.913 169.973 257.769 169.711L255.374 169.547Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.325 162.054L256.82 162.349L256.985 161.66L256.325 162.054Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.819 162.35L256.654 163.038C257.025 163.005 257.397 162.956 257.665 162.858L256.819 162.35Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.219 164.873C256.116 165.168 256.033 165.496 255.992 165.89L256.219 164.873Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.571 164.086H256.406L256.22 164.873C256.324 164.594 256.448 164.332 256.571 164.086Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.655 163.053C255.788 163.151 254.9 163.249 255.086 164.266L256.407 164.102L256.655 163.053Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M280.188 134.213L280.642 135.016L280.766 134.934L280.332 134.131L280.188 134.213Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M279.197 138.783C279.342 138.98 279.486 139.144 279.651 139.275C279.569 139.062 279.424 138.898 279.197 138.783Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M284.854 142.393C283.946 143.311 283.781 141.065 283.327 142.786C282.521 142.918 281.531 142.065 281.964 141.261C282.707 141.343 282.418 142.081 283.203 141.589C282.356 141.015 282.955 140.835 281.82 140.983C281.159 140.048 280.354 139.917 279.652 139.277C280.106 140.392 278.826 142.688 280.209 144.131C281.531 144.951 283.409 144.524 285.37 144.59C285.845 144.492 286.155 142.491 284.854 142.376V142.393Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M286.897 140.967C287.021 140.541 286.938 140.393 286.794 140.131C286.112 140.18 286.876 140.623 286.897 140.967Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M271.642 150.543C271.91 150.641 272.22 151.429 272.715 151.281L272.426 150.084C272.364 150.363 272.013 150.445 271.642 150.559V150.543Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M272.282 149.543L272.406 150.068C272.427 149.937 272.406 149.773 272.282 149.543Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M271.456 150.592L271.643 150.543C271.643 150.543 271.518 150.526 271.456 150.592Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M255.621 167.759C255.085 167.726 255.374 168.268 255.539 168.546C255.601 168.333 255.787 168.038 255.621 167.759Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.923 187.879L256.469 188.338C256.737 188.174 256.861 188.092 256.923 187.879Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M271.395 195.471C271.498 195.471 271.581 195.52 271.664 195.57C271.602 195.52 271.519 195.487 271.395 195.471Z\",\n    fill: \"#5C4F47\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M271.663 195.586C272.096 195.914 271.374 196.898 272.034 197.258L271.828 197.209L272.2 197.882C272.158 197.258 272.303 195.963 271.663 195.586Z\",\n    fill: \"#5C4F47\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.778 332.536C240.902 332.93 240.262 333.274 239.973 333.143C240.778 333.913 239.932 333.963 241.418 333.979C242.203 334.389 241.253 334.979 240.572 334.487C240.923 334.93 241.315 335.34 241.728 335.717C241.728 335.455 241.769 335.192 241.81 334.93C243.07 334.996 241.707 336.193 243.194 336.144C243.049 335.75 242.884 335.34 242.781 334.897H243.194C242.698 334.668 242.801 334.045 242.966 333.815C243.173 333.832 243.503 333.799 243.565 334.028C243.565 332.356 241.315 333.7 240.881 332.143C240.902 332.241 240.881 332.372 240.778 332.536Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.895 330.98L242.388 330.226L242.925 329.062C242.388 329.012 242.058 328.078 241.521 328.652C241.583 328.783 241.727 329.029 241.645 329.209C240.489 328.996 241.273 327.504 240.055 327.783C240.22 328.816 239.952 328.947 240.84 329.603C240.633 330.472 240.344 331.078 239.89 331.488C240.055 331.751 240.778 331.8 240.901 332.112C240.901 332.046 240.86 331.98 240.86 331.898H242.615C242.243 331.636 242.45 331.39 242.408 331.111C243.069 331.587 243.73 332.013 244.432 332.407C246.062 332.046 245.154 330.865 245.897 330.373C244.37 330.915 245.195 329.832 243.895 330.997V330.98Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.892 216.771C241.892 216.443 241.458 216.329 241.252 216.279L241.108 219.969C241.582 219.87 242.202 218.821 242.449 219.542C242.986 219.247 242.594 218.263 241.975 218.099L242.676 218.395C241.809 217.526 243.605 216.984 244.122 217.558V217.493L240.736 215.033C240.488 215.886 241.913 215.738 241.913 216.771H241.892Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.329 140.984C244.494 141.46 244.68 141.509 244.845 141.46C244.722 141.296 244.556 141.132 244.329 140.984Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.931 214.46L238.878 213.689C239.167 213.985 239.539 214.263 239.931 214.46Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.261 220.068C256.261 220.068 256.364 220.068 256.447 220.068L255.91 219.723C256.034 219.854 256.137 219.969 256.261 220.084V220.068Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M236.443 197.687C236.443 197.687 236.402 197.538 236.381 197.439C236.381 197.522 236.422 197.604 236.443 197.687Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.939 230.363L260.989 228.674C261.464 228.92 261.361 228.1 261.918 228.477C261.856 228.346 261.691 227.756 261.423 227.903V228.248C260.039 227.33 259.461 227.838 258.429 226.346C257.521 227.215 258.285 227.641 258.925 228.133C259.007 228.297 259.049 228.428 259.11 228.576L261.051 230.019L261.959 230.363H261.939Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.474 163.923L253.02 163.857C253.247 163.94 253.474 164.285 253.474 163.923Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.86 214.77C240.592 214.737 240.261 214.639 239.931 214.475L240.716 215.049C240.716 215.049 240.798 214.868 240.839 214.77H240.86Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.958 216.1L244.102 217.493L244.825 218.018C244.556 217.477 244.391 216.854 243.958 216.1Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.514 199.835C235.37 196.981 237.186 200.572 237.64 199.261C237.455 198.457 236.67 198.178 236.423 197.67C237.042 199.949 233.78 197.326 234.131 199.605C232.686 199.261 232.583 197.932 233.016 197.178C234.441 196.326 234.028 197.965 235.39 198.178C235.184 197.26 234.936 197.424 234.152 197.014C234.523 195.588 232.5 194.013 234.461 193.194C234.172 192.144 233.491 192.21 232.769 191.603C231.262 191.472 231.943 193.128 230.766 193.505C230.89 193.423 231.158 193.276 231.365 193.325L231.034 194.21C231.571 193.374 232.541 194.358 232.645 194.801C232.665 195.129 232.707 195.784 232.294 195.686L231.984 195.178C231.489 195.817 233.037 196.621 232.211 197.293C231.881 197.326 231.716 197.063 231.509 197.014C232.521 197.801 232.438 198.523 233.12 199.671L231.654 198.982C233.285 199.917 232.748 201.95 231.84 203.36C232.087 203.212 232.294 202.934 232.562 203.098C232.892 203.934 231.86 204.541 231.076 204.147C232.294 204.983 229.94 207.23 231.489 208.361L238.858 213.657C238.673 213.461 238.528 213.248 238.466 213.034C239.787 212.608 239.643 212.346 240.84 213.198C240.18 212.378 239.106 212.657 239.106 211.46C239.746 211.952 241.253 212.116 241.439 210.952C240.262 208.033 236.608 206.033 234.771 203.311C235.783 203.229 235.555 201.114 235.824 200.097C236.897 200.507 237.186 201.278 237.372 202.065C237.455 201.573 237.517 200.72 237.579 200.08L235.452 199.785L235.514 199.835Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M238.714 206.591C238.714 206.591 238.859 206.443 238.901 206.377C238.818 206.41 238.756 206.476 238.714 206.591Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.393 202.361C237.393 202.361 237.455 202.361 237.496 202.361L237.434 202.113C237.434 202.196 237.413 202.295 237.393 202.361Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.172 214.15C243.461 214.33 243.523 214.462 243.812 214.642C243.709 214.527 243.647 214.396 243.564 214.265C243.44 214.134 243.296 214.084 243.172 214.15Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.377 214.671L240.965 214.572C240.965 214.572 240.903 214.704 240.861 214.753C241.088 214.786 241.274 214.753 241.377 214.671Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.906 189.061L244.7 188.781C244.7 188.946 244.803 189.028 244.906 189.061Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.33 196.701C237.392 197.702 238.837 196.849 238.796 198.243L238.899 197.833C239.518 198.849 239.167 200.62 239.188 201.817C238.589 201.67 238.445 202.522 237.516 202.375C237.702 203.195 237.887 204.015 238.837 204.457C238.507 204.949 239.333 205.753 238.92 206.376C239.498 206.113 240.798 207.343 240.158 205.753C240.241 205.884 240.365 205.802 240.447 205.933C241.252 204.933 239.952 204.506 239.952 203.637C240.53 203.129 240.819 204.506 241.067 204.015C240.571 202.916 241.83 200.604 239.745 200.637C239.622 199.85 240.096 199.735 240.468 199.505C238.28 198.21 241.562 194.865 238.713 194.832C238.816 195.291 238.713 196.029 239.312 196.718L237.351 196.685L237.33 196.701Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.091 212.476C243.091 212.476 243.091 212.329 243.131 212.279C243.131 212.329 243.111 212.411 243.091 212.476Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.234 224.757L232.397 224.282C232.066 221.904 232.644 221.084 232.686 219.018C232.954 218.87 233.099 219.116 233.181 219.248C233.037 217.788 233.511 215.64 232.706 214.558C232.748 214.099 233.388 212.902 233.904 213.377C233.738 213.148 233.594 212.885 233.677 212.639C234.358 212.59 233.842 213.213 234.399 213.246C234.461 213.049 234.585 212.967 234.378 212.918C234.936 213.279 236.67 212.623 236.567 214.23C234.977 214.804 236.422 213.115 234.688 213.427C234.647 213.951 235.328 213.918 235.534 213.968C235.473 214.64 235.039 214.624 234.647 214.574C235.163 214.853 234.399 215.689 235.184 216.067C235.266 217.395 233.883 215.952 233.883 216.821L235.617 217.362L235.225 218.788C235.72 220.887 238.259 218.575 239.127 220.986C238.239 220.641 236.649 221.543 236.216 222.642C236.195 221.986 235.122 220.723 235.679 219.887C234.255 221.051 235.596 218.231 234.007 218.805C234.709 219.428 234.771 220.412 234.317 221.182L234.172 220.92C233.945 221.74 235.741 222.412 234.977 223.527C234.998 224.085 234.523 223.97 234.11 223.855C234.337 224.347 234.667 224.774 234.275 224.774L234.234 224.757ZM233.945 223.527L234.151 222.773C233.862 222.937 233.842 223.216 233.945 223.527Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.052 320.795C245.052 320.795 244.927 320.943 244.886 321.009C244.969 320.96 245.031 320.877 245.052 320.795Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.288 253.338L253.205 253.782C253.288 253.617 253.288 253.469 253.288 253.338Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.202 263.57L258.553 264.243C258.553 263.98 258.408 263.783 258.202 263.57Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.918 315.566C245.918 315.566 245.856 315.483 245.836 315.434L245.898 315.566H245.918Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M252.153 283.215C251.988 283.297 251.844 283.412 251.74 283.544C251.906 283.544 252.05 283.412 252.153 283.215Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.139 263.454C258.139 263.454 258.119 263.471 258.098 263.487L258.201 263.57L258.139 263.438V263.454Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.718 249.224C258.676 249.125 258.635 249.043 258.573 248.928C258.593 249.059 258.656 249.141 258.718 249.224Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.702 249.617C253.66 249.519 253.618 249.42 253.556 249.338L253.702 249.617Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.16 234.466L257.953 233.859C257.953 234.155 258.056 234.335 258.16 234.466Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M254.983 248.091C254.983 248.091 254.838 248.009 254.755 247.992C254.796 248.075 254.9 248.124 254.983 248.091Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.313 324.076V324.043L239.105 324.01L239.313 324.076Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.644 325.75L241.706 326.275C241.747 326.078 241.706 325.898 241.644 325.75Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M248.395 291.641C248.127 291.772 247.776 292.133 247.507 291.936C247.838 292.264 248.725 292.313 248.395 291.641Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M228.847 320.204C229.074 320.319 229.239 320.451 229.383 320.582C229.156 320.336 228.971 320.138 228.847 320.204Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.403 320.582C229.507 320.697 229.63 320.829 229.754 320.944C229.651 320.829 229.548 320.697 229.403 320.582Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.378 286.626C234.503 286.593 234.606 286.543 234.648 286.461C234.399 286.461 234.358 286.527 234.378 286.626Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.377 326.665C241.769 326.813 242.368 329.043 242.843 327.239C244.123 327.436 243.276 328.453 243.545 328.945C243.896 328.633 244.35 329.174 244.825 329.109C244.701 328.863 244.35 328.567 244.494 328.19C245.114 328.059 245.423 328.682 245.155 329.109C245.898 328.617 246.105 329.863 246.703 329.158C246.455 327.518 246.208 326.108 244.494 324.648C244.659 325.731 244.866 326.944 244.226 327.698L243.152 327.256C244.267 326.419 243.627 325.731 243.875 324.796L242.967 326.862C241.893 327.748 241.769 327.092 241.687 326.288C241.645 326.485 241.542 326.649 241.356 326.682L241.377 326.665Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.798 324.305L231.757 324.338C231.757 324.338 231.819 324.42 231.86 324.437L231.798 324.305Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.452 233.693L235.039 233.496C235.225 233.66 235.348 233.71 235.452 233.693Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.08 238.236C235.08 238.236 235.018 238.22 234.977 238.203C235.018 238.22 235.039 238.22 235.08 238.236Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.171 240.484C259.171 240.484 259.275 240.484 259.317 240.451C259.254 240.352 259.213 240.402 259.171 240.484Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.598 260.585C237.598 260.585 237.805 260.519 237.99 260.421C237.887 260.371 237.763 260.421 237.598 260.585Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.644 256.306C239.644 256.306 239.727 256.257 239.769 256.24L239.644 256.306Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.556 290.97C253.597 290.757 253.577 290.593 253.556 290.445C253.516 290.609 253.495 290.773 253.556 290.97Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.977 238.205C234.853 238.155 234.75 238.09 234.605 237.975C234.75 238.106 234.874 238.172 234.977 238.205Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.657 267.587L242.553 267.455L242.491 267.521L242.657 267.587Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.604 269.832C241.48 269.75 241.356 269.701 241.253 269.652C241.645 270.504 240.984 271.964 242.161 272.21C242.161 271.931 243.007 270.537 243.668 270.816C243.42 270.225 244.349 269.438 244.184 269.11C243.441 270.012 243.173 269.143 242.822 268.504C243.234 267.946 243.771 268.668 244.04 268.192V266.848L243.771 267.995L242.656 267.569C242.656 267.569 242.718 267.651 242.76 267.7C243.09 269.684 241.067 267.766 241.604 269.816V269.832Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.253 269.655C241.191 269.523 241.108 269.408 241.005 269.326C241.005 269.507 241.108 269.589 241.253 269.655Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M238.568 277.523C238.589 277.622 238.651 277.737 238.714 277.885C238.693 277.819 238.631 277.671 238.568 277.523Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.597 219.002C244.267 219.018 243.503 220.15 244.391 220.15C244.494 219.822 244.618 219.477 244.721 219.133L244.597 219.002Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.191 299.643C241.232 299.512 241.253 299.397 241.253 299.266L241.129 299.184C240.985 299.249 241.129 299.512 241.191 299.643Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.04 271.214C243.916 271 243.792 270.902 243.668 270.836C243.73 270.984 243.834 271.115 244.04 271.214Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.105 299.543C238.837 299.691 238.424 299.887 238.094 299.904C238.052 300.232 238.486 300.494 238.61 300.855C238.527 300.461 238.672 300.035 239.126 299.543H239.105Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.01 218.33C244.948 218.231 244.886 218.133 244.845 218.018L245.072 218.182L245.381 217.395C245.319 217.296 245.278 217.198 245.257 217.067C245.278 217.116 245.381 217.165 245.464 217.182L245.567 216.936C244.679 216.28 244.081 214.706 243.565 214.247C243.193 213.64 243.007 212.902 243.09 212.459C243.049 212.886 243.214 213.443 243.73 213.296C244.287 212.459 245.815 212.066 244.576 210.557V211.426L242.677 209.426C243.523 208.77 243.606 210.426 244.308 210.705C243.4 209.163 246.042 207.966 244.37 207.212C245.381 207.13 247.074 207.015 246.992 205.999C245.815 206.687 246.269 205.376 245.03 205.95C244.473 205.589 245.423 204.851 244.679 204.769L245.092 204.867C246.744 203.195 244.246 202.588 243.461 201.85C243.111 199.801 243.792 198.882 243.668 197.21C244.349 197.161 246.207 196.734 246.166 196.062C245.257 195.734 244.886 194.225 243.709 194.061C243.193 195.242 244.659 195.045 244.927 195.767C243.689 196.341 243.709 195.8 242.945 196.603C243.441 195.947 242.388 193.635 243.544 192.93L243.709 193.192C244.432 192.061 247.322 191.881 245.608 189.946L244.907 189.028C245.03 189.077 245.154 189.077 245.257 189.11C245.402 187.617 246.723 188.044 245.712 186.388C245.794 186.519 245.918 186.437 246.001 186.568C246.682 185.633 245.381 184.682 245.113 183.961C246.104 183.534 246.063 184.076 246.764 184.338C247.177 182.682 245.505 180.894 244.329 179.861L244.907 178.796C245.299 179.435 246.331 180.206 246.93 180.025C246.744 179.435 246.269 179.55 246.475 178.73C247.095 178.878 247.673 179.222 248.457 179.615C249.51 177.91 246.248 179.222 248.168 178.025C248.168 177.484 247.281 177.172 246.517 177.107L247.508 176.139C246.558 176.024 246.496 174.827 246.372 174.04C245.959 173.942 245.34 174.68 245.712 174.975C244.948 174.909 244.618 174.073 244.618 173.532C246.641 173.335 244.349 170.007 246.723 170.646C246.063 168.219 245.835 164.825 244.989 163.218C245.546 162.693 245.567 161.611 246.517 162.251C246.517 160.299 244.452 159.299 244.968 157.364C245.216 157.2 245.01 158.233 245.67 158.168C244.845 156.905 246.496 155.856 245.918 153.904C245.959 154.232 246.372 154.331 246.579 154.364C246.248 154.396 245.877 153.56 245.546 153.068C245.712 152.789 245.794 153.445 246.042 153.281C246.971 149.477 244.184 146.624 244.163 142.853C244.163 143.935 245.505 144.312 246.063 144.312V143.263C245.381 142.869 245.361 142.082 244.845 141.426C245.092 141.344 245.361 141.016 245.67 141.344C246.971 139.229 243.152 138.13 243.771 135.572L246.537 138.606L247.446 137.819L248.705 139.163C249.428 138.343 247.693 137.655 248.705 137.54C248.994 137.704 248.911 138.13 249.469 138.13C249.84 137.343 249.097 137.294 248.87 136.704C250.976 138.212 251.017 141.246 251.574 142.885C251.74 143.148 251.079 142.672 250.873 142.64C250.955 143.312 250.336 143.722 250.707 144.558C251.595 145.066 251.327 144.148 251.409 143.738C252.173 143.787 252.132 143.984 252.256 144.46C251.244 144.574 251.967 147.001 250.749 147.608C251.1 150.067 253.35 147.182 252.958 149.592L251.822 150.33C252.731 151.724 253.556 153.511 253.329 155.101L253.288 154.774C252.792 154.56 252.483 154.921 252.235 155.085C251.76 156.282 253.185 157.348 252.029 158.086C253.288 159.447 254.176 161.71 254.836 163.267C253.309 163.694 253.536 161.234 252.586 160.595V162.005C252.586 161.136 251.987 160.791 251.12 160.267C250.852 161.513 252.173 161.906 252.565 163.087C252.152 163.005 251.905 163.153 251.884 163.694L252.896 163.841C252.896 163.841 252.731 163.907 252.669 164.087L253.288 166.186C253.721 165.743 254.588 165.711 254.609 165.169C254.031 165.366 253.907 164.907 253.907 164.366C254.568 164.841 254.465 163.841 255.001 163.841C254.981 164.923 255.125 166.268 255.394 166.973L254.465 167.203C254.237 168.236 254.754 169.334 254.485 170.039L253.99 169.81C253.721 171.056 254.299 172.286 253.391 173.384C254.444 174.499 255.311 175.893 256.426 176.812C257.623 177.303 254.898 180.058 256.57 181.321C256.446 181.403 255.683 180.452 255.228 180.025C255.043 180.862 256.529 181.534 255.249 181.78C255.683 179.911 254.237 181.878 253.887 181.026C253.887 181.895 254.134 182.829 254.568 183.256C254.568 181.845 256.302 183.78 255.765 182.337C256.818 183.452 257.21 184.977 256.777 186.306C256.24 186.289 255.972 186.453 255.745 186.945L256.529 187.355C256.364 187.978 255.621 186.142 255.311 187.388C256.632 188.683 254.465 191.241 256.962 191.831C255.951 192.799 255.992 189.962 254.754 191.422C253.866 190.552 254.919 189.388 253.68 189.093C254.01 189.929 252.627 189.388 252.607 189.929L253.35 190.88L253.391 190.667C254.527 192.258 253.949 194.734 254.072 196.751C255.27 198.472 257.066 199.669 256.859 201.719C256.137 201.096 256.095 203.408 254.795 202.096C254.114 203.031 254.857 203.965 255.394 203.998C255.6 203.178 255.579 203.703 255.868 203.014C256.508 203.506 256.446 204.589 256.013 205.031C256.075 204.818 255.93 204.9 255.724 204.851C255.249 205.835 256.364 205.343 256.612 206.064C255.683 206.277 256.323 207.638 255.806 208.278L257.086 209.262C256.24 208.721 256.735 210.164 255.93 210.295C256.508 210.984 257.561 211.59 257.293 212.623C256.859 212.181 256.591 213.558 255.724 213.541C254.816 215.296 257.995 216.542 256.673 218.198C256.467 218.133 255.91 217.788 255.662 218.264C255.889 218.657 255.765 219.33 255.827 219.756C255.868 219.953 255.972 220.084 256.178 220.1C257.004 220.838 257.871 221.232 258.511 222.642C259.522 222.576 259.192 221.379 258.903 220.855L257.933 220.379C259.481 220.002 257.747 219.117 258.263 218.805C259.997 219.69 259.44 222.101 260.451 223.577C261.896 222.74 262.227 220.822 262.144 219.133L261.504 219.854V218.969L260.41 219.789C260.637 218.969 260.41 218.231 260.493 217.493C260.493 218.379 259.068 218.674 259.316 218.182C260.348 217.231 258.717 217.149 258.8 216.395C258.697 216.805 258.655 217.346 258.098 216.985C259.357 215.542 258.593 215.116 259.935 213.82C258.242 213.935 259.832 212.131 258.469 211.902L258.304 212.525L257.355 211.18C258.779 210 258.697 212.295 259.749 210.459C259.997 208.753 258.222 208.753 258.139 207.409C259.109 207.868 259.915 208.967 259.853 210.049L260.369 209.409C260.926 209.77 260.74 211.279 260.658 212.017C259.564 210.754 260.286 212.59 259.357 213.132C260.307 213.263 260.204 212.459 260.926 213.427C260.926 212.541 260.864 212.41 261.277 211.295C260.74 213.705 264.518 213.558 263.63 215.657C263.238 214.673 262.227 215.952 261.752 216.067C261.855 216.526 262.041 217.46 262.268 217.854L263.672 217.542C264.229 218.789 261.256 219.133 262.619 220.609C263.445 220.822 262.97 219.363 263.114 219.625C263.878 221.593 261.607 222.232 260.472 223.921C260.885 224.036 261.772 224.036 262.474 224.675C261.649 224.462 261.194 224.888 260.616 224.183C260.224 224.757 260.802 225.446 261.112 225.971C261.669 224.79 262.289 226.495 262.763 226.741C262.598 227.364 261.938 226.528 261.711 226.135C261.463 226.627 260.204 227.184 261.442 227.512C260.554 227.512 259.213 226.036 259.027 225.102L258.862 225.725C258.428 225.282 258.573 225.2 258.738 224.593C258.015 225.184 257.272 225.085 256.653 224.938C256.777 224.856 256.859 224.987 256.983 224.921C257.231 224.429 257.004 224.036 256.55 224.134C255.394 223.642 255.765 224.806 255.166 225.118C255.228 225.38 255.29 225.626 255.352 225.889L259.006 228.611C259.378 229.742 258.449 230.201 257.83 231.005L258.82 231.267C258.655 232.234 258.284 233.12 257.024 232.464C257.375 232.448 257.293 232.316 257.355 232.103C257.21 232.07 257.128 232.021 257.045 231.956L256.88 231.906C257.148 232.956 257.313 233.595 257.355 233.661C255.992 231.857 255.517 233.497 253.742 233.136L254.217 234.924C254.857 233.874 255.105 234.924 255.311 235.334C254.299 235.399 255.228 236.76 255.043 237.367L254.836 237.318C254.444 237.875 254.485 238.892 254.712 239.613C255.063 239.597 256.653 240.581 257.602 241.073C258.057 239.859 258.408 240.613 259.047 240.531C258.986 240.663 258.965 240.892 259.089 240.925C259.357 241.105 259.481 240.695 259.832 240.679C259.44 239.351 259.398 238.006 258.015 237.416C257.355 237.793 258.573 238.121 258.119 238.564C257.21 237.875 257.458 237.055 257.541 235.973L258.408 235.645L258.015 234.53C258.428 235.006 259.337 234.76 259.44 235.924C260.245 235.809 259.337 234.776 259.646 234.087L258.552 233.677C259.171 233.841 259.378 232.349 260.162 233.448L260.967 235.219L261.772 234.76L261.896 236.235L261.339 235.858C261.958 238.252 259.068 236.465 260.224 238.892C261.545 239.695 261.628 240.499 261.215 241.942C260.988 240.876 260.265 241.794 259.502 241.368C258.862 242.417 259.956 242.827 260.451 243.417C259.708 243.663 259.109 243.827 259.275 242.876C257.788 242.696 259.44 244.155 257.891 244.172C257.706 247.353 262.701 246.943 260.493 250.583L259.873 250.419C260.472 252.813 259.646 254.141 259.935 256.355L258.201 257.995C257.995 257.601 256.901 256.502 256.095 256.945C257.768 256.191 257.293 255.273 258.222 254.42C257.809 254.305 257.479 254.666 257.21 254.797C257.272 254.256 258.015 254.01 257.788 253.289C257.458 253.305 257.004 254.076 256.839 253.469L257.891 252.534C257.52 251.206 255.579 251.78 256.137 250.255C257.004 250.583 258.222 251.223 258.387 251.829C258.635 251.141 258.841 252.797 259.419 252.174C258.18 251.091 259.254 250.665 258.552 249.271C258.717 249.435 258.965 249.484 259.027 249.829L259.729 247.91C258.924 248.353 259.006 246.254 257.871 246.385C257.252 248.435 257.974 247.861 257.148 250.206C256.942 249.517 255.848 248.599 254.816 248.156C254.857 248.14 254.898 248.107 254.919 248.025C253.825 247.615 253.494 247.959 251.533 247.861C252.854 249.009 251.636 249.665 252.359 250.977C253.412 251.272 253.783 250.304 253.556 249.665L254.176 250.813L253.701 250.567L253.123 253.387C253.123 252.846 252.503 252.633 252.049 252.321C251.987 252.682 251.678 253.043 251.327 253.403C252.359 253.371 253.081 253.469 253.04 253.813C252.669 255.633 251.636 256.601 250.418 257.208C250.418 257.273 250.46 257.355 250.48 257.421C251.554 257.175 252.256 258.814 253.288 259.438C252.194 259.356 252.545 260.339 251.946 260.848C253.164 261.192 254.919 260.913 255.992 260.323C254.96 259.028 254.898 259.569 253.329 258.896L252.421 256.863L253.37 257.355C253.887 256.388 252.669 255.371 253.948 255.502C254.774 256.076 254.176 256.912 254.981 257.47L255.517 256.847C256.694 258.077 254.238 257.372 255.001 258.831C256.137 258.372 255.063 258.962 255.765 259.602C256.57 259.159 255.662 257.109 257.499 257.634C258.263 258.405 255.105 259.962 256.88 261.028L256.673 260.963C256.302 262.373 257.334 262.93 257.953 263.504C257.293 264.078 258.077 264.963 258.077 265.619L257.541 265.57L257.685 266.505C256.735 266.013 257.809 265.423 257.726 264.619L256.715 264.668C257.995 263.816 256.219 263.111 255.414 262.34C256.199 263.422 254.919 265.242 256.859 265.603L255.786 266.177L256.137 266.505C255.332 266.931 254.176 266.374 254.031 265.439C254.299 265.291 254.423 265.226 254.63 265.275C254.217 264.816 253.474 264.39 253.783 263.357L254.279 263.947C254.465 262.651 254.176 261.454 253.226 260.963C252.648 262.799 252.4 264.636 252.297 266.39C254.547 267.046 255.745 267.718 257.85 268.112C258.119 269.309 258.263 270.932 257.375 271.9L256.962 271.785C256.694 272.277 256.756 272.736 256.962 273.129C256.364 273.621 255.868 272.703 255.538 273.047L256.075 274.769C255.125 274.605 255.27 273.195 255.249 272.506C255.311 272.637 255.455 272.9 255.579 272.834C256.054 272.08 254.568 270.522 255.992 270.26C255.786 269.866 256.942 271.096 257.148 269.817C257.747 268.981 256.529 268.62 256.137 268.505C255.6 268.456 255.249 269.817 254.65 269.309C254.65 269.981 255.332 270.293 254.712 271.129C254.712 270.457 253.701 269.489 254.568 269.178C253.68 267.8 251.12 267.833 250.914 268.456C251.719 268.358 251.657 270.916 252.875 269.26C253.825 270.096 253.701 271.522 254.238 272.572L254.031 272.506L254.155 273.785C253.887 273.588 253.68 273.195 253.143 273.146L254.423 274.982C253.536 273.933 253.68 275.556 253.205 275.966C254.01 276.212 254.568 276.934 255.105 276.31C255.786 275.605 254.692 275.851 254.692 275.179L255.91 276.212L255.765 276.278L256.777 276.917C256.57 278.212 254.341 276.196 255.228 277.917L256.715 277.803C256.323 279.705 254.382 282.049 254.919 283.46C254.134 283.033 252.813 282.771 251.967 283.23C252.276 282.673 252.359 281.492 252.318 280.639C252.586 280.492 253.928 281.804 253.515 282.689C255.951 282.41 252.318 280.311 254.754 280.361C255.848 278.098 252.586 278.475 254.217 276.606C253.143 276.507 253.742 276.015 252.792 275.851C250.955 276.327 252.607 278.475 251.843 279.721C251.781 279.59 251.636 279.328 251.451 279.262C251.038 280.147 251.224 280.541 251.574 281.213L251.719 281.148C252.648 282.328 250.831 281.787 250.295 282.394C250.418 282.656 250.006 283.542 250.831 283.46L249.675 284.575L250.893 284.607C250.893 285.28 250.067 285.378 250.749 286.034L251.822 286.132L252.38 284.493C252.648 285.362 253.391 284.804 253.515 285.739C252.442 284.624 252.834 286.428 251.822 286.46L252.359 287.182L252.091 286.985C251.471 287.477 252.421 287.641 252.214 288.264C252.896 287.575 253.721 287.149 253.04 286.149C253.577 286.87 254.093 288.28 254.093 288.608C254.465 289.363 253.598 289.805 253.391 290.461C253.102 289.15 250.067 290.674 251.12 288.149C251.327 288.215 251.244 288.412 251.12 288.494C252.545 288.248 251.203 286.952 250.728 286.346C249.923 286.428 249.778 285.837 249.242 286.788C249.778 286.493 250.935 287.739 250.171 288.641L248.478 288.346L248.127 289.707L248.065 289.576C246.909 290.019 248.106 291.052 247.342 291.937C247.859 292.659 247.074 295.233 248.994 294.249C247.817 295.02 249.097 295.856 249.221 296.791L250.047 295.692C251.1 297.151 250.356 296.692 252.173 297.938C251.698 298.02 251.285 298.234 250.811 297.971C250.501 299.791 249.717 302.366 250.955 303.546C250.707 304.825 248.684 304.875 249.221 306.744C249.407 307.137 250.852 306.58 250.212 307.728C250.067 307.793 249.097 306.465 249.056 307.81C250.233 308.875 248.044 309.974 249.015 311.302C248.457 311.909 248.478 313.057 247.487 312.729C247.859 311.712 247.838 310.236 247.363 309.974C247.962 310.171 248.065 309.285 248.437 310.089C249.428 308.597 247.921 309.023 248.643 307.662C248.23 307.531 247.404 308.285 247.735 308.613C246.31 308.498 247.425 305.793 245.546 306.908C245.216 308.384 248.127 309.089 246.455 310.253C245.67 309.663 246.496 308.908 245.092 308.121L244.39 309.138L245.319 309.99L245.113 309.925C243.565 311.696 246.331 311.778 246.826 313.532C247.941 312.647 249.242 313.975 249.944 313.286C249.985 314.434 249.675 315.238 248.251 315.123C247.384 312.926 246.764 314.877 245.629 312.811C245.072 313.09 243.627 312.171 243.317 313.319C244.163 314.713 244.556 313.024 244.845 314.369C244.7 314.434 244.576 314.5 244.37 314.434C245.01 315.09 243.998 315.106 244.721 315.91L244.452 315.713C243.461 316.533 245.278 316.779 244.246 317.451C245.34 317.238 245.03 318.042 245.608 318.583C246.125 317.845 247.693 317.55 247.817 316.008C247.012 315.746 246.537 315.828 246.228 315.156L246.186 316.156C246.083 315.926 245.897 315.746 245.753 315.533L246.331 314.615C246.744 315.877 247.714 315.402 248.499 315.992C247.982 317.074 248.602 316.927 248.23 317.615C247.033 317.435 245.835 319.583 244.865 320.78C244.948 320.583 244.948 320.321 244.989 320.19C244.349 319.189 243.874 320.731 243.544 320.747L244.06 321.485C243.998 321.354 243.73 321.141 243.523 321.419C243.627 322.354 244.824 322.42 244.927 323.354C244.246 323.354 243.338 322.485 242.904 323.026C242.285 323.174 240.654 323.649 241.067 324.912C241.315 325.027 241.418 325.355 241.459 325.732C241.438 325.683 241.418 325.617 241.376 325.584L240.53 326.322C239.498 325.535 241.273 324.978 240.22 324.191L239.147 324.027C239.229 323.485 238.858 322.715 238.342 322.321C238.032 323.125 238.301 323.322 238.383 324.256C237.681 324.322 237.268 323.633 237.206 323.535L237.805 323.731C238.858 322.731 237 322.01 237.392 320.665C237.475 320.468 237.537 320.6 237.723 320.665C236.835 319.468 238.424 318.517 237.186 317.32L237.702 317.714C237.351 316.943 236.484 315.418 235.637 313.909L235.225 313.86C234.956 313.991 235.039 313.467 235.245 313.188C234.832 312.434 234.44 311.712 234.151 311.122C233.862 311.286 233.614 311.483 233.511 311.745C233.986 312.007 233.408 313.286 234.543 313.204C233.78 313.745 234.605 314.811 234.13 315.205C234.977 314.467 235.121 315.861 235.72 316.058C234.977 316.271 235.596 317.254 234.667 317.074C234.399 317.205 235.369 316.73 234.832 316.336C234.069 315.418 233.821 317.812 233.119 316.681C233.594 318.074 233.057 319.812 233.738 321.272L234.234 320.534C234.007 321.141 234.007 322.6 233.532 322.666C233.491 322.206 233.573 321.665 233.47 321.059C232.396 320.928 233.284 322.452 232.603 322.469L234.151 324.322L234.316 323.584C234.915 324.109 233.883 325.584 233.573 326.732C232.19 325.929 233.8 324.978 233.367 323.715C232.933 322.78 231.86 324.125 231.633 323.256C231.261 323.436 231.22 323.977 231.55 324.289L231.24 324.584C230.002 323.715 230.538 322.092 229.548 320.878C229.671 320.993 229.816 321.091 229.96 321.124C230.6 320.321 230.704 319.452 230.477 318.599C229.981 318.993 230.249 319.206 230.373 319.468C230.043 319.468 230.002 318.681 229.671 318.337C229.176 319.075 228.866 318.402 228.557 318.878C228.309 318.353 228.453 317.943 228.681 317.353C229.238 317.074 229.341 317.681 230.022 317.681C229.713 317.009 231.344 316.877 230.704 315.877C230.249 317.074 229.3 315.418 228.908 314.959L228.825 315.156C228.102 314.697 228.123 314.369 228.866 314.155C229.114 314.68 228.825 315.156 229.63 315.074C229.63 314.746 229.651 314.401 229.465 314.008L229.981 314.401L230.043 312.745C229.382 312.417 228.453 311.909 227.442 311.581C228.123 311.237 227.669 310.646 227.483 310.253L227.752 310.45C228.453 309.777 228.164 308.121 227.566 307.924C228.185 307.449 231.034 311.925 230.951 308.203C231.137 306.809 229.093 307.17 228.515 306.317C228.515 306.317 228.722 306.383 228.846 306.317C229.073 305.711 228.33 305.596 228.082 305.071C227.731 305.416 227.648 305.94 227.917 306.137C227.112 305.891 228.164 304.875 227.566 304.35C228.763 305.055 228.206 303.218 228.804 303.727C229.795 302.579 228.949 301.202 228.082 300.48C229.795 299.791 228.041 299.021 228.949 297.742C228.866 297.938 229.073 298.332 228.866 298.611C229.795 299.447 229.568 297.266 230.353 298.512C230.229 298.25 229.816 298.447 229.94 298.726C230.002 299.185 230.394 299.644 230.869 299.562L231.901 298.545L232.107 298.939L233.552 297.381C233.346 297.315 233.078 297.463 232.933 297.529C233.718 295.643 233.284 293.396 233.656 291.724C230.827 291.199 232.912 287.493 231.282 286.001C232.066 286.428 233.491 286.723 234.13 286.542C234.213 286.854 235.307 287.559 234.998 288.231C234.523 288.313 233.903 289.117 233.449 288.543C233.573 290.478 234.729 288.379 235.741 289.018C235.699 286.887 234.151 285.526 233.614 284.148H233.965L233.429 283.083C233.14 283.886 231.529 283.738 232.211 282.722L232.273 282.853C233.016 282.295 232.355 280.984 232.562 280.049L231.695 279.344C231.901 278.409 233.656 278.491 234.75 278.245C235.039 276.77 233.676 275.818 232.913 274.72C233.718 274.294 234.13 272.08 234.936 273.326C234.399 271.949 230.27 271.965 232.768 269.817L233.449 270.457C233.511 268.259 232.355 265.045 233.202 264.094C235.782 265.062 236.133 261.504 238.775 261.258C238.177 261.34 238.053 260.503 237.743 260.356C238.073 260.192 238.383 259.913 237.867 259.552C237.268 260.372 235.225 258.798 236.133 260.503C234.42 259.585 233.119 258.437 233.367 256.634L234.44 256.716L233.986 258.126C234.791 258.027 234.667 258.765 235.018 259.077C235.865 256.437 237.537 259.569 237.619 256.83C236.938 256.535 237.206 256.716 237 255.994C237 256.322 237.743 256.437 237.805 255.896L236.979 255.338C238.879 254.486 238.012 256.978 239.374 256.224C240.138 257.322 240.427 259.175 241.851 258.913C242.512 257.208 239.395 257.224 240.179 255.453L240.778 255.289C240.427 254.633 239.477 254.486 238.94 254.108C239.271 254.108 239.539 253.944 239.663 253.551C238.342 252.403 238.135 251.682 236.67 250.632C237.599 253.305 235.452 252.829 236.236 255.584C235.823 255.141 235.658 253.223 234.151 253.026L235.245 253.108C234.75 252.206 234.254 251.288 234.688 250.206L235.245 250.911C234.605 249.402 237.083 248.55 235.348 247.32C235.225 247.73 235.225 248.058 235.369 248.32C234.936 247.55 235.121 246.598 235.369 245.795L233.697 244.024C234.234 244.057 234.358 242.991 235.163 243.549C236.092 242.368 234.502 241.712 234.275 241.007C235.514 239.81 234.729 242.106 236.215 242.302C236.835 240.597 236.484 238.761 235.576 237.744C235.328 238.088 235.142 238.252 234.874 238.219C235.225 238.187 235.183 237.482 235.204 237.104L234.523 236.809C235.039 236.186 235.452 236.285 235.947 236.858C236.133 236.252 234.812 235.465 235.865 234.858C236.649 235.94 235.823 237.252 236.319 237.826C235.761 235.596 238.61 235.694 237.888 232.874C238.218 232.858 238.858 233.349 238.899 232.808C238.713 231.546 237.454 232.431 236.711 232.005C237.083 232.972 236.628 233.415 235.699 233.923L235.142 233.645C235.452 233.612 235.493 233.021 235.803 232.858L234.647 232.661C235.926 232.776 236.979 231.857 236.546 231.087C235.555 231.808 235.617 231.611 234.13 231.759C232.789 230.644 235.576 230.611 234.172 229.365C234.585 229.463 234.832 230.513 235.204 229.627C235.307 228.889 234.296 228.955 233.986 228.43C235.039 229.037 235.844 228.922 237.083 229.578C237.144 230.906 237.041 230.119 237.433 231.415L238.424 230.349C238.528 231.48 239.601 231.218 240.014 231.316C241.232 229.447 238.466 229.808 238.817 228.594C238.115 227.971 238.61 229.742 237.867 228.791C238.094 227.643 237.186 228.496 236.773 227.2L237.248 227.43C237.908 227.053 237.144 226.643 237.062 226.184C236.752 225.676 233.284 226.627 233.325 224.56C233.614 224.675 233.8 224.708 233.945 224.724L242.883 227.053C242.966 224.954 243.358 222.544 244.081 220.117C245.877 219.592 245.443 221.904 246.248 221.773L245.835 222.872C245.092 222.79 245.732 220.527 244.349 221.494C244.783 223.478 243.874 224.331 245.319 226.249C247.115 225.725 245.134 223.79 246.558 222.626C246.414 223.134 246.579 223.56 246.826 223.987C247.115 222.855 247.425 221.642 247.755 220.363L247.342 220.051C247.095 220.92 246.909 221.511 246.847 221.593C247.053 220.445 246.125 219.428 244.845 219.313L244.783 219.51L244.39 219.084L244.679 218.28L245.01 218.33ZM246.104 143.328C246.228 143.394 246.372 143.443 246.558 143.492C246.372 143.459 246.248 143.492 246.104 143.328ZM248.044 241.155C248.333 239.613 248.788 238.072 249.035 236.596C246.31 239.17 244.246 240.974 244.576 236.514L244.411 236.219C244.06 236.793 243.957 237.793 244.081 238.744C244.948 239.548 248.127 242.171 248.416 242.155C249.159 241.909 248.395 241.483 248.643 240.991L248.044 241.155ZM243.689 242.073C243.338 242.942 243.916 242.762 244.432 242.925C244.39 242.614 244.349 242.302 244.308 242.007C244.163 242.122 243.978 242.171 243.709 242.089L243.689 242.073ZM244.948 242.893C244.948 242.794 244.989 242.712 245.072 242.68L244.948 242.893ZM246.62 225.905C246.62 225.905 246.62 225.954 246.641 226.003C246.682 225.79 246.744 225.594 246.785 225.38C246.703 225.462 246.62 225.626 246.599 225.921L246.62 225.905ZM245.278 227.627L246.207 227.873C246.248 227.676 246.29 227.479 246.352 227.282C245.918 227.332 245.546 227.397 245.278 227.627ZM241.872 233.218C242.966 233.628 242.945 234.825 244.246 234.956C244.576 235.038 244.721 234.792 244.845 234.514C244.907 234.202 244.948 233.858 245.01 233.497C244.824 233.481 244.659 233.399 244.494 233.267C244.308 233.612 243.978 233.841 243.193 233.661C244.989 232.825 242.016 232.792 242.512 231.824C241.624 231.48 241.542 232.89 241.893 233.202L241.872 233.218ZM237.888 308.957C237.764 308.974 237.475 309.039 237.083 309.154L236.546 308.416C237 307.203 238.982 306.367 237.537 305.137C238.012 304.645 238.899 304.448 239.622 304.235C239.539 304.481 239.436 304.711 239.312 304.907C241.232 308.22 236.628 306.317 237.908 308.974L237.888 308.957ZM241.975 294.938C242.037 295.069 242.243 295.135 242.243 295.135C240.2 292.199 239.808 289.871 240.055 288.395C239.085 288.608 238.218 289.904 237.743 290.494L236.732 289.855L237.619 289.559L236.752 288.51C236.009 288.723 236.071 289.527 235.452 290.002C235.658 290.068 236.69 291.839 237.31 292.347L238.218 291.052C237.867 291.396 237.908 293.2 238.094 293.921C238.631 293.97 239.601 292.822 238.466 292.577C239.271 292.495 239.126 293.905 240.076 293.068C240.798 294.183 239.89 295.807 239.395 296.561L238.032 296.594C237.413 297.414 239.58 297.299 238.672 298.25C238.569 296.987 237.186 298.348 237.206 297.348C236.67 297.627 235.782 297.25 235.761 298.25C237.433 299.217 234.523 299.201 235.988 300.103C235.369 300.578 234.998 299.463 234.626 300.464C235.41 301.71 236.092 301.693 237.372 301.874C237.867 300.808 235.844 300.496 236.277 299.627L238.28 301.595C238.631 301.284 238.693 301.054 238.631 300.841C238.713 301.218 239.002 301.546 239.415 301.841C239.642 302.005 239.849 302.169 240.014 302.3C240.158 301.284 240.282 300.382 240.86 300.267L241.459 300.464C242.078 300.152 241.707 299.529 241.273 299.217C241.314 298.299 240.551 297.332 241.397 297.184L241.934 297.578C241.893 296.446 241.831 296.315 241.996 294.905L241.975 294.938ZM247.157 258.241C244.803 258.798 242.698 259.438 242.821 262.635L242.677 262.373C241.087 263.881 244.328 265.603 242.532 267.456C241.748 266.456 241.831 266.521 239.952 265.357L240.509 266.406C239.291 266.046 239.828 267.095 239.704 267.833L238.28 267.095C238.755 266.669 239.023 265.537 238.672 265.554C238.817 265.816 240.675 264.144 240.324 263.143C239.312 263.193 239.539 265.242 237.97 264.242C238.59 265.078 237.578 265.127 237.867 265.98C237.248 265.144 236.505 265.701 235.823 265.062L236.03 266.456C235.699 266.456 235.472 264.422 234.13 265.472C234.605 266.046 233.8 267.472 234.874 267.571H234.543C234.213 268.604 236.03 268.128 235.287 269.358C235.823 269.407 236.236 269.194 236.174 268.735C235.968 268.341 235.225 268.243 235.163 267.439C236.05 267.144 234.956 268.374 236.463 267.915C237.206 267.685 236.05 265.8 237.599 266.472L237.268 267.489C238.362 267.587 238.218 268.325 239.106 268.358C239.436 269.014 238.156 269.522 239.044 270.227C239.725 270.539 241.067 270.145 240.406 271.178C238.713 271.916 238.796 274.376 238.92 275.294L239.539 276.146C240.22 276.114 239.601 274.605 240.406 275.179L240.551 276.442L240.138 276.31C240.014 276.72 240.406 277.179 240.613 277.573C239.869 277.13 240.262 276.245 239.126 276.36C238.837 276.934 238.424 276.999 238.59 277.54C238.528 277.409 238.424 277.311 238.259 277.311C237.661 278.458 239.395 278.54 239.746 278.868C241.087 280.164 241.253 277.753 242.388 277.983L242.636 281.508C242.305 281.18 241.975 280.869 241.5 280.934C240.881 281.754 240.613 280.902 240.551 282.099C242.099 282.115 241.356 283.673 242.14 284.591C241.459 284.952 241.335 285.017 241.397 284.148C240.386 284.181 240.633 285.362 240.509 285.772C240.736 286.034 240.84 286.444 241.025 286.723C241.562 286.411 242.182 286.608 242.512 287.379L242.718 287.444C243.131 286.231 244.432 284.394 243.503 283.542L243.978 283.788C245.01 282.41 242.512 280.557 244.494 280.033C245.237 280.147 244.7 279.754 245.774 279.852L245.051 278.737L245.526 278.983L245.464 277.179L245.67 277.245C244.762 276.327 244.039 275.605 243.441 275.031C242.966 274.999 242.822 275.031 242.491 274.736C242.285 274.441 242.264 274.212 242.347 274.031C242.532 273.605 243.234 273.359 243.565 272.834L243.523 274.507C244.308 274.687 245.154 274.605 245.794 273.818C245.794 274.146 246.414 274.326 246.537 273.933C246.331 273.867 246.125 272.801 245.443 273.162C245.299 271.555 247.673 269.128 246.372 266.636C247.115 268.423 247.59 265.308 247.735 267.259C249.159 265.996 246.579 266.029 246.888 264.685C247.363 264.603 246.764 265.423 247.652 265.783C248.375 263.537 245.897 261.832 246.496 259.667L247.508 259.634C247.425 259.208 247.322 258.749 247.219 258.257L247.157 258.241ZM246.29 253.83C246.207 253.403 246.125 252.961 246.042 252.534C246.042 252.583 246.021 252.616 246.001 252.665L245.278 251.354C244.824 252.108 243.689 252.567 243.255 251.452C243.668 251.567 244.205 251.272 244.411 251.665C245.072 250.96 245.774 249.386 244.225 249.73C245.546 251.206 242.264 249.96 243.255 251.124C242.305 250.485 242.801 249.927 242.409 249.337C243.193 249.96 244.287 249.288 244.762 248.435C244.556 248.041 244.865 247.025 244.514 246.369C243.565 246.549 243.09 245.975 242.76 246.992C242.553 246.598 242.388 246.008 242.925 245.385C243.069 245.647 243.152 246.107 243.482 246.09C244.37 245.713 244.37 245.205 244.762 244.959C244.721 244.746 244.7 244.516 244.659 244.303C244.576 244.368 244.473 244.418 244.329 244.45L243.565 243.696C243.936 244.68 243.111 244.122 242.553 244.09C243.647 244.172 242.739 243.483 242.739 243.139L241.542 243.811C240.984 243.434 242.471 242.63 241.315 242.762C240.736 244.254 240.902 244.844 241.129 246.238L242.058 245.729C242.574 247.304 240.447 246.615 240.365 248.353C241.129 249.107 240.22 250.96 241.851 251.091C241.376 250.845 240.324 252.108 241.005 252.731C242.45 253.469 242.491 255.469 243.214 254.896C243.276 254.354 242.512 253.6 243.523 253.207L243.75 254.272L244.618 253.633C244.308 253.977 245.092 253.977 246.31 253.879L246.29 253.83ZM257.066 230.726V230.693C257.066 230.693 257.066 230.726 257.066 230.742V230.726Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M239.085 324.668C239.415 324.996 239.25 325.734 240.055 325.668C239.168 325.603 240.117 324.324 239.085 324.668Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M238.115 325.469C238.322 325.534 238.652 325.534 238.632 325.862L238.549 324.928L238.115 325.469Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M232.004 325.847C232.582 326.388 232.912 326.716 232.747 327.47C230.58 327.569 232.314 326.175 230.394 325.65C229.981 327.028 231.798 327.634 231.839 328.815C232.788 328.274 233.614 326.028 232.004 325.847Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.403 324.977L229.754 325.797L229.899 325.731L229.527 324.928L229.403 324.977Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M250.233 310.286C250.914 310.286 250.315 309.745 250.191 309.482C250.129 309.679 249.902 309.958 250.233 310.286Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.307 160.3L259.584 154.479C259.77 156.151 259.894 157.709 260.307 160.3Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M248.291 290.707C248.725 292.314 249.798 293.084 249.901 294.691C251.491 292.707 248.147 291.789 249.716 290.133L248.291 290.707Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.557 291.641C252.277 291.805 252.236 290.329 251.286 290.493C251.472 291.559 252.422 291.067 252.195 292.018L253.557 291.641Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M231.901 297.103L231.323 296.578L231.509 296.972L231.901 297.103Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M253.227 284.442L253.474 284.639L253.97 283.885L253.227 284.442Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M229.28 296.281L228.929 296.954L229.465 297.347L229.28 296.281Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M236.773 290.675L237.104 291.331C237.042 291.2 237.661 290.38 236.773 290.675Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M254.278 279.704L253.886 278.9L253.741 278.982L254.134 279.769L254.278 279.704Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.861 285.542C232.85 285.903 233.737 284.28 232.788 285.1C232.85 285.903 233.387 285.608 233.861 285.542Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.396 276.852C241.396 276.754 241.396 276.638 241.293 276.523C241.314 276.655 241.355 276.754 241.396 276.852Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.397 276.852C241.355 277.18 240.963 277.491 241.211 277.737C241.686 277.36 241.541 277.196 241.397 276.852Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.543 273.031L241.439 273.326C240.985 272.981 241.047 273.145 241.398 273.441C241.398 273.769 241.708 273.769 241.914 273.818C242.017 273.883 242.141 273.965 242.265 274.031C242.141 273.932 242.038 273.834 241.935 273.752C241.997 273.26 241.976 272.949 241.522 273.031H241.543Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.171 259.832C258.717 260.931 258.51 261.209 257.767 261.111C257.437 262.16 258.737 262.062 258.985 262.718C258.944 261.505 259.316 261.275 259.171 259.832Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.986 262.719C258.986 262.85 258.986 262.982 259.007 263.146C259.048 262.965 259.007 262.834 258.986 262.719Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M232.914 276.934L231.82 276.18L231.964 276.442L232.914 276.934Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.687 258.19C259.625 258.403 259.625 258.731 259.357 258.879C260.1 258.977 259.749 257.977 259.687 258.19Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.577 261.684C244.102 261.766 244.329 262.503 244.123 262.782C244.247 262.372 245.671 262.11 244.577 261.684Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M256.88 254.812C256.818 255.009 256.281 255.304 255.662 255.14C256.013 255.468 257.293 255.944 256.88 254.812Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.887 259.666L244.619 259.814L245.032 260.601L244.887 259.666Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.553 261.75C234.379 262.652 235.824 260.52 236.464 262.029C237.558 260.192 235.184 262.094 235.452 260.717C235.081 261.52 233.904 261.848 233.553 261.75Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.452 260.716C235.514 260.601 235.555 260.469 235.555 260.338C235.494 260.486 235.473 260.617 235.452 260.716Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.119 249.025C242.202 249.157 242.305 249.239 242.408 249.321C242.346 249.223 242.264 249.124 242.119 249.025Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.101 256.238L236.339 257.583C235.513 256.681 235.761 254.549 234.399 254.615C234.068 255.287 234.357 256.14 234.894 256.517L235.101 256.238Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.555 242.678L261.05 243.269L261.256 242.58C261.05 242.777 260.08 242.367 260.555 242.695V242.678Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.297 242.434L261.256 242.566C261.256 242.566 261.297 242.5 261.297 242.434Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.574 251.483C242.45 251.893 242.45 252.221 242.677 252.615C242.945 252.467 243.255 251.45 242.574 251.483Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.862 238.664L259.027 239.599L259.007 238.582L258.862 238.664Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.422 234.45L261.69 234.303L261.257 233.516L260.989 233.68L261.422 234.45Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M234.646 238.975C234.46 239.582 235.637 240.123 235.905 239.959V238.762C234.852 239.024 235.947 239.09 235.637 239.778L234.667 238.975H234.646Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.927 202.442C261.629 202.721 261.175 204.049 260.514 204.099C260.225 203.918 259.977 203.197 259.523 203.639L261.216 204.722C260.101 206.099 258.966 203.607 258.388 202.918C258.119 204.328 259.255 204.771 259.193 206.296C259.358 205.853 259.791 205.574 260.184 205.361C261.402 205.328 260.824 206.739 260.886 207.739C261.443 207.116 261.876 207.493 262.331 207.968C262.372 208.05 262.434 208.116 262.516 208.149L262.682 208.313V208.198C262.826 208.198 262.991 208.198 263.218 208.099C262.909 207.247 263.941 206.624 263.961 206.083C261.959 206.575 263.549 204.213 262.971 203.525L262.805 202.738V202.442C263.032 202.393 263.301 202.475 263.672 202.934C263.301 202.557 263.466 201.295 262.826 201.393L262.888 198.523C262.971 198.441 263.074 198.343 263.218 198.278C263.094 198.179 262.991 198.163 262.888 198.163C262.991 193.998 262.971 189.833 263.032 185.668C262.867 186.291 262.393 186.816 262.165 187.439C260.865 186.471 261.918 188.472 260.658 188.177C260.204 187.75 260.369 187.111 260.658 186.75C260.039 186.603 259.461 187.127 258.718 187.062C257.892 188.619 260.906 188.898 260.411 190.423C259.668 190.358 259.007 189.866 259.09 190.882L258.924 190.62C259.729 192.243 257.19 191.85 259.255 192.899L258.161 192.85C258.966 193.588 258.945 195.014 259.069 195.818L258.862 195.769C260.039 198.032 259.09 197.031 259.544 199.573L258.305 198.392C257.748 199.245 259.131 199.475 258.966 200.098C258.759 200.048 257.954 200.18 257.768 199.589L259.606 202.688C260.411 203.443 260.411 202.557 260.886 202.459L260.927 202.442Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.191 206.279C259.13 206.443 259.088 206.624 259.13 206.837C259.171 206.624 259.191 206.443 259.191 206.279Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.032 184.799V185.668C263.093 185.389 263.113 185.11 263.032 184.799Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.38 210.721C261.959 210.196 262.144 211.131 262.557 211.246L262.619 209.343C262.206 209.343 261.731 209.147 261.36 209.179V210.737L261.38 210.721Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.444 208.801C263.155 208.736 262.907 208.523 262.66 208.293L262.618 209.342C262.928 209.342 263.217 209.228 263.424 208.801H263.444Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M241.066 208.489L241.045 208.145L240.735 207.637L241.066 208.489Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.091 203.326C242.451 203.703 242.905 204.474 243.05 204.736C243.05 203.867 243.277 204.244 243.091 203.326Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M236.236 204.244L235.905 203.408L235.781 203.49L236.236 204.244Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.798 178.29C258.778 178.158 258.758 178.01 258.738 177.879C258.738 178.076 258.758 178.191 258.798 178.29Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.771 185.568C261.03 183.552 260.762 186.897 262.331 186.29L261.835 185.191L262.248 185.29L262.145 183.945C261.422 184.207 261.381 184.421 260.617 184.355C260.948 182.568 261.526 183.797 262.496 182.486L262.372 180.485L262.599 180.649C262.599 180.485 262.496 180.403 262.372 180.354L261.959 173.598C261.361 172.369 260.597 174.271 259.503 173.369C259.503 174.795 258.677 176.894 260.184 177.025C259.977 176.976 259.565 176.878 259.379 177.173L260.617 178.009L261.01 177.222C262.228 178.058 261.939 180.731 261.175 181.207C260.762 179.682 259.276 180.436 260.101 178.321C259.709 178.419 259.048 178.796 258.842 178.321C259.255 180.797 258.574 183.01 259.792 185.601L259.771 185.568Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.13 160.694H259.276C259.276 160.694 259.151 160.661 259.13 160.694Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.944 161.529L260.431 162.726L260.307 160.84L259.275 160.709C259.543 160.873 260.059 161.529 259.667 161.791L258.965 161.529H258.944Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.318 164.12C260.864 163.152 259.646 163.201 259.109 163.742C258.531 162.857 260.41 163.267 259.109 162.66C258.221 162.677 258.758 163.775 258.923 164.038L261.318 164.136V164.12Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.699 171.318L260.203 171.039L260.059 171.711L260.699 171.318Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.203 171.039L260.327 170.367C259.956 170.416 259.584 170.466 259.336 170.564L260.203 171.039Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.678 168.613C260.76 168.334 260.843 168.022 260.864 167.629L260.678 168.613Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.368 169.384H260.534L260.678 168.613C260.575 168.892 260.472 169.138 260.368 169.384Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.328 170.367C261.175 170.252 262.083 170.137 261.835 169.17L260.514 169.367L260.328 170.383V170.367Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M237.702 198.194L237.247 197.439L237.124 197.505L237.578 198.276L237.702 198.194Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M238.609 193.85C238.464 193.653 238.299 193.522 238.155 193.391C238.237 193.587 238.382 193.751 238.609 193.85Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M232.85 190.537C233.717 189.668 233.965 191.767 234.378 190.144C235.183 190.013 236.194 190.8 235.782 191.554C235.038 191.488 235.307 190.8 234.543 191.259C235.41 191.784 234.811 191.964 235.947 191.8C236.628 192.669 237.433 192.784 238.176 193.374C237.701 192.325 238.899 190.144 237.474 188.799C236.133 188.045 234.254 188.471 232.293 188.455C231.818 188.553 231.57 190.439 232.871 190.537H232.85Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M230.847 191.896C230.744 192.306 230.827 192.438 230.971 192.684C231.652 192.618 230.868 192.224 230.847 191.896Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.836 182.615C245.547 182.533 245.216 181.779 244.721 181.943L245.072 183.075C245.113 182.812 245.464 182.714 245.836 182.615Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.217 183.566L245.071 183.074C245.051 183.205 245.071 183.353 245.217 183.566Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.023 182.566L245.857 182.616C245.857 182.616 245.981 182.616 246.023 182.566Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.154 165.842C261.69 165.842 261.36 165.35 261.216 165.088C261.174 165.301 260.989 165.596 261.154 165.842Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.8 146.69L259.213 146.23C258.965 146.394 258.841 146.476 258.8 146.69Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.875 140.016C243.771 140.016 243.688 139.967 243.605 139.934C243.668 139.983 243.771 140 243.875 140.016Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.585 139.936C243.131 139.641 243.791 138.69 243.11 138.362L243.316 138.395L242.904 137.771C242.986 138.362 242.924 139.592 243.585 139.92V139.936Z\",\n    fill: \"#3F3834\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.9438 57.8655C45.7993 57.5212 46.4186 57.1769 46.7076 57.2916C45.8612 56.6193 46.7489 56.5538 45.2419 56.5374C44.4575 56.111 45.4484 55.5699 46.0883 56.0618L45.0561 54.7828L44.891 55.5863C43.6317 55.4387 45.1593 54.2909 43.673 54.127L43.9207 55.5535L43.5078 55.5043C43.9827 55.7995 43.8588 56.4554 43.6936 56.6849C43.4872 56.6685 43.1569 56.7013 43.095 56.4554C43.1569 58.1935 45.3245 56.7997 45.8612 58.2263C45.8199 58.1443 45.8406 58.0295 45.9438 57.8655Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.0329 59.5067L44.6431 60.0314L44.3334 61.0644C44.8702 61.048 45.3863 61.7531 45.7991 61.2284C45.7166 61.13 45.5308 60.9497 45.5721 60.7857C46.7488 60.8349 46.274 62.0975 47.43 61.7367C47.0584 60.9497 47.2855 60.8185 46.2946 60.3757C46.3359 59.6379 46.563 59.0804 46.9552 58.7196C46.7694 58.5065 46.0469 58.5229 45.8817 58.2441C45.9024 58.3097 45.923 58.3589 45.9437 58.4245L44.1889 58.5557C44.5812 58.7688 44.416 58.9984 44.4779 59.2443L42.331 58.1621C40.7208 58.6376 41.7943 59.7526 41.1543 60.261C42.5787 59.6051 41.9388 60.6873 43.0329 59.4903V59.5067Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M69.4979 145.377C69.6011 145.623 70.014 145.623 70.2411 145.623L69.4979 142.852C69.0644 143.016 68.7135 143.901 68.3006 143.409C67.8671 143.721 68.4657 144.393 69.1057 144.393L68.3625 144.295C69.4153 144.786 67.7845 145.508 67.1445 145.18V145.229L71.0256 146.459C71.0668 145.77 69.725 146.147 69.4773 145.36L69.4979 145.377Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.1984 204.145C77.0539 203.767 76.8888 203.718 76.7236 203.751C76.8475 203.882 76.992 204.014 77.1984 204.145Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.9548 146.756L73.1728 147.15C72.8219 146.97 72.3884 146.838 71.9548 146.756Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.7388 145.492C54.7388 145.492 54.6356 145.492 54.553 145.525L55.1516 145.689C55.0071 145.607 54.8626 145.541 54.7181 145.492H54.7388Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M79.1802 158.873C79.1802 158.873 79.2428 158.972 79.3054 159.055C79.2845 158.989 79.2428 158.923 79.1802 158.873Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.7285 138.77L48.0704 139.885C47.5336 139.787 47.8433 140.377 47.2033 140.197C47.3065 140.279 47.6162 140.705 47.8226 140.541L47.7194 140.279C49.309 140.722 49.7425 140.246 51.105 141.181C51.7862 140.361 50.9398 140.18 50.1967 139.918C50.0728 139.803 49.9902 139.721 49.9283 139.623L47.6781 138.869L46.7285 138.754V138.77Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M67.6601 186.783H68.1349C67.9078 186.75 67.6394 186.52 67.6601 186.783Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.9849 146.706C71.2532 146.673 71.5835 146.705 71.9551 146.755L71.0468 146.459C71.0468 146.459 71.0055 146.607 70.9849 146.689V146.706Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M67.6399 146.261L67.1651 145.245L66.3394 144.982C66.7109 145.343 67.0206 145.769 67.6399 146.261Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M79.5928 157.068C80.3567 159.233 77.7968 156.79 77.6317 157.855C77.9826 158.429 78.829 158.528 79.1593 158.872C78.0446 157.232 81.8224 158.708 80.976 157.019C82.4623 157.052 82.8545 158.036 82.6068 158.708C81.3888 159.61 81.4508 158.265 80.0676 158.331C80.4599 159.003 80.687 158.839 81.5334 159.02C81.4714 160.184 83.7835 161.086 82.0288 162.037C82.5242 162.807 83.1848 162.643 84.0106 163.004C85.5176 162.873 84.506 161.676 85.6002 161.201C85.4969 161.283 85.2699 161.446 85.0428 161.43L85.1873 160.676C84.8363 161.414 83.6803 160.807 83.4945 160.463C83.3913 160.2 83.2055 159.708 83.639 159.708L84.0519 160.053C84.4028 159.479 82.71 159.102 83.3913 158.446C83.7216 158.364 83.928 158.544 84.1345 158.544C82.9784 158.101 82.8958 157.528 81.9669 156.757L83.5564 157.036C81.7604 156.593 81.8224 154.937 82.4004 153.691C82.1733 153.855 82.0701 154.1 81.7398 154.019C81.2237 153.428 82.1114 152.789 82.9578 152.953C81.5746 152.526 83.3706 150.411 81.5746 149.804L73.152 147.115C73.3791 147.23 73.5648 147.361 73.6681 147.509C72.4707 148.066 72.6772 148.23 71.3147 147.804C72.1404 148.296 73.1313 147.902 73.3997 148.804C72.6565 148.558 71.1702 148.706 71.2321 149.591C73.0694 151.575 77.0949 152.444 79.4896 154.199C78.5194 154.428 79.2006 156.019 79.1593 156.839C78.0239 156.708 77.5697 156.167 77.1981 155.593C77.2188 155.986 77.3633 156.642 77.4252 157.134L79.5515 157.003L79.5928 157.068Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M74.9918 152.479C74.9918 152.479 74.8874 152.611 74.8457 152.677C74.9292 152.627 74.9709 152.578 74.9918 152.479Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.1988 155.462C77.1988 155.462 77.1362 155.462 77.0945 155.462L77.2197 155.643C77.2197 155.643 77.2197 155.495 77.2197 155.445L77.1988 155.462Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.8797 147.577C68.57 147.494 68.4668 147.412 68.1365 147.33C68.2603 147.396 68.3636 147.478 68.4668 147.56C68.6319 147.626 68.7764 147.659 68.8797 147.56V147.577Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.5098 146.853H70.9433C70.9433 146.853 70.9846 146.754 70.9846 146.705C70.7575 146.722 70.5717 146.771 70.5098 146.853Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.5945 166.809L72.864 166.99C72.8225 166.858 72.7189 166.825 72.5945 166.809Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M78.5197 159.775C78.2307 159.02 77.0127 159.906 76.7444 158.824V159.152C75.9186 158.479 75.8567 157.069 75.5883 156.167C76.2076 156.167 76.1664 155.495 77.116 155.462C76.7444 154.872 76.3934 154.282 75.3613 154.101C75.5677 153.658 74.5974 153.216 74.8658 152.658C74.3704 152.953 72.8221 152.265 73.7923 153.347C73.6891 153.265 73.5859 153.347 73.4827 153.265C72.9047 154.15 74.2878 154.249 74.4736 154.921C74.0194 155.413 73.4414 154.413 73.2969 154.823C74.0194 155.577 73.2969 157.528 75.32 157.151C75.609 157.741 75.1755 157.889 74.8452 158.135C77.2811 158.758 74.7626 161.841 77.5701 161.414C77.3843 161.07 77.3018 160.496 76.5792 160.07L78.5197 159.775Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M69.353 148.822C69.353 148.822 69.3698 148.937 69.353 148.97C69.353 148.921 69.353 148.872 69.353 148.822Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.0504 138.062L76.9497 138.095C77.8167 139.784 77.4864 140.522 77.9405 142.063C77.7135 142.227 77.507 142.063 77.4038 141.981C77.8993 143.031 77.9199 144.736 78.9727 145.408C79.0553 145.769 78.7044 146.769 78.0851 146.507C78.2915 146.655 78.4979 146.819 78.4979 147.032C77.858 147.196 78.1883 146.622 77.6515 146.704C77.6515 146.868 77.5277 146.95 77.7548 146.95C77.1148 146.786 75.5872 147.573 75.3188 146.36C76.7226 145.638 75.711 147.179 77.3419 146.622C77.2593 146.212 76.5987 146.376 76.3923 146.36C76.289 145.835 76.7226 145.786 77.1148 145.753C76.5368 145.638 77.1148 144.867 76.2271 144.736C75.8349 143.752 77.507 144.589 77.3212 143.933L75.5046 143.834L75.5459 142.703C74.555 141.227 72.6351 143.408 71.2107 141.768C72.1603 141.867 73.4815 140.899 73.626 140.014C73.8118 140.506 75.1743 141.244 74.8234 141.965C75.9381 140.85 75.2982 143.195 76.7226 142.473C75.8762 142.145 75.5872 141.408 75.8349 140.768L76.0413 140.932C76.062 140.293 74.1421 140.096 74.6169 139.128C74.4518 138.718 74.9679 138.718 75.3807 138.735C75.0298 138.423 74.6169 138.144 75.0091 138.095L75.0504 138.062ZM75.6285 138.932V139.522C75.8555 139.341 75.7936 139.128 75.6285 138.932Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.9812 67.6737C43.9812 67.6737 44.0647 67.5417 44.1064 67.4922C44.0229 67.5417 44.0021 67.6077 43.9812 67.6737Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.9063 119.849V119.504C49.8665 119.652 49.8864 119.75 49.9063 119.849Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.8674 112.781L42.3926 112.322C42.4545 112.519 42.6403 112.65 42.8674 112.781Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.2295 71.7227C44.2295 71.7227 44.3122 71.7887 44.3328 71.8052L44.2502 71.7227H44.2295Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.7249 96.988C44.8694 96.9059 44.9932 96.8073 45.0758 96.6758C44.9106 96.7086 44.7868 96.8237 44.7249 96.988Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.952 112.862C42.952 112.862 42.952 112.845 42.9729 112.829L42.8477 112.779L42.9311 112.862H42.952Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.4905 123.832C45.4905 123.832 45.6148 123.964 45.6978 124.03C45.6356 123.931 45.5734 123.882 45.4905 123.832Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.2993 122.75C50.2993 122.75 50.4237 122.899 50.5066 122.948L50.2993 122.75Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.4319 135L49.7828 135.427C49.7002 135.197 49.5764 135.082 49.4319 135Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.4106 124.111C49.4106 124.111 49.5765 124.144 49.6594 124.16C49.5972 124.111 49.4936 124.078 49.4106 124.111Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M48.9165 64.4727V64.5057H49.1238L48.9165 64.4727Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.2744 63.5077L46.0886 63.1133C46.0886 63.2612 46.1506 63.4091 46.2744 63.5077Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.7281 90.1185C46.9758 89.9706 47.2442 89.6748 47.5332 89.7899C47.1409 89.5762 46.2533 89.6584 46.7281 90.1185Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.0431 66.0652C59.7954 65.9995 59.6096 65.9337 59.4238 65.8516C59.6922 65.9995 59.9193 66.1474 60.0431 66.0652Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.4239 65.8512C59.3 65.769 59.1555 65.6868 59.011 65.6211C59.1348 65.7033 59.2794 65.769 59.4239 65.8512Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.5305 92.1035C61.4061 92.1365 61.3232 92.2025 61.3025 92.2685C61.5305 92.2355 61.5927 92.186 61.5305 92.1035Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.3562 62.7837C45.9433 62.7345 44.8698 61.0456 44.7873 62.5214C43.4867 62.5214 44.106 61.6195 43.7551 61.2424C43.4661 61.5375 42.9087 61.144 42.4545 61.2588C42.6197 61.4392 43.0119 61.6523 42.95 61.9803C42.3719 62.1606 41.9178 61.7015 42.1242 61.308C41.4843 61.8163 41.0507 60.7669 40.5759 61.4556C41.154 62.8493 41.7113 63.8168 43.6931 64.7022C43.3009 63.9152 42.8467 63.0297 43.3009 62.341L44.4363 62.5542C43.5073 63.3576 44.2918 63.784 44.2505 64.5219L44.7047 62.8329C45.5717 62.0131 45.8194 62.5214 46.0878 63.1117C46.0878 62.9641 46.1497 62.8165 46.3355 62.7673L46.3562 62.7837Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.2865 63.3432V63.3102C56.2865 63.3102 56.2452 63.2606 56.2039 63.2441L56.2865 63.3432Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.7688 131.685L72.223 131.768C72.0165 131.685 71.872 131.669 71.7688 131.685Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.0386 130.588C47.0386 130.588 46.9343 130.604 46.8926 130.637C46.976 130.703 47.0178 130.654 47.0386 130.588Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.7391 112.059C63.7391 112.059 63.5533 112.124 63.3882 112.239C63.4914 112.256 63.6153 112.223 63.7391 112.059Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.6641 115.568C62.6641 115.568 62.6021 115.618 62.5608 115.651L62.6641 115.568Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.7734 91.3008C41.7734 91.4651 41.8146 91.5966 41.8763 91.6952C41.8763 91.5637 41.8763 91.4323 41.7734 91.3008Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.2107 128.277C71.3346 128.294 71.4584 128.327 71.6236 128.392C71.4378 128.327 71.3139 128.294 71.2107 128.277Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.2976 107.533L57.4427 107.616L57.4842 107.55L57.2976 107.533Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.8754 105.696C58.0199 105.746 58.1438 105.762 58.2677 105.778C57.7103 105.204 58.0406 104.007 56.8432 103.975C56.9052 104.188 56.3684 105.352 55.6459 105.221C55.9968 105.631 55.2743 106.352 55.5014 106.565C56.0381 105.778 56.4923 106.401 56.9671 106.844C56.6781 107.32 55.9968 106.844 55.8317 107.254L56.1207 108.254V107.352L57.318 107.516C57.2768 107.484 57.2355 107.467 57.1942 107.434C56.451 105.991 58.8457 107.156 57.8754 105.68V105.696Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.2676 105.777C58.3505 105.86 58.4541 105.942 58.5785 105.992C58.5371 105.843 58.4127 105.81 58.2676 105.777Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.281 99.4995C59.281 99.4995 59.1566 99.351 59.053 99.252C59.0944 99.3015 59.1774 99.417 59.281 99.4995Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.3398 144.198C66.6701 144.116 67.1243 143.149 66.2779 143.297L66.1953 144.116L66.3398 144.198Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.178 83.1523C52.178 83.2509 52.178 83.3496 52.178 83.4482L52.3225 83.4975C52.4463 83.4317 52.2606 83.2509 52.178 83.1523Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.1924 104.99C55.3575 105.138 55.502 105.204 55.6465 105.22C55.564 105.122 55.4401 105.04 55.1924 104.99Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.2627 82.9537C54.5104 82.8061 54.8614 82.6094 55.1917 82.5602C55.1917 82.2978 54.6962 82.1503 54.5104 81.9043C54.6756 82.1831 54.6136 82.5274 54.2627 82.9537Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.1128 144.771C66.1128 144.771 66.2779 144.902 66.3605 144.968L66.0921 144.886L65.9889 145.525C65.9889 145.525 66.1334 145.656 66.1954 145.755C66.1541 145.722 66.0509 145.706 65.9476 145.706L65.8857 145.919C66.8973 146.247 67.8675 147.313 68.4662 147.575C68.9616 147.968 69.3332 148.477 69.3332 148.837C69.2713 148.51 68.9823 148.116 68.5075 148.329C68.1565 149.067 66.7528 149.625 68.3217 150.526L68.1359 149.871L70.4273 151.035C69.7667 151.674 69.2713 150.444 68.5281 150.362C69.7667 151.363 67.4753 152.724 69.2713 152.986C68.301 153.216 66.6908 153.609 66.9798 154.347C67.9707 153.626 67.8262 154.691 68.9203 154.052C69.5603 154.216 68.7758 154.954 69.5397 154.872H69.1061C67.8675 156.413 70.4273 156.446 71.3563 156.872C72.1408 158.364 71.6866 159.168 72.1614 160.414C71.5008 160.562 69.7667 161.185 69.9525 161.677C70.9022 161.775 71.604 162.857 72.7807 162.808C73.0491 161.824 71.6453 162.201 71.2324 161.709C72.3266 161.07 72.4091 161.496 72.9872 160.758C72.6362 161.332 74.1639 162.923 73.1523 163.644L72.9459 163.48C72.4711 164.464 69.6635 165.038 71.7073 166.235L72.5743 166.825C72.4504 166.809 72.3266 166.825 72.2027 166.825C72.3266 167.99 70.9641 167.858 72.2646 168.957C72.1614 168.875 72.0582 168.957 71.955 168.859C71.4802 169.662 72.9252 170.203 73.2968 170.712C72.4091 171.171 72.3266 170.761 71.604 170.646C71.4802 171.958 73.4207 173.106 74.7625 173.745L74.3497 174.63C73.8748 174.188 72.7188 173.729 72.1614 173.942C72.4504 174.368 72.884 174.221 72.822 174.876C72.1821 174.844 71.5627 174.647 70.7163 174.45C69.9319 175.877 72.9665 174.483 71.2324 175.614C71.2944 176.024 72.244 176.155 72.9872 176.123L72.1408 176.975C73.111 176.942 73.3175 177.861 73.5858 178.451C74.0193 178.484 74.5148 177.861 74.1019 177.664C74.8657 177.631 75.3199 178.238 75.3818 178.648C73.4413 179.009 76.0837 181.353 73.6684 181.091C74.618 182.895 75.1754 185.502 76.125 186.682C75.6089 187.125 75.6915 187.961 74.6799 187.535C74.8657 189.027 76.9714 189.7 76.5379 191.241C76.2902 191.372 76.4553 190.552 75.7947 190.651C76.6824 191.602 75.0928 192.487 75.7328 193.979C75.6915 193.717 75.258 193.668 75.0515 193.635C75.3818 193.602 75.7741 194.242 76.1044 194.619C75.9392 194.848 75.8566 194.324 75.6089 194.471C75.1754 195.963 75.6709 197.242 76.2695 198.538C76.8063 199.833 77.4669 201.145 77.4049 202.637C77.4462 201.784 76.1044 201.456 75.5676 201.44L75.5263 202.26C76.1869 202.588 76.187 203.211 76.6618 203.736C76.414 203.801 76.125 204.047 75.8154 203.768C74.3703 205.343 78.1068 206.392 77.2811 208.393L74.7419 205.851L73.7716 206.408L72.6156 205.326C71.8311 205.917 73.5033 206.523 72.4917 206.556C72.2233 206.408 72.3266 206.097 71.7898 206.064C71.3563 206.638 72.0995 206.72 72.2853 207.179C70.2828 205.9 70.5099 203.654 69.9938 202.408C69.8287 202.211 70.4893 202.571 70.6957 202.621C70.6338 202.112 71.2737 201.817 70.9228 201.194C70.0557 200.801 70.2828 201.489 70.1796 201.801C69.4158 201.752 69.4777 201.588 69.3539 201.243C70.3654 201.178 69.7255 199.358 70.9641 198.899C70.6131 197.046 68.3836 199.226 68.7552 197.423L69.8906 196.865C68.941 195.832 68.1565 194.52 68.301 193.34L68.363 193.586C68.8584 193.733 69.1474 193.438 69.3951 193.307C69.808 192.389 68.363 191.651 69.4571 191.061C68.1772 190.11 67.1037 188.47 66.3192 187.371C67.8056 186.945 67.7849 188.781 68.7758 189.208L68.652 188.142C68.7552 188.798 69.3539 189.011 70.2622 189.355C70.448 188.404 69.0648 188.175 68.59 187.322C69.0029 187.355 69.2506 187.224 69.2094 186.814L68.1978 186.781C68.1978 186.781 68.3423 186.715 68.4043 186.584L67.5991 185.076C67.2069 185.436 66.3399 185.535 66.3605 185.928C66.9385 185.731 67.083 186.076 67.1243 186.469C66.4224 186.174 66.6082 186.912 66.0715 186.928C66.0096 186.125 65.7618 185.141 65.4109 184.649L66.3192 184.403C66.4431 183.616 65.8031 182.846 65.9889 182.304L66.505 182.419C66.6495 181.468 65.927 180.615 66.6908 179.697C65.4935 178.976 64.42 178.041 63.202 177.5C61.9634 177.287 64.2548 174.926 62.3969 174.204C62.5208 174.122 63.4085 174.729 63.9246 174.991C63.9865 174.352 62.4176 174.04 63.6149 173.696C63.4704 175.139 64.5851 173.499 65.0806 174.073C64.9154 173.417 64.5645 172.761 64.0484 172.499C64.2755 173.548 62.2524 172.351 63.0162 173.335C61.7982 172.646 61.1583 171.597 61.3441 170.564C61.8808 170.498 62.1079 170.351 62.2524 169.957L61.406 169.777C61.4473 169.301 62.5208 170.531 62.6034 169.58C61.0551 168.809 62.7272 166.612 60.1674 166.547C60.9725 165.678 61.4679 167.776 62.3969 166.514C63.4291 167.022 62.6034 168.055 63.8833 168.088C63.3878 167.514 64.8742 167.711 64.7916 167.301L63.8833 166.711V166.875C62.4588 165.874 62.5621 163.939 62.0047 162.464C60.477 161.381 58.4746 160.791 58.2269 159.25C59.0526 159.578 58.6191 157.872 60.1674 158.627C60.6216 157.823 59.6926 157.249 59.1558 157.315C59.1352 157.971 59.032 157.561 58.9081 158.118C58.1649 157.872 57.9998 157.053 58.3301 156.659C58.3301 156.823 58.4333 156.741 58.6397 156.741C58.8875 155.938 57.8966 156.495 57.5043 156.003C58.3714 155.692 57.4424 154.773 57.7934 154.216L56.3276 153.707C57.2773 153.953 56.4722 152.97 57.2153 152.74C56.4928 152.33 55.3161 152.068 55.3574 151.248C55.8735 151.494 55.8115 150.428 56.6786 150.28C57.1534 148.805 53.7678 148.46 54.6761 146.985C54.8826 146.985 55.5225 147.149 55.6464 146.755C55.3367 146.509 55.2955 145.968 55.1303 145.673C55.0477 145.525 54.9239 145.443 54.6968 145.476C53.7265 145.083 52.7769 144.935 51.8067 144C50.8364 144.23 51.4557 145.066 51.8686 145.394L52.9214 145.574C51.5176 146.132 53.4169 146.493 52.9834 146.804C51.0841 146.443 51.0428 144.558 49.701 143.623C48.5037 144.509 48.6482 146.001 49.1436 147.247L49.5978 146.591L49.7836 147.247L50.6712 146.443C50.6506 147.099 51.0428 147.608 51.1461 148.182C50.9603 147.526 52.2608 147.034 52.137 147.46C51.3525 148.362 52.9627 148.132 53.0453 148.706C53.0453 148.378 52.9627 147.968 53.6027 148.149C52.6943 149.444 53.5407 149.625 52.5498 150.838C54.16 150.444 53.0453 152.068 54.4284 152.002V151.51L55.6877 152.347C54.5729 153.478 54.1188 151.756 53.5201 153.298C53.6852 154.593 55.3987 154.281 55.7909 155.265C54.7381 155.085 53.6852 154.429 53.5201 153.609L53.1691 154.183C52.5292 154.019 52.364 152.871 52.2815 152.297C53.644 153.052 52.5085 151.805 53.2724 151.248C52.3021 151.33 52.6118 151.904 51.6621 151.313C51.8479 151.969 51.9512 152.051 51.8067 152.953C51.7654 151.068 48.1114 151.855 48.5037 150.133C49.123 150.789 49.8042 149.657 50.2377 149.493C50.0313 149.165 49.6391 148.51 49.3294 148.247L48.0288 148.723C47.2031 147.886 50.0107 147.099 48.3385 146.247C47.4921 146.247 48.2972 147.231 48.0908 147.067C46.8522 145.722 48.9165 144.853 49.6184 143.377C49.1849 143.377 48.3385 143.525 47.4921 143.164C48.3385 143.164 48.6894 142.77 49.412 143.197C49.6391 142.705 48.9165 142.279 48.5037 141.934C48.2559 142.934 47.2444 141.737 46.7076 141.655C46.7283 141.164 47.554 141.672 47.8637 141.934C47.9876 141.524 49.0817 140.885 47.8018 140.852C48.6688 140.704 50.341 141.573 50.7332 142.246V141.754C51.2699 142.016 51.1667 142.098 51.1461 142.59C51.7034 142.016 52.4466 141.951 53.0866 141.967C52.9834 142.049 52.8801 141.967 52.7563 142.049C52.6324 142.459 52.9421 142.721 53.3756 142.557C54.6142 142.721 53.9743 141.918 54.4904 141.573L54.1188 141.032L49.9074 139.639C49.2675 138.868 50.0726 138.343 50.4855 137.622L49.4533 137.589C49.3913 136.835 49.5358 136.08 50.8983 136.376C50.568 136.458 50.6712 136.54 50.6712 136.703C50.8158 136.703 50.919 136.72 51.0015 136.769H51.1873C50.6712 136.031 50.3616 135.572 50.2997 135.539C52.0544 136.671 52.1163 135.343 53.9536 135.31L53.0659 134.047C52.6943 134.949 52.1989 134.178 51.8892 133.932C52.8595 133.703 51.6209 132.85 51.6621 132.342H51.8686C52.1163 131.866 51.8686 131.096 51.4557 130.587C51.1254 130.653 49.3501 130.177 48.2972 129.964C48.1321 130.964 47.616 130.456 46.9967 130.62C47.0379 130.522 46.9967 130.341 46.8728 130.325C46.5631 130.227 46.5425 130.554 46.2122 130.636C46.8934 131.588 47.2444 132.621 48.7307 132.834C49.2881 132.44 48.0082 132.391 48.3591 131.981C49.412 132.358 49.3501 133.03 49.5152 133.867L48.7514 134.26L49.3913 135.031C48.8752 134.736 48.0495 135.08 47.6779 134.227C46.9141 134.457 48.0701 135.08 47.9256 135.654L49.1023 135.769C48.4624 135.752 48.6069 136.933 47.5747 136.228L46.3567 135.015L45.6961 135.49L45.2213 134.375L45.8613 134.555C44.6846 132.834 47.9463 133.703 46.2328 132.047C44.7671 131.653 44.4781 131.046 44.5607 129.866C45.0355 130.653 45.531 129.817 46.3773 130.03C46.7696 129.128 45.5929 128.98 44.9736 128.62C45.6342 128.308 46.1916 128.095 46.2328 128.849C47.7398 128.751 45.7787 127.898 47.2857 127.636C46.7489 125.193 41.9389 126.275 43.3014 123.143L43.9414 123.176C42.8266 121.438 43.3634 120.29 42.5789 118.634L43.9207 117.125C44.2097 117.404 45.531 118.076 46.2328 117.617C44.7465 118.437 45.4277 119.06 44.7052 119.863C45.1387 119.88 45.3864 119.568 45.6135 119.421C45.6755 119.847 44.9942 120.142 45.3864 120.667C45.7167 120.601 45.9851 119.945 46.2741 120.388L45.4277 121.257C46.0883 122.208 47.8637 121.487 47.6366 122.717C46.7283 122.602 45.3658 122.307 45.0768 121.864C44.9942 122.438 44.4162 121.192 43.9827 121.766C45.4277 122.405 44.4575 122.897 45.469 123.848C45.2626 123.75 45.0149 123.75 44.8704 123.504L44.6226 125.094C45.3039 124.619 45.6961 126.242 46.7902 125.963C46.9347 124.291 46.3361 124.848 46.6251 122.946C46.976 123.438 48.2559 123.963 49.3707 124.143C49.3294 124.16 49.3088 124.192 49.2881 124.258C50.4648 124.405 50.6919 124.078 52.6324 123.848C51.0841 123.192 52.1163 122.503 51.1461 121.618C50.0519 121.552 49.8868 122.356 50.2584 122.799L49.3913 122.011L49.9074 122.126L49.8661 119.896C49.99 120.306 50.6506 120.372 51.1461 120.536C51.1461 120.241 51.3731 119.929 51.6209 119.601C50.6093 119.781 49.8868 119.831 49.8661 119.552C49.8455 118.109 50.63 117.223 51.7034 116.584C51.6622 116.535 51.6415 116.469 51.6002 116.42C50.5887 116.764 49.5565 115.633 48.4004 115.305C49.4739 115.207 48.9165 114.502 49.412 114.042C48.1321 113.96 46.4806 114.42 45.5516 115.026C46.8522 115.862 46.7902 115.436 48.4624 115.715L49.8042 117.125L48.7514 116.896C48.4417 117.715 49.8661 118.306 48.5862 118.388C47.6573 118.076 48.0701 117.355 47.1412 117.043L46.7489 117.601C45.3245 116.846 47.8843 117.01 46.8109 116.026C45.7787 116.535 46.7077 115.944 45.9025 115.551C45.2007 116.01 46.5425 117.437 44.6226 117.305C43.7143 116.83 46.4806 115.174 44.4988 114.616H44.7052C44.7465 113.501 43.6317 113.223 42.9092 112.878C43.4459 112.353 42.4963 111.78 42.3312 111.271L42.8679 111.222L42.517 110.517C43.5491 110.763 42.6202 111.37 42.8679 111.96L43.8588 111.78C42.7853 112.616 44.6639 112.911 45.6135 113.37C44.6226 112.665 45.5103 111.091 43.5079 111.091L44.4368 110.501L44.024 110.304C44.7258 109.861 45.9851 110.123 46.3154 110.812C46.0883 110.96 45.9645 111.042 45.758 111.025C46.2535 111.32 47.0792 111.534 46.976 112.37L46.3773 111.993C46.4599 112.993 46.9967 113.862 48.0495 114.108C48.2146 112.632 48.1114 111.206 47.8431 109.861C45.5103 109.681 44.1685 109.336 42.0215 109.336C41.4848 108.467 41.0306 107.238 41.6706 106.385L42.1041 106.418C42.2692 106.008 42.1041 105.663 41.8151 105.385C42.3105 104.925 42.9711 105.565 43.2395 105.253L42.3312 104.007C43.3014 104.007 43.4666 105.106 43.6111 105.614C43.5079 105.516 43.3221 105.335 43.2188 105.417C42.9092 106.057 44.7052 107.041 43.3634 107.434C43.6524 107.713 42.2486 106.926 42.3312 107.943C41.9183 108.664 43.1776 108.762 43.6111 108.795C44.1478 108.746 44.2097 107.68 44.9116 107.975C44.7671 107.467 44.0446 107.319 44.4575 106.598C44.602 107.106 45.7993 107.713 44.9942 108.057C46.1503 108.976 48.6688 108.582 48.7514 108.09C47.9669 108.287 47.4921 106.336 46.6457 107.762C45.5309 107.254 45.3658 106.155 44.602 105.434H44.8084L44.4162 104.499C44.7258 104.614 45.0149 104.893 45.5516 104.843L43.9001 103.614C44.9736 104.286 44.5194 103.089 44.891 102.695C44.0446 102.63 43.3634 102.154 42.9505 102.695C42.4344 103.319 43.4459 102.991 43.5698 103.499L42.166 102.876L42.2899 102.794L41.1545 102.449C41.0925 101.433 43.6937 102.679 42.4757 101.482L41.0306 101.777C41.0306 100.269 42.4344 98.2354 41.6293 97.2351C42.4963 97.4647 43.8382 97.4811 44.5813 97.022C44.3955 97.4975 44.54 98.3994 44.7671 99.0225C44.5194 99.17 42.9298 98.3502 43.1569 97.6287C40.8035 98.1698 44.8291 99.2848 42.4137 99.5636C41.8151 101.433 44.9323 100.711 43.7143 102.351C44.8084 102.286 44.2923 102.745 45.2626 102.728C46.976 102.122 44.9323 100.711 45.4071 99.662C45.4897 99.7439 45.6961 99.9243 45.9025 99.9571C46.1296 99.2192 45.8406 98.9569 45.3864 98.4977L45.2626 98.5633C44.1065 97.7926 46.0058 97.973 46.4186 97.4155C46.2328 97.2351 46.4599 96.5137 45.6755 96.6776L46.5838 95.6774L45.3864 95.8086C45.2419 95.3003 46.0264 95.1199 45.2419 94.71L44.1478 94.7755L43.9414 96.0873C43.5079 95.4642 42.8885 95.9889 42.5582 95.2839C43.8382 95.9889 43.095 94.6772 44.0859 94.5132L43.4046 94.0377L43.7143 94.1525C44.2098 93.6933 43.2601 93.6933 43.3427 93.2014C42.806 93.8081 42.0834 94.2508 42.9505 94.9067C42.2692 94.4312 41.4641 93.431 41.4022 93.1686C40.8861 92.6439 41.6706 92.2012 41.7325 91.6765C42.2899 92.6439 44.9736 91.0861 44.4368 93.1358C44.2304 93.1194 44.251 92.9555 44.3749 92.8735C43.0124 93.2506 44.602 94.0541 45.18 94.4476C45.9645 94.2836 46.2122 94.71 46.5631 93.9065C46.0883 94.2016 44.7052 93.3982 45.2832 92.6275H46.9967L47.0792 91.5617L47.1618 91.6601C48.2146 91.1845 46.8109 90.545 47.3889 89.7744C46.7076 89.2988 46.976 87.2492 45.2832 88.233C46.2741 87.5115 44.8497 87.036 44.5401 86.3309L43.9414 87.2656C42.5995 86.2981 43.4253 86.5441 41.4022 85.839C41.8564 85.7242 42.228 85.5111 42.7234 85.6422C42.6615 84.2157 42.9298 82.1824 41.4435 81.4445C41.4228 80.4443 43.4046 80.1655 42.4757 78.821C42.2073 78.5422 40.9067 79.1489 41.299 78.1979C41.4228 78.1323 42.6408 79.0013 42.4137 77.9847C41.0306 77.3288 42.9711 76.2138 41.7325 75.3447C42.166 74.82 41.8977 73.951 42.9505 74.0657C42.7853 74.8692 43.1156 75.9842 43.6317 76.1318C42.9918 76.0662 43.0743 76.7385 42.5376 76.181C41.877 77.4272 43.2601 76.9189 42.8266 78.0339C43.2601 78.0831 43.9207 77.4108 43.5285 77.1976C44.9529 77.0992 44.4162 79.2801 46.0264 78.2143C46.0264 77.0501 43.0537 76.9025 44.4368 75.8039C45.3452 76.1482 44.6639 76.8205 46.2122 77.2304L46.7076 76.3778L45.6342 75.853H45.8406C46.9967 74.3445 44.251 74.6232 43.4046 73.377C42.4963 74.1805 40.9274 73.3443 40.37 73.951C40.1016 73.0983 40.2461 72.4424 41.6499 72.3604C42.9505 73.9182 43.1569 72.3604 44.7258 73.7706C45.2213 73.4918 46.8315 74.0001 46.9141 73.0983C45.7993 72.1473 45.758 73.4754 45.2007 72.4916C45.3245 72.426 45.4484 72.3604 45.6548 72.3768C44.8703 71.9669 45.8613 71.8193 44.9942 71.311L45.2832 71.4258C46.0883 70.6879 44.2304 70.7371 45.1181 70.0812C44.0859 70.3763 44.2098 69.7368 43.5285 69.4089C43.1776 70.032 41.7119 70.4419 41.8976 71.6225C42.744 71.7209 43.1982 71.6061 43.6524 72.0653L43.4872 71.2946C43.6317 71.4586 43.8588 71.5733 44.0446 71.7045L43.673 72.4752C42.9918 71.5733 42.1454 72.0489 41.237 71.7045C41.5261 70.8191 40.948 71.0158 41.1545 70.4583C42.3725 70.4419 43.095 68.671 43.7762 67.638C43.7349 67.802 43.7762 67.9823 43.7762 68.0971C44.6226 68.7694 44.7465 67.5396 45.0768 67.4904L44.4162 66.9985C44.4988 67.0969 44.8084 67.2117 44.9529 66.9821C44.6639 66.2934 43.4459 66.3918 43.1569 65.7031C43.8175 65.6047 44.9116 66.1458 45.2213 65.7031C45.7993 65.5227 47.3063 64.9488 46.6251 64.047C46.3567 63.9978 46.1916 63.7518 46.0677 63.4895C46.109 63.5223 46.1296 63.5715 46.1916 63.5879L46.8728 62.9156C48.0701 63.3747 46.4186 64.0142 47.6366 64.4897H48.7307C48.772 64.8832 49.2881 65.4243 49.8868 65.6539C50.0107 65.0144 49.7216 64.8996 49.4326 64.1946C50.1139 64.0634 50.6713 64.5225 50.7538 64.5881L50.1139 64.5225C49.2881 65.4244 51.2699 65.7195 51.1667 66.7853C51.1461 66.9493 51.0428 66.8509 50.8364 66.8345C51.9718 67.6216 50.5887 68.5398 52.075 69.2941L51.4764 69.0646C51.9924 69.6057 53.1691 70.6387 54.3046 71.6717H54.7381C54.9858 71.5242 55.0064 71.9341 54.8619 72.1636C55.44 72.6884 55.9561 73.1803 56.3689 73.5902C56.6167 73.4426 56.8231 73.2459 56.8644 73.0327C56.3483 72.8851 56.6579 71.8521 55.5432 72.0653C56.1831 71.557 55.1303 70.8683 55.5432 70.5075C54.8826 71.1798 54.4284 70.1304 53.7885 70.0648C54.4904 69.8188 53.644 69.1465 54.6142 69.1629C54.8619 69.0318 53.9949 69.5073 54.6142 69.7369C55.5638 70.3436 55.2955 68.4907 56.2244 69.2613C55.44 68.2611 55.6258 66.8837 54.6349 65.8671L54.3046 66.4902C54.4078 66.0147 54.0775 64.8996 54.5523 64.7849C54.6968 65.1292 54.7174 65.5391 54.9652 65.9819C56.0593 65.9491 54.8619 64.8996 55.5225 64.8177L53.6027 63.6042V64.1782C52.9008 63.8502 53.6027 62.604 53.6646 61.7186C55.1922 62.1449 53.8297 63.0631 54.511 63.965C55.1303 64.6209 55.9148 63.4567 56.3276 64.0798C56.6579 63.8994 56.5754 63.4731 56.1831 63.2927L56.4309 63.0303C57.8346 63.5223 57.6488 64.8341 58.8875 65.6211C58.743 65.5555 58.5778 65.4899 58.4127 65.4899C57.9585 66.1786 58.0204 66.8509 58.454 67.474C58.8462 67.1133 58.5572 66.9985 58.3714 66.8017C58.7017 66.7525 58.9081 67.3592 59.3003 67.556C59.6306 66.9329 60.0848 67.392 60.2706 67.0149C60.6215 67.392 60.5596 67.7036 60.4564 68.1791C59.9609 68.4579 59.7339 68.0151 59.0733 68.1135C59.5274 68.5726 57.9379 68.9006 58.7843 69.5565C58.97 68.589 60.2706 69.7205 60.7454 70.0156L60.7867 69.8516C61.5918 70.0976 61.6537 70.3599 60.9518 70.6059C60.6009 70.2288 60.7867 69.8516 60.0022 69.9992C60.0642 70.2616 60.1261 70.5075 60.3945 70.7863L59.7958 70.5567L60.0848 71.8193C60.8073 71.9833 61.8395 72.262 62.8924 72.3768C62.2731 72.7212 62.8511 73.1147 63.1194 73.3934L62.8098 73.2787C62.273 73.869 62.8924 75.0988 63.5117 75.1644C62.9956 75.6071 59.2797 72.5736 60.1261 75.3775C60.2293 76.4597 62.1698 75.9186 62.9337 76.4925C62.9337 76.4925 62.7272 76.4761 62.6034 76.5417C62.5001 77.0172 63.2639 77.0173 63.6149 77.3944C63.8833 77.0992 63.8626 76.6893 63.553 76.5745C64.3994 76.6565 63.5736 77.5584 64.2755 77.8699C62.9543 77.4764 63.8833 78.8046 63.1814 78.493C62.4588 79.4769 63.5736 80.4115 64.5645 80.8378C63.0162 81.5757 64.8948 81.9365 64.2549 83.0187C64.2755 82.8547 64.0071 82.5923 64.1723 82.3628C63.0988 81.8381 63.7594 83.4614 62.7272 82.6251C62.913 82.8055 63.264 82.6087 63.0782 82.412C62.9337 82.0676 62.4382 81.7725 61.984 81.8873L61.1789 82.7891L60.9106 82.5103L59.7958 83.8713C60.0022 83.8877 60.25 83.7565 60.3738 83.691C59.9816 85.1995 60.8693 86.8556 60.8486 88.151C63.7594 88.1838 62.4588 91.2501 64.3374 92.152C63.491 91.9388 62.0047 91.8896 61.4267 92.1192C61.2821 91.8896 60.0642 91.5125 60.25 90.955C60.7041 90.8402 61.1376 90.1515 61.7157 90.5286C61.2202 89.0857 60.477 90.8238 59.3623 90.4631C59.8371 92.07 61.6331 92.8899 62.4382 93.8573L62.1079 93.9065L62.8511 94.628C62.9543 93.9885 64.5852 93.8901 64.131 94.7428L64.0484 94.6444C63.4291 95.1527 64.3374 96.0545 64.3374 96.7924L65.349 97.2024C65.349 97.9238 63.5942 98.1042 62.5827 98.4322C62.6033 99.58 64.131 100.105 65.1012 100.826C64.3787 101.252 64.4406 102.958 63.3878 102.154C64.2136 103.122 68.2597 102.531 66.2573 104.483L65.4522 104.106C65.8444 105.762 67.6611 107.992 67.0211 108.828C64.2755 108.467 64.6677 111.173 62.1285 111.747C62.7066 111.599 62.9956 112.206 63.3465 112.271C63.0575 112.435 62.8098 112.698 63.3878 112.895C63.8007 112.189 66.1541 113.075 64.8948 111.944C66.7734 112.386 68.301 113.042 68.4455 114.42L67.3721 114.518L67.5166 113.403C66.7321 113.6 66.7115 113.026 66.2986 112.845C66.0302 114.928 63.7181 112.845 64.2136 114.911C64.9361 115.043 64.6264 114.944 64.998 115.453C64.9155 115.207 64.1723 115.239 64.2342 115.649L65.1632 115.944C63.491 116.863 63.78 114.879 62.624 115.633C61.6331 114.928 60.9518 113.583 59.61 113.977C59.3416 115.354 62.3969 114.879 62.0047 116.322L61.4473 116.535C61.9221 116.978 62.8924 116.945 63.5117 117.141C63.1814 117.207 62.9543 117.355 62.913 117.666C64.4406 118.322 64.8122 118.83 66.4637 119.388C64.9774 117.535 67.1863 117.568 65.8238 115.633C66.3192 115.912 66.9179 117.305 68.4249 117.223L67.3514 117.322C68.0327 117.929 68.7139 118.519 68.5075 119.388L67.8056 118.945C68.7552 119.962 66.505 120.978 68.4662 121.634C68.5075 121.323 68.4249 121.077 68.2185 120.896C68.8171 121.405 68.8378 122.126 68.7758 122.766L70.7989 123.815C70.2622 123.864 70.386 124.684 69.4571 124.405C68.8171 125.422 70.5099 125.652 70.8815 126.144C69.9525 127.226 70.2003 125.406 68.6933 125.504C68.4662 126.865 69.2094 128.177 70.3448 128.767C70.5099 128.472 70.6544 128.324 70.9228 128.292C70.5925 128.374 70.7989 128.882 70.8402 129.177L71.5834 129.275C71.2118 129.817 70.7989 129.817 70.1796 129.472C70.1383 129.948 71.604 130.309 70.7163 130.932C69.6842 130.259 70.2209 129.161 69.6016 128.816C70.6338 130.358 67.8262 130.768 69.2094 132.752C68.8791 132.834 68.1565 132.571 68.2391 132.965C68.7139 133.867 69.7254 132.998 70.5718 133.178C69.9732 132.522 70.3241 132.129 71.1086 131.588L71.7279 131.702C71.4389 131.768 71.5215 132.227 71.2737 132.407L72.4504 132.358C71.1705 132.489 70.3654 133.358 70.9641 133.85C71.7485 133.145 71.7485 133.309 73.1523 132.932C74.7006 133.522 72.0169 134.031 73.6684 134.703C73.2349 134.703 72.7601 133.965 72.5949 134.687C72.6775 135.244 73.6478 135.031 74.0606 135.359C72.9046 135.097 72.1408 135.326 70.7783 135.064C70.4067 134.096 70.6957 134.67 70.0145 133.768L69.3126 134.719C68.941 133.9 67.9501 134.293 67.5372 134.277C66.794 135.884 69.3952 135.113 69.3539 136.097C70.2003 136.441 69.2919 135.211 70.2209 135.785C70.2828 136.671 70.9641 135.884 71.666 136.785L71.1499 136.703C70.5925 137.097 71.4389 137.277 71.6247 137.605C72.0376 137.933 75.196 136.605 75.6502 138.146C75.3405 138.114 75.1341 138.114 75.0103 138.146L65.7412 137.999C66.1541 139.589 66.3605 141.442 66.2367 143.377C64.6058 144.082 64.4819 142.295 63.7181 142.525L63.8626 141.623C64.6058 141.557 64.5439 143.344 65.638 142.377C64.7297 140.983 65.4109 140.18 63.553 138.999C61.9221 139.704 64.3168 140.803 63.202 141.934C63.202 141.524 62.9543 141.229 62.624 140.967C62.624 141.869 62.6033 142.82 62.5827 143.836L63.0575 143.984C63.0782 143.295 63.1194 142.82 63.1607 142.738C63.2227 143.64 64.3787 144.213 65.6586 144.082V143.918L66.1334 144.164L66.0509 144.82L66.1128 144.771ZM75.547 202.26C75.4231 202.211 75.2786 202.162 75.0928 202.129C75.2786 202.162 75.4025 202.129 75.547 202.26ZM57.7521 128.226C57.814 129.423 57.7314 130.669 57.814 131.817C59.899 129.407 61.5092 127.734 62.1905 131.128L62.4176 131.325C62.624 130.833 62.5001 130.079 62.1698 129.374C61.1583 128.915 57.4424 127.472 57.1534 127.537C56.4928 127.833 57.3185 128.046 57.1947 128.439L57.7521 128.21V128.226ZM61.8189 126.832C61.9634 126.127 61.4267 126.357 60.9106 126.324L61.2409 126.996C61.3441 126.898 61.5092 126.832 61.8189 126.832ZM60.4151 126.422C60.4151 126.422 60.4151 126.57 60.3532 126.603L60.4151 126.422ZM62.7066 139.425C62.7066 139.425 62.6859 139.393 62.6653 139.36C62.6653 139.524 62.6653 139.688 62.6653 139.852C62.7272 139.77 62.7685 139.639 62.7066 139.425ZM63.6149 137.884H62.6446C62.6446 138.015 62.6446 138.179 62.6446 138.327C63.0575 138.212 63.4085 138.097 63.5943 137.884H63.6149ZM65.6173 133.129C64.4406 133.014 64.1929 132.112 62.8924 132.243C62.5414 132.243 62.4795 132.44 62.4176 132.67C62.4382 132.916 62.4588 133.178 62.5001 133.457C62.6859 133.44 62.8717 133.457 63.0575 133.539C63.1607 133.244 63.4291 133.03 64.2342 133.014C62.6859 133.949 65.5967 133.457 65.3283 134.26C66.2779 134.359 66.0302 133.309 65.6173 133.129ZM53.5201 75.7055C53.6233 75.6727 53.9123 75.5907 54.2633 75.4595L54.9652 75.9514C54.7794 76.9189 52.9834 77.8043 54.6761 78.5586C54.3252 78.9849 53.4788 79.2473 52.8182 79.5097C52.8595 79.3129 52.9008 79.1161 52.9834 78.9685C50.4029 76.7057 55.3367 77.5584 53.5201 75.7219V75.7055ZM52.364 86.8064C52.2815 86.7081 52.0544 86.6917 52.0544 86.6917C54.6555 88.6593 55.5638 90.3483 55.6051 91.4961C56.5134 91.2009 57.1328 90.1187 57.4631 89.6104L58.5778 89.9547L57.7727 90.2827L58.8255 90.955C59.5274 90.6926 59.3003 90.1023 59.8164 89.6596C59.61 89.6432 58.2062 88.4462 57.5043 88.1182L56.885 89.2005C57.1534 88.9053 56.7405 87.5443 56.4102 87.0196C55.8735 87.0524 55.151 88.0526 56.3276 88.0854C55.5432 88.2494 55.4193 87.1672 54.6349 87.9215C53.7059 87.1672 54.2633 85.8226 54.5936 85.1995L55.9148 85.0027C56.3689 84.3141 54.2426 84.6748 54.9445 83.8385C55.3161 84.7732 56.3896 83.5762 56.5754 84.3305C57.0502 84.0517 57.9998 84.2321 57.814 83.4778C55.9767 82.9695 58.8462 82.5923 57.2153 82.1004C57.7314 81.6577 58.3301 82.4612 58.4746 81.6577C57.4424 80.8214 56.7818 80.9034 55.4813 80.9362C55.2129 81.8053 57.2566 81.7725 57.0089 82.494L54.6555 81.2642C54.3665 81.5429 54.3458 81.7233 54.4697 81.8873C54.3046 81.6249 53.9536 81.4117 53.4788 81.2314C53.2104 81.133 52.9834 81.0346 52.7976 80.9526C52.8595 81.7397 52.9008 82.4284 52.364 82.5923L51.7241 82.5267C51.1873 82.8383 51.6828 83.2646 52.1576 83.445C52.3021 84.1501 53.2517 84.7896 52.4673 84.9863L51.8686 84.7568C52.137 85.6094 52.2402 85.6914 52.364 86.79V86.8064ZM54.8619 115.223C57.0708 114.452 58.97 113.665 58.1856 111.288L58.3714 111.468C59.61 110.107 56.1006 109.271 57.4631 107.631C58.4333 108.271 58.3507 108.238 60.4564 108.844L59.6926 108.139C60.9725 108.238 60.2087 107.533 60.188 106.959L61.7363 107.319C61.3647 107.697 61.3441 108.598 61.6744 108.533C61.4886 108.353 59.9816 109.877 60.539 110.566C61.5299 110.386 60.8693 108.877 62.624 109.402C61.8395 108.861 62.8304 108.68 62.3763 108.09C63.1607 108.631 63.7594 108.107 64.5645 108.484L64.0691 107.483C64.3994 107.418 65.06 108.926 66.1541 107.959C65.5554 107.598 66.0509 106.418 64.9567 106.5L65.287 106.45C65.4109 105.647 63.6975 106.254 64.1929 105.237C63.6562 105.27 63.3052 105.499 63.4497 105.827C63.7388 106.09 64.4819 106.073 64.7297 106.647C63.9246 106.992 64.7297 105.909 63.3672 106.467C62.6859 106.746 64.2342 107.992 62.5414 107.713L62.6446 106.91C61.5505 106.992 61.5299 106.418 60.6628 106.516C60.188 106.073 61.3441 105.499 60.3325 105.106C59.61 104.975 58.3507 105.45 58.8049 104.581C60.3119 103.794 59.7339 101.958 59.4036 101.285L58.6191 100.728C57.9585 100.843 58.8668 101.892 57.9585 101.58L57.5663 100.646L57.9998 100.679C58.0411 100.351 57.5663 100.072 57.2773 99.7931C58.103 100.023 57.8759 100.744 58.9907 100.515C59.1558 100.039 59.5687 99.9407 59.2797 99.5472C59.3623 99.6292 59.4861 99.6947 59.6513 99.6783C60.0229 98.7273 58.2682 98.9077 57.8759 98.7109C56.2864 97.9238 56.6373 99.7439 55.4606 99.7275L54.4904 97.104C54.8826 97.3007 55.2748 97.4975 55.729 97.3827C56.1625 96.6776 56.596 97.3007 56.4309 96.3825C54.9032 96.5793 55.3161 95.3003 54.3458 94.71C54.9445 94.3492 55.0684 94.2836 55.1716 94.9559C56.1625 94.8083 55.667 93.9393 55.729 93.6113C55.4606 93.4474 55.2748 93.1358 55.0271 92.9554C54.5523 93.267 53.9123 93.2014 53.4169 92.6439H53.2104C53.0453 93.5949 52.137 95.1527 53.2517 95.6774L52.7356 95.5462C52.0131 96.7104 54.8413 97.7926 53.004 98.4485C52.2402 98.4485 52.8595 98.6781 51.786 98.7601L52.7356 99.498L52.2195 99.3668L52.653 100.728H52.4466C53.5201 101.285 54.3871 101.728 55.089 102.072C55.5638 102.04 55.7083 101.974 56.0799 102.171C56.3483 102.368 56.4102 102.531 56.3689 102.679C56.2864 103.023 55.6258 103.319 55.4193 103.745L55.1097 102.482C54.3046 102.449 53.4788 102.63 53.004 103.302C52.9421 103.04 52.3021 102.991 52.2402 103.319C52.4466 103.319 52.8801 104.106 53.4582 103.745C53.933 104.925 52.0957 107.106 53.9123 108.812C52.7976 107.565 53.004 109.976 52.4466 108.533C51.3319 109.681 53.8504 109.304 53.8091 110.369C53.3549 110.501 53.7885 109.795 52.8388 109.648C52.6118 111.452 55.3574 112.386 55.2748 114.108L54.2839 114.288C54.4697 114.6 54.6761 114.928 54.8826 115.289L54.8619 115.223ZM56.6786 118.404C56.8437 118.716 57.0295 119.027 57.1947 119.355V119.257L58.1856 120.126C58.4746 119.486 59.4861 118.962 60.1467 119.732C59.7132 119.716 59.2591 120.011 58.97 119.749C58.4746 120.372 58.1237 121.667 59.5687 121.175C57.9585 120.273 61.4473 120.7 60.2293 119.978C61.2821 120.306 60.9312 120.814 61.4473 121.175C60.539 120.831 59.61 121.503 59.3416 122.208C59.6513 122.471 59.5687 123.274 60.0642 123.717C60.9518 123.438 61.5505 123.782 61.6331 122.979C61.9221 123.241 62.2111 123.651 61.8395 124.209C61.6331 124.028 61.4679 123.7 61.1376 123.766C60.3532 124.192 60.477 124.569 60.1467 124.815L60.3945 125.291C60.3945 125.291 60.5596 125.176 60.6835 125.127L61.6124 125.57C61.0344 124.897 61.9634 125.176 62.5001 125.111C61.4267 125.225 62.4588 125.602 62.5414 125.848L63.5736 125.16C64.1929 125.34 62.9337 126.193 64.0278 125.914C64.2549 124.701 63.9658 124.291 63.4291 123.29L62.624 123.815C61.757 122.717 63.9865 122.897 63.6768 121.602C62.7685 121.159 63.264 119.634 61.6331 119.798C62.1492 119.896 62.913 118.814 62.1079 118.437C60.539 118.109 60.0642 116.617 59.4655 117.141C59.5274 117.551 60.4358 118.011 59.5274 118.453L59.0733 117.699L58.3714 118.322C58.6191 118.011 57.8346 118.142 56.6579 118.388L56.6786 118.404Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.0195 63.9979C48.6272 63.7847 48.6479 63.2108 47.8428 63.3748C48.7098 63.3092 48.0699 64.3914 49.0195 63.9979Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.824 63.2608C49.6176 63.228 49.2873 63.2772 49.2253 63.0312L49.5144 63.7199L49.824 63.2608Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.749 62.2109C55.0677 61.883 54.6755 61.6698 54.6755 61.0959C56.8018 60.7679 55.3568 61.9977 57.3799 62.1453C57.4831 61.0795 55.5839 60.8663 55.3361 60.0137C54.4897 60.4892 54.1181 62.2601 55.749 62.2109Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.4943 62.5224L57.9576 61.9648L57.8337 62.0304L58.3705 62.5879L58.4943 62.5224Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.0718 76.2617C40.4112 76.3601 41.0925 76.6881 41.2783 76.8684C41.2989 76.7045 41.464 76.4749 41.0718 76.2617Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.1577 189.879L62.128 194.011C61.8596 192.814 61.6945 191.715 61.1577 189.879Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.0368 90.8254C46.273 89.6776 45.055 89.2185 44.6215 88.0215C43.4448 89.7268 46.9749 90.0056 45.7569 91.4485L47.0575 90.8254H47.0368Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M41.6492 90.7912C42.8878 90.496 43.2387 91.611 44.1264 91.3651C43.7342 90.578 42.8878 91.0699 42.9084 90.332L41.6492 90.7912Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.8389 83.9062L62.5408 84.2185L62.2724 83.9391L61.8389 83.9062Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.4252 96.2046L43.1362 96.0898L42.8059 96.7293L43.4252 96.2046Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.5854 84.1672L64.8124 83.626L64.1931 83.3965L64.5854 84.1672Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.3721 89.3646L57.918 88.9219C58.0005 89.0039 57.567 89.7089 58.3721 89.3646Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M43.3831 99.9406L43.9404 100.498L44.0437 100.433L43.4863 99.875L43.3831 99.9406Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.2727 92.8398C63.2017 92.4299 62.6443 93.7744 63.4288 93.0202C63.2017 92.4299 62.7269 92.7086 62.2727 92.8398Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.6372 100.385C56.6372 100.385 56.6994 100.55 56.803 100.616C56.7409 100.517 56.6787 100.451 56.6372 100.385Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.6367 100.384C56.5954 100.138 56.9463 99.8429 56.6367 99.6953C56.2444 100.056 56.4302 100.154 56.6367 100.384Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M57.2559 103.27L57.2972 103.041C57.8133 103.238 57.7307 103.123 57.2972 102.959C57.2352 102.713 56.9256 102.762 56.7191 102.746C56.5953 102.713 56.4714 102.664 56.3269 102.631C56.4714 102.696 56.5953 102.746 56.6985 102.795C56.7398 103.172 56.8224 103.402 57.2559 103.27Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.7225 115.781C42.9289 114.879 43.0734 114.633 43.8166 114.6C43.9198 113.748 42.6399 114.01 42.2683 113.551C42.5573 114.469 42.2683 114.699 42.7225 115.781Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.2684 113.551C42.2273 113.453 42.2067 113.354 42.1655 113.223C42.1655 113.354 42.2067 113.453 42.2684 113.551Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M64.9761 99.1875L66.2147 99.5984L66.0289 99.434L64.9761 99.1875Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.558 117.127C42.558 116.963 42.496 116.7 42.7438 116.553C41.9799 116.586 42.558 117.291 42.558 117.127Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.6578 112.257C57.1119 112.125 56.7404 111.601 56.8849 111.371C56.8436 111.699 55.5017 112.093 56.6578 112.257Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.088 119.275C46.088 119.111 46.5628 118.799 47.2027 118.848C46.7899 118.651 45.4274 118.487 46.088 119.275Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.7816 113.811L57.0087 113.663L56.4307 113.139L56.7816 113.811Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M67.4755 110.615C66.4846 110.058 65.4937 111.862 64.5441 110.829C63.8422 112.354 65.7827 110.583 65.8033 111.665C66.0098 111.009 67.0832 110.599 67.4548 110.615H67.4755Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.8228 111.648C65.7818 111.747 65.7818 111.846 65.8023 111.944C65.8228 111.829 65.8228 111.731 65.8228 111.648Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M61.7985 121.372C61.6952 121.29 61.5714 121.241 61.4475 121.191C61.5301 121.257 61.6333 121.323 61.7985 121.372Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M67.1234 114.943L65.6165 114.123C66.6074 114.664 66.8344 116.304 68.1556 116.042C68.3414 115.484 67.8666 114.894 67.2473 114.697L67.1234 114.927V114.943Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.1799 129.13L44.5606 128.77L44.5193 129.327C44.6844 129.147 45.7166 129.294 45.1799 129.13Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M44.5173 129.44V129.324C44.5173 129.324 44.5003 129.39 44.5173 129.44Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.807 119.618C60.8483 119.29 60.7657 119.044 60.4767 118.781C60.2496 118.929 60.167 119.749 60.807 119.618Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.761 131.915L47.3894 131.227L47.6578 131.997L47.761 131.915Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.2533 135.572L46.0469 135.72L46.6455 136.245L46.8726 136.081L46.2533 135.572Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.376 127.653C71.4173 127.177 70.158 126.981 69.9309 127.128L70.1786 128.014C71.1695 127.636 70.0961 127.768 70.2406 127.21L71.376 127.653Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.2004 159.38C53.4572 159.281 53.6224 158.248 54.2623 158.084C54.572 158.166 54.9849 158.658 55.3152 158.265L53.4159 157.757C54.221 156.543 55.8519 158.183 56.5744 158.609C56.5331 157.527 55.3358 157.379 55.0468 156.264C54.9849 156.625 54.6133 156.904 54.283 157.133C53.1063 157.363 53.354 156.232 53.065 155.494C52.6728 156.051 52.1567 155.854 51.5993 155.576C51.5374 155.526 51.4754 155.494 51.3722 155.477L51.1658 155.379V155.461C51.0626 155.461 50.8974 155.526 50.691 155.625C51.2071 156.199 50.3194 156.838 50.402 157.248C52.2392 156.543 51.2071 158.56 51.9296 158.954L52.2599 159.511L52.3218 159.724C52.1154 159.806 51.8264 159.79 51.3722 159.511C51.8264 159.724 51.9296 160.675 52.5283 160.495L53.0856 162.61C53.0856 162.61 52.9411 162.774 52.8173 162.84C52.9618 162.889 53.065 162.889 53.1476 162.872C53.932 165.922 54.6752 168.939 55.3771 171.957C55.439 171.481 55.79 171.038 55.8932 170.546C57.3383 171.055 55.9551 169.759 57.235 169.792C57.7511 170.038 57.7098 170.514 57.4828 170.842C58.1227 170.858 58.5975 170.399 59.3407 170.333C59.8568 169.071 56.8634 169.3 57.0492 168.12C57.7924 168.054 58.5356 168.316 58.2672 167.595L58.4737 167.759C57.3795 166.693 59.9394 166.595 57.7305 166.136L58.804 166.004C57.875 165.578 57.6066 164.529 57.3176 163.971H57.524C55.8932 162.495 57.0492 163.086 56.079 161.298L57.5447 161.971C57.8956 161.249 56.5125 161.315 56.5331 160.823C56.7396 160.823 57.5034 160.593 57.8131 161.003L55.3565 159.036C54.4068 158.626 54.5926 159.265 54.1591 159.429L54.2004 159.38Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.0658 156.252C55.0861 156.12 55.0658 155.972 55.0049 155.824C55.0049 155.989 55.0455 156.12 55.0658 156.252Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.5637 172.565L55.4182 171.926C55.3974 172.123 55.4182 172.336 55.5637 172.565Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M51.9103 153.362C51.4561 153.854 51.0639 153.198 50.6304 153.182L51.002 154.592C51.4148 154.526 51.9103 154.592 52.2819 154.493L51.9103 153.346V153.362Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.3401 155.134C50.6291 155.134 50.9388 155.249 51.2278 155.38L51.0213 154.609C50.7117 154.659 50.464 154.79 50.3607 155.15L50.3401 155.134Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.2434 151.463L72.3466 151.709L72.7595 152.037L72.2434 151.463Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M71.4388 155.708C71.9962 155.298 71.3768 154.807 71.1704 154.643C71.3562 155.298 71.0465 155.053 71.4388 155.708Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.9197 153.822L78.4358 154.413L78.539 154.331L77.9197 153.822Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.7246 176.73L60.8493 177.026C60.8285 176.895 60.7869 176.796 60.7246 176.73Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.6391 171.548C57.7308 173.188 57.4418 170.712 55.9761 171.384L56.6573 172.122H56.2238L56.5541 173.057C57.2147 172.762 57.2353 172.614 57.9992 172.549C57.9785 173.893 57.1941 173.073 56.4509 174.155L56.8844 175.582L56.6367 175.5C56.678 175.615 56.7812 175.664 56.905 175.697L58.2675 180.501C59.0314 181.321 59.5268 179.862 60.7448 180.403C60.559 179.37 61.0751 177.747 59.5681 177.829C59.7745 177.829 60.2081 177.861 60.3526 177.632L59.0107 177.173L58.7217 177.779C57.4005 177.32 57.3179 175.369 57.9785 174.91C58.6185 175.959 60.0016 175.238 59.4649 176.861C59.8365 176.746 60.4351 176.386 60.7035 176.713C59.9397 174.959 60.2493 173.237 58.6185 171.532L58.6391 171.548Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.3155 189.52H62.1694C62.1694 189.52 62.2946 189.553 62.3155 189.52Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.4168 188.913L60.8479 188.143L61.1163 189.487L62.1485 189.52C61.8801 189.422 61.3021 188.979 61.6737 188.766L62.3962 188.913H62.4168Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.8358 187.206C60.3519 187.862 61.5699 187.747 62.0654 187.321C62.7053 187.927 60.8061 187.747 62.1273 188.108C62.9943 188.026 62.3957 187.271 62.2099 187.107L59.8152 187.206H59.8358Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.7744 181.992L60.2905 182.139L60.3524 181.631L59.7744 181.992Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.2902 182.141L60.2283 182.633C60.5999 182.568 60.9508 182.502 61.1985 182.387L60.2902 182.125V182.141Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.0843 183.93C60.0225 184.143 59.9814 184.372 60.0019 184.651L60.0843 183.93Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.3118 183.354L60.1466 183.386L60.0847 183.927C60.1466 183.714 60.2292 183.534 60.3118 183.354Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.2281 182.632C59.4024 182.796 58.5147 182.976 58.8656 183.632L60.1455 183.37L60.2281 182.615V182.632Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.8174 158.693L78.4367 159.202L78.5399 159.12L77.9206 158.611L77.8174 158.693Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.8594 162.168C78.0452 162.283 78.231 162.382 78.3961 162.447C78.2723 162.316 78.1071 162.201 77.8594 162.168Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M84.1745 163.857C83.4933 164.677 82.8327 163.054 82.7501 164.399C81.9863 164.628 80.8509 164.169 81.0986 163.497C81.8418 163.431 81.6973 164.021 82.3785 163.529C81.4289 163.251 81.9863 163.021 80.8922 163.316C80.0458 162.742 79.22 162.792 78.3943 162.447C79.0755 163.185 78.3324 165.054 79.9839 165.891C81.4496 166.268 83.2043 165.678 85.1448 165.399C85.5783 165.251 85.4545 163.726 84.1745 163.841V163.857Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M85.8486 162.463C85.8486 162.135 85.7661 162.037 85.5596 161.873C84.9197 162.021 85.766 162.217 85.8486 162.463Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.8635 171.843C73.1525 171.876 73.6067 172.401 74.0609 172.22L73.5448 171.4C73.5448 171.614 73.2145 171.728 72.8635 171.86V171.843Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M73.3176 171.023L73.5447 171.385C73.5447 171.286 73.4828 171.171 73.3176 171.023Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.6985 171.91L72.8643 171.844C72.8643 171.844 72.7399 171.844 72.6985 171.91Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M59.8775 185.961C59.3407 185.994 59.6917 186.338 59.8775 186.502C59.8981 186.354 60.0633 186.125 59.8775 185.961Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.9758 199.555L62.5422 199.883C62.79 199.768 62.9345 199.719 62.9758 199.555Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.5908 204.918C77.6945 204.918 77.7774 204.967 77.8603 205C77.7981 204.967 77.7152 204.934 77.5908 204.918Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M77.8588 205.001C78.2923 205.263 77.5491 205.985 78.2097 206.263L78.0033 206.214L78.3749 206.722C78.3336 206.247 78.4781 205.263 77.8381 204.984L77.8588 205.001Z\",\n    fill: \"#3F3834\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.025 92.6925C163.983 93.0697 164.376 93.2336 164.582 93.3156L165.284 89.0195C164.809 89.1015 164.025 90.2821 163.88 89.4295C163.302 89.741 163.55 90.9052 164.149 91.1348L163.509 90.7413C164.231 91.8235 162.353 92.3154 161.94 91.6103V91.6923L164.912 94.8078C165.284 93.8239 163.86 93.9059 164.025 92.6925Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M146.044 180.565C146.002 179.991 145.837 179.909 145.651 179.942C145.734 180.155 145.858 180.368 146.044 180.565Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.614 95.543L166.543 96.5268C166.316 96.1497 165.965 95.8053 165.614 95.543Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.214 87.8374C150.214 87.8374 150.11 87.821 150.028 87.8374L150.523 88.2801C150.42 88.1161 150.317 87.9685 150.214 87.8374Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.254 115.482C166.254 115.581 166.254 115.663 166.274 115.778C166.274 115.68 166.274 115.581 166.254 115.482Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M146.024 75.5723L146.746 77.5891C146.292 77.2776 146.292 78.2122 145.776 77.7531C145.838 77.9007 145.92 78.6058 146.189 78.4418L146.23 78.0483C147.489 79.2125 148.15 78.655 148.955 80.4423C149.987 79.4912 149.285 78.9665 148.707 78.3434C148.645 78.1466 148.625 77.9827 148.583 77.8187L146.849 76.0314L146.003 75.5723H146.024Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M143.071 153.066L142.968 153.033C142.968 153.033 143.03 153.066 143.071 153.066Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M142.514 152.903L142.947 153.034C142.741 152.903 142.596 152.492 142.514 152.903Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.726 95.1338C164.994 95.183 165.283 95.3306 165.593 95.5438L164.891 94.8223C164.85 94.9043 164.788 95.019 164.726 95.1338Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M161.857 93.3288L161.919 91.7055L161.279 91.0332C161.444 91.6727 161.527 92.427 161.857 93.3288Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M167.534 113.041C167.163 116.402 165.986 112.04 165.325 113.516C165.367 114.467 166.11 114.877 166.254 115.484C166.048 112.762 168.835 116.14 168.876 113.418C170.259 113.959 170.115 115.517 169.557 116.386C167.988 117.255 168.69 115.369 167.369 114.992C167.41 116.091 167.699 115.927 168.381 116.468C167.761 118.107 169.475 120.141 167.348 120.928C167.431 122.174 168.112 122.174 168.731 122.961C170.197 123.273 169.846 121.239 171.085 120.928C170.94 121.01 170.651 121.157 170.466 121.092L170.961 120.075C170.259 121.01 169.495 119.764 169.475 119.222C169.516 118.829 169.578 118.058 169.97 118.206L170.177 118.829C170.775 118.124 169.392 117.042 170.342 116.336C170.693 116.336 170.796 116.648 170.982 116.714C170.115 115.697 170.342 114.844 169.846 113.434L171.188 114.369C169.743 113.123 170.631 110.778 171.787 109.204C171.498 109.368 171.271 109.679 171.023 109.45C170.837 108.433 171.993 107.81 172.674 108.351C171.622 107.252 174.347 104.826 172.984 103.35L166.502 96.5449C166.646 96.7909 166.77 97.0532 166.791 97.2992C165.408 97.7091 165.511 98.0043 164.438 96.9221C164.974 97.9387 166.068 97.6927 165.883 99.1029C165.325 98.4798 163.86 98.1846 163.467 99.5128C164.169 103.022 167.472 105.645 168.814 109.007C167.802 109.007 167.637 111.516 167.204 112.68C166.213 112.106 166.068 111.171 166.006 110.237C165.841 110.811 165.635 111.811 165.449 112.532L167.493 113.073L167.534 113.041Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.552 104.859C165.449 104.942 165.386 105.008 165.324 105.107C165.407 105.074 165.49 104.991 165.552 104.859Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.109 109.925C166.109 109.925 166.048 109.925 166.006 109.908V110.204C166.068 110.105 166.089 109.99 166.109 109.925Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M162.332 95.6739C162.084 95.4443 162.022 95.2803 161.774 95.0508C161.857 95.182 161.898 95.3459 161.96 95.5099C162.063 95.6739 162.187 95.7559 162.332 95.6739Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M164.209 95.183L164.602 95.3309C164.602 95.3309 164.684 95.1994 164.726 95.1172C164.498 95.0679 164.313 95.0679 164.209 95.183Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M156.22 124.748L156.385 125.093C156.385 124.896 156.323 124.814 156.22 124.748Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.18 116.565C165.283 115.401 163.714 116.253 164.003 114.613L163.818 115.089C163.384 113.843 164.045 111.81 164.23 110.399C164.788 110.629 165.097 109.629 166.006 109.891C165.965 108.907 165.923 107.94 165.056 107.349C165.469 106.792 164.788 105.808 165.325 105.087C164.705 105.349 163.632 103.808 163.983 105.71C163.941 105.546 163.797 105.628 163.735 105.48C162.744 106.579 163.983 107.185 163.818 108.218C163.157 108.76 163.095 107.12 162.785 107.677C163.074 109.006 161.423 111.58 163.508 111.728C163.508 112.662 163.012 112.744 162.579 112.974C164.54 114.679 160.659 118.286 163.487 118.598C163.487 118.057 163.694 117.188 163.219 116.335L165.159 116.565H165.18Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M162.144 97.627C162.144 97.627 162.104 97.792 162.083 97.858C162.104 97.792 162.124 97.7095 162.144 97.627Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.839 83.8848L174.614 84.5734C174.594 87.3774 173.892 88.3284 173.561 90.7552C173.272 90.9192 173.169 90.6077 173.107 90.4437C173.025 92.1654 172.199 94.6742 172.839 96.0024C172.736 96.5435 171.91 97.9045 171.456 97.2978C171.58 97.5765 171.683 97.9045 171.58 98.1996C170.898 98.1996 171.497 97.4945 170.96 97.4289C170.878 97.6585 170.733 97.7405 170.94 97.8225C170.444 97.3634 168.607 97.9865 168.978 96.1172C170.651 95.5597 168.937 97.4453 170.713 97.1994C170.836 96.5763 170.155 96.5763 169.949 96.4943C170.114 95.7072 170.547 95.7728 170.94 95.8548C170.465 95.4941 171.373 94.5758 170.63 94.0675C170.754 92.5098 171.91 94.2971 172.054 93.2804L170.423 92.5098L171.043 90.87C170.857 88.3776 167.988 90.9028 167.471 88.0169C168.318 88.476 170.031 87.525 170.609 86.2788C170.547 87.0658 171.435 88.6072 170.733 89.5582C172.323 88.2956 170.568 91.5095 172.24 90.952C171.621 90.1813 171.724 89.0007 172.281 88.1481L172.385 88.4596C172.736 87.525 171.043 86.5903 171.972 85.3441C172.034 84.6718 172.488 84.8522 172.88 85.0162C172.715 84.4259 172.447 83.9012 172.839 83.934V83.8848ZM172.963 85.3605L172.632 86.2296C172.963 86.0492 173.004 85.7213 172.963 85.3605Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.398 49.4849L157.543 48.9766C157.46 49.1733 157.419 49.3373 157.398 49.4849Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.475 37.4824L153.186 36.6953C153.186 36.9905 153.289 37.2364 153.475 37.4824Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.537 37.6134C153.537 37.6134 153.558 37.5804 153.578 37.5639L153.475 37.4648L153.537 37.6134Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.534 54.0254C151.576 54.1404 151.597 54.239 151.659 54.3705C151.659 54.2062 151.597 54.1076 151.534 54.0254Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M156.572 53.7969C156.593 53.9119 156.635 54.0434 156.697 54.1256L156.572 53.7969Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.317 71.0801L150.442 71.7852C150.463 71.4408 150.4 71.2277 150.317 71.0801Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M155.146 55.5027C155.146 55.5027 155.291 55.6017 155.374 55.6347C155.333 55.5357 155.25 55.4697 155.146 55.5027Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M172.88 73.3105L173.273 73.5735C173.107 73.3763 172.984 73.3105 172.88 73.3105Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M173.831 67.9805C173.831 67.9805 173.893 67.997 173.913 68.0135C173.893 67.997 173.851 67.9805 173.831 67.9805Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.05 64.0781C150.05 64.0781 149.946 64.0781 149.884 64.0946C149.926 64.2101 149.988 64.1606 150.05 64.0781Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M173.726 67.98C173.726 67.98 173.788 67.98 173.829 67.98C173.788 67.98 173.767 67.9635 173.726 67.98Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M173.81 41.6309C173.81 41.6309 173.603 41.6966 173.397 41.8116C173.5 41.8774 173.624 41.8281 173.81 41.6309Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M171.354 46.5801C171.354 46.5801 171.271 46.6296 171.208 46.6626L171.354 46.5801Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M173.933 68.0293C174.036 68.095 174.16 68.1772 174.284 68.3251C174.139 68.1772 174.036 68.0786 173.933 68.0293Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M169.391 33.2852L169.474 33.4502L169.557 33.3677L169.391 33.2852Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.61 30.6946C170.713 30.793 170.857 30.8585 170.961 30.9077C170.651 29.9075 171.415 28.2022 170.259 27.8906C170.238 28.2186 169.288 29.8255 168.628 29.4648C168.814 30.1535 167.843 31.0553 167.988 31.4324C168.814 30.3994 168.999 31.4161 169.288 32.1867C168.834 32.8262 168.359 31.9736 168.05 32.5147L167.947 34.0724L168.318 32.7442L169.392 33.2689C169.392 33.2689 169.33 33.187 169.309 33.1214C169.123 30.793 171.002 33.0886 170.63 30.6782L170.61 30.6946Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.961 30.9219C171.002 31.0698 171.085 31.2013 171.188 31.3163C171.188 31.1026 171.105 31.004 170.961 30.9219Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M161.67 89.9024C162.021 89.9024 162.929 88.6398 162.042 88.5742C161.877 88.9514 161.732 89.3449 161.567 89.7384L161.67 89.9024Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.277 29.0215C168.38 29.2844 168.504 29.3995 168.628 29.4652C168.586 29.3009 168.483 29.1365 168.277 29.0215Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M161.175 90.6584C161.216 90.7732 161.258 90.9043 161.299 91.0355L161.092 90.8224L160.68 91.7078C160.721 91.8226 160.742 91.9538 160.762 92.1013C160.762 92.0358 160.659 91.9865 160.576 91.9374L160.432 92.2161C161.216 93.036 161.567 94.9217 162.001 95.4956C162.269 96.2335 162.352 97.1025 162.187 97.6272C162.29 97.1353 162.228 96.463 161.691 96.6106C160.989 97.5452 159.42 97.8732 160.411 99.7425L160.576 98.7259L162.125 101.202C161.175 101.907 161.361 99.9556 160.7 99.5621C161.34 101.431 158.533 102.612 160.081 103.629C159.069 103.629 157.356 103.629 157.253 104.809C158.533 104.104 157.872 105.58 159.193 105.039C159.689 105.498 158.615 106.285 159.338 106.433L158.946 106.285C157.026 108.089 159.379 109.007 160.04 109.942C160.04 112.352 159.193 113.369 159.007 115.32C158.326 115.32 156.386 115.648 156.324 116.419C157.17 116.878 157.273 118.681 158.388 118.977C159.111 117.648 157.624 117.73 157.5 116.878C158.842 116.32 158.718 116.943 159.606 116.091C158.987 116.796 159.606 119.6 158.326 120.305L158.223 119.993C157.294 121.239 154.383 121.174 155.725 123.584L156.241 124.716C156.138 124.65 155.993 124.634 155.911 124.584C155.477 126.306 154.239 125.683 154.941 127.7C154.879 127.536 154.734 127.618 154.693 127.454C153.847 128.471 154.941 129.717 155.065 130.569C154.012 130.963 154.136 130.34 153.496 129.946C152.773 131.816 154.053 134.078 155.003 135.407L154.218 136.571C153.95 135.8 153.103 134.784 152.484 134.931C152.546 135.636 153.041 135.554 152.67 136.489C152.092 136.259 151.576 135.784 150.894 135.243C149.491 137.112 153 135.948 150.853 137.112C150.729 137.735 151.555 138.194 152.298 138.358L151.122 139.375C152.051 139.604 151.844 141.015 151.823 141.949C152.216 142.113 152.979 141.326 152.67 140.949C153.413 141.097 153.578 142.113 153.454 142.736C151.411 142.736 152.979 146.868 150.771 145.852C150.894 148.738 150.358 152.706 150.833 154.657C150.172 155.198 149.904 156.444 149.119 155.592C148.686 157.855 150.502 159.265 149.532 161.446C149.243 161.61 149.718 160.429 149.037 160.429C149.553 161.987 147.674 162.987 147.777 165.332C147.819 164.938 147.426 164.791 147.22 164.709C147.55 164.709 147.715 165.725 147.922 166.348C147.695 166.66 147.777 165.873 147.488 166.037C145.672 170.317 147.736 173.99 146.786 178.351C147.055 177.105 145.837 176.466 145.3 176.4L145.032 177.613C145.589 178.171 145.424 179.089 145.754 179.909C145.486 179.975 145.156 180.319 144.908 179.909C143.091 182.155 146.58 183.975 145.3 186.861L143.339 182.942L142.245 183.713L141.336 181.991C140.428 182.844 141.956 183.861 140.924 183.861C140.676 183.631 140.862 183.156 140.325 183.074C139.747 183.926 140.49 184.09 140.552 184.795C138.88 182.746 139.602 179.253 139.458 177.302C139.355 176.99 139.891 177.613 140.098 177.695C140.18 176.925 140.903 176.531 140.738 175.514C139.995 174.809 140.015 175.892 139.829 176.367C139.086 176.203 139.189 175.974 139.189 175.432C140.201 175.432 140.118 172.563 141.46 172.022C141.708 169.136 138.797 172.153 139.767 169.431L141.068 168.742C140.49 167.021 140.118 164.84 140.717 163.053L140.676 163.446C141.109 163.758 141.502 163.38 141.791 163.216C142.534 161.905 141.398 160.495 142.699 159.789C141.791 158.068 141.398 155.346 141.109 153.476C142.699 153.165 141.956 155.969 142.74 156.838L143.05 155.198C142.885 156.215 143.38 156.674 144.123 157.395C144.681 156.002 143.442 155.362 143.318 153.968C143.71 154.116 143.999 153.968 144.123 153.345L143.153 153.05C143.153 153.05 143.318 152.985 143.421 152.804L143.277 150.312C142.761 150.771 141.873 150.689 141.749 151.312C142.369 151.164 142.389 151.706 142.265 152.329C141.708 151.706 141.605 152.87 141.068 152.788C141.336 151.542 141.481 149.984 141.378 149.131L142.348 148.967C142.802 147.803 142.534 146.475 142.947 145.704L143.38 146.016C143.938 144.622 143.607 143.13 144.743 141.966C143.938 140.572 143.339 138.85 142.451 137.686C141.357 136.997 144.639 134.111 143.215 132.472C143.359 132.39 143.917 133.57 144.288 134.111C144.639 133.177 143.318 132.242 144.619 132.078C143.814 134.177 145.63 132.078 145.816 133.095C145.981 132.078 145.94 130.996 145.589 130.455C145.3 132.078 143.958 129.668 144.206 131.389C143.38 129.996 143.298 128.192 143.979 126.716C144.516 126.798 144.805 126.634 145.135 126.093L144.433 125.552C144.701 124.863 145.114 127.044 145.651 125.634C144.577 124.011 147.199 121.272 144.846 120.338C146.023 119.321 145.445 122.584 146.952 121.026C147.674 122.108 146.394 123.355 147.571 123.83C147.385 122.83 148.686 123.601 148.809 122.977L148.231 121.813L148.149 122.043C147.302 120.092 148.376 117.288 148.603 114.959C147.715 112.86 146.146 111.319 146.704 108.974C147.302 109.745 147.757 107.105 148.83 108.728C149.656 107.712 149.098 106.547 148.562 106.465C148.211 107.4 148.335 106.777 147.922 107.564C147.364 106.941 147.612 105.695 148.128 105.236C148.046 105.465 148.19 105.4 148.376 105.465C149.016 104.367 147.819 104.842 147.695 103.989C148.665 103.825 148.252 102.202 148.871 101.497L147.757 100.267C148.52 100.956 148.252 99.2506 149.078 99.1686C148.603 98.3159 147.674 97.5452 148.108 96.381C148.479 96.9222 148.933 95.3644 149.821 95.43C150.998 93.4787 148.025 91.7898 149.594 89.9861C149.78 90.0681 150.296 90.5272 150.605 89.9861C150.44 89.5106 150.667 88.7399 150.667 88.2644C150.667 88.0184 150.585 87.8708 150.358 87.838C149.635 86.9362 148.851 86.4115 148.397 84.7226C147.385 84.7226 147.53 86.1327 147.757 86.7558L148.665 87.3625C147.075 87.6905 148.665 88.8383 148.108 89.1498C146.497 88.002 147.426 85.2637 146.621 83.4928C145.052 84.3618 144.454 86.5427 144.309 88.4775L145.052 87.6905L144.908 88.7071L146.126 87.8544C145.775 88.7891 145.899 89.6417 145.692 90.4944C145.837 89.4778 147.282 89.2318 146.972 89.7893C145.795 90.8059 147.406 91.0355 147.199 91.8882C147.364 91.4126 147.488 90.7896 148.004 91.2651C146.518 92.8392 147.22 93.3803 145.672 94.7741C147.364 94.7741 145.506 96.7254 146.828 97.1025L147.096 96.3974L147.839 98.0208C146.229 99.267 146.683 96.627 145.341 98.6603C144.825 100.612 146.58 100.743 146.435 102.317C145.548 101.694 144.908 100.382 145.156 99.1358L144.557 99.8409C144.061 99.3817 144.474 97.66 144.681 96.8074C145.568 98.3487 145.135 96.1843 146.146 95.6268C145.217 95.3972 145.197 96.3318 144.619 95.1676C144.454 96.1843 144.516 96.3318 143.938 97.578C144.846 94.8397 141.047 94.7249 142.265 92.3801C142.513 93.5443 143.71 92.1341 144.185 92.0522C144.165 91.511 144.123 90.4288 143.958 89.9533L142.513 90.1992C142.162 88.7235 145.156 88.5431 144.02 86.7558C143.236 86.4607 143.504 88.166 143.38 87.8544C142.905 85.526 145.259 84.9685 146.621 83.0992C146.229 82.9352 145.341 82.8696 144.743 82.099C145.527 82.4105 146.043 81.935 146.518 82.7877C146.972 82.1646 146.518 81.3119 146.27 80.6888C145.548 82.017 145.176 80.0001 144.722 79.6886C144.99 78.9835 145.506 80.0001 145.672 80.4592C145.981 79.9017 147.323 79.3606 146.146 78.9015C147.013 78.9671 148.169 80.7544 148.211 81.8366L148.479 81.1315C148.851 81.6726 148.706 81.7546 148.438 82.4433C149.222 81.8202 149.965 81.9678 150.564 82.1974C150.42 82.2793 150.358 82.1318 150.234 82.1974C149.924 82.7549 150.089 83.214 150.564 83.132C151.638 83.7715 151.431 82.4105 152.071 82.0826C152.051 81.7874 152.009 81.4759 151.989 81.1807L148.727 77.8029C148.5 76.4911 149.491 75.9992 150.234 75.1137L149.264 74.753C149.553 73.6544 150.048 72.6377 151.204 73.4904C150.853 73.4904 150.915 73.6544 150.833 73.8839C150.956 73.9331 151.06 73.9987 151.122 74.0807L151.287 74.1463C151.163 72.9329 151.08 72.1622 151.039 72.0966C152.154 74.2611 152.856 72.3918 154.569 72.9165L154.321 70.8176C153.558 71.9982 153.454 70.752 153.269 70.2929C154.301 70.2765 153.537 68.6532 153.785 67.9481L153.991 68.0137C154.445 67.3906 154.528 66.2264 154.404 65.3737C154.053 65.3737 152.587 64.1439 151.7 63.5372C151.101 64.9146 150.833 64.0291 150.193 64.0783C150.275 63.9308 150.337 63.6684 150.193 63.6356C149.945 63.406 149.759 63.8652 149.429 63.8816C149.656 65.4393 149.532 66.997 150.833 67.7513C151.534 67.3578 150.358 66.8987 150.853 66.4231C151.679 67.2594 151.328 68.2104 151.101 69.4566L150.193 69.7846L150.44 71.0964C150.089 70.5225 149.16 70.752 149.202 69.4075C148.376 69.4894 149.16 70.7356 148.768 71.5063L149.821 72.031C149.222 71.8015 148.809 73.5232 148.169 72.2114L147.591 70.1125L146.745 70.5881L146.807 68.8827L147.323 69.3419C146.993 66.5543 149.676 68.768 148.809 65.8984C147.591 64.8982 147.612 63.9635 148.211 62.3238C148.314 63.57 149.14 62.5534 149.842 63.0781C150.605 61.8975 149.553 61.3728 149.14 60.6677C149.904 60.4217 150.523 60.2578 150.234 61.3564C151.7 61.6515 150.213 59.8806 151.762 59.9298C152.319 56.2732 147.282 56.4864 149.883 52.4198L150.482 52.6494C150.131 49.8619 151.122 48.3697 151.039 45.8117L152.938 43.9916C153.103 44.4507 154.094 45.7625 154.941 45.287C153.186 46.0905 153.578 47.1727 152.567 48.1238C152.959 48.2713 153.33 47.8778 153.619 47.7138C153.516 48.3369 152.732 48.5829 152.897 49.4355C153.227 49.4355 153.764 48.5665 153.867 49.2716L152.711 50.3046C152.938 51.8623 154.941 51.2884 154.218 53.0101C153.392 52.6002 152.236 51.7967 152.133 51.0917C151.823 51.8787 151.782 49.9603 151.142 50.6489C152.257 51.9443 151.142 52.4034 151.7 54.0268C151.555 53.83 151.307 53.748 151.287 53.3709L150.378 55.5517C151.225 55.0762 150.915 57.4866 152.071 57.4046C152.918 55.0598 152.133 55.6993 153.207 53.0265C153.33 53.83 154.321 54.9286 155.312 55.5025C155.271 55.5189 155.23 55.5517 155.188 55.6337C156.241 56.1584 156.613 55.7649 158.553 55.9781C157.377 54.5843 158.657 53.8792 158.078 52.3215C157.046 51.9443 156.571 53.0429 156.737 53.7972L156.241 52.4362L156.695 52.7478L157.583 49.5011C157.542 50.1242 158.12 50.403 158.553 50.7801C158.657 50.3538 159.007 49.9767 159.4 49.5503C158.368 49.5503 157.645 49.4027 157.748 48.9928C158.326 46.9103 159.42 45.8117 160.721 45.1558C160.721 45.0739 160.7 44.9755 160.68 44.9099C159.585 45.1558 159.028 43.2209 158.078 42.4667C159.152 42.6142 158.904 41.45 159.544 40.8925C158.347 40.4498 156.572 40.7122 155.436 41.3517C156.344 42.893 156.448 42.2699 157.955 43.1062L158.657 45.5002L157.748 44.8935C157.129 45.9921 158.264 47.2219 156.984 47.0087C156.221 46.32 156.902 45.369 156.138 44.6803L155.539 45.3854C154.486 43.926 156.861 44.8279 156.241 43.1226C155.044 43.6145 156.179 42.975 155.56 42.2043C154.714 42.6798 155.415 45.0738 153.64 44.418C152.959 43.4997 156.262 41.8108 154.59 40.5154L154.796 40.5974C155.292 38.974 154.321 38.3018 153.743 37.6131C154.445 36.9736 153.743 35.9241 153.805 35.1699L154.342 35.2355L154.28 34.1532C155.188 34.7599 154.053 35.3994 154.074 36.3341H155.106C153.743 37.2523 155.457 38.1378 156.2 39.0396C155.519 37.7606 156.964 35.6946 155.044 35.2191L156.179 34.5796L155.87 34.186C156.716 33.7105 157.831 34.3828 157.893 35.4814C157.604 35.6454 157.48 35.7274 157.273 35.6454C157.645 36.1865 158.347 36.7112 157.934 37.8918L157.5 37.2031C157.191 38.6953 157.377 40.0891 158.285 40.6958C159.049 38.5805 159.462 36.4653 159.73 34.4484C157.542 33.6285 156.386 32.7923 154.321 32.2839C154.136 30.8902 154.136 29.0209 155.085 27.9223L155.477 28.0698C155.787 27.5123 155.746 26.9712 155.581 26.5121C156.221 25.9546 156.633 27.0368 157.005 26.6433L156.592 24.6264C157.521 24.8396 157.273 26.4793 157.232 27.25C157.17 27.1024 157.067 26.7909 156.922 26.8728C156.386 27.7419 157.748 29.5784 156.324 29.8407C156.489 30.2999 155.436 28.8405 155.147 30.3327C154.466 31.2837 155.663 31.7264 156.055 31.874C156.592 31.9396 157.046 30.3819 157.604 30.9886C157.645 30.2015 157.005 29.8243 157.686 28.8897C157.624 29.6604 158.574 30.8246 157.686 31.1525C158.471 32.7759 161.031 32.8087 161.278 32.1036C160.453 32.202 160.721 29.234 159.379 31.1197C158.491 30.1195 158.739 28.4798 158.285 27.25L158.491 27.3156L158.45 25.8398C158.698 26.0694 158.884 26.5285 159.42 26.5941L158.285 24.446C159.09 25.6758 159.069 23.8065 159.586 23.331C158.78 23.0359 158.306 22.1832 157.707 22.9047C156.984 23.6918 158.079 23.4458 158.037 24.2165L156.902 23.0031L157.046 22.9211L156.076 22.1668C156.386 20.691 158.471 23.0523 157.707 21.0518L156.221 21.1666C156.757 18.9857 158.822 16.2966 158.388 14.6732C159.152 15.1816 160.453 15.4931 161.34 14.9848C160.989 15.6407 160.845 17.0017 160.824 17.9691C160.535 18.1331 159.276 16.5917 159.751 15.5751C157.294 15.8538 160.803 18.3462 158.368 18.2478C157.129 20.8386 160.391 20.4615 158.636 22.5931C159.709 22.7243 159.069 23.2818 159.998 23.495C161.856 22.9867 160.391 20.4615 161.237 19.0349C161.299 19.1825 161.402 19.494 161.609 19.576C162.083 18.5594 161.918 18.1003 161.609 17.3132L161.464 17.3952C160.597 16.0178 162.393 16.6737 162.971 15.9686C162.847 15.6571 163.322 14.6404 162.496 14.7388L163.735 13.4598L162.517 13.4106C162.558 12.6236 163.384 12.5416 162.765 11.7709L161.691 11.6397L161.031 13.5254C160.824 12.5252 160.04 13.1647 159.978 12.0661C160.989 13.3778 160.7 11.279 161.732 11.2462L161.237 10.4099L161.485 10.6395C162.125 10.082 161.196 9.86882 161.443 9.16374C160.721 9.95081 159.875 10.4427 160.473 11.5905C159.978 10.7379 159.544 9.11454 159.565 8.7374C159.235 7.86835 160.143 7.36003 160.37 6.60576C160.576 8.13071 163.714 6.39259 162.517 9.29491C162.31 9.22932 162.393 8.98337 162.538 8.90138C161.092 9.16374 162.352 10.6887 162.785 11.3938C163.611 11.2954 163.694 12.0005 164.313 10.8855C163.756 11.2134 162.682 9.75404 163.487 8.72101L165.159 9.06535L165.593 7.49121L165.655 7.63879C166.831 7.14687 165.696 5.93346 166.501 4.90043C166.006 4.04777 166.935 1.07986 164.974 2.21128C166.171 1.32582 164.953 0.341983 164.87 -0.740239L163.983 0.522354C162.992 -1.16657 163.714 -0.641855 161.96 -2.08482C162.434 -2.16681 162.868 -2.41277 163.322 -2.11761C163.714 -4.23287 164.643 -7.20078 163.425 -8.57815C163.714 -10.0703 165.737 -10.1195 165.263 -12.2839C165.077 -12.7431 163.632 -12.0872 164.313 -13.4318C164.457 -13.5137 165.386 -11.9888 165.469 -13.5465C164.313 -14.7599 166.563 -16.0717 165.634 -17.5967C166.212 -18.3182 166.212 -19.6299 167.224 -19.2692C166.811 -18.0886 166.79 -16.3833 167.244 -16.0717C166.646 -16.2849 166.522 -15.2683 166.171 -16.2029C165.139 -14.4648 166.646 -14.9731 165.882 -13.399C166.274 -13.2514 167.141 -14.1368 166.831 -14.514C168.256 -14.3992 167.059 -11.2509 168.958 -12.5463C169.329 -14.268 166.439 -15.0551 168.153 -16.4161C168.937 -15.7438 168.07 -14.8583 169.453 -13.9565L170.196 -15.1371L169.309 -16.1209L169.515 -16.0553C171.125 -18.1214 168.338 -18.2034 167.905 -20.2202C166.77 -19.1708 165.49 -20.6958 164.767 -19.8923C164.767 -21.2205 165.077 -22.1551 166.501 -22.0403C167.327 -19.4988 167.988 -21.778 169.082 -19.384C169.639 -19.7119 171.084 -18.6625 171.414 -19.9907C170.609 -21.5976 170.176 -19.6463 169.907 -21.1877C170.052 -21.2697 170.196 -21.3517 170.382 -21.2697C169.742 -22.024 170.754 -22.0567 170.052 -22.975L170.3 -22.7454C171.311 -23.7129 169.474 -23.9588 170.547 -24.7787C169.453 -24.5163 169.763 -25.451 169.185 -26.0577C168.669 -25.1886 167.079 -24.8279 166.935 -23.0406C167.74 -22.7454 168.215 -22.8438 168.524 -22.0731L168.586 -23.2373C168.689 -22.975 168.875 -22.7618 169.02 -22.5159L168.442 -21.4336C168.049 -22.893 167.059 -22.3355 166.295 -23.0078C166.831 -24.2704 166.212 -24.09 166.604 -24.8935C167.802 -24.7131 169.02 -27.2055 170.011 -28.6321C169.928 -28.4025 169.928 -28.1074 169.866 -27.9434C170.485 -26.7956 170.981 -28.5993 171.332 -28.6157L170.836 -29.4519C170.898 -29.288 171.146 -29.0584 171.373 -29.3863C171.291 -30.4686 170.073 -30.5178 169.99 -31.6C170.671 -31.6164 171.559 -30.6325 172.013 -31.272C172.632 -31.4524 174.284 -32.0427 173.892 -33.5185C173.644 -33.6332 173.561 -34.0268 173.499 -34.4531C173.52 -34.3875 173.541 -34.3219 173.582 -34.2891L174.428 -35.1746C175.461 -34.2727 173.665 -33.6005 174.717 -32.6986L175.791 -32.5346C175.708 -31.9115 176.059 -31.0097 176.575 -30.5669C176.885 -31.5016 176.637 -31.7312 176.555 -32.8298C177.257 -32.9282 177.669 -32.1247 177.731 -32.0099L177.133 -32.2231C176.059 -31.0261 177.917 -30.2226 177.484 -28.6485C177.401 -28.4189 177.339 -28.5665 177.153 -28.6485C178.041 -27.2711 176.41 -26.1397 177.628 -24.7623L177.112 -25.2214C177.463 -24.336 178.309 -22.5651 179.115 -20.8105L179.527 -20.7614C179.816 -20.9253 179.713 -20.3022 179.486 -19.9743C179.899 -19.0888 180.25 -18.2526 180.518 -17.5639C180.807 -17.7443 181.076 -18.0066 181.179 -18.3018C180.725 -18.6133 181.344 -20.1055 180.188 -19.9907C180.972 -20.6466 180.147 -21.86 180.642 -22.3519C179.796 -21.4664 179.672 -23.1062 179.073 -23.3193C179.837 -23.5817 179.218 -24.7295 180.147 -24.5163C180.415 -24.6803 179.445 -24.1064 179.961 -23.6473C180.725 -22.5815 180.993 -25.3854 181.674 -24.09C181.22 -25.7133 181.798 -27.763 181.138 -29.4519L180.622 -28.5829C180.869 -29.288 180.89 -31.0097 181.365 -31.1081C181.406 -30.5669 181.303 -29.9439 181.406 -29.2388C182.479 -29.1076 181.633 -30.8785 182.294 -30.8949L180.766 -33.0429L180.58 -32.1739C180.002 -32.7806 181.034 -34.5351 181.365 -35.8633C182.748 -34.9614 181.138 -33.83 181.53 -32.3543C181.943 -31.272 183.057 -32.8626 183.264 -31.8623C183.635 -32.0919 183.697 -32.7314 183.367 -33.0757L183.697 -33.4365C184.936 -32.4526 184.358 -30.5178 185.328 -29.124C185.204 -29.2552 185.06 -29.3699 184.915 -29.4191C184.255 -28.4681 184.131 -27.4515 184.358 -26.4348C184.853 -26.9103 184.585 -27.1399 184.482 -27.4515C184.812 -27.4515 184.833 -26.5332 185.163 -26.1397C185.679 -27.0087 185.989 -26.2381 186.278 -26.7956C186.526 -26.1725 186.36 -25.6969 186.113 -24.9919C185.555 -24.6639 185.452 -25.369 184.771 -25.3362C185.06 -24.5655 183.429 -24.3524 184.048 -23.2046C184.523 -24.6311 185.452 -22.6962 185.824 -22.1551L185.906 -22.4011C186.629 -21.8764 186.608 -21.4828 185.844 -21.2369C185.597 -21.86 185.906 -22.4011 185.081 -22.3027C185.081 -21.9092 185.039 -21.5156 185.225 -21.0565L184.709 -21.5156L184.606 -19.5644C185.266 -19.2036 186.175 -18.5969 187.186 -18.2362C186.484 -17.8262 186.918 -17.1375 187.104 -16.662L186.835 -16.8916C186.113 -16.0881 186.34 -14.1368 186.938 -13.9237C186.299 -13.3662 183.594 -18.5969 183.574 -14.2188C183.346 -12.5791 185.411 -13.0218 185.968 -12.0216C185.968 -12.0216 185.782 -12.0872 185.638 -12.0216C185.39 -11.3165 186.133 -11.1689 186.36 -10.5622C186.711 -10.9722 186.815 -11.5953 186.567 -11.8248C187.372 -11.5297 186.278 -10.3327 186.856 -9.72597C185.679 -10.5622 186.175 -8.38138 185.597 -8.98809C184.564 -7.62711 185.37 -6.00377 186.195 -5.16751C184.461 -4.34765 186.175 -3.4458 185.204 -1.93724C185.287 -2.1832 185.101 -2.64233 185.328 -2.95388C184.441 -3.93772 184.564 -1.36334 183.821 -2.83909C183.945 -2.52754 184.358 -2.77351 184.234 -3.08506C184.193 -3.62617 183.821 -4.16728 183.346 -4.06889L182.273 -2.87189L182.087 -3.34741L180.56 -1.51092C180.745 -1.44533 181.034 -1.5929 181.179 -1.67489C180.312 0.538751 180.622 3.17872 180.167 5.1464C182.975 5.78589 180.683 10.1312 182.211 11.8857C181.447 11.3774 180.043 11.0166 179.404 11.2134C179.342 10.8527 178.289 10 178.64 9.22933C179.114 9.14734 179.775 8.19629 180.209 8.88498C180.209 6.62215 178.908 9.06535 177.938 8.31108C177.855 10.8035 179.321 12.4104 179.754 14.0501H179.404L179.858 15.2963C180.188 14.3453 181.819 14.5421 181.055 15.7391L180.993 15.5751C180.209 16.2146 180.787 17.7723 180.518 18.8709L181.344 19.7072C181.076 20.8058 179.321 20.691 178.206 20.9534C177.814 22.6751 179.115 23.8229 179.775 25.1347C178.929 25.6266 178.351 28.201 177.628 26.7417C178.062 28.365 182.19 28.447 179.507 30.923L178.887 30.1523C178.64 32.7431 179.548 36.5473 178.578 37.6459C176.08 36.4325 175.399 40.5974 172.736 40.7942C173.355 40.7286 173.396 41.7124 173.685 41.8764C173.355 42.0567 173.004 42.3847 173.479 42.811C174.16 41.86 176.059 43.7785 175.316 41.7616C176.947 42.9094 178.124 44.2868 177.711 46.402L176.637 46.2709L177.236 44.6311C176.41 44.7295 176.617 43.8604 176.307 43.4669C175.213 46.5332 173.85 42.811 173.479 46.0085C174.139 46.3856 173.871 46.1561 174.015 47.0087C174.036 46.6152 173.314 46.4676 173.19 47.0907L173.954 47.7794C171.972 48.7141 173.066 45.8117 171.662 46.648C171.002 45.3362 170.898 43.1554 169.453 43.4177C168.627 45.3854 171.745 45.4838 170.795 47.5334L170.176 47.6974C170.465 48.4845 171.394 48.6977 171.889 49.1568C171.559 49.1568 171.27 49.3207 171.105 49.7963C172.302 51.19 172.426 52.0427 173.768 53.3545C173.107 50.1734 175.233 50.8293 174.738 47.5662C175.11 48.1073 175.089 50.3702 176.555 50.6653L175.481 50.5342C175.873 51.6164 176.266 52.715 175.708 53.9612L175.233 53.1085C175.708 54.8958 173.148 55.7977 174.717 57.3226C174.883 56.8471 174.924 56.47 174.8 56.1584C175.13 57.0931 174.841 58.1917 174.511 59.1263L175.977 61.2908C175.44 61.2252 175.213 62.4714 174.449 61.7827C173.396 63.1273 174.903 63.9636 175.027 64.8162C173.644 66.1608 174.717 63.488 173.252 63.1929C172.426 65.1605 172.529 67.3414 173.314 68.5876C173.603 68.1941 173.809 68.0137 174.077 68.0629C173.726 68.0957 173.685 68.9155 173.603 69.3583L174.263 69.7354C173.665 70.4405 173.272 70.2929 172.839 69.5878C172.591 70.2929 173.788 71.2931 172.653 71.9326C172.013 70.6209 173.004 69.1287 172.591 68.4236C172.859 71.0636 170.031 70.7848 170.382 74.1463C170.031 74.1463 169.474 73.5232 169.371 74.1463C169.371 75.622 170.754 74.671 171.456 75.2121C171.208 74.0479 171.724 73.5724 172.715 73.0149L173.231 73.3756C172.921 73.3756 172.798 74.0971 172.467 74.2611L173.603 74.5562C172.343 74.343 171.167 75.3597 171.497 76.2943C172.57 75.4909 172.488 75.7368 173.995 75.6384C175.172 77.0322 172.405 76.901 173.644 78.4424C173.252 78.2948 173.148 77.0486 172.653 78.0652C172.447 78.9343 173.479 78.9179 173.685 79.541C172.736 78.7703 171.91 78.8523 170.754 78.016C170.878 76.4583 170.878 77.3929 170.651 75.8352L169.536 77.0158C169.577 75.6876 168.462 75.9336 168.07 75.786C166.604 77.9013 169.412 77.6389 168.896 79.0491C169.515 79.8198 169.267 77.7209 169.866 78.8851C169.495 80.2133 170.506 79.2622 170.733 80.82L170.279 80.5084C169.577 80.902 170.279 81.4431 170.279 81.9842C170.506 82.6073 174.098 81.7054 173.768 84.1322C173.479 83.9847 173.314 83.9191 173.19 83.9027L164.602 80.5904C164.21 83.0336 163.487 85.8376 162.393 88.5923C160.514 89.0678 161.299 86.4115 160.473 86.5099L161.051 85.2637C161.774 85.4112 160.824 88.002 162.331 86.969C162.187 84.6242 163.219 83.6895 162.042 81.3611C160.164 81.853 161.877 84.247 160.287 85.5096C160.494 84.9357 160.391 84.411 160.225 83.9027C159.771 85.1981 159.276 86.5918 158.76 88.0676L159.131 88.4447C159.503 87.4609 159.771 86.7722 159.854 86.6902C159.462 88.0184 160.246 89.2482 161.526 89.4778L161.609 89.2482L161.918 89.7729L161.505 90.6912L161.175 90.6584ZM144.887 177.613C144.784 177.515 144.66 177.433 144.474 177.367C144.66 177.433 144.784 177.4 144.887 177.613ZM161.258 63.8816C160.783 65.6525 160.143 67.4234 159.689 69.1287C162.744 66.292 165.015 64.2915 164.127 69.4894L164.251 69.8502C164.685 69.2107 164.912 68.0465 164.891 66.9151C164.127 65.9312 161.278 62.7173 160.989 62.7173C160.225 62.9633 160.927 63.5044 160.618 64.0455L161.237 63.8816H161.258ZM165.717 63.0453C166.171 62.0615 165.572 62.2254 165.077 62.0287C165.077 62.3894 165.077 62.7502 165.077 63.1109C165.221 62.9961 165.428 62.9469 165.696 63.0453H165.717ZM164.561 62.0287C164.54 62.1434 164.499 62.2418 164.416 62.2746L164.561 62.0287ZM160.659 81.7218C160.659 81.7218 160.659 81.6563 160.659 81.6071C160.576 81.8366 160.494 82.0826 160.411 82.3285C160.514 82.2466 160.597 82.0662 160.659 81.7218ZM162.249 79.8034L161.361 79.459C161.299 79.6722 161.216 79.9017 161.134 80.1313C161.567 80.0985 161.939 80.0657 162.249 79.8034ZM166.398 73.4904C165.345 72.9493 165.531 71.5555 164.251 71.3259C163.941 71.1948 163.756 71.4899 163.59 71.8015C163.487 72.1622 163.384 72.5557 163.281 72.9657C163.467 72.9985 163.632 73.0968 163.776 73.2608C164.003 72.8673 164.375 72.6213 165.139 72.8673C163.239 73.7527 166.212 73.9495 165.572 75.0481C166.419 75.5073 166.687 73.8675 166.377 73.474L166.398 73.4904ZM176.555 -15.0223C176.679 -15.0387 176.968 -15.1371 177.36 -15.2519L177.876 -14.3828C177.401 -12.9726 175.378 -11.9724 176.782 -10.5294C176.286 -9.95553 175.399 -9.70957 174.655 -9.46361C174.759 -9.75876 174.862 -10.0211 175.006 -10.2507C173.19 -14.104 177.731 -11.9232 176.555 -15.0059V-15.0223ZM171.91 1.35861C171.848 1.19464 171.641 1.12905 171.641 1.12905C173.541 4.57249 173.83 7.27805 173.499 9.01616C174.49 8.7702 175.44 7.27804 175.935 6.57296L176.906 7.32724L175.997 7.65518L176.802 8.88498C177.566 8.63902 177.546 7.70437 178.186 7.13047C178 7.06488 177.029 4.96603 176.451 4.35933L175.481 5.86788C175.853 5.47434 175.894 3.35909 175.75 2.50643C175.213 2.44084 174.181 3.78542 175.316 4.08057C174.49 4.17895 174.717 2.53923 173.726 3.49027C173.066 2.17848 174.057 0.292791 174.573 -0.592663L175.935 -0.625459C176.596 -1.5765 174.428 -1.44532 175.378 -2.56034C175.419 -1.08458 176.885 -2.67512 176.802 -1.51092C177.36 -1.83886 178.227 -1.39613 178.289 -2.56034C176.658 -3.69176 179.569 -3.69176 178.144 -4.74118C178.784 -5.29869 179.114 -3.98691 179.527 -5.16751C178.784 -6.62687 178.124 -6.61048 176.844 -6.80724C176.307 -5.54465 178.309 -5.20031 177.855 -4.18368L175.935 -6.4793C175.564 -6.11856 175.502 -5.8398 175.543 -5.59384C175.481 -6.02017 175.192 -6.41371 174.8 -6.75805C174.573 -6.95482 174.387 -7.13519 174.222 -7.29916C174.036 -6.11856 173.871 -5.05273 173.293 -4.92155L172.694 -5.13472C172.054 -4.75758 172.405 -4.0361 172.818 -3.67536C172.736 -2.60953 173.437 -1.46172 172.612 -1.31414L172.096 -1.77327C172.096 -0.445086 172.137 -0.297511 171.91 1.34222V1.35861ZM164.003 44.0408C166.419 43.4833 168.586 42.811 168.751 39.0724L168.855 39.384C170.568 37.6623 167.513 35.5634 169.453 33.4646C170.155 34.6452 170.073 34.5796 171.869 35.9897L171.414 34.7435C172.612 35.1863 172.137 33.9565 172.343 33.0874L173.706 33.9893C173.19 34.4648 172.839 35.793 173.19 35.793C173.066 35.4814 171.043 37.3835 171.311 38.5641C172.323 38.5477 172.302 36.1209 173.768 37.3507C173.231 36.3505 174.243 36.3341 174.036 35.3175C174.573 36.3177 175.378 35.6782 175.997 36.4489L175.894 34.8091C176.245 34.8091 176.266 37.2195 177.711 36.0225C177.277 35.3339 178.206 33.6777 177.133 33.5301H177.463C177.876 32.3495 176.018 32.8415 176.864 31.4313C176.328 31.3657 175.894 31.6117 175.935 32.1528C176.101 32.6283 176.844 32.7595 176.844 33.6941C175.935 34.0221 177.112 32.5955 175.584 33.0874C174.821 33.3334 175.832 35.5798 174.325 34.7435L174.738 33.5629C173.665 33.4318 173.85 32.5627 172.983 32.4971C172.694 31.7264 174.015 31.1525 173.19 30.3163C172.529 29.9391 171.146 30.3491 171.91 29.1685C173.665 28.3486 173.788 25.4627 173.726 24.3804L173.169 23.3802C172.488 23.3802 172.983 25.1839 172.219 24.4952L172.178 23.0031L172.57 23.1506C172.736 22.6751 172.364 22.134 172.199 21.6749C172.901 22.1996 172.447 23.2326 173.603 23.1179C173.933 22.4456 174.366 22.3964 174.243 21.7405C174.305 21.888 174.387 22.0192 174.552 22.0192C175.254 20.6747 173.499 20.5599 173.169 20.1827C171.91 18.6414 171.6 21.4617 170.465 21.1666V17.0344C170.774 17.4116 171.084 17.8051 171.559 17.7067C172.219 16.7557 172.447 17.7723 172.591 16.3622C171.043 16.313 171.889 14.5093 171.146 13.427C171.848 13.0171 171.992 12.9351 171.848 13.9518C172.859 13.9354 172.694 12.5416 172.859 12.0661C172.653 11.7545 172.57 11.279 172.405 10.951C171.848 11.3118 171.249 11.0822 170.94 10.164L170.733 10.0984C170.238 11.5086 168.813 13.6402 169.701 14.6404L169.247 14.3453C168.132 15.9194 170.506 18.1331 168.504 18.7234C167.76 18.5758 168.277 19.0349 167.203 18.9037L167.864 20.2155L167.409 19.9204L167.348 22.0356L167.162 21.9536C167.988 23.0359 168.669 23.8885 169.226 24.5772C169.701 24.6264 169.845 24.5772 170.155 24.938C170.341 25.2987 170.341 25.5447 170.238 25.7578C170.031 26.2497 169.288 26.5285 168.916 27.1352L169.102 25.1839C168.318 24.9544 167.471 25.0363 166.77 25.9218C166.79 25.5283 166.191 25.3151 166.026 25.7742C166.233 25.8398 166.336 27.086 167.059 26.6925C167.059 28.5618 164.499 31.3329 165.593 34.268C164.994 32.1692 164.272 35.7766 164.292 33.5137C162.765 34.9403 165.345 34.9731 164.912 36.5473C164.437 36.6292 165.097 35.6946 164.251 35.2355C163.322 37.8262 165.634 39.8923 164.85 42.4011H163.838C163.879 42.9094 163.941 43.4505 164.003 44.0244V44.0408ZM164.457 49.206C164.499 49.7143 164.519 50.2226 164.561 50.7309C164.561 50.6817 164.602 50.6325 164.623 50.5833L165.201 52.1411C165.737 51.272 166.935 50.7801 167.244 52.1083C166.852 51.9607 166.274 52.2723 166.109 51.8131C165.366 52.6002 164.499 54.4039 166.088 54.076C164.912 52.3051 168.07 53.8956 167.224 52.5018C168.091 53.2889 167.554 53.9284 167.884 54.6171C167.162 53.8628 166.006 54.5843 165.448 55.5681C165.613 56.0437 165.201 57.2079 165.469 57.9785C166.439 57.8146 166.852 58.5033 167.286 57.3226C167.451 57.7818 167.533 58.4868 166.935 59.2083C166.831 58.8968 166.79 58.3557 166.46 58.3557C165.531 58.7656 165.469 59.3395 165.056 59.6183C165.056 59.8806 165.056 60.143 165.077 60.3889C165.159 60.3233 165.283 60.2742 165.428 60.2414L166.109 61.1596C165.861 59.9954 166.625 60.6841 167.162 60.7497C166.088 60.6021 166.914 61.4548 166.873 61.8483L168.153 61.1268C168.669 61.5859 167.1 62.4714 168.256 62.373C168.999 60.6513 168.916 59.9462 168.834 58.3065L167.843 58.864C167.513 56.9947 169.536 57.9129 169.825 55.8797C169.164 54.9614 170.258 52.8298 168.648 52.6166C169.102 52.9282 170.3 51.5016 169.66 50.7309C168.297 49.8127 168.462 47.4679 167.678 48.1074C167.554 48.7304 168.235 49.6651 167.203 50.0586L167.079 48.8124L166.15 49.5339C166.501 49.1568 165.717 49.1076 164.499 49.1896L164.457 49.206ZM150.936 75.4581V75.5073C150.936 75.5073 150.936 75.4745 150.936 75.4581Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M134.979 156.213L134.339 162.969C134.546 161.017 134.793 159.246 134.979 156.213Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.94 26.956L171.064 26.6117C171.476 27.0216 171.435 26.8412 171.105 26.4805C171.126 26.1033 170.816 26.1033 170.63 26.0377C170.527 25.9558 170.403 25.8738 170.3 25.7754C170.403 25.9066 170.506 26.0213 170.609 26.1197C170.506 26.6936 170.506 27.0544 170.96 26.9724L170.94 26.956Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.153 41.7603C152.711 40.5141 152.938 40.1862 153.681 40.3337C154.114 39.1367 152.793 39.2023 152.607 38.4316C152.525 39.8254 152.153 40.0714 152.153 41.7603Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.608 38.4353C152.608 38.2713 152.608 38.1237 152.608 37.9434C152.547 38.1401 152.567 38.2877 152.608 38.4353Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.472 43.6321C151.555 43.4025 151.576 43.009 151.865 42.845C151.121 42.6974 151.39 43.8616 151.472 43.6321Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.934 40.12C167.409 40.038 167.264 39.1854 167.491 38.8574C167.326 39.3329 165.881 39.5953 166.934 40.12Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.971 47.6472C154.054 47.4176 154.611 47.0897 155.21 47.3192C154.9 46.9421 153.662 46.3354 153.971 47.6472Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M166.419 42.4678L166.708 42.3038L166.357 41.3691L166.419 42.4678Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M177.958 40.4009C177.215 39.3187 175.564 41.7619 175.068 39.9746C173.788 42.0899 176.369 39.9254 175.956 41.5487C176.41 40.6305 177.607 40.2698 177.958 40.4009Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M175.958 41.5488C175.896 41.6803 175.833 41.8282 175.812 41.9926C175.875 41.8118 175.937 41.6639 175.958 41.5488Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.09 54.9944C168.028 54.8465 167.925 54.7314 167.842 54.6328C167.904 54.7479 167.966 54.8793 168.09 54.9944Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M175.872 46.8284L174.778 45.2051C175.521 46.2873 175.067 48.7961 176.409 48.7633C176.801 47.9762 176.615 46.9596 176.099 46.5005L175.872 46.812V46.8284Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.953 61.4699L148.52 60.7812L148.231 61.5683C148.458 61.3552 149.387 61.8799 148.933 61.4863L148.953 61.4699Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M148.189 61.7182L148.25 61.5703C148.25 61.5703 148.189 61.6525 148.189 61.7182Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M167.906 52.1075C168.071 51.632 168.091 51.2548 167.926 50.7793C167.637 50.9433 167.224 52.1075 167.906 52.1075Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.153 66.1935L150.09 65.1113L150.007 66.2755L150.153 66.1935Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M147.055 70.8984L146.787 71.0624L147.117 71.9807L147.406 71.8331L147.055 70.8984Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M174.367 67.1449C174.635 66.4398 173.52 65.7511 173.231 65.9151L173.066 67.3252C174.181 67.0793 173.107 66.9317 173.5 66.1446L174.367 67.1449Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M142.74 107.777C142.1 107.383 142.761 105.907 143.442 105.907C143.69 106.137 143.834 107.006 144.33 106.531L142.823 105.137C144.165 103.661 144.867 106.596 145.341 107.465C145.858 105.858 144.805 105.252 145.114 103.513C144.867 104.005 144.392 104.284 143.979 104.514C142.761 104.432 143.587 102.874 143.69 101.71C143.029 102.382 142.678 101.906 142.286 101.333C142.286 101.234 142.204 101.169 142.142 101.103L141.997 100.906V101.037C141.832 101.005 141.667 101.037 141.44 101.103C141.626 102.103 140.49 102.743 140.366 103.366C142.431 102.972 140.449 105.547 140.924 106.399L140.965 107.334L140.903 107.678C140.676 107.728 140.428 107.596 140.119 107.039C140.428 107.514 140.036 108.941 140.697 108.875L140.139 112.155C140.036 112.253 139.933 112.335 139.768 112.401C139.871 112.532 139.974 112.565 140.077 112.548L137.641 126.863C137.93 126.175 138.488 125.617 138.839 124.912C139.953 126.158 139.293 123.748 140.47 124.207C140.821 124.748 140.552 125.453 140.181 125.847C140.779 126.076 141.44 125.535 142.162 125.683C143.277 123.961 140.346 123.354 141.11 121.632C141.853 121.78 142.389 122.403 142.513 121.239L142.617 121.55C142.121 119.599 144.557 120.304 142.72 118.911L143.793 119.058C143.133 118.123 143.422 116.5 143.442 115.565L143.649 115.647C142.885 112.925 143.649 114.172 143.649 111.22L144.66 112.696C145.362 111.761 144.02 111.368 144.289 110.679C144.495 110.761 145.3 110.679 145.383 111.368L144.082 107.646C143.422 106.711 143.256 107.728 142.782 107.81L142.74 107.777Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M145.136 103.497C145.219 103.317 145.281 103.103 145.281 102.857C145.198 103.087 145.157 103.3 145.136 103.497Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M137.435 127.846L137.62 126.846C137.496 127.157 137.414 127.469 137.435 127.846Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M143.669 98.2004C143.008 98.7415 142.967 97.6593 142.575 97.5117L142.203 99.6926C142.616 99.7254 143.05 100.004 143.442 99.9877L143.669 98.2004Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M141.316 100.249C141.584 100.348 141.811 100.61 142.018 100.905L142.224 99.7083C141.914 99.6756 141.605 99.7903 141.336 100.249H141.316Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M163.529 102.445L163.488 102.839L163.715 103.462L163.529 102.445Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M160.639 108.317C161.341 107.924 161.032 106.989 160.928 106.678C160.763 107.694 160.619 107.219 160.639 108.317Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M167.596 107.809L167.782 108.825L167.926 108.743L167.596 107.809Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M140.325 135.75C140.325 135.914 140.325 136.062 140.325 136.226C140.365 136.012 140.365 135.865 140.325 135.75Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M140.821 127.289C139.19 129.47 140.099 125.649 138.406 126.207L138.695 127.535L138.303 127.387L138.158 128.945C138.922 128.715 139.025 128.486 139.748 128.633C139.087 130.65 138.736 129.175 137.518 130.585L137.229 132.897L137.044 132.684C137.044 132.88 137.105 132.979 137.209 133.061L136.259 140.849C136.589 142.325 137.745 140.226 138.654 141.391C138.943 139.751 140.181 137.422 138.736 137.111C138.922 137.193 139.314 137.34 139.562 137.029L138.509 135.947L137.952 136.799C136.899 135.701 137.745 132.684 138.592 132.208C138.695 133.995 140.326 133.29 139.067 135.635C139.459 135.57 140.202 135.209 140.305 135.766C140.388 132.864 141.544 130.404 140.821 127.305V127.289Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M136.238 155.902L136.113 155.869C136.113 155.869 136.218 155.952 136.238 155.902Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M136.589 154.968L135.391 153.41L135.102 155.591L136.093 155.87C135.866 155.64 135.495 154.82 135.949 154.574L136.589 154.968Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M134.812 151.705C135.04 152.869 136.258 152.951 136.918 152.41C137.29 153.509 135.514 152.804 136.67 153.656C137.537 153.738 137.269 152.41 137.166 152.099L134.812 151.705Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M137.002 143.537L137.435 143.914L137.724 143.16L137.002 143.537Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M137.434 143.916L137.166 144.67C137.537 144.67 137.909 144.654 138.198 144.556L137.455 143.916H137.434Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M136.444 146.641C136.3 146.952 136.155 147.313 136.052 147.739L136.444 146.641Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M136.919 145.803H136.754L136.444 146.639C136.588 146.344 136.753 146.065 136.919 145.803Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M137.166 144.67C136.299 144.703 135.39 144.736 135.411 145.867L136.753 145.801L137.166 144.67Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M165.077 114.777L165.387 115.712L165.552 115.63L165.221 114.695L165.077 114.777Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M163.384 119.762C163.487 119.991 163.611 120.172 163.755 120.352C163.693 120.106 163.59 119.909 163.384 119.762Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.483 124.206C167.451 125.141 167.616 122.649 166.894 124.518C166.068 124.6 165.222 123.583 165.779 122.714C166.502 122.878 166.089 123.649 166.956 123.173C166.213 122.468 166.832 122.321 165.676 122.386C165.16 121.304 164.375 121.091 163.777 120.32C164.045 121.599 162.435 124.026 163.591 125.748C164.788 126.764 166.729 126.453 168.669 126.666C169.144 126.584 169.763 124.403 168.483 124.174V124.206Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M170.712 122.798C170.897 122.322 170.835 122.175 170.732 121.863C170.051 121.863 170.732 122.404 170.712 122.798Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.053 132.143C154.322 132.274 154.487 133.176 155.003 133.045L154.9 131.684C154.796 131.979 154.445 132.061 154.053 132.143Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.859 131.092L154.9 131.682C154.94 131.535 154.94 131.354 154.859 131.092Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M153.867 132.193L154.054 132.143C154.054 132.143 153.93 132.11 153.867 132.193Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M135.351 149.753C134.814 149.671 135.02 150.295 135.124 150.606C135.206 150.377 135.454 150.065 135.351 149.753Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M133.244 171.988L132.728 172.447C133.017 172.3 133.162 172.218 133.244 171.988Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M146.249 181.744C146.249 181.744 146.435 181.827 146.498 181.876C146.435 181.81 146.352 181.777 146.249 181.744Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M146.497 181.875C146.868 182.285 145.96 183.285 146.558 183.761L146.352 183.679L146.6 184.466C146.682 183.777 147.033 182.351 146.476 181.875H146.497Z\",\n    fill: \"#3F3834\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.361 54.5519C261.402 54.8471 261.815 54.9291 262.042 54.9619L261.898 51.666C261.443 51.7808 260.907 52.7318 260.597 52.1088C260.102 52.4039 260.556 53.2566 261.196 53.3713L260.473 53.1418C261.402 53.8797 259.647 54.4372 259.09 53.9616V54.0272L262.641 56.0605C262.827 55.2898 261.423 55.4866 261.361 54.5683V54.5519Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M265.283 122.322C265.077 121.911 264.891 121.878 264.726 121.928C264.87 122.076 265.035 122.207 265.283 122.322Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M263.465 56.5371L264.58 57.1766C264.27 56.9142 263.878 56.7011 263.465 56.5371Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.766 52.2891C246.766 52.2891 246.663 52.2891 246.58 52.2891L247.137 52.5849C247.014 52.4698 246.89 52.3712 246.766 52.2891Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.255 71.3086C268.255 71.3086 268.317 71.4406 268.337 71.5231C268.337 71.4406 268.296 71.3746 268.255 71.3086Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.346 43.2867L241.419 44.7625C240.924 44.5657 241.089 45.2872 240.49 44.9756C240.573 45.0904 240.779 45.6151 241.027 45.4675L240.986 45.156C242.451 45.9267 242.988 45.4347 244.103 46.7301C244.949 45.9103 244.165 45.5659 243.484 45.1396C243.38 44.992 243.339 44.8772 243.277 44.7461L241.233 43.5327L240.304 43.2539L240.346 43.2867Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M254.093 102.416L254.568 102.449C254.341 102.383 254.073 102.087 254.093 102.416Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M262.537 56.3053C262.805 56.3053 263.136 56.4037 263.487 56.5185L262.661 56.043C262.661 56.043 262.599 56.2069 262.558 56.2889L262.537 56.3053Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.336 55.2565L259.089 54.0267L258.325 53.584C258.614 54.0595 258.841 54.6006 259.336 55.2565Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.998 69.3402C269.349 71.8818 267.264 68.7827 266.913 69.9633C267.141 70.6684 267.966 70.8816 268.255 71.3079C267.43 69.3238 270.918 71.4883 270.382 69.4714C271.847 69.701 272.054 70.8816 271.703 71.5867C270.34 72.4229 270.629 70.9472 269.246 70.816C269.535 71.6194 269.783 71.4719 270.588 71.7834C270.34 73.0788 272.487 74.3578 270.588 75.1941C270.96 76.1123 271.62 76.0139 272.405 76.5222C273.912 76.5714 273.107 75.1121 274.263 74.7185C274.139 74.8005 273.891 74.9481 273.685 74.9153L273.953 74.1118C273.478 74.8825 272.446 74.0626 272.301 73.6691C272.24 73.374 272.136 72.8001 272.57 72.8492L272.921 73.2756C273.354 72.6853 271.744 72.0458 272.508 71.4063C272.838 71.3571 273.024 71.5866 273.23 71.6194C272.157 70.9799 272.178 70.3241 271.393 69.3402L272.921 69.8649C271.228 69.1271 271.6 67.2742 272.425 65.9788C272.178 66.1264 272.012 66.3887 271.723 66.2411C271.331 65.5032 272.322 64.9129 273.127 65.2409C271.847 64.5522 274.036 62.4533 272.384 61.5023L264.622 57.1406C264.808 57.3046 264.973 57.485 265.055 57.6817C263.755 58.1245 263.92 58.354 262.661 57.6489C263.383 58.354 264.416 58.0425 264.519 59.1247C263.838 58.7148 262.331 58.6492 262.227 59.6822C263.672 62.2238 267.471 63.8307 269.494 66.1591C268.482 66.2739 268.875 68.1596 268.668 69.0779C267.574 68.7663 267.223 68.094 266.975 67.4053C266.934 67.8481 266.934 68.6187 266.913 69.1762L269.04 69.3238L268.998 69.3402Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M265.325 63.4883C265.325 63.4883 265.2 63.6203 265.138 63.6863C265.221 63.6533 265.283 63.5873 265.325 63.4883Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.955 67.1934C266.955 67.1934 266.893 67.1934 266.852 67.1934L266.935 67.4079C266.935 67.4079 266.935 67.2429 266.955 67.1934Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.265 56.9636C259.976 56.8157 259.894 56.7006 259.584 56.5527C259.687 56.6513 259.77 56.7664 259.853 56.8814C259.997 56.98 260.142 57.0293 260.245 56.9636H260.265Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M262.021 56.4033L262.434 56.469C262.434 56.469 262.496 56.354 262.516 56.3047C262.289 56.3047 262.103 56.3047 262.021 56.4033Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.514 79.459L260.742 79.69C260.721 79.5415 260.618 79.4755 260.514 79.459Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M267.451 72.2431C267.285 71.3576 265.944 72.1939 265.84 70.9477L265.779 71.3248C265.077 70.4558 265.304 68.8488 265.2 67.783C265.799 67.8814 265.902 67.1107 266.831 67.2091C266.584 66.4876 266.336 65.7661 265.345 65.4218C265.634 64.9627 264.767 64.2904 265.118 63.7165C264.561 63.9788 263.177 62.9458 263.921 64.3396C263.838 64.2248 263.714 64.3068 263.632 64.192C262.888 65.1266 264.251 65.4382 264.292 66.2253C263.755 66.7008 263.363 65.4874 263.157 65.9465C263.714 66.8976 262.641 69.0292 264.726 68.8816C264.911 69.5867 264.457 69.7015 264.086 69.9147C266.357 70.9477 263.404 74.096 266.233 73.9812C266.088 73.5713 266.109 72.9154 265.469 72.3415L267.43 72.2759L267.451 72.2431Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.471 58.4551C260.471 58.4551 260.471 58.5865 260.451 58.6358C260.451 58.5865 260.471 58.5208 260.471 58.4551Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.379 47.0898L270.258 47.4342C270.754 49.533 270.258 50.3037 270.403 52.1402C270.155 52.2878 269.99 52.0582 269.886 51.9598C270.155 53.2552 269.825 55.1901 270.712 56.1084C270.712 56.5183 270.155 57.6169 269.597 57.2234C269.763 57.4201 269.928 57.6497 269.886 57.8793C269.226 57.9613 269.68 57.371 269.123 57.371C269.081 57.5513 268.958 57.6333 269.164 57.6661C268.586 57.371 266.893 58.0432 266.893 56.6003C268.441 56.01 267.1 57.5841 268.834 57.2234C268.834 56.7479 268.173 56.8135 267.946 56.7807C267.946 56.174 268.4 56.174 268.792 56.2068C268.256 55.9936 268.978 55.2065 268.152 54.9114C267.987 53.7308 269.453 54.9442 269.412 54.1735L267.657 53.7635L267.946 52.4682C267.265 50.6317 264.932 52.7961 263.879 50.6809C264.808 50.9432 266.315 50.0578 266.645 49.0739C266.728 49.6642 267.905 50.73 267.409 51.5007C268.751 50.4021 267.616 52.9765 269.164 52.3862C268.4 51.8779 268.276 50.9924 268.648 50.2873L268.813 50.5169C268.978 49.779 267.12 49.2543 267.801 48.2377C267.74 47.7293 268.235 47.8277 268.648 47.9097C268.379 47.4834 268.029 47.1062 268.421 47.1062L268.379 47.0898ZM268.772 48.1885L268.627 48.8608C268.916 48.6968 268.896 48.4508 268.772 48.1885Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.203 26.2168C242.265 26.299 242.306 26.3811 242.368 26.4797C242.327 26.3647 242.265 26.2825 242.203 26.2168Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M247.178 25.6914C247.22 25.7904 247.282 25.8729 247.344 25.9389L247.178 25.6914Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.812 39.4492L244.08 39.9903C244.039 39.728 243.956 39.564 243.812 39.4492Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.021 27.1025C246.021 27.1025 246.187 27.1685 246.249 27.185C246.187 27.1025 246.083 27.0695 246.021 27.1025Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.521 39.1866L266.955 39.351C266.769 39.2195 266.624 39.1702 266.521 39.1866Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.583 35.1191C266.583 35.1191 266.645 35.1191 266.686 35.1356C266.645 35.1356 266.624 35.1356 266.583 35.1191Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.37 34.0879C242.37 34.0879 242.266 34.0879 242.224 34.1209C242.286 34.2034 242.349 34.1704 242.37 34.0879Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.666 35.1367C266.79 35.1696 266.914 35.2353 267.058 35.3339C266.893 35.2353 266.769 35.1696 266.666 35.1367Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.491 52.6998C258.821 52.667 259.482 51.634 258.615 51.6668L258.367 52.585L258.491 52.6998Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.139 53.3235C258.201 53.4054 258.263 53.5038 258.325 53.5858L258.077 53.4546L257.829 54.1597C257.891 54.2417 257.953 54.3401 257.974 54.4385C257.933 54.3893 257.85 54.3565 257.747 54.3401L257.644 54.5697C258.573 55.1108 259.295 56.4881 259.832 56.8817C260.245 57.4064 260.493 58.0459 260.431 58.4558C260.431 58.0787 260.245 57.5868 259.729 57.7507C259.233 58.5378 257.706 58.9477 259.089 60.2431L259.027 59.4724L261.071 61.1614C260.286 61.8009 260.038 60.3251 259.336 60.0955C260.369 61.4237 257.85 62.6371 259.564 63.211C258.552 63.3258 256.88 63.5226 257.024 64.4244C258.139 63.7521 257.788 64.9327 258.986 64.3752C259.584 64.6704 258.676 65.3755 259.419 65.4083L259.006 65.3427C257.479 66.9168 260.018 67.3432 260.864 67.9662C261.36 69.77 260.74 70.639 261.029 72.1148C260.369 72.1968 258.531 72.6723 258.635 73.2626C259.564 73.5085 260.08 74.8367 261.256 74.9187C261.669 73.8365 260.224 74.0824 259.894 73.4593C261.091 72.8854 261.112 73.361 261.793 72.6067C261.36 73.2134 262.598 75.2303 261.504 75.9025L261.318 75.6894C260.678 76.7388 257.809 77.0668 259.667 78.6901L260.431 79.4772C260.307 79.4444 260.183 79.4444 260.059 79.428C260.018 80.7725 258.676 80.461 259.811 81.8876C259.729 81.7728 259.605 81.8548 259.502 81.74C258.903 82.609 260.307 83.3961 260.616 84.0192C259.667 84.4619 259.646 83.97 258.924 83.7733C258.676 85.2654 260.472 86.774 261.731 87.6266L261.236 88.6105C260.782 88.0693 259.708 87.4299 259.13 87.643C259.378 88.1513 259.811 88.0366 259.687 88.7744C259.047 88.6761 258.449 88.3973 257.644 88.0857C256.735 89.6763 259.873 88.3153 258.057 89.4795C258.077 89.955 259.027 90.1846 259.77 90.201L258.862 91.1192C259.832 91.1684 259.976 92.2343 260.183 92.923C260.596 92.9885 261.153 92.2999 260.761 92.0539C261.525 92.0539 261.938 92.7918 261.958 93.2673C259.956 93.5625 262.557 96.3992 260.142 95.9729C261.009 98.1045 261.525 101.122 262.495 102.499C261.979 103.007 262.061 103.975 261.05 103.45C261.215 105.188 263.383 105.942 263.032 107.713C262.805 107.877 262.929 106.943 262.268 107.041C263.197 108.107 261.649 109.156 262.392 110.862C262.33 110.566 261.896 110.517 261.69 110.484C262.02 110.435 262.454 111.157 262.846 111.583C262.701 111.845 262.557 111.255 262.33 111.419C261.731 114.879 264.786 117.24 265.158 120.602C265.055 119.651 263.692 119.388 263.135 119.421L263.238 120.356C263.94 120.667 264.043 121.372 264.621 121.913C264.374 122.012 264.146 122.323 263.796 122.045C262.701 124.012 266.603 124.734 266.211 127.062L263.176 124.537L262.33 125.308L260.947 124.193C260.307 124.98 262.082 125.472 261.091 125.636C260.782 125.504 260.823 125.127 260.286 125.16C259.976 125.898 260.74 125.882 261.009 126.39C258.779 125.193 258.449 122.471 257.747 121.061C257.561 120.848 258.263 121.208 258.469 121.241C258.325 120.651 258.903 120.241 258.469 119.519C257.54 119.126 257.871 119.929 257.829 120.306C257.066 120.306 257.086 120.126 256.921 119.733C257.912 119.569 256.983 117.437 258.118 116.814C257.54 114.633 255.559 117.371 255.744 115.19L256.818 114.453C255.786 113.272 254.815 111.714 254.898 110.288L254.96 110.583C255.476 110.747 255.744 110.402 255.972 110.239C256.343 109.14 254.836 108.271 255.91 107.549C254.547 106.418 253.412 104.45 252.648 103.089C254.134 102.614 254.114 104.827 255.125 105.336L254.981 104.073C255.084 104.86 255.683 105.123 256.612 105.532C256.756 104.401 255.414 104.122 254.919 103.106C255.332 103.155 255.579 103.007 255.538 102.515L254.527 102.45C254.527 102.45 254.671 102.384 254.733 102.22L253.928 100.384C253.536 100.81 252.669 100.892 252.689 101.368C253.267 101.154 253.412 101.564 253.453 102.04C252.751 101.663 252.937 102.548 252.4 102.581C252.338 101.597 252.07 100.417 251.74 99.7934L252.648 99.5311C252.792 98.5964 252.173 97.6454 252.38 96.9895L252.896 97.1535C253.061 96.022 252.359 94.9562 253.164 93.9232C252.029 92.9885 251.038 91.7915 249.861 91.0373C248.622 90.6601 251.12 88.0366 249.345 87.0035C249.469 86.9215 250.315 87.725 250.79 88.0857C250.914 87.3315 249.366 86.8068 250.625 86.5116C250.336 88.2005 251.616 86.364 252.049 87.1019C251.967 86.3148 251.657 85.5114 251.182 85.1506C251.306 86.4132 249.407 84.7899 250.067 86.0361C248.932 85.1014 248.395 83.7569 248.705 82.5435C249.242 82.5435 249.489 82.3795 249.696 81.9204L248.891 81.5924C248.994 81.0349 249.902 82.6254 250.109 81.494C248.684 80.4118 250.645 78.0014 248.106 77.6079C249.035 76.6896 249.221 79.2312 250.336 77.8538C251.285 78.5753 250.336 79.6903 251.595 79.8871C251.182 79.1492 252.627 79.5591 252.607 79.0836L251.781 78.2802L251.74 78.4605C250.48 77.0996 250.893 74.8531 250.563 73.0494C249.2 71.5737 247.322 70.5898 247.384 68.7533C248.148 69.2616 248.024 67.212 249.427 68.3106C250.026 67.4415 249.221 66.6381 248.684 66.6381C248.54 67.3923 248.519 66.9004 248.292 67.5399C247.611 67.13 247.59 66.1625 248.003 65.7362C247.962 65.9166 248.086 65.851 248.292 65.8838C248.684 64.9819 247.611 65.4739 247.301 64.8344C248.21 64.6048 247.487 63.4078 247.92 62.8011L246.558 61.9812C247.446 62.424 246.826 61.1614 247.631 60.9974C246.992 60.4071 245.877 59.9152 246.083 58.9805C246.558 59.3577 246.703 58.1115 247.59 58.0787C248.375 56.4717 245.113 55.4879 246.31 53.9465C246.517 53.9957 247.115 54.2745 247.322 53.8318C247.074 53.4874 247.157 52.8807 247.033 52.5036C246.971 52.3232 246.868 52.2084 246.661 52.2084C245.774 51.5853 244.886 51.2738 244.122 50.0276C243.11 50.1424 243.544 51.1918 243.874 51.6509L244.886 52.0281C243.379 52.438 245.196 53.1595 244.679 53.4546C242.883 52.7332 243.234 50.5523 242.099 49.2733C240.716 50.0932 240.551 51.8313 240.778 53.3399L241.356 52.6676L241.397 53.4546L242.45 52.6676C242.285 53.4218 242.574 54.0613 242.553 54.7336C242.512 53.9466 243.895 53.6022 243.689 54.0613C242.739 54.9632 244.37 54.9632 244.328 55.6355C244.411 55.2583 244.411 54.7664 244.989 55.078C243.833 56.4389 244.617 56.7669 243.379 58.0131C245.051 57.8163 243.606 59.5216 244.968 59.6692L245.092 59.1117L246.145 60.2759C244.824 61.4073 244.7 59.3413 243.812 61.0302C243.73 62.5715 245.485 62.4895 245.67 63.6865C244.659 63.3094 243.75 62.3748 243.73 61.4073L243.276 62.014C242.677 61.7189 242.739 60.3579 242.76 59.6856C243.936 60.7678 243.09 59.1609 243.978 58.6198C243.007 58.5542 243.193 59.2593 242.388 58.4394C242.429 59.2265 242.512 59.3413 242.202 60.3579C242.553 58.1607 238.796 58.4722 239.539 56.5537C239.993 57.4228 240.922 56.2094 241.376 56.0946C241.253 55.6847 240.984 54.8484 240.736 54.5041L239.353 54.8484C238.713 53.7498 241.645 53.3071 240.179 52.0445C239.333 51.8969 239.931 53.1759 239.766 52.9463C238.837 51.2082 241.046 50.5359 242.058 48.9618C241.645 48.8798 240.757 48.9126 240.014 48.3879C240.86 48.5518 241.273 48.1419 241.892 48.7322C242.223 48.2075 241.603 47.6008 241.273 47.1417C240.798 48.2403 240.076 46.7153 239.56 46.5186C239.684 45.9611 240.406 46.6825 240.633 47.0269C240.84 46.5678 242.078 46.0266 240.819 45.7807C241.707 45.7479 243.152 47.0105 243.4 47.8304L243.523 47.2728C243.978 47.65 243.854 47.732 243.73 48.2895C244.411 47.732 245.154 47.7812 245.774 47.8959C245.65 47.9615 245.567 47.8631 245.443 47.9287C245.216 48.3879 245.485 48.7158 245.939 48.6174C247.136 48.9946 246.661 47.9779 247.239 47.6664L246.992 46.9941L243.172 44.7149C242.718 43.731 243.606 43.2555 244.184 42.5176L243.172 42.3209C243.255 41.4518 243.565 40.6319 244.865 41.173C244.535 41.2058 244.617 41.3206 244.556 41.5174C244.7 41.5338 244.783 41.583 244.865 41.6322L245.051 41.665C244.7 40.7467 244.494 40.1564 244.452 40.1072C245.939 41.665 246.29 40.1728 248.106 40.4188L247.487 38.8446C246.93 39.8121 246.599 38.861 246.352 38.5331C247.363 38.4347 246.31 37.2541 246.455 36.6966L246.661 36.7294C247.012 36.2047 246.909 35.3028 246.641 34.6633C246.31 34.6961 244.659 33.8762 243.647 33.4827C243.276 34.5977 242.863 33.9418 242.243 34.0238C242.305 33.909 242.305 33.6959 242.182 33.6795C241.892 33.5155 241.789 33.8926 241.459 33.9254C241.934 35.106 242.058 36.3194 243.482 36.795C244.122 36.4342 242.863 36.1883 243.296 35.7783C244.246 36.3522 244.06 37.1065 244.039 38.0904L243.193 38.4183L243.668 39.4021C243.214 38.9922 242.326 39.2546 242.14 38.2215C241.335 38.3527 242.347 39.2382 242.078 39.8777L243.214 40.1892C242.594 40.0744 242.491 41.419 241.624 40.468L240.675 38.9102L239.911 39.3529L239.663 38.0248L240.241 38.3363C239.436 36.2047 242.45 37.6968 241.129 35.5652C239.766 34.8929 239.622 34.1714 239.952 32.8596C240.262 33.8107 240.902 32.958 241.707 33.3187C242.285 32.3513 241.149 32.0233 240.633 31.515C241.356 31.2691 241.934 31.0887 241.831 31.9578C243.338 32.0725 241.562 30.8263 243.11 30.7444C243.069 27.8912 238.094 28.4323 240.055 25.0873L240.675 25.2185C239.931 23.0868 240.695 21.857 240.241 19.8893L241.851 18.348C242.099 18.6923 243.255 19.6434 244.039 19.217C242.429 19.9549 242.966 20.7584 242.099 21.5619C242.512 21.6438 242.821 21.3159 243.09 21.1847C243.069 21.6766 242.347 21.9062 242.615 22.5621C242.945 22.5293 243.358 21.8242 243.544 22.3653L242.532 23.2344C242.987 24.415 244.886 23.8247 244.411 25.2021C243.523 24.9397 242.264 24.415 242.058 23.8739C241.851 24.5134 241.542 23.0212 241.005 23.5951C242.305 24.5134 241.253 24.9561 242.058 26.1695C241.872 26.0219 241.624 25.9891 241.542 25.694L240.984 27.4485C241.748 27.0222 241.831 28.9079 242.966 28.7439C243.441 26.8746 242.739 27.4157 243.4 25.284C243.647 25.8907 244.803 26.6778 245.877 27.0386C245.835 27.055 245.794 27.0878 245.774 27.1533C246.888 27.4813 247.198 27.1533 249.159 27.1533C247.755 26.1859 248.911 25.53 248.127 24.3822C247.053 24.1526 246.744 25.0381 247.012 25.612L246.31 24.5954L246.806 24.7921L247.219 22.2342C247.26 22.7261 247.879 22.89 248.354 23.1524C248.395 22.8245 248.684 22.4965 249.015 22.1522C247.982 22.2178 247.26 22.1522 247.281 21.8406C247.549 20.2009 248.499 19.299 249.675 18.6923C249.655 18.6267 249.634 18.5612 249.613 18.4956C248.56 18.7579 247.735 17.2986 246.661 16.7738C247.755 16.8066 247.322 15.9376 247.9 15.4621C246.661 15.1833 244.927 15.4949 243.895 16.0688C245.01 17.2002 245.03 16.7083 246.641 17.2658L247.693 19.0695L246.702 18.6595C246.248 19.545 247.549 20.414 246.248 20.3321C245.402 19.8565 245.939 19.0859 245.072 18.5939L244.597 19.1843C243.338 18.1184 245.835 18.6595 244.968 17.3969C243.854 17.8397 244.886 17.2822 244.163 16.7247C243.379 17.151 244.432 18.9547 242.574 18.5448C241.769 17.8725 244.803 16.3639 242.966 15.4621L243.172 15.5113C243.441 14.2323 242.367 13.7567 241.727 13.2648C242.347 12.7237 241.521 11.953 241.48 11.3627H242.016L241.81 10.5429C242.801 10.9528 241.748 11.5267 241.872 12.2482L242.883 12.1826C241.665 12.9861 243.461 13.5764 244.308 14.2323C243.461 13.2812 244.638 11.6087 242.677 11.3463L243.73 10.7888L243.379 10.5101C244.163 10.1001 245.34 10.5593 245.546 11.3955C245.278 11.5267 245.154 11.6087 244.948 11.5595C245.381 11.953 246.166 12.3302 245.897 13.2484L245.381 12.7401C245.257 13.9043 245.65 14.9701 246.641 15.3801C247.074 13.7076 247.239 12.0678 247.239 10.4773C244.968 9.96896 243.709 9.39506 241.583 9.1163C241.232 8.05048 240.984 6.59112 241.789 5.68927L242.202 5.78764C242.429 5.34492 242.326 4.91859 242.099 4.57425C242.677 4.11512 243.214 4.91859 243.523 4.60704L242.863 3.06569C243.812 3.18047 243.792 4.45946 243.833 5.06617C243.75 4.95138 243.606 4.72182 243.482 4.78741C243.069 5.49249 244.659 6.83708 243.255 7.11583C243.482 7.46017 242.243 6.39435 242.14 7.55856C241.583 8.32923 242.821 8.60799 243.255 8.70637C243.792 8.72277 244.039 7.49297 244.679 7.9357C244.638 7.32899 243.936 7.06663 244.494 6.31236C244.535 6.91906 245.629 7.75532 244.762 8.05048C245.732 9.26388 248.313 9.1327 248.457 8.59158C247.652 8.70636 247.549 6.41075 246.434 7.9357C245.423 7.21421 245.464 5.93522 244.845 5.00057L245.051 5.04976L244.824 3.90196C245.113 4.06593 245.34 4.42667 245.877 4.44307L244.473 2.83613C245.423 3.75438 245.175 2.31141 245.629 1.91788C244.803 1.72111 244.225 1.09802 243.709 1.67192C243.069 2.31142 244.143 2.06546 244.184 2.67216L242.904 1.7867L243.028 1.72111L241.975 1.18C242.12 0.0157953 244.452 1.75391 243.482 0.228957L241.996 0.376533C242.305 -1.34518 244.06 -3.50963 243.441 -4.75583C244.267 -4.39509 245.588 -4.19832 246.413 -4.64105C246.124 -4.13273 246.124 -3.0669 246.228 -2.31262C245.959 -2.18145 244.535 -3.31286 244.906 -4.11633C242.491 -3.78839 246.248 -2.01748 243.812 -1.98468C242.863 0.0813777 246.083 -0.361345 244.556 1.37677C245.65 1.42596 245.072 1.90148 246.021 2.01626C247.817 1.54074 246.083 -0.34495 246.764 -1.47636C246.847 -1.36158 246.992 -1.13202 247.198 -1.08283C247.549 -1.88629 247.342 -2.24704 246.95 -2.82094L246.826 -2.75535C245.815 -3.78838 247.673 -3.34566 248.168 -3.91957C248.024 -4.14913 248.375 -4.96899 247.57 -4.85421L248.664 -5.88724H247.446C247.404 -6.47754 248.209 -6.59232 247.508 -7.14983L246.413 -7.21542L245.959 -5.73966C245.65 -6.51034 244.927 -5.98562 244.741 -6.82189C245.877 -5.85444 245.381 -7.46138 246.393 -7.51058L245.815 -8.15007L246.104 -7.9861C246.682 -8.44522 245.732 -8.5764 245.897 -9.13391C245.257 -8.49441 244.473 -8.08448 245.196 -7.21542C244.617 -7.85492 243.998 -9.10111 243.978 -9.39626C243.565 -10.0522 244.432 -10.4785 244.576 -11.0852C244.927 -9.90458 247.9 -11.3639 246.971 -9.06832C246.764 -9.11751 246.826 -9.29788 246.971 -9.37987C245.546 -9.11751 246.971 -7.9861 247.487 -7.46139C248.292 -7.55977 248.457 -7.03505 248.953 -7.90411C248.437 -7.62535 247.198 -8.72397 247.92 -9.54384L249.613 -9.33068L249.902 -10.5605L249.985 -10.4457C251.12 -10.872 249.861 -11.7739 250.563 -12.5937C249.985 -13.2332 250.645 -15.5617 248.788 -14.627C249.902 -15.3485 248.581 -16.07 248.416 -16.9062L247.652 -15.906C246.517 -17.185 247.281 -16.7915 245.402 -17.8737C245.877 -17.9557 246.269 -18.1524 246.744 -17.9393C246.93 -19.579 247.611 -21.9074 246.29 -22.9568C246.455 -24.1211 248.478 -24.1866 247.838 -25.8592C247.631 -26.2199 246.228 -25.6788 246.806 -26.7282C246.93 -26.7938 247.982 -25.6296 247.941 -26.8266C246.703 -27.7613 248.829 -28.7943 247.797 -29.9749C248.313 -30.5324 248.23 -31.5654 249.242 -31.2867C248.932 -30.3684 249.035 -29.0402 249.51 -28.8107C248.891 -28.9747 248.849 -28.1876 248.416 -28.8927C247.508 -27.5317 248.994 -27.9416 248.333 -26.7118C248.746 -26.597 249.531 -27.3021 249.18 -27.5809C250.604 -27.5153 249.655 -25.0557 251.451 -26.0887C251.678 -27.4169 248.767 -27.9908 250.356 -29.073C251.182 -28.5647 250.398 -27.8596 251.822 -27.1873L252.483 -28.1056L251.512 -28.8599L251.719 -28.8107C253.164 -30.434 250.377 -30.4504 249.82 -32.0082C248.746 -31.1883 247.384 -32.3525 246.702 -31.7294C246.62 -32.7624 246.888 -33.4839 248.313 -33.4183C249.283 -31.4506 249.799 -33.2216 251.038 -31.3851C251.574 -31.6474 253.081 -30.8439 253.329 -31.877C252.441 -33.1068 252.111 -31.5982 251.76 -32.7952C251.884 -32.8608 252.029 -32.9264 252.235 -32.8608C251.554 -33.4347 252.565 -33.4675 251.822 -34.1726L252.091 -34.0086C253.04 -34.7629 251.203 -34.9433 252.214 -35.5828C251.141 -35.3696 251.389 -36.1075 250.79 -36.5666C250.315 -35.8943 248.767 -35.5992 248.726 -34.2054C249.551 -33.9922 250.006 -34.0578 250.356 -33.4675V-34.3694C250.46 -34.1726 250.666 -34.0086 250.811 -33.8119L250.295 -32.9756C249.799 -34.107 248.87 -33.6643 248.044 -34.1726C248.519 -35.1564 247.9 -35.0089 248.23 -35.632C249.448 -35.5008 250.501 -37.4357 251.409 -38.5343C251.347 -38.3539 251.347 -38.1244 251.306 -38.0096C251.987 -37.1241 252.38 -38.5179 252.73 -38.5343L252.173 -39.1902C252.235 -39.0754 252.524 -38.895 252.71 -39.141C252.565 -39.9773 251.347 -40.01 251.203 -40.8627C251.884 -40.8791 252.834 -40.1084 253.247 -40.6003C253.845 -40.7315 255.476 -41.1907 254.981 -42.3385C254.733 -42.4368 254.609 -42.732 254.547 -43.0599C254.568 -43.0108 254.588 -42.9452 254.65 -42.9288L255.476 -43.6011C256.55 -42.896 254.795 -42.3877 255.889 -41.6826L256.983 -41.5514C256.942 -41.0595 257.355 -40.3872 257.871 -40.0428C258.139 -40.7643 257.871 -40.9447 257.706 -41.781C258.408 -41.8465 258.862 -41.2398 258.924 -41.1415L258.325 -41.3054C257.313 -40.3872 259.233 -39.7641 258.903 -38.5671C258.841 -38.3867 258.779 -38.5015 258.573 -38.5671C259.522 -37.5177 257.974 -36.6322 259.275 -35.5828L258.738 -35.9271C259.13 -35.2384 260.08 -33.8938 260.988 -32.5657L261.422 -32.5329C261.69 -32.6641 261.628 -32.1885 261.422 -31.9426C261.876 -31.2703 262.289 -30.6308 262.619 -30.1061C262.887 -30.2536 263.135 -30.4504 263.218 -30.68C262.743 -30.9095 263.259 -32.0574 262.123 -31.959C262.867 -32.4509 261.958 -33.3855 262.433 -33.7627C261.628 -33.0904 261.422 -34.3366 260.802 -34.5006C261.545 -34.6973 260.864 -35.5828 261.814 -35.4188C262.082 -35.55 261.132 -35.1073 261.69 -34.7629C262.516 -33.943 262.619 -36.1075 263.383 -35.1073C262.825 -36.3534 263.279 -37.9112 262.516 -39.2066L262.061 -38.5343C262.247 -39.0754 262.165 -40.3872 262.639 -40.4528C262.701 -40.0428 262.64 -39.5509 262.784 -39.0262C263.857 -38.9278 262.908 -40.2888 263.589 -40.3052L261.938 -41.9449L261.814 -41.289C261.194 -41.7482 262.144 -43.0927 262.412 -44.1094C263.837 -43.4207 262.247 -42.5516 262.743 -41.4202C263.218 -40.6003 264.229 -41.8138 264.497 -41.0431C264.869 -41.2071 264.869 -41.699 264.518 -41.9613L264.828 -42.2401C266.108 -41.4858 265.653 -40.01 266.727 -38.9442C266.582 -39.0426 266.438 -39.1246 266.293 -39.1574C265.695 -38.4359 265.633 -37.6488 265.922 -36.8946C266.397 -37.2553 266.108 -37.4357 265.984 -37.6652C266.314 -37.6652 266.397 -36.9601 266.727 -36.665C267.181 -37.3373 267.532 -36.747 267.8 -37.1733C268.069 -36.6978 267.945 -36.3534 267.759 -35.8123C267.222 -35.5664 267.078 -36.0911 266.417 -36.0747C266.768 -35.4844 265.137 -35.3204 265.819 -34.4514C266.211 -35.5336 267.243 -34.0742 267.656 -33.6643L267.718 -33.8447C268.461 -33.4511 268.461 -33.156 267.718 -32.9592C267.449 -33.4347 267.718 -33.8447 266.892 -33.7627C266.892 -33.4675 266.892 -33.1724 267.099 -32.8116L266.562 -33.156V-31.6638C267.264 -31.3851 268.213 -30.9423 269.225 -30.68C268.544 -30.3684 269.039 -29.8437 269.266 -29.483L268.977 -29.6633C268.317 -29.0402 268.709 -27.5645 269.307 -27.4169C268.709 -26.9742 265.612 -30.9259 265.922 -27.5973C265.819 -26.3511 267.842 -26.7118 268.482 -25.9575C268.482 -25.9575 268.275 -26.0067 268.151 -25.9575C267.966 -25.4164 268.709 -25.3181 268.998 -24.8589C269.328 -25.1705 269.369 -25.646 269.101 -25.81C269.927 -25.5968 268.936 -24.6786 269.555 -24.2194C268.317 -24.8261 268.977 -23.1864 268.358 -23.6455C267.449 -22.5961 268.358 -21.3827 269.266 -20.776C267.594 -20.1201 269.369 -19.4806 268.544 -18.3164C268.606 -18.4968 268.378 -18.8411 268.585 -19.0871C267.615 -19.825 267.966 -17.8737 267.099 -18.9723C267.243 -18.7427 267.635 -18.9231 267.491 -19.1691C267.408 -19.579 266.995 -19.9725 266.521 -19.9069L265.55 -18.9723L265.323 -19.333L263.981 -17.9065C264.188 -17.8573 264.456 -17.9885 264.58 -18.054C263.919 -16.3487 264.477 -14.3483 264.208 -12.8561C267.078 -12.4462 265.179 -9.08472 266.892 -7.80573C266.087 -8.16647 264.642 -8.39603 264.023 -8.21566C263.919 -8.49442 262.784 -9.10112 263.073 -9.70782C263.548 -9.7898 264.126 -10.5277 264.621 -10.0194C264.415 -11.7411 263.341 -9.83899 262.309 -10.3801C262.454 -8.47802 264.085 -7.29741 264.704 -6.08401H264.353L264.952 -5.14937C265.179 -5.87085 266.81 -5.78886 266.19 -4.85421L266.108 -4.96899C265.385 -4.44428 266.149 -3.29646 266.004 -2.4602L266.913 -1.8535C266.768 -1.01724 264.993 -1.03363 263.94 -0.787674C263.754 0.540508 265.158 1.34398 265.963 2.31142C265.158 2.72135 264.931 4.70542 264.023 3.6232C264.663 4.8366 268.771 4.68902 266.438 6.6895L265.715 6.14839C265.798 8.11607 267.181 10.9364 266.376 11.8219C263.734 11.0512 263.589 14.2159 260.967 14.5274C261.566 14.4454 261.752 15.1833 262.061 15.2981C261.752 15.4621 261.442 15.7244 261.979 16.0196C262.516 15.2653 264.683 16.5935 263.651 15.1177C265.426 15.8884 266.81 16.8558 266.686 18.4792L265.592 18.4464L265.943 17.1674C265.137 17.2822 265.199 16.6263 264.848 16.3475C264.188 18.7251 262.309 16.0032 262.412 18.4464C263.114 18.6923 262.825 18.5284 263.094 19.1679C263.052 18.8727 262.309 18.8071 262.289 19.2826L263.156 19.7582C261.318 20.5944 262 18.3316 260.72 19.0531C259.873 18.102 259.46 16.4459 258.057 16.741C257.52 18.2824 260.637 18.1676 259.976 19.7746L259.378 19.9385C259.77 20.5124 260.72 20.6108 261.298 20.9224C260.967 20.9552 260.699 21.0863 260.596 21.4471C261.979 22.4145 262.247 23.054 263.754 23.9559C262.639 21.5947 264.848 21.9554 263.878 19.5286C264.332 19.9057 264.621 21.6274 266.128 21.7422L265.034 21.7094C265.592 22.4965 266.128 23.2836 265.757 24.2838L265.158 23.6771C265.881 24.9889 263.465 25.8416 265.282 26.891C265.385 26.5302 265.344 26.2351 265.179 26.0055C265.653 26.6778 265.55 27.5305 265.364 28.252L267.16 29.7769C266.624 29.7769 266.582 30.728 265.715 30.2524C264.89 31.3511 266.5 31.8594 266.768 32.4825C265.612 33.5975 266.252 31.515 264.745 31.4002C264.25 32.9416 264.704 34.5813 265.674 35.434C265.901 35.1224 266.087 34.9585 266.355 34.9749C266.004 35.0241 266.108 35.6472 266.087 35.9915L266.789 36.2211C266.314 36.795 265.901 36.713 265.364 36.2211C265.22 36.7786 266.603 37.4181 265.592 37.992C264.725 37.0573 265.468 35.8603 264.931 35.3684C265.612 37.3361 262.784 37.3525 263.734 39.8449C263.403 39.8777 262.722 39.4677 262.722 39.9432C263.011 41.0583 264.188 40.222 264.972 40.5663C264.518 39.7137 264.952 39.3037 265.819 38.8118L266.397 39.0414C266.108 39.0742 266.087 39.6153 265.798 39.7793L266.975 39.9105C265.674 39.8613 264.704 40.7303 265.199 41.4026C266.128 40.7139 266.087 40.8943 267.553 40.6975C268.956 41.6322 266.19 41.7797 267.697 42.8292C267.284 42.7472 266.954 41.8289 266.644 42.6324C266.603 43.3047 267.615 43.1899 267.945 43.6326C266.851 43.1407 266.066 43.2883 264.766 42.7472C264.601 41.5666 264.766 42.2717 264.291 41.1239L263.403 42.1077C263.218 41.1075 262.165 41.3862 261.752 41.3042C260.678 43.0259 263.403 42.5832 263.156 43.6818C263.899 44.2065 263.3 42.6488 264.085 43.4687C263.94 44.5017 264.786 43.6982 265.282 44.846L264.786 44.6657C264.146 45.0264 264.952 45.3708 265.055 45.7807C265.385 46.2234 268.791 45.2232 268.895 47.0597C268.585 46.9777 268.399 46.9449 268.275 46.9449L259.192 45.2724C259.233 47.1581 259.047 49.3225 258.511 51.5198C256.756 52.0609 257.004 49.9948 256.199 50.1424L256.529 49.1421C257.272 49.1913 256.839 51.2246 258.118 50.3063C257.52 48.5518 258.366 47.7484 256.797 46.0922C255.022 46.6334 257.148 48.2895 255.806 49.3881C255.91 48.929 255.703 48.5518 255.435 48.1747C255.228 49.1913 255.022 50.29 254.795 51.4706L255.228 51.7165C255.394 50.9294 255.538 50.3883 255.6 50.3227C255.476 51.3558 256.488 52.2248 257.788 52.2576L257.829 52.0773L258.242 52.438L258.015 53.1759L258.139 53.3235ZM263.3 120.339C263.176 120.29 263.011 120.257 262.825 120.224C263.011 120.241 263.135 120.192 263.3 120.339ZM253.432 33.04C253.247 34.4337 252.875 35.8275 252.73 37.1557C255.29 34.7289 257.231 33.0564 257.19 37.0573L257.375 37.3197C257.685 36.795 257.726 35.8931 257.54 35.0404C256.632 34.3518 253.288 32.1381 252.999 32.1709C252.276 32.4169 253.061 32.7776 252.854 33.2203L253.453 33.04H253.432ZM257.726 32.0561C258.015 31.2691 257.437 31.4494 256.942 31.3347L257.128 32.1545C257.251 32.0561 257.437 32.0069 257.726 32.0561ZM256.426 31.3675C256.426 31.4494 256.384 31.5314 256.322 31.5642L256.426 31.3675ZM255.93 46.6333C255.93 46.6333 255.93 46.5842 255.889 46.5514C255.848 46.7317 255.806 46.9285 255.786 47.1253C255.868 47.0433 255.93 46.9121 255.93 46.6333ZM257.169 45.0264L256.219 44.846C256.178 45.0264 256.157 45.1904 256.116 45.3708C256.55 45.3052 256.901 45.2396 257.148 45.01L257.169 45.0264ZM260.162 39.8777C259.027 39.5661 258.965 38.4839 257.664 38.4347C257.334 38.3691 257.21 38.5987 257.107 38.8446C257.086 39.1234 257.045 39.4349 257.004 39.7629C257.19 39.7629 257.375 39.8285 257.54 39.9432C257.706 39.6317 258.015 39.4021 258.82 39.5333C257.086 40.3696 260.08 40.2548 259.646 41.1403C260.575 41.419 260.534 40.1564 260.162 39.8941V39.8777ZM259.316 -27.958C259.44 -27.9744 259.729 -28.04 260.1 -28.1548L260.678 -27.4989C260.307 -26.4167 258.366 -25.6132 259.894 -24.531C259.46 -24.0883 258.573 -23.8751 257.85 -23.6783C257.912 -23.9079 258.015 -24.1211 258.139 -24.285C256.033 -27.2037 260.74 -25.6132 259.316 -27.958ZM256.054 -15.3157C255.972 -15.4305 255.765 -15.4797 255.765 -15.4797C257.974 -12.8889 258.531 -10.8392 258.346 -9.49465C259.316 -9.72421 260.121 -10.8884 260.554 -11.4295L261.587 -10.8884L260.72 -10.6097L261.649 -9.69142C262.392 -9.90458 262.289 -10.6097 262.867 -11.0688C262.66 -11.118 261.504 -12.6757 260.885 -13.1185L260.059 -11.9379C260.389 -12.2494 260.245 -13.8563 260.018 -14.5122C259.481 -14.545 258.573 -13.4956 259.729 -13.2988C258.924 -13.2004 259.006 -14.463 258.077 -13.7088C257.293 -14.6926 258.098 -16.1684 258.552 -16.857L259.894 -16.9226C260.472 -17.6605 258.304 -17.5129 259.151 -18.382C259.336 -17.2506 260.637 -18.4968 260.678 -17.6113C261.215 -17.8737 262.103 -17.5457 262.061 -18.4476C260.327 -19.2674 263.238 -19.333 261.731 -20.1037C262.33 -20.5464 262.763 -19.5462 263.073 -20.4644C262.227 -21.5631 261.545 -21.5303 260.265 -21.6615C259.811 -20.694 261.855 -20.4645 261.483 -19.6774L259.398 -21.3991C259.068 -21.1203 259.006 -20.9072 259.089 -20.7104C258.986 -21.0384 258.676 -21.3335 258.242 -21.5959C257.995 -21.7434 257.788 -21.8746 257.623 -22.0058C257.54 -21.0875 257.437 -20.2841 256.88 -20.1693L256.261 -20.3333C255.662 -20.0381 256.075 -19.4806 256.508 -19.2183C256.508 -18.3984 257.334 -17.5457 256.508 -17.3982L255.951 -17.7425C256.075 -16.7259 256.137 -16.6111 256.054 -15.3485V-15.3157ZM253.143 17.7085C255.455 17.1182 257.499 16.4787 257.169 13.6256L257.313 13.8551C258.8 12.445 255.497 11.0184 257.169 9.31307C258.015 10.1821 257.933 10.1329 259.894 11.1004L259.275 10.1821C260.513 10.4609 259.894 9.54263 259.976 8.87034L261.442 9.49344C261.009 9.88698 260.802 10.92 261.153 10.8872C260.988 10.6576 259.233 12.2154 259.625 13.0844C260.637 13.0189 260.286 11.1824 261.917 12.0186C261.256 11.2807 262.268 11.2152 261.917 10.4609C262.578 11.1988 263.3 10.6576 264.002 11.2152L263.692 9.98536C264.023 9.96896 264.374 11.7891 265.653 10.8052C265.137 10.2969 265.86 9.00152 264.766 8.95233H265.096C265.364 8.01768 263.568 8.4932 264.229 7.37819C263.672 7.34539 263.3 7.55856 263.403 7.96849C263.63 8.31283 264.374 8.37842 264.518 9.0999C263.651 9.39505 264.663 8.24725 263.197 8.70637C262.474 8.93593 263.754 10.5757 262.144 10.0345L262.412 9.1163C261.318 9.06711 261.401 8.41122 260.534 8.41122C260.142 7.83731 261.401 7.329 260.472 6.73869C259.77 6.47634 258.449 6.86987 259.047 5.93522C260.699 5.23014 260.431 3.0329 260.265 2.19664L259.605 1.45876C258.924 1.50795 259.626 2.83613 258.779 2.34421L258.573 1.21279L258.986 1.31118C259.089 0.934041 258.676 0.556903 258.449 0.196162C259.213 0.5733 258.862 1.36037 259.997 1.24559C260.245 0.720875 260.678 0.655286 260.472 0.163367C260.554 0.278148 260.658 0.360139 260.823 0.360139C261.36 -0.689289 259.605 -0.705692 259.254 -0.984447C257.829 -2.09946 257.829 0.0485884 256.673 -0.115385L256.199 -3.26367C256.55 -2.98492 256.901 -2.70616 257.375 -2.78815C257.933 -3.54242 258.263 -2.78815 258.263 -3.85398C256.715 -3.82118 257.355 -5.24774 256.508 -6.03482C257.169 -6.36276 257.293 -6.44475 257.272 -5.65768C258.284 -5.70687 257.953 -6.7727 258.057 -7.13344C257.809 -7.363 257.685 -7.72374 257.479 -7.9697C256.962 -7.67455 256.343 -7.83852 255.951 -8.52721L255.744 -8.5764C255.414 -7.47778 254.217 -5.78886 255.228 -5.06737L254.733 -5.28054C253.804 -4.01795 256.405 -2.42741 254.465 -1.90269C253.721 -1.98468 254.279 -1.65673 253.185 -1.70593L253.99 -0.738484L253.515 -0.951651L253.68 0.671685L253.474 0.622496C254.423 1.40957 255.187 2.03266 255.827 2.52458C256.302 2.52458 256.446 2.49179 256.777 2.75414C257.004 3.0165 257.024 3.21327 256.962 3.37724C256.818 3.77078 256.116 4.01673 255.827 4.49226L255.765 3.0001C254.96 2.85252 254.114 2.96731 253.536 3.68879C253.515 3.39364 252.896 3.24606 252.792 3.60681C252.999 3.656 253.267 4.60704 253.928 4.26269C254.176 5.68926 251.987 7.95209 253.432 10.1493C252.565 8.57519 252.318 11.3791 252.029 9.64102C250.707 10.8216 253.267 10.7068 253.019 11.9202C252.545 12.0186 253.102 11.248 252.194 10.9528C251.616 12.9861 254.155 14.429 253.742 16.3967L252.73 16.4623C252.854 16.8394 252.978 17.2494 253.123 17.6921L253.143 17.7085ZM254.341 21.6274C254.444 22.0046 254.547 22.3981 254.671 22.7917L254.712 22.6769L255.497 23.8247C255.91 23.1196 257.024 22.6769 257.52 23.6607C257.107 23.5787 256.591 23.8575 256.343 23.5131C255.724 24.169 255.125 25.5956 256.653 25.2349C255.228 23.9723 258.593 24.9561 257.54 23.9559C258.531 24.497 258.077 25.0217 258.511 25.5136C257.685 24.9889 256.632 25.6284 256.24 26.3991C256.488 26.7434 256.24 27.6617 256.653 28.2356C257.582 28.0388 258.118 28.5307 258.346 27.6125C258.593 27.9568 258.779 28.4815 258.304 29.0554C258.139 28.8259 258.036 28.4159 257.685 28.4487C256.839 28.8259 256.859 29.2686 256.508 29.5146C256.55 29.7113 256.612 29.9081 256.653 30.1049C256.735 30.0557 256.839 30.0065 256.962 29.9573L257.788 30.6132C257.355 29.7441 258.222 30.2196 258.758 30.2196C257.664 30.2032 258.614 30.7772 258.655 31.0723L259.811 30.4328C260.389 30.7444 258.986 31.5314 260.121 31.3675C260.575 30.0065 260.389 29.4818 260.038 28.252L259.151 28.7439C258.511 27.3501 260.678 27.8912 260.637 26.3335C259.811 25.6776 260.616 23.9887 258.986 23.9559C259.481 24.1526 260.451 23.0048 259.729 22.4637C258.242 21.857 258.077 20.0697 257.375 20.6108C257.355 21.0863 258.16 21.7586 257.19 22.1358L256.901 21.2011L256.075 21.8078C256.364 21.4963 255.579 21.5127 254.382 21.6438L254.341 21.6274Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M247.612 106.086L248.871 111.267C248.52 109.775 248.272 108.398 247.612 106.086Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.781 25.7571C258.677 25.642 258.595 25.5763 258.471 25.4941C258.554 25.5763 258.636 25.6585 258.781 25.7571Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.839 32.1704L240.303 31.6621L240.137 32.2852C240.344 32.1048 241.335 32.4328 240.819 32.154L240.839 32.1704Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.801 35.7113L242.554 34.875L242.657 35.7932L242.801 35.7113Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.552 39.5977L240.304 39.7452L240.8 40.4339L241.048 40.2863L240.552 39.5977Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.974 34.4458C267.119 33.8883 265.901 33.462 265.653 33.6096L265.715 34.6754C266.768 34.3966 265.674 34.3802 265.942 33.7571L266.974 34.4458Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M243.461 68.3253C242.739 68.1121 243.09 66.8987 243.75 66.8167C244.039 66.9643 244.349 67.6038 244.762 67.1775L242.986 66.292C243.998 64.9966 245.319 67.1775 245.959 67.7678C246.124 66.4888 244.968 66.1445 244.906 64.7835C244.762 65.1934 244.349 65.4558 243.998 65.6853C242.78 65.7673 243.255 64.4883 243.11 63.5865C242.615 64.1768 242.14 63.8652 241.645 63.4553C241.603 63.3733 241.521 63.3405 241.459 63.2913L241.273 63.1602V63.2749C241.149 63.2749 240.984 63.3077 240.757 63.3897C241.149 64.144 240.158 64.7507 240.158 65.2426C242.119 64.7015 240.695 66.8987 241.335 67.489L241.562 68.1941V68.4565C241.356 68.5221 241.087 68.4565 240.674 68.0629C241.087 68.3909 241.005 69.5223 241.624 69.3911L241.789 71.9655C241.706 72.0475 241.624 72.1295 241.479 72.1951C241.603 72.2771 241.706 72.2935 241.81 72.2771L242.697 83.4928C242.801 82.9353 243.234 82.427 243.399 81.8531C244.762 82.6402 243.564 80.9021 244.844 81.0988C245.319 81.4596 245.216 82.0335 244.927 82.3778C245.567 82.4762 246.083 81.9679 246.847 81.9843C247.549 80.5413 244.514 80.4593 244.886 79.0492C245.649 79.0656 246.331 79.4755 246.166 78.5736L246.351 78.8032C245.422 77.393 247.982 77.6062 245.856 76.7863H246.95C246.083 76.1468 246 74.8678 245.794 74.1628L246 74.1955C244.617 72.2279 245.649 73.0805 244.989 70.8341L246.31 71.8343C246.785 71.0309 245.402 70.9161 245.505 70.3422C245.711 70.375 246.516 70.211 246.723 70.7357L244.659 68.0465C243.812 67.4235 243.874 68.2105 243.399 68.3253H243.461Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M244.908 64.7837C244.948 64.6361 244.969 64.4722 244.908 64.2754C244.887 64.4722 244.887 64.6197 244.908 64.7837Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.802 84.2793L242.719 83.4922C242.678 83.7381 242.678 84.0005 242.802 84.2793Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M242.348 60.9138C241.811 61.4058 241.543 60.5695 241.13 60.5039L241.233 62.2092C241.646 62.1928 242.121 62.3404 242.513 62.3076L242.348 60.9138Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240.448 62.7329C240.737 62.7821 241.005 62.9625 241.273 63.1593L241.211 62.2246C240.902 62.2246 240.613 62.3558 240.448 62.7493V62.7329Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M262.804 61.9141L262.866 62.2092L263.196 62.6519L262.804 61.9141Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.195 66.6337C261.814 66.2566 261.298 65.6007 261.133 65.3711C261.195 66.1418 260.926 65.8138 261.195 66.6337Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M267.946 65.4551L268.359 66.1766L268.483 66.111L267.946 65.4551Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M247.549 89.8711L247.652 90.2326C247.652 90.0683 247.611 89.9533 247.549 89.8711Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.98 83.4093C244.907 85.2786 244.865 82.2615 243.358 82.9174L243.957 83.8849L243.524 83.8193L243.751 85.0163C244.453 84.7375 244.473 84.5407 245.237 84.5571C245.072 86.1805 244.391 85.1147 243.544 86.3445L243.833 88.1318L243.585 88.0006C243.606 88.1482 243.709 88.2138 243.833 88.2629L244.803 94.2972C245.505 95.363 246.104 93.6085 247.281 94.3627C247.157 93.0838 247.817 91.1489 246.31 91.1161C246.517 91.1489 246.95 91.2145 247.095 90.9357L245.794 90.2634L245.464 90.9849C244.164 90.3126 244.246 87.8858 244.969 87.4103C245.505 88.7549 246.93 87.9842 246.269 89.9355C246.641 89.8371 247.281 89.4436 247.528 89.8699C246.909 87.6726 247.425 85.6394 245.96 83.4093H245.98Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M248.747 105.66H248.601C248.601 105.66 248.727 105.693 248.747 105.66Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M248.849 104.908L247.281 103.924L247.57 105.613L248.622 105.662C248.354 105.531 247.755 104.973 248.148 104.711L248.87 104.908H248.849Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.269 102.727C246.785 103.579 248.003 103.448 248.519 102.923C249.159 103.694 247.26 103.432 248.602 103.891C249.469 103.809 248.87 102.858 248.685 102.645L246.29 102.71L246.269 102.727Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.249 96.2334L246.786 96.4629L246.868 95.8398L246.249 96.2334Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.786 96.4629L246.704 97.0696C247.075 97.004 247.426 96.9384 247.674 96.8236L246.766 96.4629H246.786Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.516 98.6602C246.454 98.9225 246.413 99.2013 246.413 99.5456L246.516 98.6602Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.765 97.9531L246.6 97.9859L246.517 98.6582C246.579 98.4123 246.662 98.1827 246.765 97.9531Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.702 97.0703C245.856 97.2179 244.989 97.3819 245.298 98.2345L246.599 97.9886L246.702 97.0703Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.954 70.9171L267.47 71.573L267.594 71.4911L267.078 70.8516L266.954 70.9171Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.418 74.834C266.583 74.9983 266.748 75.1134 266.913 75.2284C266.81 75.0641 266.666 74.9162 266.418 74.834Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M272.424 77.4749C271.619 78.2948 271.227 76.4419 270.938 77.9177C270.154 78.0816 269.08 77.4421 269.431 76.7371C270.195 76.7535 269.947 77.393 270.69 76.9338C269.782 76.5075 270.381 76.3107 269.245 76.5239C268.482 75.786 267.676 75.7368 266.913 75.2285C267.47 76.1468 266.438 78.1472 267.965 79.2787C269.369 79.869 271.206 79.3934 273.168 79.3114C273.622 79.1967 273.725 77.5077 272.424 77.4913V77.4749Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M274.304 76.1477C274.387 75.7869 274.304 75.6721 274.118 75.459C273.458 75.541 274.263 75.8525 274.304 76.1477Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.143 85.2638C260.432 85.313 260.824 85.9689 261.299 85.8049L260.865 84.8047C260.844 85.0506 260.494 85.149 260.143 85.2638Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.658 84.3613L260.844 84.805C260.844 84.69 260.802 84.5585 260.658 84.3613Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M259.957 85.3151L260.122 85.2656C260.122 85.2656 259.998 85.2656 259.957 85.3151Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.269 101.184C245.732 101.2 246.104 101.643 246.269 101.856C246.29 101.659 246.455 101.397 246.269 101.184Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M250.336 118.189L249.964 118.633C250.191 118.469 250.315 118.387 250.336 118.189Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M265.82 123.141C265.923 123.141 266.027 123.157 266.11 123.19C266.048 123.157 265.944 123.141 265.82 123.141Z\",\n    fill: \"#3F3834\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M266.107 123.189C266.582 123.419 266.004 124.321 266.727 124.567H266.52L266.995 125.075C266.871 124.55 266.809 123.452 266.107 123.206V123.189Z\",\n    fill: \"#3F3834\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M133.656 115.861C133.739 115.976 133.822 116.091 133.987 116.141C133.925 115.96 133.801 115.878 133.656 115.861Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M114.375 96.3314C114.479 96.3314 114.562 96.3314 114.645 96.3314C114.583 96.2984 114.479 96.2984 114.375 96.3314Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M132.604 120.928C132.604 120.928 132.77 120.961 132.874 120.961C132.77 120.944 132.687 120.928 132.604 120.928Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M113.241 26.1172C113.241 26.1172 113.324 26.1997 113.344 26.2492C113.344 26.1997 113.324 26.1502 113.241 26.1172Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M134.195 92.3625C134.091 92.2965 133.987 92.247 133.884 92.2305C133.946 92.313 134.05 92.3625 134.195 92.3625Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M131.51 92.2972C132.295 93.2974 133.059 92.084 133.884 92.2316C133.657 91.9692 133.823 91.3953 133.203 91.6741C134.855 91.1494 132.295 90.0999 133.595 89.526C133.43 89.5096 132.894 89.8376 132.481 89.444C132.316 88.8537 133.079 88.9029 133.43 88.657C132.956 88.4766 132.625 87.5911 132.852 87.6895C132.439 87.296 131.242 88.0995 130.54 87.5583C129.425 87.1976 130.375 86.6893 130.065 86.263C130.829 85.7382 130.602 86.7877 130.974 87.0008L130.458 85.5251C131.036 85.0988 131.531 85.7218 131.407 86.1482C132.109 85.5579 131.469 84.8036 130.561 84.6396C130.767 84.2789 130.561 84.0821 130.932 83.7214C131.449 84.0657 133.017 84.0493 133.286 84.5904C133.183 85.4759 132.068 84.2625 131.841 85.0332L132.79 85.0988C132.254 85.4267 132.956 85.6727 133.038 86.0334C132.811 86.2302 132.708 85.9842 132.563 85.8694C132.646 86.4925 132.13 87.0008 133.203 87.4764C134.07 86.6237 132.894 85.3611 133.967 84.984L132.646 83.295C132.212 83.295 131.51 83.8854 130.87 83.4098C131.985 83.2131 132.481 82.7211 132.687 82.0653C131.49 82.3112 131.614 81.0322 130.643 81.3602C131.242 81.6553 130.231 81.8193 130.148 81.8521C130.065 81.229 129.033 81.7701 128.971 81.4258C129.24 80.2779 129.735 81.4749 130.169 80.3435C130.705 80.5895 131.923 81.1798 132.419 81.8193C132.956 81.7701 132.336 81.1962 132.956 80.9338C132.316 81.311 131.82 80.6715 131.552 80.983C131.036 80.0648 129.797 79.0154 129.529 77.9167C131.304 78.0807 130.891 79.7696 132.997 79.4253C132.728 78.8842 131.861 78.8842 131.985 78.4578C133.059 78.0807 132.109 77.1789 132.088 76.441L131.552 76.7689C131.118 76.4902 131.449 75.9655 131.552 75.6375L131.779 75.7195L131.449 75.3915C131.449 75.3915 131.552 75.326 131.614 75.326C131.056 74.9652 131.593 74.0634 131.263 73.3911C130.396 73.3911 131.221 74.0634 131.139 74.3913C130.932 74.4733 130.561 75.1128 129.962 74.8012C129.962 73.965 128.909 73.3747 128.93 72.4236L128.662 72.7352C128.063 72.44 128.352 72.0137 128.311 71.571C128.909 70.7511 129.529 72.1777 130.024 71.6694C130.788 71.9973 129.921 72.5548 131.036 72.6368L132.254 72.1121C131.51 71.6858 132.625 71.1938 132.46 70.8987L131.923 71.2266C130.974 71.161 131.696 70.8659 131.82 70.7019L130.437 70.9315C130.21 71.407 131.407 71.7349 130.602 72.0793C130.169 71.243 129.054 71.4398 129.013 70.4232C129.549 70.374 129.219 70.6199 129.611 70.7183C129.983 70.374 128.868 70.0132 129.302 69.4393C129.632 69.7673 130.189 70.2756 130.912 69.8656L129.88 69.5705C130.045 69.3081 130.458 69.4229 130.478 69.3081C130.685 68.931 129.405 69.3901 129.673 68.8162C129.88 68.7342 130.107 68.5375 130.354 68.6195C130.396 67.9472 130.024 68.2915 129.508 67.6684C129.508 68.2259 127.939 68.2587 127.753 67.6684C127.918 66.8485 127.051 66.291 128.352 65.7171L127.671 65.3564C128.641 65.5859 128.001 64.8317 128.166 64.5693C129.24 64.4873 128.146 65.7991 129.88 65.7991C130.045 65.258 130.581 65.4876 131.056 65.6679C130.891 65.0776 129.818 65.4548 129.116 65.1924C129.549 65.1924 129.24 64.1922 130.189 64.5365C130.251 64.0446 129.136 63.9462 129.343 63.5855C129.776 63.6347 130.334 63.7003 130.87 63.6675C130.499 63.6183 130.953 63.1592 130.994 63.0608C130.788 63.1428 130.086 62.8968 130.396 63.3231C129.549 63.2247 130.354 62.3065 129.653 62.3229C130.623 62.2737 129.859 61.3882 130.251 60.9291C127.96 60.9783 131.118 61.7654 129.24 61.9294C128.455 61.3226 129.157 59.8961 128.146 58.9122C128.579 58.076 129.013 58.9122 129.859 58.7319C130.231 59.5025 129.549 59.6993 129.962 60.3716C130.354 59.6337 130.127 58.4203 129.405 57.8792C129.302 57.0757 131.676 56.9774 131.118 56.0099C130.375 56.1411 130.21 56.1247 129.942 56.4199C129.673 56.1575 129.942 55.8623 129.942 55.5672C129.467 55.4032 129.384 56.0099 128.971 55.6164C129.116 55.4688 129.198 55.1409 129.714 55.2065L129.776 55.272C129.095 54.3374 131.552 54.5998 130.148 53.7963C129.776 53.8619 130.251 54.0422 130.003 54.2226C129.425 54.3702 128.62 53.8783 128.393 53.5011C128.889 53.5667 128.496 53.1732 128.662 52.9108C129.508 52.7305 128.909 53.5667 129.467 53.6979L129.591 52.9764L129.467 53.124L128.662 52.3533C128.93 52.8944 127.629 52.6157 127.526 52.3697C127.691 51.8286 127.857 51.2875 128.806 51.3531C127.857 51.2875 127.898 50.6152 127.691 50.1397C127.361 50.6644 126.886 50.2053 126.577 50.0577L127.506 49.2706C127.774 50.0905 128.352 49.0903 128.992 49.287C129.962 49.5166 129.467 50.0249 129.343 50.4512C131.098 49.5986 128.393 49.2542 129.24 48.5163C129.673 48.5163 130.189 48.5819 130.086 48.9099C130.375 48.7787 129.24 48.2376 129.735 47.7457C129.425 47.8768 128.558 48.1556 128.187 47.6637L129.26 47.0078C129.487 46.2535 128.125 46.7454 127.609 46.1223L126.866 46.5323C125.916 46.4667 126.866 45.6796 125.813 45.6632C125.771 46.0567 126.597 46.2699 126.288 46.6798C125.276 46.8274 125.751 46.1551 125.193 45.9256C125.627 45.0729 125.668 45.2533 126.473 44.6138C128.042 44.581 128.435 45.6468 130.478 45.5156C130.21 44.6958 129.694 43.4988 130.292 42.9577C129.818 42.2198 128.579 42.2854 127.671 42.4001C127.506 42.0886 127.629 41.941 127.877 41.7443L128.393 42.0886C127.877 41.1867 127.34 40.662 127.382 39.711C127.113 39.1699 126.164 39.383 125.421 39.5142L125.255 38.9239L125.049 39.0059C124.037 38.8747 124.368 38.35 124.409 37.9729C124.843 37.9729 124.946 38.2024 125.214 38.186C125.586 37.8417 125.482 37.317 125.049 37.0382C125.482 37.0382 126.453 37.2678 126.164 37.6777C126.061 37.7269 125.895 37.6941 125.792 37.7433L126.37 38.432C125.833 37.6285 126.928 37.153 127.98 37.1694C127.444 36.3659 126.907 37.8253 126.494 36.8743C128.538 35.6117 125.916 34.4802 128.827 33.7752C128.207 33.1849 127.196 32.4962 127.113 31.5779C126.246 31.5779 126.762 30.9712 125.689 31.0696C124.574 31.9551 127.402 32.6929 125.792 33.398C126.205 33.7916 126.928 33.644 127.402 33.8244C127.485 34.1687 127.382 34.4966 126.845 34.5458C126.308 33.7424 124.719 34.3327 124.677 33.316C123.934 33.4472 124.223 34.2671 124.017 34.6442C123.604 34.5458 123.15 34.6442 122.799 34.8902C122.097 34.6278 121.478 34.0539 120.879 33.7588C121.292 33.8571 121.519 33.6604 121.767 33.7588L120.507 32.7093C121.044 32.3814 121.684 32.283 122.159 32.4634C122.427 31.8731 121.23 30.8892 122.53 30.8728C122.324 30.1186 121.767 31.1188 121.395 31.1844L121.333 31.1188L121.457 31.9223C119.95 32.0207 121.808 31.004 120.363 30.8892C117.597 30.7909 121.23 29.7578 120.776 29.2003L122.778 29.8234L122.324 29.2659C123.108 29.5774 124.409 29.561 125.235 30.053C125.276 29.2659 125.854 28.1509 125.482 27.6426C126.143 27.4294 126.783 27.331 127.464 27.413C126.184 26.6423 128.063 26.1668 128.063 25.4781C127.299 24.773 127.093 26.2324 126.081 25.7241C126.577 25.4945 126.164 25.101 125.957 24.9206C126.329 25.1338 125.689 25.9208 125.379 26.4456C125.4 26.052 124.43 26.1176 124.017 26.0192L123.831 26.6751C122.613 26.6587 123.707 25.8717 123.088 25.5765C124.182 25.7405 124.203 25.6421 125.276 25.8061C124.822 25.2486 124.781 24.3959 125.421 23.904C125.854 23.6088 125.978 24.1335 126.288 24.2811C127.031 24.1335 125.813 23.7236 126.721 23.5924C127.402 23.658 126.804 23.9368 127.01 24.1335L127.258 22.4446C127.691 22.4446 127.857 22.8382 127.691 23.1169C128.166 22.5922 127.918 22.2315 126.391 21.6903C126.783 21.1 127.382 20.4114 128.042 20.5917C127.753 20.3294 127.361 20.5261 126.928 20.5589C127.113 19.7719 125.565 19.7555 125.482 19.2963L124.698 19.6899C125.482 18.9028 123.336 19.5751 123.934 18.9028C124.781 18.9684 125.751 18.8864 126.639 18.7224C125.792 18.6568 126.494 18.1977 126.473 17.9026C125.648 18.1321 125.648 17.3287 124.843 17.837C124.099 17.2139 125.214 16.8367 124.099 16.4268C123.872 16.7548 123.17 15.9185 122.592 16.2136C122.468 15.5905 123.418 15.0822 124.347 15.197C124.306 15.4266 123.975 15.8037 124.677 15.7217L124.388 14.5739C124.801 14.2624 124.946 13.8688 125.916 13.754C124.76 13.4589 126.556 12.5898 125.214 12.4095C126.102 12.7374 125.008 13.1473 124.884 13.2949L124.677 13.1309C124.677 13.1309 124.677 13.1801 124.636 13.2293L122.902 12.8686C122.303 13.3933 124.017 12.8686 124.058 13.5409C122.572 14.246 121.519 12.4095 120.631 13.0981C120.198 13.6229 121.684 13.4261 122.303 13.7868V13.6721L123.108 14.5575C122.572 14.6395 122.118 14.3935 122.118 14.3935C122.241 15.5249 121.436 15.7545 121.354 16.9679C121.54 16.8695 123.17 16.5252 123.48 17.0663C123.914 17.427 122.943 17.5418 122.881 17.8698C122.675 17.6894 121.746 17.5582 122.324 17.2631L121.189 17.345C119.723 16.5252 118.67 17.0663 118.133 15.8857C117.287 15.8857 116.771 15.0494 116.936 14.3771L116.213 14.7543C114.686 14.1968 117.369 14.5411 116.048 13.7704C117.514 13.2949 119.186 12.475 120.507 12.8686C120.796 12.2127 119.95 12.0651 119.867 11.524C121.044 11.0649 121.23 11.5732 122.448 11.3928C122.262 10.9829 121.643 10.5238 120.982 10.9009L121.354 10.081C121.622 10.0318 121.663 10.3106 121.643 10.4254C121.849 10.0974 121.168 9.57273 120.672 9.45795C120.755 9.50714 120.982 9.68751 120.796 9.78589C120.404 9.49074 119.723 8.98242 119.372 8.98242C120.074 9.37596 118.691 9.57273 119.578 9.98266C119.248 9.98266 118.567 9.96626 118.691 9.68751C118.03 10.163 118.216 10.5566 117.411 10.8025C117.989 10.409 117.039 10.2778 116.895 10.2286C116.709 10.5566 117.039 11.1305 117.411 11.2944C116.007 11.4748 117.824 12.4423 116.317 12.1799C116.833 12.1963 116.915 12.639 116.626 12.9014C116.028 12.9342 115.594 12.3767 114.872 12.1963C114.025 11.0977 115.904 12.1143 116.296 11.8192L116.069 10.9337C115.883 11.0485 115.037 10.6713 115.202 11.2453C114.294 11.0649 113.592 10.573 114.19 10.0482C113.777 9.98266 113.901 10.3106 113.881 10.409C113.468 10.3434 111.899 9.96626 111.796 10.6877C111.837 10.4746 112.518 10.9665 112.931 10.5566C113.138 10.8189 112.663 11.6552 111.858 11.4256C112.147 11.7372 112.807 12.3439 113.014 12.6226C112.394 12.7538 112.704 12.4095 112.394 12.2947L112.91 13.2621L113.571 12.9178C113.179 13.6885 114.892 14.0328 115.491 14.5903C114.376 14.5903 114.211 14.0984 113.592 13.754C112.291 14.2296 114.314 13.9508 114.19 14.5739C114.005 14.6723 113.736 14.7215 113.385 14.7051L114.417 15.1314C114.294 15.279 114.046 15.2134 113.984 15.1642C115.284 15.9349 115.553 15.033 116.193 16.148C116.688 15.4102 115.367 15.6069 115.388 15.0166C116.151 14.6231 116.895 15.5741 117.39 15.7217C117.184 16.312 115.532 16.476 116.502 17.1319C115.924 16.6564 115.47 17.1647 115.346 16.4596C114.727 16.0989 114.872 16.7056 114.232 16.8203C114.459 17.0007 115.388 16.6236 115.284 17.1483H115.119L116.399 17.919C115.883 18.7388 117.886 19.6571 116.626 20.2802L117.782 20.0998C117.927 20.6081 117.989 21.3296 118.257 21.6739C117.576 21.6084 117.493 21.2804 117.225 20.9361C117.08 21.8543 117.844 22.625 118.815 23.2153C119.64 22.7398 119.558 22.6742 120.115 22.2315C121.787 22.7726 119.145 22.9693 119.991 23.7236C118.856 23.7728 119 23.5104 117.906 23.74C118.711 24.0352 118.567 24.5763 119.248 24.9206C118.154 25.1502 117.184 24.8222 117.06 24.0352C118.009 23.4121 116.255 22.8054 117.163 22.2806L116.461 22.6086C116.09 22.0347 116.275 21.6575 115.697 21.182H115.862L114.706 20.9853V21.264C114.066 21.1 112.993 20.5753 112.952 20.4277C113.179 21.2476 114.995 21.2312 116.028 21.592C116.028 22.3626 114.005 22.7234 115.016 23.1989C114.479 23.2645 113.922 23.6908 113.406 23.3793C113.076 22.9693 113.777 22.6578 112.993 22.6414C113.055 23.0841 112.58 22.9201 112.745 23.5924C113.757 23.6908 114.768 24.1499 115.594 24.6255C116.152 25.1174 116.151 25.7733 115.862 26.1832C115.739 25.6749 114.748 25.1994 114.005 25.3469C115.057 25.6257 113.199 26.3636 114.644 26.1668C114.562 26.7571 114.644 27.7573 113.385 27.8393C112.91 27.2982 113.654 26.7407 113.365 26.2652C113.344 26.3964 113.034 26.5275 112.725 26.462L112.828 25.7733C112.25 26.3144 111.837 26.216 112.002 26.8883C112.105 26.8391 112.291 26.7571 112.374 26.8227C112.415 26.9867 112.374 27.1998 112.394 27.3638L111.259 27.413C111.816 27.9049 110.392 28.9052 111.259 29.807L111.032 29.725C110.805 30.4629 113.055 30.5121 113.344 31.3156C112.807 31.086 112.332 31.2008 111.796 31.25C112.374 31.6435 111.445 31.8731 111.135 32.283C111.796 31.8075 112.353 32.5946 112.704 32.2502C113.839 32.2174 113.86 33.0537 113.736 33.48C112.27 33.7424 112.91 32.1682 111.403 32.8077C111.28 33.234 112.105 33.3324 112.374 33.0373C112.209 33.5784 112.043 34.3819 111.156 34.7754C112.27 35.4149 111.672 35.6609 113.117 36.0708C113.055 35.7264 112.002 35.71 112.58 35.2837L113.654 35.7592C113.736 36.3823 112.787 36.8906 112.663 37.317L112.188 36.8743H112.353C111.878 36.7267 112.147 36.1364 111.341 36.2184C112.353 36.6283 111.383 36.9562 112.085 37.481H111.92C112.766 38.3992 110.268 39.1043 112.374 39.711C112.332 39.5306 113.138 39.1863 113.55 39.3011C113.055 39.5142 113.22 40.1045 112.621 40.0881L112.415 39.8914C112.25 40.4325 112.147 40.7604 112.353 40.9572C113.096 41.1048 113.674 40.9572 114.066 41.3343C113.592 42.2854 112.353 40.9572 111.713 41.5967L112.498 42.4821L111.816 42.6789C111.156 44.0071 113.365 45.0073 113.385 46.4175C112.25 46.4339 111.775 45.4173 111.692 45.0729C110.681 45.5156 112.064 46.1387 111.362 46.7126C111.197 47.2538 112.209 47.6637 112.848 47.5817C113.261 48.254 112.167 48.0572 111.981 48.1392C113.22 48.3524 112.787 49.205 113.055 49.7461L112.353 49.7789L113.22 50.6152C113.282 50.402 113.922 50.5988 114.355 50.5988L114.294 50.812C116.213 49.9921 112.952 48.9591 115.119 48.1064C115.388 48.3688 115.759 48.0244 116.028 48.2704C115.966 48.4835 115.862 48.5327 115.594 48.5491C116.172 48.6803 116.668 49.0247 116.647 48.5655C118.133 48.5819 117.762 49.5002 118.278 50.1233C117.328 50.6316 116.853 49.5986 116.151 49.3526C116.255 49.5986 116.895 49.7789 116.523 50.1397L115.408 50.0577C116.007 50.9267 116.379 50.2873 117.452 50.484C118.876 50.7136 117.39 51.2711 117.493 51.5007L117.225 51.2383C116.75 51.9106 117.927 52.0582 117.844 52.6649L116.957 52.9436C118.071 52.1893 115.408 52.009 115.986 51.5826C114.954 52.6813 113.695 51.3531 112.766 51.0087C112.972 51.4843 112.848 51.927 112.229 52.1729C113.674 52.8616 111.692 53.6323 113.406 54.2882C113.199 54.6653 112.621 53.9603 112.601 54.3538C112.477 55.0753 112.683 55.8295 113.323 56.5838C113.282 56.9774 112.787 56.9118 112.312 57.0266C111.651 58.9122 114.314 59.6501 113.674 61.6998L113.076 61.4046C112.952 61.831 112.745 62.2081 113.55 62.4213C111.631 62.9624 114.727 64.2578 112.683 64.9629C112.312 65.8811 113.963 65.9139 114.273 66.6354C113.839 66.6354 113.014 66.4222 112.828 66.783C113.509 69.1278 113.654 71.2266 114.005 73.801C113.839 73.7846 113.695 73.6534 113.633 73.5878C113.468 75.2604 115.326 76.9001 114.727 78.2939C114.995 78.5562 115.367 79.3269 116.151 79.0973C116.255 78.7694 117.225 78.7202 117.824 78.753C118.67 79.9828 116.42 79.3597 116.688 80.1796C115.202 80.4419 115.718 79.6548 114.397 79.6712L115.346 80.8682C114.872 81.5405 115.718 82.2128 115.016 82.8031C115.181 82.5408 113.901 82.7211 114.479 82.2784C114.541 82.344 114.645 82.2948 114.706 82.3604C114.83 81.3602 114.005 81.8193 113.654 80.9338C114.025 81.7209 114.397 82.7703 114.108 83.4754C115.119 83.3278 114.541 84.0329 115.181 84.2297L115.078 84.2789C115.512 84.2789 115.821 84.7052 115.945 84.8364L114.665 85.0168C114.83 85.3283 115.305 84.9348 115.47 85.2299C115.78 85.6563 115.924 87.1976 114.583 87.3124C114.686 87.8371 115.429 87.9847 115.264 88.5258C114.934 88.4766 114.789 88.3618 114.624 88.329C114.355 89.4768 114.789 90.887 114.025 91.9692C114.355 92.8547 114.562 93.609 115.45 94.1665C115.346 93.9205 115.656 93.2318 116.379 93.6746C116.915 93.9205 116.709 94.2812 116.957 94.642C116.296 94.56 116.317 95.5766 115.862 94.8388C114.397 95.0191 116.152 96.4293 114.706 96.4129C115.161 96.5769 114.892 97.6263 115.677 98.0198C115.037 98.1018 115.243 97.4623 114.789 97.4623L114.995 97.9379H114.562C114.19 98.8561 115.986 99.0201 116.255 99.5612H116.09L116.317 99.9055L115.14 99.4792C115.305 100.07 116.358 100.365 116.606 101.021L116.234 101.086L116.647 101.48C116.647 101.48 116.42 101.398 116.317 101.43C117.431 101.791 116.998 102.644 117.927 102.988C117.762 103.251 116.379 103.464 117.328 103.808L115.945 103.743C115.78 102.873 116.915 103.415 116.399 102.513C114.624 103.185 114.83 105.071 114.975 106.333C115.883 107.35 114.417 109.022 116.461 109.449L115.615 109.35L114.913 111.056C115.264 112.515 114.624 114.007 115.759 115.106L115.057 115.417C117.411 116.565 116.048 119.32 118.876 120.074C118.237 120.73 117.803 119.877 117.287 119.812C117.06 120.287 118.897 121.091 117.638 121.55C117.204 121.55 117.225 120.878 116.957 121.189C116.151 121.534 117.762 121.681 116.853 122.075C117.7 121.894 118.67 122.698 118.835 123.288C118.863 123.212 118.904 123.162 118.959 123.141C119.599 123.059 119.475 123.485 119.558 123.731C119.558 123.731 119.393 123.714 119.331 123.649C120.425 126.65 120.941 130.093 120.136 133.258L119.537 132.684C120.012 133.143 119.682 133.946 119.516 134.192L119.454 134.127C118.154 134.979 120.734 135.078 119.227 135.734L119.083 135.602C119.124 136.619 117.72 137.226 118.464 138.226C117.968 139.013 117.287 138.931 116.688 139.472C116.73 139.931 117.535 140.145 117.7 140.161L117.762 139.948C118.526 139.702 118.402 140.423 118.732 140.751C119.95 140.505 121.829 140.636 123.067 139.718C122.654 139.046 125.008 139.062 124.822 138.308C123.212 137.882 126.019 137.226 124.574 136.537C125.689 136.898 125.173 135.717 126.391 136.324C127.258 136.045 125.441 134.848 126.494 134.307C126.742 134.389 126.989 134.373 127.134 134.504C126.494 133.75 127.898 133.979 127.898 133.422H126.762C126.391 133.225 127.196 133.159 126.989 132.963C126.845 133.11 126.308 133.438 125.854 133.274C125.586 133.012 125.214 132.799 125.214 132.52C125.648 132.52 125.854 132.717 125.999 132.848C125.999 132.848 126.102 132.241 126.639 132.192C127.01 132.405 127.01 132.684 127.65 132.881C127.98 132.077 128.022 132.815 128.93 132.421C127.588 132.536 128.352 131.733 128.042 131.29C128.579 131.241 128.207 131.602 128.62 131.7C130.974 130.864 128.207 130.47 128.703 129.404C128.868 129.421 129.013 129.552 129.074 129.617C128.703 129.126 129.942 128.765 129.178 128.453C129.405 127.978 130.685 128.371 130.664 127.633C129.281 127.847 130.932 126.764 129.446 126.748L130.313 126.174C129.508 125.682 127.836 126.305 127.691 125.338C128.228 124.452 130.127 125.42 130.891 124.895L130.086 124.682L130.664 124.239L130.726 124.305C130.458 124.042 130.685 123.567 131.118 123.567C131.449 123.616 131.449 123.895 131.799 123.928C131.056 123.501 133.802 122.222 131.593 121.763C131.985 121.501 131.985 120.976 132.687 121.042C131.717 120.812 132.997 119.894 132.357 119.55C132.687 119.599 133.224 119.271 132.956 119.008C132.584 119.353 132.212 119.14 131.676 118.91C132.377 118.598 131.779 117.746 132.956 117.598C132.316 117.123 131.469 117.303 130.623 117.188C131.325 116.877 131.18 115.909 132.543 116.073C132.378 116.336 132.109 116.926 133.017 116.811C133.513 116.319 132.646 116.598 132.501 116.188C132.749 116.221 133.327 115.909 133.719 115.991C133.575 115.745 133.575 115.417 133.802 115.057C133.203 115.598 132.852 114.712 132.316 115.04L133.286 115.565C133.348 116.188 132.543 115.696 132.212 115.942C131.944 114.843 130.561 115.057 129.921 114.024C130.148 113.827 130.52 113.483 130.561 113.368C130.623 113.712 131.882 113.646 132.109 113.45C131.056 112.876 132.77 112.417 133.017 111.925C132.708 112.335 131.903 112.122 131.614 111.974C130.87 110.974 132.088 111.58 132.646 111.154C132.501 109.613 134.112 108.645 133.265 107.399L132.13 107.989L133.203 108.186C132.357 108.645 130.788 108.104 130.086 107.842C130.458 107.776 130.251 107.022 130.85 107.317L130.375 106.579C129.9 106.694 130.107 107.17 129.591 106.825C129.921 106.579 130.169 105.825 130.809 106.3C130.85 105.907 130.478 105.415 129.838 105.497C129.776 104.874 131.221 105.563 131.655 105.841C131.717 105.349 132.667 105.415 132.956 105.563L132.811 104.874C133.121 105.021 133.554 105.021 133.843 105.169C134.256 104.71 133.038 104.398 133.946 104.005L133.038 103.841C133.781 102.578 133.905 102.709 134.008 101.545L133.327 101.742C132.109 100.857 134.401 101.086 133.905 99.9055C133.492 99.2332 133.183 98.8069 132.109 98.8889C131.696 98.4954 132.336 98.4134 132.749 98.233C132.15 97.9379 131.036 97.282 131.696 96.8064C132.027 97.1344 132.295 97.3967 132.481 97.6919C133.554 97.6099 132.708 96.6589 133.203 96.1505C132.687 95.8062 131.387 94.6748 130.437 94.0517C129.57 94.3304 128.29 94.2321 127.402 93.6746C128.084 93.7565 128.084 92.9203 128.538 92.5267C129.178 92.7235 130.107 91.6577 130.375 92.4775C130.045 92.7235 129.136 92.8219 129.467 93.1498C130.148 92.9531 130.912 92.4283 131.51 91.8872C131.841 91.9364 132.274 92.2152 132.274 92.4939C131.985 92.3464 131.779 92.4284 131.51 92.4448V92.2972Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M131.882 75.3924C131.882 75.3924 131.676 75.2773 131.552 75.2773C131.634 75.3266 131.738 75.3759 131.882 75.3924Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M131.139 63.584H130.849C130.849 63.584 130.994 63.617 131.139 63.584Z\",\n    fill: \"#7E6A5E\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M105.624 379.222C105.562 379.123 105.479 379.041 105.313 378.975C105.354 379.107 105.479 379.189 105.624 379.222Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M123.108 395.34C123.004 395.34 122.922 395.323 122.839 395.307C122.901 395.34 123.004 395.34 123.108 395.34Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107.13 375.499C107.13 375.499 106.985 375.466 106.881 375.449C106.985 375.482 107.068 375.482 107.13 375.499Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M103.022 396.85C103.022 396.85 103.229 396.949 103.333 396.965C103.27 396.899 103.188 396.85 103.022 396.85Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M105.684 397.094C105.003 396.291 104.115 397.144 103.31 396.963C103.517 397.176 103.31 397.586 103.95 397.439C102.257 397.717 104.714 398.685 103.372 399.029C103.537 399.062 104.095 398.849 104.466 399.177C104.569 399.636 103.806 399.538 103.455 399.702C103.909 399.865 104.156 400.554 103.95 400.472C104.322 400.8 105.602 400.275 106.242 400.735C107.315 401.095 106.324 401.39 106.592 401.751C105.767 402.079 106.097 401.325 105.746 401.128L106.118 402.276C105.519 402.555 105.065 402.046 105.23 401.735C104.487 402.128 105.044 402.735 105.932 402.932C105.705 403.194 105.891 403.358 105.478 403.588C105.003 403.293 103.434 403.194 103.207 402.768C103.393 402.112 104.384 403.096 104.693 402.555L103.764 402.44C104.322 402.243 103.64 401.997 103.599 401.718C103.847 401.587 103.929 401.768 104.053 401.882C104.053 401.407 104.59 401.063 103.558 400.636C102.608 401.21 103.682 402.259 102.567 402.456L103.723 403.817C104.157 403.85 104.92 403.457 105.498 403.866C104.384 403.932 103.826 404.276 103.578 404.752C104.796 404.653 104.569 405.605 105.56 405.441C104.982 405.162 105.994 405.129 106.097 405.096C106.097 405.572 107.191 405.244 107.232 405.506C106.861 406.359 106.469 405.424 105.932 406.228C105.416 406.014 104.26 405.473 103.806 404.965C103.269 404.965 103.806 405.441 103.186 405.588C103.847 405.359 104.301 405.867 104.59 405.654C105.024 406.375 106.159 407.261 106.345 408.113C104.59 407.851 105.168 406.621 103.021 406.72C103.248 407.146 104.115 407.211 103.95 407.523C102.856 407.72 103.702 408.474 103.682 409.032L104.239 408.818C104.652 409.064 104.28 409.425 104.136 409.671L103.909 409.589L104.218 409.851C104.218 409.851 104.115 409.884 104.053 409.884C104.569 410.196 103.971 410.835 104.218 411.36C105.085 411.426 104.322 410.852 104.446 410.622C104.652 410.573 105.085 410.13 105.643 410.393C105.581 411.032 106.572 411.54 106.448 412.262L106.737 412.049C107.315 412.327 106.985 412.606 106.985 412.951C106.303 413.524 105.829 412.409 105.292 412.754C104.549 412.459 105.478 412.098 104.363 411.95L103.104 412.245C103.806 412.623 102.65 412.901 102.794 413.147L103.351 412.934C104.28 413.049 103.558 413.229 103.413 413.328L104.796 413.262C105.065 412.918 103.888 412.59 104.735 412.393C105.106 413.065 106.221 413 106.159 413.754C105.622 413.754 105.973 413.59 105.581 413.475C105.189 413.705 106.262 414.066 105.767 414.459C105.457 414.197 104.962 413.754 104.198 414.016L105.209 414.312C105.024 414.492 104.631 414.394 104.59 414.459C104.363 414.721 105.663 414.459 105.354 414.885C105.147 414.935 104.9 415.066 104.673 414.984C104.569 415.492 104.982 415.246 105.436 415.754C105.478 415.328 107.067 415.427 107.17 415.886C106.923 416.492 107.749 416.984 106.407 417.312L107.047 417.64C106.097 417.394 106.675 418.001 106.469 418.198C105.395 418.198 106.613 417.279 104.858 417.148C104.652 417.542 104.136 417.329 103.682 417.148C103.785 417.607 104.9 417.394 105.581 417.64C105.147 417.607 105.354 418.378 104.446 418.05C104.342 418.427 105.436 418.558 105.209 418.821C104.796 418.755 104.239 418.657 103.682 418.64C104.033 418.706 103.558 419.018 103.517 419.083C103.723 419.034 104.404 419.28 104.136 418.936C104.962 419.083 104.074 419.706 104.796 419.739C103.826 419.706 104.507 420.428 104.074 420.739C106.365 420.87 103.269 420.034 105.168 420.067C105.891 420.575 105.065 421.608 105.994 422.412C105.478 423.019 105.127 422.346 104.26 422.412C103.95 421.805 104.652 421.707 104.301 421.166C103.847 421.69 103.971 422.625 104.631 423.084C104.673 423.691 102.278 423.592 102.773 424.363C103.517 424.314 103.682 424.363 103.991 424.133C104.239 424.347 103.95 424.56 103.909 424.773C104.363 424.937 104.507 424.494 104.879 424.806C104.735 424.904 104.611 425.15 104.115 425.068L104.053 425.019C104.652 425.773 102.216 425.396 103.558 426.101C103.929 426.085 103.475 425.921 103.723 425.79C104.301 425.724 105.065 426.15 105.271 426.446C104.776 426.364 105.147 426.675 104.962 426.872C104.115 426.937 104.776 426.364 104.218 426.232L104.033 426.757L104.177 426.659L104.92 427.298C104.693 426.872 105.973 427.183 106.056 427.364C105.849 427.757 105.622 428.151 104.693 428.036C105.622 428.151 105.54 428.659 105.705 429.036C106.076 428.676 106.51 429.036 106.799 429.184L105.787 429.709C105.581 429.069 104.941 429.774 104.322 429.594C103.372 429.348 103.909 429.003 104.095 428.692C102.278 429.2 104.92 429.659 104.033 430.151C103.599 430.119 103.104 430.037 103.228 429.791C102.918 429.873 104.012 430.364 103.475 430.692C103.785 430.61 104.673 430.463 105.003 430.873L103.867 431.283C103.558 431.84 104.982 431.561 105.436 432.07L106.2 431.807C107.129 431.922 106.118 432.447 107.17 432.529C107.232 432.234 106.448 432.021 106.778 431.725C107.79 431.676 107.274 432.152 107.79 432.365C107.274 432.972 107.253 432.84 106.407 433.25C104.838 433.152 104.549 432.332 102.505 432.283C102.711 432.922 103.104 433.857 102.464 434.218C102.877 434.808 104.115 434.841 105.024 434.825C105.168 435.071 105.024 435.169 104.776 435.3L104.301 435.005C104.735 435.726 105.23 436.153 105.106 436.874C105.333 437.301 106.283 437.202 107.026 437.153L107.15 437.612L107.356 437.563C108.347 437.727 107.976 438.104 107.893 438.399C107.46 438.366 107.377 438.186 107.109 438.186C106.716 438.416 106.778 438.825 107.17 439.055C106.737 439.022 105.787 438.776 106.118 438.481C106.221 438.448 106.386 438.481 106.489 438.465L105.973 437.907C106.448 438.547 105.292 438.825 104.26 438.744C104.735 439.383 105.395 438.334 105.705 439.071C103.558 439.875 106.076 440.908 103.104 441.22C103.661 441.695 104.611 442.302 104.59 442.99C105.457 443.056 104.879 443.466 105.953 443.482C107.17 442.908 104.404 442.138 106.076 441.728C105.705 441.4 104.962 441.449 104.507 441.285C104.466 441.023 104.59 440.777 105.127 440.793C105.602 441.433 107.212 441.105 107.17 441.875C107.914 441.826 107.728 441.187 107.955 440.924C108.347 441.039 108.822 440.99 109.173 440.826C109.854 441.072 110.412 441.547 110.99 441.826C110.597 441.711 110.35 441.843 110.123 441.761L111.279 442.646C110.721 442.859 110.061 442.876 109.627 442.712C109.317 443.138 110.391 443.974 109.09 443.876C109.235 444.466 109.875 443.745 110.267 443.728L110.329 443.777L110.288 443.171C111.795 443.22 109.834 443.827 111.279 444.023C114.004 444.319 110.308 444.811 110.701 445.27L108.781 444.63L109.173 445.089C108.43 444.794 107.129 444.696 106.365 444.269C106.242 444.843 105.54 445.63 105.87 446.04C105.189 446.139 104.528 446.155 103.867 446.04C105.044 446.713 103.124 446.909 103.042 447.418C103.723 448.008 104.115 446.959 105.024 447.418C104.507 447.549 104.879 447.86 105.065 448.024C104.714 447.828 105.457 447.319 105.829 446.942C105.767 447.237 106.737 447.27 107.129 447.385L107.398 446.909C108.595 447.024 107.418 447.516 107.996 447.795C106.943 447.565 106.902 447.647 105.849 447.418C106.242 447.877 106.159 448.516 105.457 448.811C105.003 448.992 104.941 448.598 104.652 448.451C103.909 448.5 105.044 448.91 104.115 448.926C103.455 448.811 104.074 448.664 103.888 448.5L103.413 449.713C102.98 449.681 102.877 449.369 103.062 449.172C102.526 449.517 102.732 449.812 104.136 450.353C103.661 450.746 102.959 451.189 102.34 450.992C102.588 451.205 103 451.107 103.434 451.14C103.124 451.697 104.673 451.861 104.652 452.206L105.478 452.009C104.569 452.501 106.799 452.238 106.118 452.681C105.292 452.534 104.322 452.501 103.393 452.517C104.218 452.665 103.455 452.911 103.434 453.124C104.28 453.058 104.157 453.632 105.024 453.354C105.643 453.895 104.466 454.042 105.498 454.469C105.787 454.255 106.324 454.96 106.943 454.796C106.943 455.272 105.911 455.534 105.024 455.338C105.106 455.174 105.519 454.944 104.796 454.911L104.858 455.78C104.404 455.961 104.177 456.223 103.207 456.19C104.28 456.551 102.34 456.945 103.62 457.256C102.815 456.895 103.971 456.748 104.136 456.649L104.301 456.797C104.301 456.797 104.322 456.764 104.363 456.731L105.994 457.223C106.696 456.912 104.9 457.076 104.982 456.567C106.592 456.239 107.232 457.732 108.265 457.354C108.801 457.01 107.294 456.977 106.758 456.617L106.716 456.699L106.118 455.944C106.654 455.944 107.067 456.19 107.067 456.19C107.17 455.338 108.017 455.272 108.327 454.37C108.12 454.419 106.448 454.485 106.242 454.059C105.87 453.731 106.84 453.78 106.985 453.534C107.17 453.698 108.058 453.895 107.439 454.042L108.574 454.108C109.875 454.895 111.01 454.616 111.32 455.567C112.146 455.666 112.497 456.371 112.208 456.863L112.992 456.666C114.375 457.289 111.815 456.666 112.93 457.436C111.382 457.6 109.565 457.978 108.368 457.518C107.955 457.961 108.739 458.191 108.677 458.617C107.418 458.781 107.356 458.387 106.118 458.355C106.221 458.683 106.716 459.109 107.439 458.929L106.881 459.486C106.613 459.486 106.634 459.273 106.675 459.191C106.386 459.404 106.943 459.88 107.398 460.044C107.336 459.994 107.15 459.83 107.356 459.781C107.666 460.044 108.223 460.536 108.554 460.585C107.955 460.175 109.379 460.257 108.616 459.814C108.946 459.863 109.606 459.978 109.421 460.175C110.184 459.912 110.102 459.601 110.948 459.535C110.288 459.748 111.175 459.978 111.299 460.044C111.568 459.83 111.382 459.339 111.052 459.158C112.455 459.224 110.928 458.224 112.331 458.65C111.836 458.568 111.836 458.224 112.187 458.06C112.786 458.125 113.075 458.601 113.756 458.847C114.334 459.814 112.724 458.748 112.27 458.929V459.634C112.497 459.584 113.24 459.978 113.219 459.519C114.066 459.798 114.623 460.273 113.9 460.585C114.293 460.7 114.251 460.437 114.293 460.355C114.685 460.47 116.109 461.011 116.398 460.454C116.316 460.618 115.758 460.126 115.263 460.388C115.118 460.142 115.8 459.568 116.543 459.88C116.336 459.585 115.82 459.027 115.676 458.781C116.316 458.765 115.923 458.994 116.212 459.125L115.923 458.305L115.201 458.486C115.779 457.945 114.148 457.436 113.694 456.928C114.788 457.076 114.85 457.469 115.387 457.83C116.77 457.633 114.705 457.584 114.974 457.109C115.18 457.059 115.449 457.059 115.779 457.109L114.85 456.649C114.994 456.551 115.222 456.633 115.283 456.682C114.148 455.928 113.715 456.584 113.302 455.649C112.682 456.141 114.024 456.157 113.859 456.617C113.033 456.813 112.476 455.994 112.022 455.83C112.331 455.403 114.004 455.485 113.178 454.862C113.673 455.288 114.21 454.96 114.189 455.518C114.726 455.862 114.705 455.387 115.345 455.37C115.16 455.206 114.169 455.37 114.375 454.993L114.54 455.026L113.405 454.272C114.086 453.698 112.228 452.78 113.57 452.452H112.393C112.331 452.075 112.373 451.517 112.166 451.222C112.827 451.337 112.868 451.599 113.075 451.894C113.364 451.205 112.724 450.533 111.836 449.992C110.969 450.271 111.01 450.336 110.412 450.615C108.822 450.041 111.485 450.156 110.742 449.5C111.877 449.566 111.691 449.746 112.827 449.681C112.084 449.385 112.29 448.992 111.65 448.664C112.765 448.598 113.673 448.926 113.715 449.533C112.682 449.91 114.334 450.55 113.364 450.861L114.086 450.681C114.375 451.156 114.127 451.419 114.623 451.845L114.458 451.812L115.573 452.091V451.878C116.212 452.075 117.203 452.583 117.224 452.714C117.121 452.042 115.325 451.878 114.355 451.484C114.499 450.91 116.522 450.812 115.593 450.353C116.13 450.353 116.749 450.074 117.203 450.369C117.472 450.714 116.749 450.894 117.513 450.976C117.513 450.632 117.967 450.796 117.885 450.271C116.894 450.107 115.965 449.631 115.201 449.205C114.705 448.779 114.809 448.27 115.139 447.975C115.201 448.369 116.13 448.828 116.873 448.795C115.862 448.484 117.802 448.09 116.336 448.106C116.481 447.664 116.543 446.893 117.781 446.926C118.194 447.385 117.389 447.746 117.616 448.139C117.658 448.041 117.988 447.959 118.256 448.041L118.07 448.565C118.71 448.205 119.103 448.32 119.041 447.778C118.937 447.811 118.731 447.86 118.669 447.795C118.669 447.664 118.731 447.5 118.71 447.369L119.846 447.434C119.35 447.008 120.878 446.352 120.135 445.581L120.362 445.663C120.672 445.106 118.421 444.893 118.215 444.253C118.731 444.466 119.206 444.417 119.743 444.433C119.206 444.089 120.155 443.991 120.506 443.695C119.804 444.007 119.33 443.368 118.937 443.597C117.802 443.532 117.864 442.892 118.029 442.58C119.515 442.498 118.71 443.646 120.279 443.269C120.444 442.958 119.619 442.81 119.33 443.023C119.536 442.63 119.784 442.023 120.713 441.793C119.66 441.22 120.279 441.072 118.876 440.662C118.917 440.924 119.949 441.023 119.35 441.301L118.318 440.859C118.318 440.383 119.288 440.072 119.454 439.76L119.887 440.137L119.722 440.105C120.176 440.268 119.866 440.695 120.672 440.695C119.701 440.318 120.713 440.137 120.052 439.678L120.217 439.711C119.454 438.94 121.993 438.596 119.97 437.989C119.97 438.12 119.165 438.317 118.772 438.219C119.288 438.088 119.165 437.645 119.784 437.694L119.97 437.858C120.176 437.465 120.3 437.219 120.135 437.071C119.412 436.907 118.834 436.973 118.463 436.661C119.02 435.972 120.135 437.071 120.837 436.628L120.135 435.907L120.816 435.808C121.6 434.857 119.474 433.939 119.598 432.873C120.733 432.939 121.126 433.742 121.167 434.005C122.199 433.759 120.878 433.185 121.642 432.791C121.848 432.398 120.878 432.021 120.238 432.037C119.887 431.496 120.94 431.725 121.146 431.676C119.928 431.414 120.444 430.824 120.217 430.397L120.919 430.43L120.114 429.725C120.032 429.889 119.412 429.692 118.979 429.659L119.061 429.495C117.079 429.971 120.238 430.988 117.988 431.463C117.74 431.25 117.348 431.48 117.1 431.266C117.183 431.102 117.286 431.086 117.554 431.086C116.997 430.955 116.522 430.643 116.522 430.988C115.056 430.856 115.49 430.201 115.036 429.692C116.027 429.381 116.398 430.184 117.079 430.43C116.997 430.25 116.378 430.053 116.77 429.823L117.864 429.971C117.327 429.282 116.914 429.725 115.862 429.495C114.478 429.217 115.985 428.922 115.903 428.725L116.151 428.938C116.687 428.462 115.511 428.266 115.676 427.823L116.584 427.675C115.407 428.167 118.05 428.479 117.43 428.774C118.566 428.02 119.681 429.118 120.589 429.446C120.424 429.069 120.589 428.758 121.229 428.61C119.846 427.987 121.89 427.561 120.238 426.921C120.465 426.659 120.981 427.216 121.043 426.921C121.229 426.396 121.105 425.806 120.527 425.199C120.589 424.904 121.084 425.003 121.559 424.953C122.385 423.592 119.804 422.838 120.61 421.33L121.188 421.608C121.353 421.297 121.6 421.034 120.795 420.805C122.757 420.542 119.784 419.329 121.889 418.968C122.344 418.312 120.692 418.165 120.465 417.591C120.899 417.624 121.683 417.853 121.931 417.591C121.456 415.787 121.497 414.197 121.394 412.229C121.559 412.262 121.683 412.36 121.745 412.426C122.055 411.18 120.362 409.819 121.084 408.818C120.837 408.605 120.527 407.982 119.743 408.113C119.619 408.343 118.648 408.31 118.05 408.244C117.307 407.261 119.495 407.884 119.309 407.244C120.795 407.162 120.238 407.703 121.539 407.802L120.713 406.834C121.229 406.359 120.465 405.801 121.208 405.408C121.022 405.588 122.302 405.555 121.704 405.834C121.642 405.785 121.539 405.801 121.477 405.752C121.27 406.49 122.137 406.211 122.385 406.9C122.075 406.293 121.807 405.457 122.158 404.965C121.146 405.014 121.766 404.506 121.146 404.309L121.25 404.276C120.816 404.244 120.548 403.899 120.424 403.784L121.704 403.752C121.559 403.506 121.064 403.768 120.919 403.538C120.651 403.194 120.651 402.03 121.993 402.046C121.931 401.653 121.208 401.472 121.435 401.079C121.766 401.128 121.889 401.243 122.055 401.276C122.426 400.439 122.117 399.341 122.963 398.587C122.695 397.898 122.571 397.308 121.745 396.832C121.828 397.012 121.456 397.521 120.775 397.144C120.259 396.93 120.486 396.668 120.3 396.373C120.961 396.488 121.002 395.717 121.415 396.307C122.901 396.274 121.27 395.094 122.715 395.209C122.282 395.045 122.633 394.274 121.889 393.93C122.529 393.913 122.282 394.389 122.715 394.422L122.55 394.044L122.984 394.077C123.438 393.421 121.662 393.159 121.456 392.733L121.621 392.765L121.415 392.47L122.55 392.88C122.426 392.421 121.415 392.126 121.229 391.618H121.6L121.229 391.273C121.291 391.323 121.456 391.355 121.559 391.339C120.486 390.978 120.981 390.371 120.093 390.044C120.279 389.863 121.683 389.798 120.775 389.47L122.137 389.617C122.24 390.273 121.146 389.781 121.559 390.519C123.396 390.142 123.355 388.715 123.335 387.748C122.509 386.912 124.119 385.764 122.117 385.288L122.942 385.436L123.789 384.206C123.582 383.091 124.346 382.009 123.293 381.091L124.016 380.91C121.766 379.877 123.376 377.909 120.63 377.139C121.311 376.696 121.683 377.368 122.179 377.45C122.447 377.106 120.672 376.368 121.993 376.122C122.426 376.155 122.344 376.663 122.633 376.45C123.458 376.253 121.869 376.024 122.798 375.794C121.951 375.86 121.043 375.188 120.919 374.745C120.919 374.745 120.871 374.778 120.775 374.843C120.135 374.86 120.3 374.548 120.217 374.351C120.217 374.351 120.383 374.384 120.444 374.433C119.619 372.088 119.412 369.465 120.486 367.153L121.043 367.628C120.61 367.251 121.022 366.677 121.208 366.497L121.27 366.546C122.653 366.005 120.093 365.743 121.642 365.349L121.766 365.448C121.807 364.677 123.273 364.333 122.633 363.529C123.211 362.972 123.871 363.086 124.511 362.726C124.511 362.381 123.727 362.168 123.562 362.135L123.479 362.299C122.695 362.43 122.88 361.889 122.571 361.627C121.353 361.725 119.474 361.479 118.174 362.086C118.525 362.627 116.171 362.43 116.316 363.021C117.885 363.463 115.015 363.742 116.398 364.365C115.325 364.005 115.717 364.939 114.582 364.398C113.694 364.546 115.387 365.579 114.313 365.907C114.086 365.825 113.818 365.825 113.694 365.71C114.272 366.333 112.889 366.038 112.827 366.464L113.962 366.53C114.313 366.727 113.508 366.71 113.694 366.874C113.838 366.776 114.416 366.563 114.85 366.727C115.098 366.94 115.449 367.136 115.428 367.35C114.994 367.317 114.809 367.153 114.685 367.054C114.685 367.054 114.54 367.497 113.983 367.497C113.632 367.3 113.653 367.087 113.033 366.907C112.62 367.481 112.662 366.923 111.733 367.153C113.075 367.153 112.249 367.71 112.517 368.071C111.98 368.071 112.373 367.825 111.98 367.727C109.565 368.169 112.269 368.678 111.691 369.448C111.526 369.416 111.402 369.317 111.341 369.252C111.671 369.662 110.391 369.826 111.134 370.121C110.866 370.465 109.606 370.072 109.586 370.629C110.969 370.563 109.256 371.269 110.721 371.383L109.813 371.744C110.577 372.17 112.311 371.826 112.352 372.564C111.733 373.187 109.937 372.318 109.132 372.662L109.916 372.892L109.317 373.171L109.256 373.121C109.503 373.335 109.235 373.679 108.801 373.646C108.471 373.597 108.492 373.384 108.161 373.318C108.863 373.695 106.014 374.45 108.161 374.958C107.749 375.122 107.707 375.515 107.026 375.417C107.976 375.663 106.613 376.27 107.212 376.565C106.881 376.499 106.324 376.713 106.551 376.926C106.943 376.696 107.294 376.876 107.81 377.106C107.088 377.286 107.604 377.975 106.427 377.991C107.026 378.401 107.872 378.319 108.698 378.467C107.976 378.647 108.017 379.385 106.696 379.156C106.881 378.975 107.191 378.549 106.283 378.565C105.746 378.91 106.634 378.762 106.737 379.074C106.489 379.041 105.891 379.221 105.498 379.139C105.622 379.336 105.581 379.582 105.333 379.828C105.994 379.467 106.242 380.156 106.799 379.959L105.87 379.5C105.87 379.024 106.613 379.451 106.985 379.303C107.15 380.156 108.554 380.09 109.09 380.91C108.843 381.041 108.45 381.271 108.388 381.353C108.347 381.091 107.109 381.041 106.861 381.173C107.852 381.681 106.097 381.91 105.829 382.255C106.159 381.96 106.943 382.189 107.232 382.32C107.872 383.124 106.737 382.583 106.118 382.861C106.118 384.026 104.425 384.649 105.168 385.633L106.365 385.272L105.313 385.042C106.18 384.764 107.707 385.288 108.388 385.534C108.017 385.551 108.161 386.141 107.583 385.879L107.996 386.469C108.471 386.42 108.306 386.043 108.781 386.338C108.43 386.502 108.12 387.043 107.521 386.649C107.46 386.944 107.79 387.338 108.43 387.322C108.43 387.797 107.067 387.174 106.654 386.928C106.551 387.305 105.622 387.174 105.333 387.043L105.416 387.568C105.127 387.436 104.693 387.404 104.404 387.272C103.971 387.584 105.147 387.912 104.198 388.141L105.085 388.338C104.239 389.224 104.115 389.125 103.909 389.994L104.59 389.896C105.725 390.65 103.455 390.306 103.867 391.24C104.218 391.782 104.487 392.126 105.56 392.142C105.932 392.47 105.292 392.487 104.858 392.585C105.436 392.864 106.489 393.421 105.787 393.733C105.478 393.471 105.23 393.257 105.085 393.011C104.012 393.011 104.755 393.782 104.218 394.11C104.693 394.405 105.911 395.356 106.778 395.897C107.666 395.75 108.946 395.914 109.772 396.406C109.111 396.291 109.028 396.93 108.533 397.193C107.914 396.996 106.881 397.734 106.696 397.094C107.047 396.947 107.976 396.93 107.666 396.652C106.985 396.75 106.159 397.078 105.519 397.455C105.189 397.406 104.776 397.16 104.796 396.947C105.085 397.078 105.292 397.029 105.56 397.029L105.684 397.094Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M103.806 409.77C103.806 409.77 103.991 409.868 104.136 409.885C104.053 409.835 103.95 409.802 103.806 409.77Z\",\n    fill: \"#7E6A5E\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M103.517 418.705C103.517 418.705 103.704 418.705 103.808 418.705C103.745 418.705 103.662 418.688 103.517 418.705Z\",\n    fill: \"#7E6A5E\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.79,\n    filter: \"url(#filter2_d_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.338 12.5234L230.118 447.659\",\n    stroke: \"black\",\n    strokeWidth: 0.1,\n    strokeMiterlimit: 10\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.79,\n    filter: \"url(#filter3_d_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M233.037 18.6758L229.816 453.811\",\n    stroke: \"black\",\n    strokeWidth: 0.1,\n    strokeMiterlimit: 10\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M119.331 19.0332H66.9104V451.36H119.331V19.0332Z\",\n    fill: \"#6B594A\",\n    fillOpacity: 0.26\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.79,\n    filter: \"url(#filter4_d_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.8753 25.5469L63.6343 460.682\",\n    stroke: \"black\",\n    strokeWidth: 0.1,\n    strokeMiterlimit: 10\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.34\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M123.714 308.801C123.714 308.801 123.714 308.883 123.714 308.932C123.777 309.031 123.84 309.129 123.871 309.228L123.714 308.801Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M123.083 331.771C123.083 331.771 123.083 331.87 123.083 331.919C123.114 331.919 123.145 331.919 123.083 331.771Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M125.035 123.955C125.035 123.955 125.035 124.021 125.035 124.054C125.035 123.972 125.035 123.889 125.066 123.807V123.955H125.035Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M125.128 124.429C125.065 124.937 125.034 124.282 125.034 124.068C124.939 124.626 124.939 125.183 124.971 125.757C125.065 125.757 125.065 124.691 125.128 124.429Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M125.382 59.6759L125.54 59.8079C125.476 59.6924 125.445 59.6594 125.382 59.6759Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M123.869 309.227L123.93 309.391C123.93 309.391 123.899 309.276 123.869 309.227Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M122.738 352.973C122.738 352.973 122.643 353.022 122.611 353.088C122.611 353.121 122.611 353.138 122.611 353.154L122.738 352.989V352.973Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M121.729 382.081C121.729 382.081 121.761 382.179 121.792 382.179C121.855 381.687 121.887 380.375 121.887 378.686L121.698 378.588V382.081H121.729Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M116.974 413.89L117.383 410.791C117.446 420.744 117.005 425.401 117.226 433.911L117.163 433.436C117.068 434.682 117.918 435.387 116.722 449.079H116.69C116.69 449.555 116.753 449.555 116.659 450.506L116.911 448.144C117.005 449.571 117.163 450.801 117.163 452.703C117.131 453.096 117.037 453.244 116.974 453.277V457.917L116.722 459.344C116.848 460.77 117.352 460.114 117.037 463.919C117.415 462.492 117.226 465.804 117.415 465.329C117.383 465.525 117.289 465.952 117.226 466.313C117.226 468.575 117.289 472.822 117.478 473.872C117.478 473.872 118.328 465.05 118.737 462.672C118.611 465.853 118.768 463.509 118.894 462.886L118.8 462.672C118.894 460.77 119.146 460.77 119.209 459.819C119.209 459.819 119.178 459.852 119.146 459.868V459.983C119.146 460.065 119.115 460.016 119.083 459.918C119.02 459.934 118.989 459.852 119.02 459.327V459.426C119.02 458.639 119.083 457.261 119.083 456.655H119.272C118.926 455.228 119.933 447.161 119.965 445.258C120.217 443.356 119.965 440.995 120.091 438.618C120.185 434.83 120.374 436.732 120.563 434.83C120.721 432.452 120.343 435.305 120.343 434.354L120.626 431.517C120.626 433.174 120.752 432.272 120.847 431.977C120.91 429.517 121.287 425.647 120.941 424.877C121.161 421.564 121.319 421.548 121.35 420.121C121.287 420.597 121.193 421.548 121.13 421.548C121.319 420.22 121.098 420.908 121.067 421.45C120.941 419.416 121.886 410.939 121.476 410.513H121.539C121.224 410.037 120.941 410.791 120.784 409.381L120.941 408.43L120.815 407.003C120.941 406.052 121.004 406.512 121.035 406.512C120.91 404.2 121.13 400.969 121.193 398.149L120.311 401.117C120.532 398.756 120.972 394.476 120.721 394L121.035 392.574C121.634 387.835 120.847 389.262 121.035 387.36L121.382 384.982V387.36C121.539 384.982 121.634 384.031 121.854 382.145V382.129C121.854 382.26 121.854 382.342 121.791 382.358V382.03C121.634 381.735 121.539 380.505 121.571 378.833C121.634 376.455 121.445 374.602 121.791 370.815L121.476 369.864L121.697 367.01H121.949C121.917 369.798 121.949 375.045 121.917 378.636L122.043 378.702C122.043 376.57 121.98 374.16 122.043 372.75C122.106 372.061 122.389 370.306 122.547 371.585L122.326 370.274C122.389 363.174 122.358 363.141 122.736 355.729L122.61 356.369C122.547 354.893 122.484 353.433 122.704 353.024C122.799 348.58 123.019 343.972 123.365 341.086L123.082 340.447C123.082 339.512 123.586 338.102 123.176 337.643L123.082 335.642C123.114 334.363 122.956 333.576 123.145 332.117C123.145 332.035 123.145 331.937 123.176 331.838C123.334 328.936 122.925 331.871 123.114 328.542C123.334 327.477 122.767 327.362 122.83 325.738L123.271 324.115C123.554 321.18 123.114 320.672 123.176 316.425C123.365 314.375 123.712 313.391 124.027 314.752C123.649 312.883 123.775 313.9 123.617 311.44C123.775 311.063 123.806 311.325 123.964 311.866C124.184 309.669 123.838 310.522 123.869 308.866C123.586 308.39 123.114 307.833 123.082 307.291L122.988 307.931C122.862 306.176 122.799 304.274 122.988 302.241L123.145 302.323L123.082 300.159L123.271 300.027V296.928L123.176 297.355C123.176 296.633 123.114 294.239 123.239 292.878L123.334 292.927C123.712 289.09 123.334 285.909 123.334 281.417L123.554 282.007C123.775 280.465 123.208 281.58 123.365 279.76L123.649 279.662C123.302 278.055 123.743 277.58 123.901 276.481L123.554 277.006L123.649 274.923C123.806 272.628 124.121 273.513 124.278 273.857L124.027 272.283L124.341 271.972C123.995 270.824 124.404 270.824 124.247 268.823C124.373 268.659 124.436 269.168 124.499 268.479L124.09 265.167L124.247 267.167L123.806 266.921C123.491 264.839 123.901 264.101 123.806 262.625L123.932 263.642C123.838 261.215 124.058 261.084 124.153 259.723C124.058 260.149 123.932 260.789 123.869 259.821C123.869 259.1 124.027 259.428 124.09 258.755C123.775 258.591 123.649 256.853 123.806 255.279C123.838 255.296 123.901 255.328 123.932 255.443C123.901 255.033 123.806 254.836 123.901 254.131L124.247 254.541L123.932 253.197C124.027 252.295 123.806 250.983 124.027 251.114L124.09 251.623L124.247 244.818L124.53 244.719C124.153 244.047 124.719 241.014 124.247 241.243C124.499 239.964 124.121 236.193 124.625 236.947C124.719 232.487 124.247 230.06 124.562 224.633C125.034 222.698 124.94 217.401 125.034 213.909C124.94 207.087 124.814 202.693 124.751 195.724C125.412 191.543 124.656 185.279 125.066 180.77L124.845 179.54C125.286 176.539 124.845 171.964 125.286 167.767C125.192 166.734 125.16 166.193 125.16 165.963C125.16 166.16 125.097 166.439 124.94 166.537C125.066 165.34 124.94 162.913 125.255 163.077V163.389C125.601 163.569 125.192 159.748 125.475 158.404L125.129 159.142L125.223 156.863L125.286 157.469C124.656 147.598 125.758 143.138 125.192 133.857C125.538 135.087 125.034 132.021 125.412 131.906C125.947 129.561 125.349 127.577 125.255 125.658C125.255 125.658 125.223 125.642 125.192 125.527L125.286 122.182C125.758 124.183 124.908 119.772 125.286 121.608C125.758 112.869 125.506 101.472 125.79 91.3553L125.664 91.798C125.727 89.24 125.601 86.0425 125.821 84.0912C126.042 82.14 125.538 79.8279 125.538 79.0737C125.349 76.942 125.79 75.0071 125.758 75.909C125.727 73.6298 125.286 71.4817 125.506 68.317C125.947 67.2348 125.192 59.6757 125.664 59.5937V59.5609C126.01 55.5107 125.475 51.6738 125.821 47.3121C125.821 47.3121 125.853 47.3941 125.884 47.5416L124.53 38.6543L122.893 41.1795L121.508 48.8698V69.7436L120.847 86.4033L120.563 126.954L120.878 129.856C120.154 137.825 120.784 148.041 120.217 156.617L120.532 156.797C120.532 159.224 120.343 159.06 120.28 159.65C120.091 182.164 120.28 205.333 119.619 225.584C119.398 227.535 119.43 233.471 119.209 235.012C119.524 241.587 119.43 248.556 119.335 255.148V254.902V258.001C119.335 258.132 119.272 258.149 119.241 258.05C119.493 261.543 119.146 267.069 118.989 271.349V271.103C118.611 296.108 118.926 319.311 118.233 344.103C117.604 355.631 118.139 369.044 117.572 382.26C117.226 384.687 117.163 411.447 117.289 413.808L116.974 413.89Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M121.161 398.017C121.161 398.017 121.161 398.131 121.161 398.197L121.35 397.541L121.161 398.017Z\",\n    fill: \"#202020\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M120.877 433.419C120.934 431.828 120.877 431.746 120.877 431.976C120.877 432.55 120.877 433.058 120.877 433.419Z\",\n    fill: \"#202020\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.79,\n    filter: \"url(#filter5_d_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M122.552 33.3574L119.332 468.493\",\n    stroke: \"black\",\n    strokeWidth: 0.1,\n    strokeMiterlimit: 10\n  }))))), /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter6_d_42_3399)\"\n  }, _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.5733 140.075L10.4739 194.357L301.681 201.435L303.78 147.152L12.5733 140.075Z\",\n    fill: \"#5D5042\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask1_42_3399\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 10,\n    y: 140,\n    width: 294,\n    height: 62\n  }, _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12.5726 140.077L10.4731 194.359L301.68 201.437L303.779 147.154L12.5726 140.077Z\",\n    fill: \"white\"\n  }))), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask1_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.5\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M99.2717 170.611C99.0791 170.557 98.9857 170.663 99.2717 170.611Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M252.479 163.391C252.479 163.391 252.561 163.386 252.623 163.382C252.714 163.048 252.809 162.762 252.891 162.543L252.479 163.391Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M277.249 164.647C277.249 164.647 277.359 164.706 277.404 164.737C277.384 164.539 277.406 164.339 277.249 164.647Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M195.808 168.238C195.599 168.218 195.484 168.308 195.391 168.413C195.507 168.339 195.624 168.266 195.808 168.238Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.1733 173.786C54.1733 173.786 54.2353 173.782 54.2733 173.747C54.1841 173.686 54.0965 173.642 54.0039 173.549L54.1717 173.77L54.1733 173.786Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.633 173.212C55.1943 173.44 54.5143 173.68 54.274 173.761C54.8961 174.182 55.4994 174.21 56.0971 173.975C56.0668 173.467 54.9193 173.589 54.633 173.212Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M199.474 192.988C199.355 193.045 199.213 193.071 199.115 193.126C199.302 193.131 199.42 193.074 199.474 192.988Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M252.89 162.542L253.044 162.219C253.044 162.219 252.938 162.407 252.89 162.542Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M300.051 164.451C300.076 164.696 300.137 164.89 300.196 165.067C300.217 165.066 300.238 165.064 300.258 165.063L300.051 164.451Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M366.824 188.852L363.385 186.981C374.028 185.73 379.12 187.562 388.188 185.671L387.694 186.113C389.041 186.538 389.585 182.062 404.581 187.032L404.601 187.228C405.093 187.18 405.074 186.787 406.118 187.28L403.519 186.145C405.018 185.606 406.305 184.603 408.335 184.409C408.77 184.611 408.955 185.011 409.008 185.336L413.97 184.841L415.564 186.072C417.064 185.335 416.214 182.642 420.37 184.023C418.738 182.202 422.342 182.829 421.792 181.893C422.002 182.127 422.491 182.458 422.894 182.761C425.308 182.46 429.838 181.794 430.919 180.804C430.919 180.804 421.234 177.158 418.597 175.237C422.035 175.644 419.483 174.983 418.78 174.37L418.579 174.843C416.509 174.448 416.453 173.267 415.409 172.972C415.418 173.07 415.45 173.183 415.483 173.296L415.612 173.14C415.715 173.347 415.668 173.498 415.556 173.62C415.583 173.882 415.518 174.067 414.955 174.02L415.046 173.899C414.197 174.101 412.712 173.965 412.063 173.891L412.006 172.908C410.584 174.84 401.685 170.355 399.634 170.354C397.527 169.171 395.062 170.808 392.481 170.265C388.403 170.079 390.375 168.885 388.287 168.096C385.705 167.553 388.856 169.228 387.83 169.326L384.699 168.044C386.462 167.867 385.473 167.304 385.125 166.932C382.467 166.854 378.217 165.166 377.507 167.168C373.902 166.328 373.844 165.542 372.307 165.491C372.838 165.836 373.862 166.133 373.901 166.525C372.431 165.697 373.221 166.766 373.819 166.942C371.675 167.867 362.332 163.706 361.991 165.883L361.952 165.49C361.555 167.111 362.435 168.651 360.956 169.6L359.914 168.91L358.414 169.646C357.37 169.153 357.843 168.712 357.844 168.515C355.401 169.344 351.885 168.564 348.849 168.444L352.262 172.734C349.662 171.797 344.975 169.874 344.54 171.316L342.947 169.888C337.71 167.226 339.458 171.228 337.37 170.439L334.731 168.912L337.274 168.866C334.693 168.125 333.629 167.633 331.563 166.646C331.563 166.646 331.545 166.68 331.547 166.696C331.698 166.752 331.788 166.829 331.798 166.927L331.452 166.982C331.181 167.788 329.873 168.381 328.094 168.396C325.531 168.246 323.607 169.503 319.452 167.924L318.522 169.595L315.409 168.707L315.34 167.395C318.342 167.386 323.947 166.701 327.802 166.522L327.846 165.927C325.555 166.007 322.991 166.663 321.491 166.577C320.743 166.345 318.789 165.038 320.125 164.114L318.788 165.433C311.184 165.817 311.129 165.886 303.115 164.651L303.841 165.279C302.291 165.723 300.737 166.134 300.24 165.097C295.448 165.022 290.474 164.367 287.293 162.793L286.684 164.361C285.664 164.311 284.047 162.028 283.666 164.207L281.545 164.95C280.17 164.873 279.371 165.779 277.754 164.944C277.645 164.885 277.558 164.842 277.447 164.766C277.452 164.815 277.455 164.848 277.46 164.897C274.315 164.307 277.557 166.273 273.938 165.499C272.734 164.44 272.771 167.498 271.002 167.199L269.15 165.046C265.925 163.869 265.509 166.116 260.946 166.258C258.721 165.543 257.56 163.676 258.92 161.961C257.018 164.056 258.082 163.314 255.475 164.368C255.02 163.541 255.291 163.359 255.855 162.583C253.446 161.684 254.444 163.38 252.665 163.394C252.224 164.985 251.751 167.499 251.185 167.634L251.895 168.099C250.06 169.005 248.033 169.446 245.807 168.732L245.852 167.939L243.539 168.415L243.334 167.408L240.022 167.832L240.484 168.099C239.713 168.263 237.167 168.688 235.669 168.207L235.696 167.646C231.474 166.022 228.195 168.434 223.361 168.758L223.947 167.585C222.243 166.493 223.588 169.368 221.59 168.854L221.448 167.448C219.777 169.363 219.159 167.133 217.933 166.47L218.573 168.305L216.305 167.988C213.807 167.456 214.667 165.707 214.984 164.733L213.374 166.233L212.963 164.614C211.831 166.545 211.714 164.348 209.608 165.436C209.401 164.824 209.924 164.462 209.174 164.213L205.73 166.619L207.816 165.533L207.683 167.927C205.553 169.805 204.643 167.758 203.079 168.482L204.144 167.74C201.58 168.396 201.375 167.389 199.898 166.907C200.376 167.337 201.102 167.966 200.06 168.312C199.287 168.459 199.604 167.485 198.856 167.253C198.766 168.838 196.931 169.744 195.205 169.047C195.223 168.816 195.243 168.601 195.353 168.462C194.925 168.736 194.738 169.143 193.958 168.798L194.317 167.015L192.958 168.746C191.981 168.298 190.623 169.618 190.69 168.429L191.213 168.067L183.883 167.874L183.742 166.468C183.09 168.434 179.704 165.853 180.051 168.282C178.598 167.009 174.673 169.38 175.349 166.623C170.539 166.566 168.077 169.272 162.185 168.132C159.99 165.87 154.347 166.804 150.587 166.681C143.314 167.882 138.633 168.903 131.193 169.885C126.533 166.792 120.033 171.35 115.101 169.672L113.847 171.002C110.525 169.058 105.738 171.714 101.121 169.869C100.042 170.464 99.4822 170.664 99.2179 170.713C99.4303 170.766 99.7446 171.009 99.8884 171.822C98.5708 171.281 96.0008 172.085 96.1058 170.45L96.4186 170.266C96.5237 168.631 92.5522 171.153 91.0274 169.785L91.9043 171.506L89.4383 171.284L90.0656 170.932C79.6577 175.146 74.5815 169.76 64.7993 173.605C66.0321 171.651 62.8761 174.664 62.6471 172.59C60.0098 170.043 58.0169 173.295 56.0025 174.064C56.0123 174.162 55.9827 174.279 55.8756 174.45L52.2589 174.318C54.287 171.623 49.7732 176.581 51.6333 174.276C42.1466 172.607 30.0016 174.99 19.0938 174.432L19.5949 175.091C16.8366 175.052 13.4501 175.975 11.2979 174.96C9.14577 173.945 6.80479 176.824 6.01045 176.957C3.77449 178.201 1.57992 175.938 2.56187 176.024C0.13767 176.425 -2.0575 178.9 -5.50444 177.983C-6.78044 175.794 -14.6772 180.474 -14.8888 177.954L-14.9086 178.169C-19.3604 176.527 -23.3106 179.673 -28.0752 178.215C-28.0752 178.215 -27.9904 178.028 -27.8421 177.855L-37.0066 185.789L-33.8722 194.111L-25.2611 200.671L-2.90785 198.479L15.1128 200.576L58.6235 198.309L61.6326 196.308C70.3468 199.358 81.1333 195.203 90.4743 197.275L90.5793 195.64C93.1722 195.475 93.0443 196.47 93.7134 196.74C117.872 195.618 142.655 192.664 164.515 194.024C166.668 195.039 173.025 194.208 174.707 195.285C181.67 193.067 189.166 192.855 196.247 192.833L195.996 193.013L199.308 192.589C199.465 192.711 199.485 192.907 199.375 193.046C203.069 191.479 209.055 192.728 213.677 193.174L213.426 193.355C240.293 192.802 265.071 188.976 291.805 190.405C304.313 192.671 318.54 188.544 332.863 190.316C335.544 191.857 364.221 189.741 366.725 188.891L366.824 188.852Z\",\n    fill: \"#72665A\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.4\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M207.522 178.05C207.788 178 207.677 178.14 207.522 178.05Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M78.724 172.619C78.724 172.619 78.6417 172.624 78.6006 172.627C78.4597 173.08 78.3344 173.483 78.2199 173.786L78.7257 172.635L78.724 172.619Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58.3696 168.304C58.3696 168.304 58.2993 168.226 58.2512 168.163C58.2378 168.444 58.1813 168.711 58.3696 168.304Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M126.788 171.561C126.957 171.6 127.073 171.51 127.161 171.356C127.046 171.446 126.93 171.536 126.788 171.561Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.641 178.181C245.641 178.181 245.58 178.185 245.542 178.22C245.613 178.315 245.663 178.394 245.738 178.521L245.643 178.197L245.641 178.181Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M245.138 178.956C244.728 178.587 245.341 178.301 245.541 178.223C245.101 177.56 244.616 177.475 244.062 177.724C243.988 178.436 244.959 178.408 245.138 178.956Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M303.776 179.46L303.538 180.594C303.697 180.123 303.766 179.773 303.776 179.46Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M78.1969 173.769L77.9927 174.211C78.0446 174.109 78.1121 173.956 78.1969 173.769Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M39.3582 166.251C39.3853 165.904 39.3779 165.625 39.3533 165.38C39.3328 165.381 39.3123 165.382 39.3123 165.382L39.4009 166.265L39.3582 166.251Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.7275 159.519C13.6995 159.653 13.6081 159.774 13.6006 159.906C14.0153 160.324 15.1701 160.481 16.6888 160.549L16.9435 159.167L13.7291 159.536L13.7275 159.519Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M-11.3579 125.023L-8.88201 128.024C-17.9883 128.7 -21.8627 125.591 -29.7635 127.342L-29.262 126.767C-30.308 126.044 -31.6268 132.297 -43.1092 123.748L-43.0754 123.466C-43.5075 123.493 -43.5768 124.04 -44.3413 123.234L-42.3935 125.1C-43.7403 125.712 -45.0009 126.977 -46.7327 127.054C-47.0569 126.712 -47.1144 126.14 -47.0986 125.679L-51.3254 125.865L-52.4072 123.959C-53.7878 124.853 -53.6268 128.725 -56.805 126.36C-55.8041 129.11 -58.6649 127.844 -58.4035 129.209C-58.5409 128.872 -58.8832 128.351 -59.1382 127.874C-61.1927 128.037 -65.0986 128.532 -66.2118 129.819C-66.2118 129.819 -58.8862 135.951 -57.0532 138.943C-59.8384 138.018 -57.8328 139.223 -57.3672 140.148L-57.1003 139.506C-55.4494 140.273 -55.6334 141.946 -54.8352 142.471C-54.8277 142.339 -54.8235 142.174 -54.84 142.011L-54.9832 142.234C-55.0144 141.923 -54.9724 141.723 -54.8431 141.567C-54.8175 141.203 -54.7203 140.934 -54.2511 141.069L-54.3582 141.24C-53.6116 141.044 -52.4165 141.396 -51.884 141.543L-52.0326 142.951C-50.4695 140.368 -43.9444 147.603 -42.2463 147.808C-40.7324 149.686 -38.3711 147.628 -36.3202 148.665C-32.9579 149.357 -34.84 150.825 -33.2567 152.156C-31.2075 153.177 -33.5065 150.494 -32.6405 150.455L-30.2945 152.576C-31.8 152.639 -31.0874 153.548 -30.8653 154.11C-28.6727 154.497 -25.4708 157.304 -24.483 154.56C-21.6355 156.106 -21.7519 157.216 -20.486 157.448C-20.8505 156.912 -21.6693 156.388 -21.6017 155.825C-20.5378 157.139 -21.0073 155.557 -21.4517 155.256C-19.4907 154.161 -12.5489 161.008 -11.8204 157.951L-11.888 158.515C-11.2231 156.268 -11.6587 153.993 -10.2442 152.817L-9.51528 153.89L-8.13464 152.996C-7.34963 153.802 -7.85108 154.376 -7.88491 154.658C-5.67786 153.745 -2.9225 155.199 -0.430243 155.682L-2.4211 149.261C-0.439508 150.846 3.06931 154.029 3.72099 152.063L4.76899 154.25C8.59521 158.531 7.94914 152.716 9.51185 154.048L11.4125 156.477L9.2807 156.283C11.2961 157.586 12.0606 158.393 13.6084 159.989C13.6067 159.973 13.6257 159.955 13.643 159.921C13.5286 159.813 13.4759 159.702 13.4628 159.571L13.7715 159.551C14.1554 158.425 15.3467 157.708 16.8562 157.891C18.9525 158.351 20.8042 156.786 23.9502 159.448L25.0472 157.174L27.461 158.732L27.2538 160.587C24.7607 160.301 19.9536 160.689 16.7311 160.564L16.5885 161.412C18.5063 161.537 20.7585 160.868 22.0071 161.134C22.5865 161.542 23.9506 163.577 22.6612 164.761L24.0405 163.028C30.4426 163.264 30.4961 163.178 36.9239 165.731L36.4534 164.758C37.8372 164.308 39.2004 163.859 39.4164 165.392C43.3894 165.979 47.3877 167.436 49.732 169.952L50.5319 167.812C51.3574 167.99 52.2783 171.386 53.0085 168.346L54.9118 167.501C56.0542 167.741 56.8875 166.553 58.0782 167.892C58.1481 167.97 58.2197 168.064 58.2929 168.175C58.2864 168.11 58.2798 168.044 58.2955 167.994C60.7916 169.135 58.4911 166.024 61.3304 167.489C62.1152 169.117 62.6952 164.787 64.1017 165.388L65.2136 168.624C67.6494 170.608 68.4554 167.497 72.291 167.747C74.0101 168.987 74.5962 171.73 73.1287 174.027C75.1091 171.27 74.0849 172.206 76.4682 170.986C76.672 172.19 76.4258 172.42 75.8057 173.463C77.6366 174.991 77.1353 172.473 78.6226 172.642C79.2925 170.445 80.1825 166.934 80.6887 166.82L80.1794 166.079C81.8935 165 83.6715 164.558 85.3701 165.799L85.1714 166.914L87.1774 166.474L87.135 167.907L89.9683 167.662L89.6375 167.255C90.3067 167.114 92.5079 166.761 93.6476 167.593L93.5206 168.391C96.7143 171.116 99.9065 168.051 103.988 168.072L103.278 169.663C104.486 171.379 103.92 167.188 105.483 168.109L105.352 170.107C107.087 167.579 107.161 170.798 108.055 171.86L107.871 169.207L109.679 169.882C111.644 170.892 110.579 173.279 110.155 174.622L111.78 172.66L111.807 174.994C113.139 172.377 112.789 175.491 114.75 174.183C114.797 175.068 114.284 175.528 114.865 175.952L118.203 172.894L116.244 174.219L116.839 170.859C118.996 168.419 119.338 171.408 120.763 170.544L119.738 171.481C122.011 170.81 121.971 172.26 123.11 173.093C122.796 172.438 122.326 171.465 123.241 171.094C123.91 170.953 123.465 172.297 124.026 172.722C124.423 170.493 126.115 169.398 127.413 170.566C127.362 170.882 127.29 171.199 127.184 171.387C127.585 171.049 127.84 170.49 128.415 171.062L127.773 173.537L129.241 171.24C129.978 171.983 131.357 170.25 131.05 171.931L130.537 172.391L136.584 173.422L136.453 175.421C137.362 172.715 139.667 176.697 139.838 173.249C140.78 175.196 144.521 172.244 143.414 176.065C147.406 176.634 149.968 173.066 154.664 175.285C156.041 178.685 160.937 177.947 164.018 178.524C170.301 177.566 174.389 176.616 180.765 175.981C184.027 180.824 190.343 175.044 194.11 177.914L195.426 176.169C197.807 179.259 202.305 175.996 205.783 179.082C206.786 178.344 207.303 178.13 207.526 178.083C207.37 177.978 207.148 177.613 207.177 176.46C208.177 177.351 210.472 176.481 210.06 178.778L209.751 178.995C209.339 181.291 213.144 178.138 214.141 180.229L213.742 177.705L215.746 178.269L215.147 178.701C224.639 173.822 227.795 181.945 236.668 177.5C235.274 180.122 238.463 176.202 238.263 179.159C239.955 183.016 242.248 178.627 244.086 177.753C244.092 177.605 244.138 177.438 244.26 177.216L247.237 177.784C245.032 181.395 249.738 174.845 247.746 177.9C255.309 181.236 265.862 179.086 274.835 181L274.549 180.015C276.842 180.363 279.829 179.384 281.425 181.043C283.018 182.685 285.514 178.875 286.208 178.765C288.313 177.25 289.69 180.65 288.88 180.422C290.981 180.107 293.283 176.836 295.976 178.491C296.611 181.724 304.084 175.92 303.78 179.493L303.853 179.192C307.237 181.955 311.14 177.923 314.811 180.454C314.811 180.454 314.712 180.707 314.55 180.948L323.728 170.677L322.745 158.616L316.86 148.478L297.848 149.289L283.261 144.474L246.648 143.244L243.751 145.748C237.1 140.56 227.307 145.327 219.959 141.451L219.548 143.747C217.352 143.738 217.665 142.32 217.165 141.875C196.864 140.992 175.677 142.632 157.78 138.471C156.186 136.828 150.751 137.354 149.543 135.638C143.325 138.056 137.046 137.599 131.156 136.903L131.401 136.658L128.568 136.903C128.466 136.712 128.479 136.432 128.586 136.26C125.207 138.087 120.476 135.722 116.721 134.628L116.967 134.399C94.5281 132.434 73.1748 135.302 51.2212 130.543C41.2653 126.059 28.6366 130.43 17.0771 126.475C15.1542 124.031 -9.11131 124.091 -11.3562 125.039L-11.3579 125.023Z\",\n    fill: \"#72665A\"\n  }))))), /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter7_d_42_3399)\"\n  }, _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.152 268.014H10.8066V322.322H302.152V268.014Z\",\n    fill: \"#5D5042\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask2_42_3399\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 10,\n    y: 268,\n    width: 293,\n    height: 55\n  }, _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.152 268.014H10.8062V322.322H302.152V268.014Z\",\n    fill: \"white\"\n  }))), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask2_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.5\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M115.307 308.171C115.1 308.105 115.017 308.221 115.307 308.171Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M268.731 305.466C268.731 305.466 268.813 305.466 268.875 305.466C268.978 305.138 269.082 304.86 269.185 304.646L268.731 305.483V305.466Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M293.42 307.469C293.42 307.469 293.524 307.518 293.566 307.551C293.566 307.353 293.566 307.155 293.42 307.469Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M211.879 308.633C211.672 308.617 211.548 308.683 211.466 308.798C211.59 308.732 211.714 308.666 211.879 308.633Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.076 310.01C70.076 310.01 70.1382 310.01 70.1796 309.977C70.0967 309.911 69.9931 309.862 69.9102 309.779L70.076 310.01Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.5719 309.436C71.1086 309.682 70.4274 309.895 70.1797 309.96C70.7784 310.403 71.377 310.436 71.9963 310.239C71.9963 309.731 70.8403 309.813 70.5719 309.436Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M269.184 304.631L269.37 304.318C269.37 304.318 269.246 304.499 269.184 304.631Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M381.817 334.277L378.473 332.292C389.166 331.358 394.182 333.342 403.328 331.719L402.832 332.145C404.174 332.604 404.897 328.144 419.657 333.555V333.752C420.173 333.719 420.173 333.326 421.185 333.85L418.625 332.637C420.152 332.129 421.474 331.194 423.517 331.046C423.951 331.259 424.095 331.669 424.137 331.997L429.132 331.653L430.66 332.932C432.188 332.227 431.486 329.538 435.573 331.03C434.025 329.161 437.596 329.898 437.08 328.947C437.287 329.177 437.761 329.521 438.133 329.849C440.548 329.62 445.131 329.095 446.246 328.128C446.246 328.128 436.75 324.192 434.19 322.192C437.617 322.7 435.098 321.962 434.417 321.339L434.19 321.815C432.146 321.355 432.146 320.175 431.114 319.847C431.114 319.945 431.155 320.06 431.176 320.175L431.3 320.011C431.403 320.224 431.341 320.372 431.238 320.486C431.259 320.732 431.176 320.946 430.619 320.864L430.722 320.732C429.876 320.913 428.389 320.732 427.749 320.634V319.65C426.222 321.536 417.531 316.797 415.487 316.731C413.443 315.485 410.904 317.043 408.344 316.436C404.277 316.125 406.3 314.993 404.257 314.141C401.697 313.518 404.773 315.288 403.761 315.354L400.706 313.977C402.481 313.862 401.511 313.255 401.181 312.878C398.538 312.714 394.368 310.91 393.563 312.878C389.992 311.943 389.992 311.156 388.444 311.058C388.96 311.419 389.971 311.747 389.992 312.14C388.567 311.271 389.311 312.353 389.889 312.55C387.721 313.419 378.576 308.976 378.122 311.14V310.746C377.626 312.353 378.431 313.928 376.924 314.829L375.913 314.108L374.385 314.813C373.353 314.288 373.869 313.862 373.869 313.665C371.371 314.419 367.903 313.534 364.889 313.321L368.089 317.715C365.55 316.699 360.946 314.649 360.43 316.059L358.902 314.583C353.783 311.763 355.352 315.813 353.308 314.977L350.748 313.37H353.308C350.748 312.583 349.736 312.058 347.693 311.009C347.693 311.009 347.672 311.042 347.672 311.058C347.817 311.124 347.899 311.206 347.92 311.304L347.569 311.337C347.259 312.14 345.938 312.698 344.142 312.649C341.582 312.435 339.6 313.616 335.513 311.927L334.501 313.583L331.446 312.599V311.288C334.439 311.353 340.075 310.845 343.936 310.779L343.998 310.173C341.706 310.173 339.126 310.763 337.598 310.632C336.855 310.369 334.976 309.008 336.339 308.123L334.935 309.402C327.317 309.566 327.255 309.631 319.308 308.156L320.009 308.812C318.441 309.205 316.851 309.582 316.417 308.516C311.649 308.303 306.694 307.5 303.577 305.844L302.896 307.385C301.884 307.303 300.357 304.975 299.882 307.139L297.735 307.828C296.352 307.713 295.505 308.598 293.936 307.713C293.833 307.664 293.73 307.598 293.647 307.533C293.647 307.582 293.647 307.615 293.647 307.664C290.53 306.991 293.689 309.041 290.097 308.172C288.941 307.073 288.837 310.14 287.083 309.795L285.328 307.582C282.169 306.319 281.633 308.533 277.07 308.549C274.882 307.762 273.809 305.876 275.254 304.188C273.251 306.221 274.345 305.516 271.703 306.5C271.29 305.663 271.579 305.483 272.157 304.729C269.804 303.761 270.712 305.483 268.937 305.434C268.421 307.008 267.843 309.517 267.265 309.615L267.946 310.107C266.067 310.96 264.024 311.353 261.835 310.566L261.918 309.779L259.585 310.189L259.441 309.172L256.117 309.5L256.571 309.779C255.787 309.91 253.227 310.271 251.761 309.746L251.823 309.189C247.694 307.451 244.288 309.746 239.437 309.943L240.077 308.795C238.425 307.664 239.623 310.566 237.661 309.992L237.558 308.582C235.824 310.435 235.329 308.188 234.131 307.5L234.689 309.353L232.439 308.976C229.961 308.369 230.911 306.647 231.283 305.68L229.61 307.139L229.28 305.516C228.062 307.418 228.041 305.221 225.894 306.237C225.709 305.614 226.266 305.27 225.523 305.007L221.972 307.319L224.119 306.303L223.871 308.68C221.642 310.5 220.837 308.434 219.247 309.09L220.341 308.385C217.74 308.976 217.596 307.959 216.13 307.434C216.584 307.877 217.286 308.533 216.233 308.844C215.469 308.976 215.82 308.008 215.077 307.746C214.912 309.336 213.033 310.173 211.341 309.435C211.341 309.205 211.403 308.992 211.506 308.844C211.072 309.107 210.845 309.517 210.102 309.139L210.536 307.369L209.09 309.058C208.12 308.582 206.716 309.861 206.84 308.664L207.398 308.303L200.09 307.893L199.987 306.483C199.264 308.434 196.002 305.745 196.25 308.172C194.867 306.86 190.821 309.123 191.626 306.385C186.816 306.188 184.235 308.828 178.393 307.5C176.308 305.188 170.611 305.942 166.874 305.712C159.545 306.696 154.818 307.582 147.345 308.336C142.824 305.106 136.115 309.467 131.263 307.647L129.942 308.943C126.722 306.893 121.809 309.418 117.288 307.434C116.173 307.992 115.595 308.172 115.347 308.221C115.554 308.287 115.863 308.533 115.966 309.336C114.666 308.762 112.065 309.484 112.251 307.861L112.581 307.697C112.767 306.057 108.659 308.467 107.234 307.057L108.039 308.812L105.603 308.516L106.264 308.172C95.653 312.075 90.843 306.532 80.8927 310.107C82.2139 308.188 78.9315 311.107 78.787 309.025C76.2685 306.401 74.1422 309.599 72.0778 310.304C72.0778 310.402 72.0572 310.533 71.9333 310.681L68.3206 310.435C70.4676 307.795 65.7402 312.632 67.7013 310.386C58.3084 308.434 46.046 310.468 35.1668 309.582L35.6416 310.255C32.8753 310.123 29.4484 310.96 27.3634 309.877C25.2577 308.795 22.8011 311.615 21.9754 311.714C19.6839 312.878 17.5989 310.566 18.5692 310.681C16.1126 311.009 13.8211 313.419 10.4149 312.403C9.23819 310.173 1.14583 314.616 1.02197 312.091L0.980679 312.304C-3.37516 310.533 -7.48326 313.567 -12.19 311.96C-12.19 311.96 -12.1075 311.779 -11.9423 311.599L-21.4797 319.257L-18.7341 327.668L-10.4353 334.473L12.0045 332.948L29.9232 335.588L73.5022 334.605L76.5988 332.702C85.1659 335.998 96.1484 332.161 105.376 334.523L105.562 332.883C108.163 332.784 107.998 333.801 108.638 334.08C132.832 333.67 157.729 331.44 179.508 333.457C181.614 334.539 187.993 333.883 189.644 335.031C196.704 333.014 204.198 333.03 211.279 333.211L211.01 333.391L214.334 333.063C214.479 333.194 214.499 333.391 214.396 333.522C218.153 332.063 224.078 333.49 228.681 334.063L228.413 334.244C255.291 334.49 280.229 331.391 306.88 333.621C319.287 336.261 333.676 332.555 347.899 334.752C350.521 336.375 379.278 335.096 381.817 334.326V334.277Z\",\n    fill: \"#72665A\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.4\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M223.169 307.452C223.439 307.419 223.314 307.568 223.169 307.452Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M95.3227 293.891C95.3227 293.891 95.2401 293.891 95.1988 293.891C95.013 294.333 94.8479 294.727 94.7034 295.022L95.3227 293.907V293.891Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.4644 288.3C75.4644 288.3 75.4021 288.218 75.3605 288.152C75.319 288.432 75.2359 288.695 75.4644 288.3Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M143.341 295.876C143.506 295.925 143.63 295.843 143.733 295.695C143.609 295.777 143.485 295.86 143.341 295.876Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M261.175 309.994C261.175 309.994 261.114 309.994 261.072 310.027C261.134 310.126 261.175 310.208 261.237 310.339L261.175 310.011V309.994Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M260.597 310.732C260.225 310.338 260.865 310.092 261.071 310.027C260.7 309.338 260.225 309.223 259.647 309.437C259.502 310.142 260.473 310.174 260.597 310.732Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M94.683 295.008L94.4353 295.435C94.4972 295.337 94.5798 295.189 94.683 295.008Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.74 285.055C56.8017 284.71 56.8223 284.432 56.8223 284.186C56.8017 284.186 56.7811 284.186 56.7606 284.186V285.071L56.74 285.055Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.8441 276.726C31.8028 276.857 31.6996 276.972 31.679 277.103C32.0505 277.546 33.186 277.775 34.693 277.939L35.0852 276.578L31.8441 276.742V276.726Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.2915 240.749L12.4591 243.897C3.3139 243.995 -0.236826 240.65 -8.2879 241.896L-7.73051 241.355C-8.70077 240.568 -10.6413 246.717 -21.2315 237.469L-21.1696 237.19C-21.6031 237.19 -21.727 237.732 -22.4082 236.879L-20.6535 238.863C-22.0573 239.388 -23.4404 240.568 -25.1745 240.536C-25.4635 240.175 -25.4635 239.601 -25.4016 239.142L-29.6336 239.06L-30.5212 237.092C-31.9869 237.896 -32.214 241.765 -35.1454 239.207C-34.4229 242.011 -37.1479 240.568 -37.024 241.946C-37.1272 241.601 -37.4163 241.06 -37.6227 240.568C-39.6871 240.601 -43.63 240.847 -44.8687 242.06C-44.8687 242.06 -38.1801 248.636 -36.6524 251.735C-39.3361 250.636 -37.4575 251.964 -37.086 252.915L-36.7557 252.292C-35.1867 253.161 -35.5377 254.818 -34.7945 255.391C-34.7738 255.26 -34.7532 255.096 -34.7532 254.916L-34.9184 255.129C-34.9184 254.818 -34.8564 254.621 -34.7119 254.473C-34.65 254.113 -34.5261 253.85 -34.072 254.014L-34.1958 254.178C-33.432 254.031 -32.276 254.457 -31.7599 254.637L-32.0489 256.031C-30.2322 253.555 -24.452 261.18 -22.7798 261.491C-21.4586 263.459 -18.8988 261.557 -16.9583 262.721C-13.6759 263.623 -15.699 264.968 -14.2539 266.394C-12.3134 267.542 -14.3365 264.722 -13.4695 264.738L-11.3432 267.001C-12.8502 266.968 -12.2309 267.919 -12.0657 268.493C-9.91875 269.018 -7.00798 272.018 -5.74871 269.346C-3.06502 271.067 -3.2921 272.166 -2.05348 272.477C-2.36313 271.92 -3.12696 271.346 -3.00309 270.789C-2.07412 272.166 -2.38378 270.559 -2.79665 270.231C-0.732277 269.264 5.50215 276.528 6.53433 273.527L6.41047 274.084C7.29815 271.887 7.09171 269.592 8.61935 268.509L9.23866 269.624L10.7044 268.821C11.4063 269.674 10.8489 270.215 10.7869 270.493C13.0784 269.723 15.6795 271.346 18.1155 271.986L16.7736 265.459C18.5903 267.165 21.7694 270.559 22.6158 268.641L23.4416 270.887C26.8272 275.396 26.7652 269.559 28.1896 270.985L29.8411 273.527L27.7355 273.199C29.6141 274.626 30.2953 275.478 31.6784 277.167C31.6784 277.151 31.6991 277.134 31.7197 277.102C31.6165 276.987 31.5752 276.872 31.5752 276.741H31.8849C32.3803 275.642 33.6396 275.003 35.1259 275.281C37.1697 275.872 39.1721 274.429 42.0416 277.282L43.3628 275.085L45.613 276.79L45.2208 278.626C42.7641 278.184 37.9335 278.266 34.7337 277.938L34.5066 278.774C36.4059 279.02 38.718 278.495 39.9359 278.84C40.4727 279.282 41.6287 281.398 40.225 282.496L41.7732 280.857C48.1315 281.496 48.1935 281.414 54.3453 284.366L53.9737 283.365C55.3981 283.005 56.8019 282.644 56.8638 284.185C60.7655 285.021 64.6053 286.727 66.6903 289.383L67.7018 287.301C68.5069 287.53 69.0849 290.974 70.1171 287.989L72.0989 287.268C73.2137 287.579 74.1633 286.448 75.2161 287.858C75.2781 287.94 75.34 288.039 75.4019 288.153C75.4019 288.088 75.4019 288.022 75.4226 287.973C77.7966 289.268 75.8148 286.022 78.4985 287.661C79.1178 289.334 80.1294 285.054 81.4712 285.743L82.2557 289.039C84.4852 291.17 85.6 288.121 89.3984 288.612C90.988 289.957 91.2976 292.728 89.6049 294.925C91.855 292.302 90.7403 293.171 93.2382 292.105C93.3207 293.318 93.0524 293.532 92.3298 294.532C94.002 296.172 93.7543 293.63 95.22 293.892C96.1076 291.744 97.3463 288.301 97.8624 288.219L97.4288 287.448C99.2455 286.481 101.062 286.153 102.631 287.497L102.321 288.596L104.365 288.284L104.179 289.711L107.028 289.645L106.739 289.219C107.42 289.121 109.65 288.908 110.703 289.809L110.496 290.597C113.407 293.515 116.896 290.662 120.963 290.941L120.096 292.482C121.128 294.27 120.983 290.055 122.449 291.072L122.119 293.056C124.101 290.646 123.853 293.86 124.637 294.975L124.72 292.318L126.475 293.105C128.333 294.237 127.032 296.549 126.475 297.861L128.291 296.008L128.085 298.336C129.674 295.811 129.014 298.894 131.099 297.713C131.058 298.598 130.5 299.025 131.037 299.484L134.67 296.647L132.585 297.844L133.514 294.532C135.909 292.236 135.95 295.237 137.457 294.466L136.342 295.335C138.675 294.811 138.489 296.254 139.542 297.155C139.294 296.483 138.923 295.483 139.872 295.171C140.554 295.073 139.976 296.385 140.492 296.844C141.111 294.647 142.907 293.663 144.084 294.909C144.001 295.221 143.898 295.532 143.774 295.712C144.208 295.401 144.517 294.86 145.033 295.467L144.146 297.893L145.838 295.696C146.499 296.483 148.047 294.843 147.573 296.5L147.015 296.942L152.94 298.352L152.61 300.337C153.786 297.697 155.686 301.812 156.202 298.385C156.945 300.386 160.97 297.68 159.484 301.419C163.406 302.239 166.317 298.844 170.776 301.353C171.808 304.829 176.763 304.403 179.777 305.174C186.135 304.616 190.305 303.928 196.725 303.698C199.492 308.732 206.366 303.37 209.834 306.469L211.321 304.813C213.385 308.043 218.195 305.075 221.353 308.371C222.427 307.699 222.964 307.519 223.191 307.486C223.046 307.371 222.86 306.994 223.005 305.846C223.913 306.797 226.287 306.076 225.647 308.338L225.317 308.535C224.677 310.798 228.785 307.896 229.57 310.044L229.425 307.502L231.366 308.191L230.726 308.584C240.676 304.321 243.009 312.618 252.298 308.748C250.647 311.274 254.218 307.568 253.723 310.503C255.023 314.455 257.748 310.224 259.668 309.47C259.689 309.322 259.751 309.158 259.895 308.945L262.806 309.699C260.246 313.159 265.593 306.928 263.302 309.847C270.506 313.651 281.262 312.175 289.994 314.651L289.808 313.651C292.058 314.143 295.134 313.356 296.559 315.11C297.983 316.849 300.853 313.208 301.554 313.143C303.805 311.765 304.837 315.242 304.052 314.963C306.179 314.783 308.8 311.667 311.319 313.487C311.629 316.75 319.659 311.437 318.998 314.979L319.102 314.684C322.198 317.652 326.492 313.881 329.898 316.635C329.898 316.635 329.774 316.881 329.589 317.111L339.766 307.453L339.993 295.368L335.142 284.89L316.108 284.497L302.05 278.774L265.676 275.232L262.538 277.544C256.427 271.953 246.188 276.085 239.252 271.756L238.612 274.019C236.423 273.871 236.878 272.477 236.423 272.002C216.275 269.838 194.991 270.133 177.568 264.853C176.144 263.115 170.673 263.295 169.641 261.508C163.2 263.525 156.986 262.672 151.185 261.606L151.454 261.376L148.605 261.442C148.522 261.245 148.563 260.967 148.687 260.803C145.137 262.41 140.657 259.753 137.024 258.425L137.292 258.212C115.121 254.834 93.5478 256.343 72.1402 250.21C62.6647 245.11 49.6385 248.669 38.5115 243.995C36.8394 241.437 12.6449 239.962 10.3121 240.749H10.2915Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M18.24 272.034C18.24 272.034 18.1367 272.001 18.0955 271.984L18.3845 273.427L18.24 272.034Z\",\n    fill: \"#72665A\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.28\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192.245 306.253C192.245 306.253 192.204 306.253 192.183 306.253C192.142 306.515 192.101 306.728 192.039 306.892L192.245 306.236V306.253Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M181.489 304.663C181.489 304.663 181.449 304.614 181.429 304.598C181.429 304.746 181.429 304.91 181.489 304.663Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M216.997 303.876C216.997 303.876 217.142 303.827 217.184 303.744C217.122 303.794 217.08 303.843 216.997 303.876Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M278.722 303.022C278.722 303.022 278.702 303.022 278.681 303.039C278.722 303.088 278.764 303.121 278.806 303.187L278.743 303.006L278.722 303.022Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M278.495 303.465C278.268 303.284 278.557 303.104 278.66 303.055C278.392 302.71 278.144 302.678 277.875 302.842C277.875 303.235 278.371 303.186 278.495 303.465Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M215.945 284.494C215.945 284.494 216.048 284.444 216.111 284.395C216.028 284.395 215.986 284.428 215.945 284.494Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M192.039 306.908L191.956 307.156C191.956 307.156 191.998 307.007 192.039 306.908Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M171.58 304.251C171.58 304.054 171.56 303.907 171.518 303.775H171.498L171.58 304.251Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M121.54 294.299C121.54 294.299 121.54 294.463 121.56 294.545L121.767 294.102C121.664 294.134 121.581 294.217 121.54 294.299Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M157.956 301.547C157.956 301.547 157.915 301.678 157.915 301.76C158.142 301.973 158.761 302.022 159.546 301.989L159.587 301.219L157.956 301.53V301.547Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M143.072 283.608L144.517 285.149C139.851 285.854 137.684 284.313 133.699 285.559L133.927 285.231C133.348 284.87 133.018 288.347 126.598 284.1V283.952C126.371 283.985 126.371 284.28 125.937 283.87L127.052 284.821C126.392 285.215 125.814 285.953 124.926 286.051C124.74 285.887 124.678 285.559 124.657 285.313L122.49 285.575L121.829 284.575C121.169 285.116 121.458 287.232 119.703 286.051C120.364 287.51 118.815 286.936 119.042 287.674C118.96 287.494 118.753 287.215 118.588 286.969C117.535 287.133 115.554 287.543 115.058 288.297C115.058 288.297 119.187 291.38 120.302 292.938C118.815 292.544 119.909 293.118 120.198 293.61L120.302 293.249C121.189 293.61 121.189 294.528 121.643 294.791C121.643 294.709 121.643 294.627 121.623 294.528L121.561 294.659C121.52 294.496 121.561 294.381 121.582 294.299C121.582 294.102 121.602 293.938 121.85 294.004L121.809 294.102C122.18 293.971 122.82 294.102 123.109 294.184V294.955C123.77 293.479 127.548 297.201 128.435 297.25C129.323 298.218 130.438 297.004 131.532 297.496C133.307 297.742 132.42 298.628 133.307 299.284C134.422 299.759 133.08 298.382 133.534 298.332L134.855 299.398C134.092 299.497 134.505 299.956 134.649 300.251C135.805 300.382 137.622 301.792 137.973 300.251C139.521 300.989 139.521 301.612 140.202 301.678C139.975 301.399 139.542 301.136 139.542 300.825C140.161 301.497 139.831 300.661 139.583 300.513C140.533 299.841 144.496 303.317 144.703 301.628V301.94C144.93 300.677 144.579 299.464 145.239 298.759L145.673 299.316L146.333 298.775C146.788 299.185 146.561 299.513 146.561 299.677C147.655 299.103 149.162 299.792 150.462 299.956L149.079 296.529C150.194 297.316 152.176 298.923 152.403 297.824L153.063 298.972C155.293 301.169 154.612 298.021 155.499 298.677L156.614 299.939H155.499C156.614 300.563 157.048 300.956 157.935 301.776C157.935 301.776 157.935 301.76 157.935 301.743C157.873 301.694 157.832 301.628 157.832 301.563L157.977 301.53C158.121 300.907 158.699 300.481 159.463 300.513C160.578 300.694 161.445 299.759 163.22 301.087L163.654 299.808L164.995 300.579V301.596C163.695 301.53 161.238 301.923 159.566 301.973V302.432C160.536 302.432 161.651 301.973 162.312 302.087C162.642 302.284 163.447 303.35 162.848 304.039L163.468 303.039C166.791 302.924 166.812 302.875 170.28 304.039L169.971 303.53C170.652 303.235 171.333 302.94 171.539 303.76C173.624 303.924 175.771 304.58 177.113 305.875L177.402 304.678C177.836 304.744 178.496 306.564 178.723 304.875L179.652 304.35C180.251 304.449 180.623 303.76 181.304 304.449C181.345 304.498 181.387 304.531 181.428 304.596C181.428 304.563 181.428 304.531 181.428 304.498C182.79 305.023 181.428 303.416 182.976 304.104C183.472 304.957 183.533 302.579 184.277 302.842L185.04 304.563C186.424 305.547 186.651 303.826 188.632 303.809C189.582 304.432 190.057 305.892 189.417 307.203C190.284 305.613 189.809 306.17 190.965 305.416C191.151 306.072 191.027 306.203 190.759 306.793C191.791 307.564 191.399 306.203 192.163 306.236C192.39 305.006 192.637 303.055 192.906 302.973L192.596 302.596C193.422 301.94 194.31 301.628 195.259 302.251L195.218 302.875L196.229 302.563L196.291 303.35L197.736 303.104L197.53 302.891C197.86 302.793 198.975 302.514 199.615 302.924V303.366C201.39 304.727 202.877 302.94 204.982 302.793L204.714 303.694C205.437 304.58 204.92 302.317 205.767 302.76L205.808 303.858C206.551 302.415 206.778 304.17 207.294 304.711L207.047 303.268L208.017 303.58C209.09 304.055 208.678 305.4 208.512 306.154L209.235 305.023L209.379 306.302C209.916 304.826 209.916 306.548 210.845 305.744C210.928 306.22 210.68 306.498 211.01 306.712L212.559 304.924L211.63 305.711L211.733 303.858C212.703 302.448 213.054 304.055 213.735 303.547L213.261 304.104C214.396 303.645 214.458 304.449 215.098 304.859C214.891 304.514 214.602 304.006 215.057 303.76C215.387 303.662 215.242 304.416 215.552 304.613C215.635 303.383 216.44 302.727 217.183 303.301C217.183 303.481 217.162 303.645 217.1 303.76C217.286 303.563 217.389 303.235 217.72 303.53L217.534 304.908L218.153 303.596C218.566 303.973 219.185 302.973 219.123 303.908L218.876 304.186L222.055 304.514L222.096 305.613C222.406 304.104 223.83 306.187 223.727 304.301C224.326 305.334 226.08 303.58 225.729 305.711C227.814 305.875 228.95 303.826 231.489 304.859C232.397 306.662 234.875 306.088 236.505 306.269C239.685 305.515 241.749 304.826 245.011 304.252C246.972 306.777 249.903 303.383 252.009 304.809L252.587 303.809C253.991 305.4 256.138 303.448 258.099 305.006C258.574 304.563 258.842 304.432 258.945 304.399C258.863 304.35 258.718 304.154 258.677 303.53C259.234 303.973 260.37 303.416 260.287 304.695L260.142 304.826C260.06 306.105 261.856 304.236 262.475 305.334L262.124 303.973L263.198 304.203L262.909 304.465C267.533 301.432 269.618 305.76 273.953 303.006C273.375 304.498 274.8 302.219 274.862 303.858C275.956 305.908 276.885 303.416 277.793 302.875C277.793 302.793 277.793 302.694 277.855 302.579L279.424 302.776C278.495 304.826 280.559 301.071 279.692 302.825C283.78 304.367 289.106 302.793 293.854 303.514L293.647 302.989C294.845 303.088 296.331 302.448 297.26 303.301C298.168 304.137 299.242 301.956 299.613 301.874C300.604 300.956 301.513 302.776 301.1 302.678C302.173 302.432 303.164 300.546 304.65 301.35C305.167 303.088 308.697 299.644 308.738 301.596V301.432C310.658 302.809 312.433 300.464 314.477 301.71C314.477 301.71 314.436 301.858 314.374 301.989L318.523 296.037L317.346 289.478L313.734 284.149L303.969 285.297L296.166 283.214L277.194 283.919L275.832 285.395C272.095 282.804 267.327 285.789 263.301 283.936L263.218 285.215C262.083 285.297 262.166 284.493 261.877 284.28C251.348 284.559 240.51 286.264 231.035 284.657C230.126 283.821 227.34 284.313 226.617 283.427C223.541 284.985 220.279 284.969 217.203 284.805L217.327 284.657L215.882 284.903C215.82 284.805 215.82 284.641 215.862 284.542C214.231 285.674 211.65 284.542 209.648 284.1L209.772 283.968C198.067 283.739 187.208 286.116 175.627 284.329C170.239 282.247 163.963 285.116 157.77 283.395C156.635 282.132 144.125 283.083 143.01 283.673L143.072 283.608Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M124.636 285.313H124.677C124.677 284.771 124.596 284.968 124.636 285.313Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M150.503 299.988C150.503 299.988 150.441 299.988 150.42 299.988L150.73 300.743L150.503 300.005V299.988Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M133.927 300.432C134.67 300.597 134.711 300.465 134.608 300.252C134.34 300.219 134.113 300.252 133.927 300.432Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M118.568 286.347C118.176 286.298 118.32 286.625 118.568 286.986C118.96 286.921 119.249 286.888 119.249 286.888C119.022 286.757 118.816 286.478 118.589 286.347H118.568Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M120.157 293.627L120.033 294.071C120.261 293.972 120.261 293.808 120.157 293.627Z\",\n    fill: \"#9F8F80\"\n  }))))), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.153 399.176H10.8071V438.447H302.153V399.176Z\",\n    fill: \"#5D5042\"\n  })), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask3_42_3399\",\n    style: {\n      maskType: \"luminance\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 10,\n    y: 399,\n    width: 293,\n    height: 40\n  }, _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M302.151 399.174H10.8059V438.445H302.151V399.174Z\",\n    fill: \"white\"\n  }))), _g4 || (_g4 = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask3_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.22\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M258.634 429.244C258.884 429.178 258.8 429.327 258.634 429.244Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M129.714 432.656C129.714 432.656 129.631 432.656 129.59 432.656C129.508 433.115 129.404 433.525 129.322 433.837L129.714 432.656Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M108.988 429.737C108.988 429.737 108.905 429.655 108.864 429.605C108.864 429.885 108.864 430.164 108.988 429.737Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M177.504 428.31C177.69 428.343 177.793 428.228 177.855 428.08C177.752 428.179 177.648 428.261 177.504 428.31Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M296.64 426.755C296.64 426.755 296.578 426.771 296.557 426.788C296.64 426.886 296.702 426.952 296.784 427.067L296.661 426.738L296.64 426.755Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M296.227 427.556C295.772 427.212 296.351 426.9 296.557 426.802C296.061 426.162 295.545 426.113 295.029 426.408C295.029 427.13 296 427.015 296.227 427.556Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M129.342 433.838L129.197 434.282C129.238 434.183 129.3 434.019 129.342 433.838Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M89.8287 429C89.8287 428.656 89.7874 428.377 89.7255 428.131C89.7049 428.131 89.6842 428.131 89.6636 428.131L89.8287 429Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M63.5506 424.062C63.53 424.193 63.468 424.308 63.468 424.456C63.9222 424.833 65.0989 424.915 66.6265 424.882L66.7091 423.488L63.5506 424.062Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.7932 391.4L37.6008 394.221C28.6001 395.516 24.4094 392.696 16.7093 394.958L17.1428 394.352C16.0281 393.696 15.3881 400.025 3.02249 392.302V392.023C2.58897 392.072 2.58896 392.63 1.74257 391.892L3.88952 393.614C2.60961 394.319 1.49485 395.663 -0.218587 395.86C-0.590175 395.549 -0.714037 394.975 -0.734681 394.516L-4.92536 394.991L-6.20528 393.171C-7.48519 394.155 -6.90717 397.992 -10.334 395.86C-9.03348 398.517 -12.0268 397.451 -11.6139 398.812C-11.7791 398.484 -12.1713 397.992 -12.5016 397.533C-14.5454 397.844 -18.3851 398.582 -19.3347 399.96C-19.3347 399.96 -11.3662 405.567 -9.21927 408.421C-12.0888 407.699 -9.98309 408.749 -9.40506 409.65L-9.21927 408.995C-7.50583 409.65 -7.50583 411.323 -6.6388 411.798C-6.6388 411.667 -6.65944 411.503 -6.68008 411.339L-6.78331 411.569C-6.86588 411.274 -6.82459 411.061 -6.72137 410.897C-6.74202 410.536 -6.65944 410.257 -6.18463 410.355L-6.26721 410.536C-5.54468 410.29 -4.30605 410.552 -3.76931 410.667V412.077C-2.4894 409.404 4.79785 416.16 6.51128 416.242C8.22471 418.013 10.3717 415.799 12.498 416.685C15.9248 417.144 14.2114 418.735 15.9248 419.948C18.0718 420.833 15.4913 418.308 16.3584 418.21L18.9182 420.161C17.4318 420.325 18.2369 421.178 18.5053 421.719C20.7348 421.965 24.2236 424.539 24.9049 421.719C27.8982 423.063 27.8982 424.178 29.1988 424.326C28.7653 423.818 27.9189 423.359 27.8982 422.785C29.0956 424.014 28.4763 422.473 27.9808 422.211C29.8181 420.997 37.4769 427.327 37.8692 424.244V424.801C38.3027 422.506 37.6214 420.276 38.8807 419.013L39.7271 420.03L41.007 419.046C41.8741 419.784 41.4405 420.407 41.4405 420.686C43.5256 419.62 46.457 420.883 48.9962 421.194L46.3125 414.947C48.4594 416.39 52.2992 419.325 52.7327 417.308L54.0126 419.407C58.3065 423.424 57.0059 417.669 58.7194 418.866L60.8663 421.161L58.7194 421.129C60.8663 422.293 61.7127 423.031 63.4262 424.523C63.4262 424.506 63.4262 424.49 63.4262 424.457C63.3023 424.359 63.2404 424.26 63.2197 424.113L63.5294 424.064C63.7977 422.916 64.9125 422.145 66.4195 422.211C68.5665 422.539 70.2386 420.85 73.6655 423.26L74.5119 420.915L77.0717 422.309V424.178C74.5531 424.064 69.8257 424.769 66.5846 424.867L66.5227 425.72C68.4426 425.72 70.6308 424.9 71.8901 425.08C72.5094 425.457 74.099 427.392 72.9429 428.638L74.1196 426.818C80.5192 426.605 80.5605 426.523 87.2491 428.622L86.671 427.687C87.9922 427.146 89.3134 426.605 89.685 428.114C93.6899 428.425 97.86 429.59 100.461 431.951L101.039 429.753C101.885 429.868 103.165 433.197 103.578 430.114L105.395 429.147C106.551 429.311 107.274 428.065 108.574 429.327C108.657 429.409 108.739 429.491 108.822 429.59C108.822 429.524 108.822 429.458 108.822 429.409C111.444 430.377 108.801 427.441 111.795 428.704C112.765 430.262 112.868 425.917 114.313 426.408L115.779 429.557C118.421 431.36 118.875 428.212 122.715 428.196C124.552 429.311 125.44 432 124.222 434.394C125.894 431.508 124.986 432.508 127.215 431.131C127.566 432.311 127.319 432.574 126.823 433.64C128.805 435.033 128.041 432.574 129.527 432.639C129.961 430.409 130.456 426.851 130.952 426.704L130.374 425.999C131.963 424.802 133.677 424.244 135.514 425.375L135.452 426.507L137.413 425.933L137.537 427.376L140.324 426.933L139.932 426.54C140.593 426.343 142.74 425.851 143.978 426.605L143.937 427.409C147.405 429.901 150.274 426.638 154.341 426.376L153.805 427.999C155.188 429.622 154.176 425.49 155.828 426.294L155.91 428.294C157.355 425.654 157.789 428.852 158.78 429.852L158.305 427.228L160.184 427.786C162.269 428.655 161.463 431.098 161.154 432.475L162.578 430.409L162.847 432.721C163.879 430.032 163.879 433.148 165.695 431.705C165.84 432.574 165.386 433.082 166.005 433.459L168.998 430.196L167.202 431.639L167.429 428.261C169.308 425.687 169.969 428.638 171.31 427.687L170.382 428.688C172.57 427.868 172.694 429.311 173.912 430.049C173.519 429.426 172.941 428.491 173.829 428.048C174.469 427.868 174.18 429.245 174.799 429.606C174.944 427.343 176.513 426.162 177.937 427.212C177.937 427.54 177.896 427.835 177.793 428.048C178.164 427.687 178.35 427.097 178.969 427.638L178.598 430.147L179.816 427.753C180.621 428.442 181.818 426.622 181.694 428.311L181.24 428.819L187.371 429.426L187.454 431.426C188.053 428.671 190.798 432.475 190.592 429.032C191.748 430.918 195.154 427.704 194.473 431.59C198.498 431.885 200.687 428.147 205.579 430.049C207.334 433.345 212.103 432.279 215.261 432.623C221.413 431.246 225.397 429.999 231.673 428.95C235.451 433.558 241.107 427.359 245.174 429.967L246.289 428.13C248.993 431.032 253.122 427.474 256.92 430.311C257.849 429.508 258.345 429.262 258.551 429.196C258.386 429.114 258.118 428.77 258.035 427.605C259.108 428.425 261.317 427.392 261.152 429.721L260.884 429.967C260.719 432.279 264.166 428.884 265.384 430.885L264.724 428.393L266.767 428.819L266.21 429.294C275.128 423.785 279.154 431.656 287.535 426.622C286.42 429.327 289.186 425.195 289.29 428.163C291.395 431.885 293.191 427.359 294.925 426.359C294.925 426.212 294.946 426.048 295.049 425.818L298.084 426.179C296.267 429.917 300.272 423.08 298.6 426.261C306.486 429.065 316.787 426.212 325.932 427.507L325.54 426.54C327.852 426.72 330.742 425.556 332.497 427.097C334.252 428.638 336.337 424.654 337.018 424.506C338.938 422.85 340.693 426.146 339.867 425.982C341.931 425.523 343.872 422.096 346.721 423.572C347.691 426.753 354.524 420.456 354.607 424.031L354.648 423.736C358.302 426.261 361.77 421.965 365.713 424.244C365.713 424.244 365.63 424.506 365.506 424.752L373.537 413.897L371.245 401.96L364.288 392.253L345.441 394.352L330.391 390.564L293.769 391.843L291.148 394.532C283.943 389.826 274.736 395.237 266.974 391.876L266.809 394.188C264.62 394.319 264.765 392.892 264.228 392.482C243.894 392.991 222.982 396.09 204.691 393.171C202.937 391.63 197.569 392.532 196.186 390.925C190.241 393.761 183.944 393.729 177.999 393.45L178.226 393.187L175.419 393.63C175.295 393.433 175.295 393.171 175.377 392.991C172.219 395.04 167.244 393.007 163.363 392.171L163.59 391.925C141.005 391.499 120.052 395.827 97.6742 392.597C87.2697 388.809 75.1518 394.04 63.2197 390.892C61.0315 388.58 36.8576 390.318 34.7313 391.4H34.7932Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M49.1412 421.228C49.1412 421.228 49.038 421.212 48.9761 421.195L49.5747 422.573L49.1412 421.212V421.228Z\",\n    fill: \"#72665A\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.1838 422.029C18.6289 422.34 18.6908 422.094 18.4844 421.701C17.9683 421.635 17.5141 421.701 17.1838 422.029Z\",\n    fill: \"#72665A\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    opacity: 0.25\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M225.729 433.117C225.729 433.117 225.832 433.067 225.895 433.018C225.812 433.018 225.77 433.051 225.729 433.117Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M152.856 432.246L154.301 433.788C149.636 434.493 147.468 432.951 143.484 434.198L143.711 433.87C143.133 433.509 142.803 436.985 136.382 432.738V432.591C136.155 432.623 136.155 432.919 135.722 432.509L136.837 433.46C136.176 433.853 135.598 434.591 134.71 434.69C134.524 434.526 134.463 434.198 134.442 433.952L132.274 434.214L131.614 433.214C130.953 433.755 131.242 435.87 129.487 434.69C130.148 436.149 128.6 435.575 128.827 436.313C128.744 436.133 128.538 435.854 128.373 435.608C127.32 435.772 125.338 436.182 124.843 436.936C124.843 436.936 128.971 440.019 130.086 441.576C128.6 441.183 129.694 441.757 129.983 442.249L130.086 441.888C130.974 442.249 130.974 443.167 131.428 443.429C131.428 443.347 131.428 443.265 131.407 443.167L131.345 443.298C131.304 443.134 131.345 443.019 131.366 442.937C131.366 442.741 131.387 442.577 131.634 442.642L131.593 442.741C131.965 442.609 132.605 442.741 132.894 442.823V443.593C133.554 442.118 137.332 445.84 138.22 445.889C139.107 446.856 140.222 445.643 141.316 446.135C143.092 446.381 142.204 447.266 143.092 447.922C144.206 448.398 142.865 447.02 143.319 446.971L144.64 448.037C143.876 448.135 144.289 448.594 144.433 448.89C145.59 449.021 147.406 450.431 147.757 448.89C149.305 449.628 149.305 450.251 149.987 450.316C149.76 450.037 149.326 449.775 149.326 449.464C149.945 450.136 149.615 449.3 149.367 449.152C150.317 448.48 154.281 451.956 154.487 450.267V450.579C154.714 449.316 154.363 448.103 155.024 447.397L155.457 447.955L156.118 447.414C156.572 447.824 156.345 448.152 156.345 448.316C157.439 447.742 158.946 448.431 160.247 448.594L158.863 445.167C159.978 445.955 161.96 447.561 162.187 446.463L162.848 447.611C165.077 449.808 164.396 446.66 165.284 447.316L166.398 448.578H165.284C166.398 449.201 166.832 449.595 167.72 450.415C167.72 450.415 167.72 450.398 167.72 450.382C167.658 450.333 167.616 450.267 167.616 450.201L167.782 450.169C167.926 449.546 168.504 449.119 169.268 449.152C170.383 449.332 171.25 448.398 173.025 449.726L173.459 448.447L174.8 449.218V450.234C173.5 450.169 171.043 450.562 169.371 450.611V451.07C170.341 451.07 171.477 450.611 172.117 450.726C172.447 450.923 173.252 451.989 172.653 452.677L173.273 451.677C176.596 451.562 176.617 451.513 180.085 452.677L179.776 452.169C180.457 451.874 181.138 451.579 181.345 452.399C183.43 452.563 185.576 453.219 186.918 454.514L187.207 453.317C187.641 453.383 188.301 455.203 188.529 453.514L189.458 452.989C190.056 453.087 190.428 452.399 191.109 453.087C191.15 453.137 191.192 453.169 191.233 453.235C191.233 453.202 191.233 453.169 191.233 453.137C192.595 453.661 191.233 452.054 192.781 452.743C193.277 453.596 193.339 451.218 194.082 451.48L194.846 453.202C196.229 454.186 196.456 452.464 198.438 452.448C199.387 453.071 199.862 454.53 199.222 455.842C200.089 454.252 199.614 454.809 200.77 454.055C200.956 454.711 200.832 454.842 200.564 455.432C201.596 456.203 201.204 454.842 201.968 454.875C202.195 453.645 202.442 451.694 202.711 451.612L202.401 451.234C203.227 450.579 204.115 450.267 205.064 450.89L205.023 451.513L206.034 451.202L206.096 451.989L207.541 451.743L207.335 451.53C207.665 451.431 208.78 451.152 209.42 451.562V452.005C211.195 453.366 212.682 451.579 214.787 451.431L214.519 452.333C215.242 453.219 214.725 450.956 215.572 451.398L215.613 452.497C216.356 451.054 216.583 452.809 217.1 453.35L216.852 451.907L217.822 452.218C218.896 452.694 218.483 454.038 218.317 454.793L219.04 453.661L219.185 454.94C219.721 453.464 219.721 455.186 220.65 454.383C220.733 454.858 220.485 455.137 220.815 455.35L222.364 453.563L221.435 454.35L221.538 452.497C222.508 451.087 222.859 452.694 223.54 452.186L223.066 452.743C224.201 452.284 224.263 453.087 224.903 453.497C224.696 453.153 224.407 452.645 224.862 452.399C225.192 452.3 225.047 453.055 225.357 453.251C225.44 452.022 226.245 451.366 226.988 451.94C226.988 452.12 226.967 452.284 226.905 452.399C227.091 452.202 227.194 451.874 227.525 452.169L227.339 453.546L227.958 452.235C228.371 452.612 228.99 451.612 228.928 452.546L228.681 452.825L231.86 453.153L231.901 454.252C232.211 452.743 233.635 454.825 233.532 452.94C234.131 453.973 235.885 452.218 235.534 454.35C237.619 454.514 238.755 452.464 241.294 453.497C242.202 455.301 244.68 454.727 246.31 454.907C249.49 454.153 251.554 453.464 254.816 452.891C256.777 455.416 259.708 452.022 261.814 453.448L262.392 452.448C263.796 454.038 265.943 452.087 267.904 453.645C268.379 453.202 268.647 453.071 268.75 453.038C268.668 452.989 268.523 452.792 268.482 452.169C269.039 452.612 270.175 452.054 270.092 453.333L269.948 453.465C269.865 454.743 271.661 452.874 272.28 453.973L271.929 452.612L273.003 452.841L272.714 453.104C277.338 450.07 279.423 454.399 283.758 451.644C283.18 453.137 284.605 450.857 284.667 452.497C285.761 454.547 286.69 452.054 287.598 451.513C287.598 451.431 287.598 451.333 287.66 451.218L289.229 451.415C288.3 453.465 290.364 449.71 289.497 451.464C293.585 453.005 298.911 451.431 303.659 452.153L303.452 451.628C304.65 451.726 306.136 451.087 307.065 451.94C307.973 452.776 309.047 450.595 309.418 450.513C310.409 449.595 311.318 451.415 310.905 451.316C311.978 451.07 312.969 449.185 314.456 449.988C314.972 451.726 318.502 448.283 318.543 450.234V450.07C320.463 451.448 322.238 449.103 324.282 450.349C324.282 450.349 324.241 450.497 324.179 450.628L328.328 444.676L327.151 438.117L323.539 432.787L313.774 433.935L305.971 431.853L286.999 432.558L285.637 434.034C281.9 431.443 277.132 434.427 273.106 432.574L273.023 433.853C271.888 433.935 271.971 433.132 271.682 432.919C261.153 433.197 250.315 434.903 240.84 433.296C239.932 432.46 237.145 432.951 236.422 432.066C233.346 433.624 230.084 433.607 227.009 433.443L227.132 433.296L225.687 433.542C225.625 433.443 225.625 433.279 225.667 433.181C224.036 434.312 221.455 433.181 219.453 432.738L219.577 432.607C207.872 432.378 197.034 434.755 185.432 432.968C180.044 430.885 173.768 433.755 167.575 432.033C166.44 430.771 153.93 431.722 152.815 432.312L152.856 432.246Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M134.421 433.952H134.461C134.461 433.41 134.38 433.607 134.421 433.952Z\",\n    fill: \"#9F8F80\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M128.353 434.968C127.96 434.919 128.105 435.247 128.353 435.607C128.745 435.542 129.034 435.509 129.034 435.509C128.807 435.378 128.6 435.099 128.373 434.968H128.353Z\",\n    fill: \"#9F8F80\"\n  })))), _g5 || (_g5 = /*#__PURE__*/React.createElement(\"g\", {\n    filter: \"url(#filter8_dd_42_3399)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M295.159 28.9911C203.228 27.7212 111.277 26.4666 19.3459 25.1967C24.658 19.8151 29.97 14.4335 35.2817 9.06762L277 13.1094C283.06 18.3982 289.119 23.7027 295.179 28.9915L295.159 28.9911Z\",\n    fill: \"#C4CAB9\"\n  }))), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter0_d_42_3399\",\n    x: 10.4636,\n    y: 23.5449,\n    width: 292.033,\n    height: 430.033,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 4\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter1_d_42_3399\",\n    x: 187.997,\n    y: 10.8258,\n    width: 15.3411,\n    height: 447.136,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: 1,\n    dy: 3\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter2_d_42_3399\",\n    x: 221.068,\n    y: 5.52307,\n    width: 23.3206,\n    height: 455.136,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: 1,\n    dy: 3\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 5\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter3_d_42_3399\",\n    x: 218.766,\n    y: 9.67542,\n    width: 27.3206,\n    height: 459.136,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: 1,\n    dy: 3\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter4_d_42_3399\",\n    x: 58.5842,\n    y: 22.5465,\n    width: 15.3411,\n    height: 447.136,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: 1,\n    dy: 3\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter5_d_42_3399\",\n    x: 108.281,\n    y: 24.3571,\n    width: 27.3206,\n    height: 459.136,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dx: 1,\n    dy: 3\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 6\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.75 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter6_d_42_3399\",\n    x: 4.47314,\n    y: 138.075,\n    width: 305.307,\n    height: 73.36,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 4\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter7_d_42_3399\",\n    x: 4.80615,\n    y: 266.014,\n    width: 303.346,\n    height: 66.3079,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 4\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"shape\"\n  })), /*#__PURE__*/React.createElement(\"filter\", {\n    id: \"filter8_dd_42_3399\",\n    x: 13.3459,\n    y: 7.06763,\n    width: 287.833,\n    height: 31.9238,\n    filterUnits: \"userSpaceOnUse\",\n    colorInterpolationFilters: \"sRGB\"\n  }, /*#__PURE__*/React.createElement(\"feFlood\", {\n    floodOpacity: 0,\n    result: \"BackgroundImageFix\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 4\n  }), /*#__PURE__*/React.createElement(\"feGaussianBlur\", {\n    stdDeviation: 3\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"BackgroundImageFix\",\n    result: \"effect1_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    in: \"SourceAlpha\",\n    type: \"matrix\",\n    values: \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\",\n    result: \"hardAlpha\"\n  }), /*#__PURE__*/React.createElement(\"feOffset\", {\n    dy: 2\n  }), /*#__PURE__*/React.createElement(\"feComposite\", {\n    in2: \"hardAlpha\",\n    operator: \"out\"\n  }), /*#__PURE__*/React.createElement(\"feColorMatrix\", {\n    type: \"matrix\",\n    values: \"0 0 0 0 0.452255 0 0 0 0 0.466667 0 0 0 0 0.425833 0 0 0 1 0\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in2: \"effect1_dropShadow_42_3399\",\n    result: \"effect2_dropShadow_42_3399\"\n  }), /*#__PURE__*/React.createElement(\"feBlend\", {\n    mode: \"normal\",\n    in: \"SourceGraphic\",\n    in2: \"effect2_dropShadow_42_3399\",\n    result: \"shape\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgProductItem);\nexport default __webpack_public_path__ + \"static/media/ProductItem.8f63c486c7bae91531226b3d8fd16d85.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useEffect, useState } from 'react';\n\nimport ProductItemBG from '../../../assets/ProductItem.svg';\nimport { ProductType, ProductsState, useProducts } from '../../../context/ProductContext';\n\ninterface IProductItemProps {\n  product: ProductType;\n  productKey: keyof ProductsState;\n}\n\nconst ProductItem: FC<IProductItemProps> = ({ productKey, product }) => {\n  const { setProduct } = useProducts();\n  const { priceOpened } = product;\n\n  const [productImage, setProductImage] = useState<string>('');\n\n  const handleShowPrice = () => {\n    if (product.productPrice) {\n      setProduct(productKey, { ...product, priceOpened: true });\n    }\n  };\n\n  useEffect(() => {\n    setProductImage(product.imgSrc); // Set the product image\n  }, [product]);\n\n  return (\n    <div className=\"w-fit pt-5\">\n      <div className=\"w-full h-[200px] lg:h-[200px]\">\n        {productImage && (\n          <img\n            src={productImage}\n            alt=\"Product image\"\n            className=\"max-w-[315px] w-full h-[200px] lg:h-[200px] rounded-[5px] object-contain\"\n          />\n        )}\n      </div>\n      <div className=\"relative w-fit\">\n        <div className=\"absolute top-[55px] left-0 right-0 m-auto z-40\">\n          {/* Always Visible Name */}\n          <div\n            style={{ boxShadow: '0 4px 6px 0 rgba(0, 0, 0, 0.5)' }}\n            className=\"bg-[#56639d] w-full md:h-[46px] h-[36px] mb-2 flex items-center justify-center rounded-[5px] transition\"\n          >\n            <p className=\"md:text-[28px] text-[26px] font-bold uppercase text-white\">\n              {product.productName}\n            </p>\n          </div>\n          {/* Price Button */}\n          <div\n            style={{ boxShadow: '0 4px 6px 0 rgba(0, 0, 0, 0.5)' }}\n            className={`bg-[#e3e3e3] w-[142px] md:h-[46px] h-[36px] m-auto flex items-center justify-center rounded-[5px] transition ${\n              priceOpened ? 'cursor-pointer hover:brightness-110 active:brightness-[1.18]' : 'cursor-pointer'\n            }`}\n            onClick={handleShowPrice}\n          >\n            {/* Conditional Rendering of Price */}\n            {priceOpened ? (\n              <p className=\"text-center md:text-[32px] text-[26px] font-bold uppercase text-[#333]\">\n                ${product.productPrice}\n              </p>\n            ) : (\n              <p className=\"text-center md:text-[32px] text-[26px] font-bold uppercase text-[#333]\">\n                ?\n              </p>\n            )}\n          </div>\n        </div>\n        <img\n          src={ProductItemBG}\n          alt=\"Product item\"\n          className=\"relative top-[16px]\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ProductItem;\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgCrossIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 25,\n    viewBox: \"0 0 25 25\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.7495 17.9062C24.8453 19.3274 20.0348 24.1368 18.8609 23.8122C18.6092 23.7307 16.0798 21.4102 12.9585 18.3419C9.72355 21.5483 7.06843 24.0806 6.69167 24.042C5.72796 23.8411 1.30113 19.7383 1.57776 17.8538C1.61492 17.3098 3.76889 14.8654 6.5048 11.9979C3.3398 8.72079 0.807521 6.06566 0.846118 5.6889C1.00552 4.76738 5.1083 0.340546 6.9921 0.533528C7.57833 0.612156 10.0227 2.76613 12.8902 5.50203C15.96 2.54794 18.5329 0.183665 18.909 0.138618C20.3717 0.000605302 25.1395 4.85331 24.815 6.02721C24.775 6.23668 22.4129 8.80827 19.3446 11.9297C22.3402 14.9572 24.7044 17.5301 24.7495 17.9062Z\",\n    fill: \"#5C5C5C\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCrossIcon);\nexport default __webpack_public_path__ + \"static/media/CrossIcon.db58f52a0b5d3530cd02db40ab7aeda1.svg\";\nexport { ForwardRef as ReactComponent };","import { FC } from 'react';\n\ninterface ConfirmationPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onReset: () => void;\n}\n\nconst ConfirmationPopup: FC<ConfirmationPopupProps> = ({\n  isOpen,\n  onClose,\n  onReset,\n}) => {\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className='fixed w-screen h-screen bg-black/70 z-50 flex justify-center items-center transition-opacity duration-[50ms] animate-fadeIn'\n      onClick={handleBackdropClick}\n    >\n      <div className='bg-[#ffffee] rounded-[15px] m-auto w-full max-w-[500px] p-5'>\n        <h6 className='text-[28px] font-bold text-black/80 font-inter text-center mb-5'>\n          Are you sure you want to reset the game?\n        </h6>\n        <div className='flex justify-around'>\n          <button\n            style={{\n              textShadow: '0 2px 1px 0 rgba(0, 0, 0, 0.25)',\n              boxShadow:\n                'inset 3px -2px 4px 0 rgba(144, 144, 144, 0.25), inset -2px 0 4px 0 rgba(92, 92, 92, 0.25)',\n            }}\n            className='w-fit h-[43px] bg-[#56639d] hover:bg-[#56639d]/70 active:bg-[#56639d]/50 transition text-[#fff] text-[28px] font-bold rounded-[5px] uppercase px-2'\n            onClick={onClose}\n          >\n            Cancel\n          </button>\n          <button\n            style={{\n              textShadow: '0 2px 1px 0 rgba(0, 0, 0, 0.25)',\n              boxShadow:\n                'inset 3px -2px 4px 0 rgba(144, 144, 144, 0.25), inset -2px 0 4px 0 rgba(92, 92, 92, 0.25)',\n            }}\n            className='w-[111px] h-[43px] px-1 bg-[#9D5656] hover:bg-[#9D5656]/70 active:bg-[#9D5656]/50 transition text-[#fff] text-[28px] font-bold rounded-[5px] uppercase'\n            onClick={() => {\n              onClose(), onReset();\n            }}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ConfirmationPopup;\n","import React, { FC, useEffect, useState } from 'react';\nimport CrossIcon from '../../assets/CrossIcon.svg';\nimport AcceptImages from '../../assets/AcceptImages.svg';\nimport { ProductType, useProducts } from '../../context/ProductContext';\nimport ConfirmationPopup from './ConfirmationPopup/ConfirmationPopup';\nimport { useGame } from '../../context/GameContext';\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst SettingsModal: FC<ModalProps> = ({ isOpen, onClose }) => {\n  const { products, setProduct, resetProducts } = useProducts();\n  const { resetGame } = useGame();\n\n  const [openConfirmationModal, setOpenConfirmationModal] =\n    useState<boolean>(false);\n  const [product1, setProduct1] = useState<ProductType>(products.product1);\n  const [product2, setProduct2] = useState<ProductType>(products.product2);\n  const [product3, setProduct3] = useState<ProductType>(products.product3);\n\n  const [imagePreview1, setImagePreview1] = useState<\n    string | ArrayBuffer | null\n  >(product1.imgSrc || null);\n  const [imagePreview2, setImagePreview2] = useState<\n    string | ArrayBuffer | null\n  >(product2.imgSrc || null);\n  const [imagePreview3, setImagePreview3] = useState<\n    string | ArrayBuffer | null\n  >(product3.imgSrc || null);\n\n  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleFileChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    productSetter: React.Dispatch<React.SetStateAction<ProductType>>,\n    setImagePreview: React.Dispatch<\n      React.SetStateAction<string | ArrayBuffer | null>\n    >,\n  ) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.type !== 'image/png' && file.type !== 'image/jpeg') return;\n\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result);\n        productSetter((prev) => ({\n          ...prev,\n          imgSrc: reader.result as string,\n        }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  useEffect(() => {\n    setProduct('product1', product1);\n  }, [product1]);\n\n  useEffect(() => {\n    setProduct('product2', product2);\n  }, [product2]);\n\n  useEffect(() => {\n    setProduct('product3', product3);\n  }, [product3]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      id='default-modal'\n      tabIndex={-1}\n      className='fixed inset-0 z-50 overflow-auto'\n    >\n      <div\n        className='fixed inset-0 bg-black bg-opacity-70 transition-opacity duration-[50ms] animate-fadeIn'\n        onClick={handleBackdropClick}\n      />\n      <div className='absolute top-5 left-0 right-0 pb-5 z-10 w-fit h-fit flex justify-center items-center m-auto transition-opacity duration-[200ms] animate-fadeIn'>\n        <button\n          style={{ boxShadow: 'inset 0 0 7px 0 rgba(255, 255, 255, 0.15)' }}\n          className='absolute top-[10px] right-5 px-4 py-[6px] bg-[#e3e3e3] hover:bg-[#e3e3e3]/70 active:bg-[#e3e3e3]/50 transition rounded-[5px]'\n          onClick={onClose}\n        >\n          <img src={CrossIcon} alt='CrossIcon' />\n        </button>\n        <div className='bg-[#ffe] rounded-[15px] p-8 w-full max-w-[788px]'>\n          <h3 className='font-bold text-[18px] font-inter mb-[5px]'>\n            How To Play\n          </h3>\n          <ul className='list-disc pl-5 text-[18px] font-inter font-normal mb-[26px] ml-[10px]'>\n            <li>\n              The player needs to prevent the climber from falling off the\n              mountain by guessing the prices of three different items. The\n              difference between their guess and the actual retail price of the\n              item will dictate how successful they are.\n            </li>\n            <li>\n              Start the game by showing the player the first item, describing\n              that item, and asking them to guess the price. For every dollar\n              the guess is off from the actual price, the climber moves up one\n              step on the mountain.\n            </li>\n            <li>Then move on to the second and third items.</li>\n            <li>\n              The goal is to guess as accurately as possible to minimize the\n              climber's movement. If the climber moves more than 25 steps, he\n              falls off the mountain, and the game is lost. The game is won if\n              the climber does not fall after all three prices have been\n              guessed.\n            </li>\n          </ul>\n\n          <h3 className='font-bold text-[18px] font-inter mb-[5px]'>\n            Game Controls\n          </h3>\n          <p className='text-[18px] font-inter font-normal underline'>\n            Game Screen\n          </p>\n          <ul className='list-disc pl-5 text-[18px] font-inter font-normal mb-[5px] ml-[10px]'>\n            <li>&larr; &rarr; : Move Climber (left and right arrows)</li>\n            <li>(Spacebar) Button: Winning sound effect</li>\n          </ul>\n          <p className='text-[18px] font-inter font-normal underline'>\n            Product Page\n          </p>\n          <ul className='list-disc pl-5 text-[18px] font-inter font-normal mb-[23px] ml-[10px]'>\n            <li>Click the nameplate to reveal the product</li>\n            <li>Y Button: Correct Guess sound effect</li>\n            <li>N Button: Incorrect Guess sound effect</li>\n            <li>Click the price to reveal the price</li>\n          </ul>\n\n \n\n          <div className='w-full mt-3 flex'>\n            <button\n              style={{\n                textShadow: '0 2px 1px 0 rgba(0, 0, 0, 0.25)',\n                boxShadow:\n                  'inset 3px -2px 4px 0 rgba(144, 144, 144, 0.25), inset -2px 0 4px 0 rgba(92, 92, 92, 0.25)',\n              }}\n              className='w-[111px] h-[43px] px-1 bg-[#9D5656] hover:bg-[#9D5656]/70 active:bg-[#9D5656]/50 transition text-[#fff] text-[28px] font-bold rounded-[5px] uppercase ml-auto'\n              onClick={() => setOpenConfirmationModal(true)}\n            >\n              Reset\n            </button>\n          </div>\n        </div>\n      </div>\n      <ConfirmationPopup\n        isOpen={openConfirmationModal}\n        onClose={() => setOpenConfirmationModal(false)}\n        onReset={() => {\n          localStorage.clear()\n          location.reload()\n       //   resetProducts();\n        //  resetGame();\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SettingsModal;\n","var _path;\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSettings(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 45,\n    height: 45,\n    viewBox: \"0 0 45 45\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M26.7651 2.16446C26.9529 2.5285 26.9995 2.9947 27.0927 3.92709C27.2692 5.69195 27.3574 6.57438 27.7268 7.05854C28.1953 7.6727 28.9573 7.98832 29.7228 7.88533C30.3263 7.80414 31.0127 7.24257 32.3854 6.11943C33.1106 5.52607 33.4733 5.22939 33.8634 5.10474C34.359 4.94642 34.8952 4.97316 35.3725 5.18001C35.7484 5.34286 36.0796 5.67415 36.7422 6.33673L38.6632 8.25768C39.3258 8.92028 39.6571 9.25158 39.8199 9.62742C40.0268 10.1048 40.0535 10.6409 39.8952 11.1365C39.7705 11.5267 39.4739 11.8893 38.8805 12.6145C37.7573 13.9873 37.1957 14.6737 37.1145 15.2772C37.0116 16.0427 37.3272 16.8047 37.9413 17.2732C38.4255 17.6425 39.3079 17.7308 41.0729 17.9073C42.0053 18.0005 42.4715 18.0472 42.8356 18.2349C43.2979 18.4734 43.6581 18.8714 43.8494 19.3552C44 19.7361 44 20.2046 44 21.1417V23.8585C44 24.7954 44 25.2638 43.8495 25.6446C43.6582 26.1286 43.2979 26.5267 42.8354 26.7652C42.4714 26.9529 42.0053 26.9995 41.0731 27.0927C39.3087 27.2691 38.4265 27.3574 37.9425 27.7265C37.328 28.195 37.0122 28.9573 37.1154 29.7232C37.1967 30.3264 37.7581 31.0126 38.8808 32.3848C39.474 33.1098 39.7705 33.4723 39.8952 33.8623C40.0536 34.358 40.0269 34.8944 39.8199 35.3719C39.6571 35.7476 39.3259 36.0788 38.6635 36.7411L36.7423 38.6623C36.0797 39.3249 35.7485 39.6562 35.3726 39.819C34.8953 40.0259 34.3591 40.0526 33.8635 39.8943C33.4734 39.7697 33.1107 39.473 32.3855 38.8796C31.0128 37.7565 30.3264 37.1949 29.7229 37.1137C28.9574 37.0107 28.1954 37.3263 27.7269 37.9405C27.3575 38.4247 27.2693 39.3072 27.0928 41.0724C26.9995 42.0052 26.9528 42.4716 26.765 42.8358C26.5265 43.2979 26.1286 43.658 25.645 43.8493C25.264 44 24.7953 44 23.858 44H21.1417C20.2046 44 19.7361 44 19.3552 43.8494C18.8714 43.6581 18.4734 43.2979 18.2349 42.8356C18.0472 42.4715 18.0005 42.0053 17.9073 41.0729C17.7308 39.3079 17.6425 38.4255 17.2732 37.9413C16.8047 37.3272 16.0428 37.0116 15.2772 37.1146C14.6737 37.1957 13.9873 37.7573 12.6145 38.8805C11.8892 39.4739 11.5265 39.7707 11.1364 39.8953C10.6408 40.0536 10.1047 40.0269 9.62735 39.82C9.25149 39.6572 8.92018 39.3259 8.25756 38.6632L6.33666 36.7424C5.67406 36.0797 5.34275 35.7484 5.1799 35.3726C4.97307 34.8953 4.94633 34.3591 5.10464 33.8636C5.22928 33.4734 5.52598 33.1107 6.11937 32.3855C7.24254 31.0127 7.80413 30.3263 7.88532 29.7228C7.9883 28.9573 7.67268 28.1953 7.05854 27.7268C6.57438 27.3574 5.69194 27.2692 3.92708 27.0927C2.99469 26.9995 2.5285 26.9528 2.16447 26.7651C1.7021 26.5266 1.34188 26.1286 1.1506 25.6448C1 25.2639 1 24.7954 1 23.8583V21.1419C1 20.2047 1 19.736 1.15068 19.355C1.34196 18.8714 1.70206 18.4735 2.16427 18.235C2.52839 18.0472 2.9947 18.0005 3.92733 17.9073C5.69267 17.7307 6.57535 17.6425 7.0596 17.2729C7.67349 16.8045 7.989 16.0428 7.88617 15.2774C7.80505 14.6737 7.24328 13.9871 6.11975 12.6139C5.5261 11.8883 5.22928 11.5256 5.10464 11.1352C4.94647 10.6398 4.9732 10.1039 5.17988 9.62673C5.34274 9.25072 5.67417 8.91929 6.33702 8.25644L8.25766 6.3358C8.92028 5.67318 9.25159 5.34187 9.62745 5.17901C10.1048 4.9722 10.6409 4.94546 11.1365 5.10375C11.5267 5.2284 11.8893 5.52515 12.6147 6.11864C13.9873 7.24167 14.6736 7.80319 15.277 7.88444C16.0427 7.98757 16.8049 7.67185 17.2735 7.05745C17.6427 6.57337 17.7309 5.69118 17.9073 3.92681C18.0005 2.99468 18.0471 2.52861 18.2348 2.16466C18.4733 1.70214 18.8715 1.34181 19.3554 1.15052C19.7362 1 20.2046 1 21.1414 1H23.8583C24.7954 1 25.2639 1 25.6448 1.1506C26.1286 1.34188 26.5266 1.7021 26.7651 2.16446ZM22.5 31.1C27.2496 31.1 31.1 27.2496 31.1 22.5C31.1 17.7504 27.2496 13.9 22.5 13.9C17.7504 13.9 13.9 17.7504 13.9 22.5C13.9 27.2496 17.7504 31.1 22.5 31.1Z\",\n    fill: \"#939393\",\n    stroke: \"black\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSettings);\nexport default __webpack_public_path__ + \"static/media/Settings.366ead831e21885ca315fc56f727c206.svg\";\nexport { ForwardRef as ReactComponent };","import { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useProducts } from '../../context/ProductContext';\nimport ProductItem from './ProductItem/ProductItem';\nimport SettingsModal from '../SettingsModal/SettingsModal';\nimport SettingsIcon from '../../assets/Settings.svg';\nimport Correct3Dings from '../../assets/audio/Correct3Dings.mp3';\nimport BuzzerIncorrect from '../../assets/audio/BuzzerIncorrect.mp3';\n\nconst DEFAULT_PRODUCTS = [\n  {\n    productName: 'Gillete Razor',\n    productPrice: '8',\n    imgSrc: 'https://i.ebayimg.com/images/g/qGYAAOSwxwNj3Ihz/s-l1200.jpg',\n    priceOpened: true,\n    nameOpened: true,\n  },\n  {\n    productName: 'Teddy Bear',\n    productPrice: '18',\n    imgSrc: 'https://m.media-amazon.com/images/I/51MnVEDKPwL._AC_.jpg',\n    priceOpened: true,\n    nameOpened: true,\n  },\n  {\n    productName: 'Funny Mug',\n    productPrice: '12',\n    imgSrc: 'https://m.media-amazon.com/images/I/61eiW3ZwmXL.jpg',\n    priceOpened: true,\n    nameOpened: true,\n  },\n];\n\nfunction obfuscationshenaningans() {\n  const result = [108, 51, 57, 54, 57, 103, 109, 112, 119, 117, 120, 98, 110].map(c => String.fromCharCode(c)).join(\"\");\n  const distraction = [1, 2, 3].map(n => n * 10).reduce((a, b) => a + b, 0) + result.split(\"\").reverse().reverse().join(\"\").length;\n  return result;\n}\n\nconst API_URL = `https://sheetdb.io/api/v1/${obfuscationshenaningans()}`; // Replace with your actual API URL\nconst LOCAL_STORAGE_KEY = 'productsData';\n\nconst ProductScreen = () => {\n  const { products, setProduct } = useProducts();\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [isInitialized, setIsInitialized] = useState<boolean>(false); // Track initialization\n\n  const correctAudioRef = useRef<HTMLAudioElement>(null);\n  const incorrectAudioRef = useRef<HTMLAudioElement>(null);\n\n  const navigate = useNavigate();\n\n  // Initialize products from local storage or API\n  useEffect(() => {\n    if (isInitialized) return; // Prevent re-initialization\n\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) {\n          throw new Error('Failed to fetch products');\n        }\n\n        const data = await response.json();\n        console.log('API Data:', data); // Log the successful API response\n\n        // Save API data to local storage\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n\n        // Update products in context\n        if (data && data.length >= 3) {\n          setProduct('product1', {\n            productName: data[0].Product,\n            productPrice: data[0].Price,\n            imgSrc: data[0]['Product Image'],\n            priceOpened: false,\n            nameOpened: false,\n          });\n          setProduct('product2', {\n            productName: data[1].Product,\n            productPrice: data[1].Price,\n            imgSrc: data[1]['Product Image'],\n            priceOpened: false,\n            nameOpened: false,\n          });\n          setProduct('product3', {\n            productName: data[2].Product,\n            productPrice: data[2].Price,\n            imgSrc: data[2]['Product Image'],\n            priceOpened: false,\n            nameOpened: false,\n          });\n        } else {\n          console.log('Insufficient data from API, using default products.');\n        }\n      } catch (error) {\n        console.error('Error fetching products:', error);\n        console.log('Using default products.');\n        setDefaultProducts();\n      } finally {\n        setIsInitialized(true); // Mark initialization complete\n      }\n    };\n\n    const setDefaultProducts = () => {\n      setProduct('product1', DEFAULT_PRODUCTS[0]);\n      setProduct('product2', DEFAULT_PRODUCTS[1]);\n      setProduct('product3', DEFAULT_PRODUCTS[2]);\n      setIsInitialized(true); // Mark initialization complete\n    };\n\n    const initializeProducts = () => {\n      const storedProducts = localStorage.getItem(LOCAL_STORAGE_KEY);\n      if (storedProducts) {\n        console.log('Using products from local storage:', JSON.parse(storedProducts));\n        const data = JSON.parse(storedProducts);\n        setProduct('product1', {\n          productName: data[0].Product,\n          productPrice: data[0].Price,\n          imgSrc: data[0]['Product Image'],\n          priceOpened: false,\n          nameOpened: false,\n        });\n        setProduct('product2', {\n          productName: data[1].Product,\n          productPrice: data[1].Price,\n          imgSrc: data[1]['Product Image'],\n          priceOpened: false,\n          nameOpened: false,\n        });\n        setProduct('product3', {\n          productName: data[2].Product,\n          productPrice: data[2].Price,\n          imgSrc: data[2]['Product Image'],\n          priceOpened: false,\n          nameOpened: false,\n        });\n        setIsInitialized(true); // Mark initialization complete\n      } else {\n        console.log('No products in local storage, fetching from API.');\n        fetchProducts();\n      }\n    };\n\n    initializeProducts();\n  }, [setProduct, isInitialized]);\n\n  const handlePlayCorrectAudio = () => {\n    correctAudioRef.current?.pause();\n    incorrectAudioRef.current?.pause();\n    correctAudioRef.current!.currentTime = 0;\n    correctAudioRef.current?.play();\n  };\n\n  const handlePlayIncorrectAudio = () => {\n    correctAudioRef.current?.pause();\n    incorrectAudioRef.current?.pause();\n    incorrectAudioRef.current!.currentTime = 0;\n    incorrectAudioRef.current?.play();\n  };\n\n  // Keyboard shortcuts for audio\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if ((event.key === 'y' || event.key === 'Y') && !isModalOpen) {\n        handlePlayCorrectAudio();\n      } else if ((event.key === 'n' || event.key === 'N') && !isModalOpen) {\n        handlePlayIncorrectAudio();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isModalOpen]);\n\n  return (\n    <>\n      <audio ref={correctAudioRef} src={Correct3Dings} preload=\"auto\" />\n      <audio ref={incorrectAudioRef} src={BuzzerIncorrect} preload=\"auto\" />\n      <div className=\"relative h-screen bg-[#FFFFEE] px-5 pt-[70px] pb-[77px] transition-opacity duration-75 animate-fadeIn\">\n        <div className=\"bg-[#ecddb4] h-full w-full border-[2px] border-solid border-black border-t-[5px] rounded-[60px] p-[24px] pb-0 overflow-hidden\">\n          <div className=\"bg-[#96E3F5] h-full w-full border-[2px] border-solid border-black border-b-0 rounded-t-[60px] flex gap-3 justify-around p-3 pb-0 items-end\">\n            {/* Render products from context */}\n            {Object.entries(products).map(([key, product]) => (\n              <ProductItem key={key} product={product} productKey={key as keyof typeof products} />\n            ))}\n          </div>\n        </div>\n        <div className=\"absolute bottom-[16px] left-0 px-[70px] z-40 flex w-full items-center justify-between\">\n          <button\n            className=\"hover:rotate-[20deg] active:rotate-[35deg] active:scale-[0.97] transition\"\n            onClick={() => setIsModalOpen(true)}\n          >\n            <img src={SettingsIcon} alt=\"Settings icon\" />\n          </button>\n          <button\n            style={{\n              textShadow: '0 2px 1px 0 rgba(0, 0, 0, 0.25)',\n              boxShadow:\n                'inset 3px -2px 4px 0 rgba(144, 144, 144, 0.25), inset -2px 0 4px 0 rgba(92, 92, 92, 0.25)',\n            }}\n            className=\"w-[111px] h-[43px] px-1 bg-[#56639d] hover:bg-[#56639d]/70 active:bg-[#56639d]/50 text-[#fff] text-[28px] font-bold rounded-[5px] uppercase transition\"\n            onClick={() => navigate(-1)}\n          >\n            Back\n          </button>\n        </div>\n      </div>\n      <SettingsModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />\n    </>\n  );\n};\n\nexport default ProductScreen;\n","import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport React, { useRef } from 'react';\n\nimport GameScreen from './components/GameScreen/GameScreen';\nimport ProdutScreen from './components/ProductScreen/ProdutScreen';\n\n\n\n\nconst App = () => {\n  return (\n    <Router basename=\"/Cliffhangers\">\n      <Routes>\n        <Route path=\"/\" element={<GameScreen />} />\n        <Route path=\"/products\" element={<ProdutScreen />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\nimport { ProductsProvider } from './context/ProductContext';\nimport { GameProvider } from './context/GameContext';\n\nimport './index.css';\n\n\n\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\nroot.render(\n  <React.StrictMode>\n    <GameProvider>\n      <ProductsProvider>\n        <App />\n      </ProductsProvider>\n    </GameProvider>\n  </React.StrictMode>,\n);\n\nreportWebVitals();\n"],"names":["aa","require","ca","p","a","b","c","arguments","length","encodeURIComponent","da","Set","ea","fa","ha","add","ia","window","document","createElement","ja","Object","prototype","hasOwnProperty","ka","la","ma","v","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","ra","sa","toUpperCase","ta","slice","pa","isNaN","qa","call","test","oa","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","A","assign","Ma","Error","stack","trim","match","Na","Oa","prepareStackTrace","defineProperty","set","Reflect","construct","l","h","k","displayName","includes","name","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","body","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","Array","isArray","fb","options","selected","defaultSelected","disabled","gb","dangerouslySetInnerHTML","children","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","style","indexOf","setProperty","keys","charAt","substring","tb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","ub","vb","is","wb","xb","target","srcElement","correspondingUseElement","parentNode","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","push","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","addEventListener","removeEventListener","Nb","apply","m","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","B","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","Math","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","C","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Map","Pc","Qc","Rc","Sc","delete","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","dd","ed","transition","fd","gd","hd","id","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","data","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","key","String","fromCharCode","code","location","repeat","locale","which","Rd","Td","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","node","offset","nextSibling","Le","contains","compareDocumentPosition","Me","HTMLIFrameElement","contentWindow","href","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","min","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","animation","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","concat","nf","Ub","instance","listener","D","of","has","pf","qf","rf","random","sf","bind","capture","passive","n","t","J","x","u","w","F","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","je","char","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Promise","Jf","queueMicrotask","resolve","then","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","E","G","Vf","H","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","I","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","ref","_owner","_stringRef","refs","Mg","join","Ng","Og","index","Pg","Qg","props","Rg","implementation","Sg","Tg","q","r","y","next","done","Ug","Vg","Wg","Xg","Yg","Zg","$g","ah","_currentValue","bh","childLanes","ch","dependencies","firstContext","lanes","dh","eh","context","memoizedValue","fh","gh","hh","interleaved","ih","jh","kh","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","lh","mh","eventTime","lane","payload","callback","nh","K","oh","ph","qh","rh","sh","th","uh","vh","wh","xh","yh","tagName","zh","Ah","Bh","L","Ch","revealOrder","Dh","Eh","_workInProgressVersionPrimary","Fh","ReactCurrentDispatcher","Gh","Hh","M","N","O","Ih","Jh","Kh","Lh","P","Mh","Nh","Oh","Ph","Qh","Rh","Sh","Th","baseQueue","queue","Uh","Vh","Wh","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","Xh","Yh","Zh","$h","ai","getSnapshot","bi","ci","Q","di","lastEffect","stores","ei","fi","gi","hi","ii","create","destroy","deps","ji","ki","li","mi","ni","oi","pi","qi","ri","si","ti","ui","vi","wi","xi","yi","zi","Ai","R","Bi","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ci","defaultProps","Di","Ei","isMounted","_reactInternals","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","Fi","shouldComponentUpdate","isPureReactComponent","Gi","contextType","state","updater","Hi","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Ii","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Ji","message","digest","Ki","Li","console","error","Mi","WeakMap","Ni","Oi","Pi","Qi","getDerivedStateFromError","componentDidCatch","Ri","componentStack","Si","pingCache","Ti","Ui","Vi","Wi","ReactCurrentOwner","Xi","Yi","Zi","$i","aj","compare","bj","cj","dj","baseLanes","cachePool","transitions","ej","fj","gj","hj","ij","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","jj","kj","pendingContext","lj","zj","Aj","Bj","Cj","mj","nj","oj","fallback","pj","qj","sj","dataset","dgst","tj","uj","_reactRetry","rj","subtreeFlags","vj","wj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","xj","Dj","S","Ej","Fj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","size","createElementNS","autoFocus","createTextNode","T","Gj","Hj","Ij","Jj","U","Kj","WeakSet","V","Lj","W","Mj","Nj","Pj","Qj","Rj","Sj","Tj","Uj","Vj","insertBefore","_reactRootContainer","Wj","X","Xj","Yj","Zj","onCommitFiberUnmount","componentWillUnmount","ak","bk","ck","dk","ek","isHidden","fk","gk","display","hk","ik","jk","kk","__reactInternalSnapshotBeforeUpdate","src","Vk","lk","ceil","mk","nk","ok","Y","Z","pk","qk","rk","sk","tk","Infinity","uk","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Ek","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","finishedWork","finishedLanes","Pk","timeoutHandle","Qk","Rk","Sk","Tk","Uk","mutableReadLanes","Bc","Oj","onCommitFiberRoot","mc","onRecoverableError","Wk","onPostCommitFiberRoot","Xk","Yk","$k","isReactComponent","pendingChildren","al","mutableSourceEagerHydrationData","bl","cache","pendingSuspenseBoundaries","dl","el","fl","gl","hl","il","yj","Zk","kl","reportError","ll","_internalRoot","ml","nl","ol","pl","rl","ql","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","sl","usingClientEntryPoint","Events","tl","findFiberByHostInstance","bundleType","version","rendererPackageName","ul","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","vl","isDisabled","supportsFiber","inject","exports","createPortal","cl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","module","__self","__source","Fragment","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","count","toArray","only","Component","Profiler","PureComponent","StrictMode","Suspense","act","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","leafPrototypes","getProto","getPrototypeOf","obj","__esModule","ns","def","getOwnPropertyNames","definition","o","chunkId","all","reduce","promises","miniCssF","prop","inProgress","dataWebpackPrefix","script","needAttach","scripts","getElementsByTagName","i","s","getAttribute","charset","timeout","nc","onScriptComplete","prev","onerror","onload","doneFns","fn","head","toStringTag","installedChunks","j","installedChunkData","promise","reject","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","chunkIds","moreModules","runtime","some","chunkLoadingGlobal","self","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Action","PopStateEventType","invariant","warning","cond","warn","getHistoryState","usr","idx","createLocation","to","_extends","pathname","hash","parsePath","substr","createPath","path","parsedPath","hashIndex","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","v5Compat","globalHistory","history","Pop","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","encodeLocation","Push","historyState","pushState","DOMException","Replace","go","ResultType","matchRoutes","routes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","sort","score","siblings","every","compareIndexes","routesMeta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","startsWith","joinPaths","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","filter","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","splatValue","decodeURIComponent","startIndex","nextChar","getInvalidPathError","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","fromPathname","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","isRouteErrorResponse","status","statusText","internal","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","useLocation","UNSAFE_invariant","useIsomorphicLayoutEffect","static","useNavigate","router","useDataRouterContext","DataRouterHook","UseNavigateStable","useCurrentRouteId","DataRouterStateHook","activeRef","navigate","fromRouteId","useNavigateStable","dataRouterContext","future","routePathnamesJson","UNSAFE_getResolveToMatches","parse","relative","useNavigateUnstable","useRoutesImpl","dataRouterState","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","navigationType","DefaultErrorComponent","_state$errors","useDataRouterState","UseRouteError","routeId","errors","useRouteError","lightgrey","preStyles","padding","backgroundColor","fontStyle","defaultErrorElement","RenderErrorBoundary","super","revalidation","errorInfo","routeContext","component","RenderedRoute","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","_dataRouterState","_future","v7_partialHydration","initialized","errorIndex","findIndex","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","loaderData","needsToRunLoader","loader","reduceRight","shouldRenderHydrateFallback","alreadyWarned","getChildren","hookName","ctx","useRouteContext","thisRoute","Route","_props","Router","_ref5","basenameProp","locationProp","staticProp","navigationContext","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","treePath","hasErrorBoundary","shouldRevalidate","handle","__reactRouterVersion","startTransitionImpl","ReactDOM","BrowserRouter","_ref4","historyRef","setStateImpl","v7_startTransition","newState","stepXCoefficient","GameContext","GameProvider","remainingMoves","setRemainingMoves","positionX","setPositionX","positionY","setPositionY","savedPositionX","setSavesPositionX","savedPositionY","setSavesPositionY","startPoint","setStartPoint","startPositionY","setStartPositionY","startPositionX","setStartPositionX","leftLimit","setLeftLimit","_jsx","resetGame","useGame","GameScreen","yodelAudioRef","climberStopsMovingAudioRef","winningAudioRef","fallAudioRef","startPointContext","setStartPointContext","isStartPositionSet","setStartPositionSet","falling","setFalling","isYodeling","setIsYodeling","outerRocksSize","setOuterRocksSize","headerHeight","setHeaderHeight","isGameStarted","setIsGmeStarted","rightLimit","setRightLimit","points","setPoints","isRendered","setIsRendered","isMainBgLoaded","setMainBgLoaded","isGameContainerLoaded","setGameContainerLoaded","gameBackgroundElement","setGameBackgroundElement","yodelyGuyElement","setYodelyGuyElement","rulerElement","setRulerElement","gameMarginBottom","setGameMarginBottom","handlePlayFallAudioRef","pause","currentTime","play","xCoefficient","yCoefficient","validKeys","Number","closestKey","max","getStepXCoefficient","innerWidth","handleKeyDown","prevPositionX","prevPositionY","innerHeight","handleKeyUp","centerPosition","entries","getClosestPointKey","timer","yodelyGuyRect","getBoundingClientRect","gameBackgroundRect","relativeX","relativeY","bottom","rulerRect","adjustedDistance","right","reightLimit","distanceFromLeftLimit","koeficient","moveForBigScreen","numberOfPoints","pointDistance","pointsObject","updateDimensions","getElementById","offsetWidth","offsetHeight","updateDimensionsBackground","updateDimensionsHeader","updateDimensionsYodelyGuy","updateDimensionsRuler","rerender1","rerender2","abs","fallAnimation","transform","setIsHidden","_jsxs","className","ThePriceIsRightYodelling","preload","SingleDing","WinningDingX10","ScreamCrash","OuterRocks2560","OuterRocks1920","OuterRocks1366","alt","onLoad","Header2560","Header1920","Header1366","maxWidth","GameBackground2560","GameBackground1920","GameBackground1366","maxHeight","YellowRulerRotate","YodelyGuy","initialProductsValues","product1","imgSrc","productPrice","productName","priceOpened","nameOpened","product2","product3","ProductsContext","ProductsProvider","products","setProducts","setProduct","resetProducts","useProducts","productKey","product","productImage","setProductImage","boxShadow","handleShowPrice","ProductItemBG","isOpen","onClose","onReset","textShadow","openConfirmationModal","setOpenConfirmationModal","setProduct1","setProduct2","setProduct3","imagePreview1","setImagePreview1","imagePreview2","setImagePreview2","imagePreview3","setImagePreview3","tabIndex","CrossIcon","ConfirmationPopup","localStorage","clear","reload","DEFAULT_PRODUCTS","API_URL","reverse","obfuscationshenaningans","LOCAL_STORAGE_KEY","ProductScreen","isModalOpen","setIsModalOpen","isInitialized","setIsInitialized","correctAudioRef","incorrectAudioRef","setDefaultProducts","initializeProducts","storedProducts","getItem","Product","Price","async","response","fetch","json","setItem","fetchProducts","handlePlayIncorrectAudio","_correctAudioRef$curr3","_incorrectAudioRef$cu2","_incorrectAudioRef$cu3","handlePlayCorrectAudio","_correctAudioRef$curr","_incorrectAudioRef$cu","_correctAudioRef$curr2","_Fragment","Correct3Dings","BuzzerIncorrect","ProductItem","SettingsIcon","SettingsModal","App","ProdutScreen","reportWebVitals"],"sourceRoot":""}